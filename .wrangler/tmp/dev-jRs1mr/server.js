var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a2, b) => (typeof require !== "undefined" ? require : a2)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// .wrangler/tmp/bundle-Fd75M1/checked-fetch.js
function checkURL(request, init) {
  const url = request instanceof URL ? request : new URL(
    (typeof request === "string" ? new Request(request, init) : request).url
  );
  if (url.port && url.port !== "443" && url.protocol === "https:") {
    if (!urls.has(url.toString())) {
      urls.add(url.toString());
      console.warn(
        `WARNING: known issue with \`fetch()\` requests to custom HTTPS ports in published Workers:
 - ${url.toString()} - the custom port will be ignored when the Worker is published using the \`wrangler deploy\` command.
`
      );
    }
  }
}
var urls;
var init_checked_fetch = __esm({
  ".wrangler/tmp/bundle-Fd75M1/checked-fetch.js"() {
    urls = /* @__PURE__ */ new Set();
    __name(checkURL, "checkURL");
    globalThis.fetch = new Proxy(globalThis.fetch, {
      apply(target, thisArg, argArray) {
        const [request, init] = argArray;
        checkURL(request, init);
        return Reflect.apply(target, thisArg, argArray);
      }
    });
  }
});

// wrangler-modules-watch:wrangler:modules-watch
var init_wrangler_modules_watch = __esm({
  "wrangler-modules-watch:wrangler:modules-watch"() {
    init_checked_fetch();
    init_modules_watch_stub();
  }
});

// node_modules/wrangler/templates/modules-watch-stub.js
var init_modules_watch_stub = __esm({
  "node_modules/wrangler/templates/modules-watch-stub.js"() {
    init_wrangler_modules_watch();
  }
});

// node_modules/discord-interactions/dist/util.js
var require_util = __commonJS({
  "node_modules/discord-interactions/dist/util.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatUint8Arrays = exports.valueToUint8Array = exports.subtleCrypto = void 0;
    function getSubtleCrypto() {
      if (typeof window !== "undefined" && window.crypto) {
        return window.crypto.subtle;
      }
      if (typeof globalThis !== "undefined" && globalThis.crypto) {
        return globalThis.crypto.subtle;
      }
      if (typeof crypto !== "undefined") {
        return crypto.subtle;
      }
      if (typeof __require === "function") {
        const cryptoPackage = "node:crypto";
        const crypto2 = __require(cryptoPackage);
        return crypto2.webcrypto.subtle;
      }
      throw new Error("No Web Crypto API implementation found");
    }
    __name(getSubtleCrypto, "getSubtleCrypto");
    exports.subtleCrypto = getSubtleCrypto();
    function valueToUint8Array(value, format) {
      if (value == null) {
        return new Uint8Array();
      }
      if (typeof value === "string") {
        if (format === "hex") {
          const matches = value.match(/.{1,2}/g);
          if (matches == null) {
            throw new Error("Value is not a valid hex string");
          }
          const hexVal = matches.map((byte) => Number.parseInt(byte, 16));
          return new Uint8Array(hexVal);
        }
        return new TextEncoder().encode(value);
      }
      try {
        if (Buffer.isBuffer(value)) {
          return new Uint8Array(value);
        }
      } catch (ex) {
      }
      if (value instanceof ArrayBuffer) {
        return new Uint8Array(value);
      }
      if (value instanceof Uint8Array) {
        return value;
      }
      throw new Error("Unrecognized value type, must be one of: string, Buffer, ArrayBuffer, Uint8Array");
    }
    __name(valueToUint8Array, "valueToUint8Array");
    exports.valueToUint8Array = valueToUint8Array;
    function concatUint8Arrays(arr1, arr2) {
      const merged = new Uint8Array(arr1.length + arr2.length);
      merged.set(arr1);
      merged.set(arr2, arr1.length);
      return merged;
    }
    __name(concatUint8Arrays, "concatUint8Arrays");
    exports.concatUint8Arrays = concatUint8Arrays;
  }
});

// node_modules/discord-interactions/dist/components.js
var require_components = __commonJS({
  "node_modules/discord-interactions/dist/components.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TextStyleTypes = exports.ChannelTypes = exports.ButtonStyleTypes = exports.MessageComponentTypes = void 0;
    var MessageComponentTypes;
    (function(MessageComponentTypes2) {
      MessageComponentTypes2[MessageComponentTypes2["ACTION_ROW"] = 1] = "ACTION_ROW";
      MessageComponentTypes2[MessageComponentTypes2["BUTTON"] = 2] = "BUTTON";
      MessageComponentTypes2[MessageComponentTypes2["STRING_SELECT"] = 3] = "STRING_SELECT";
      MessageComponentTypes2[MessageComponentTypes2["INPUT_TEXT"] = 4] = "INPUT_TEXT";
      MessageComponentTypes2[MessageComponentTypes2["USER_SELECT"] = 5] = "USER_SELECT";
      MessageComponentTypes2[MessageComponentTypes2["ROLE_SELECT"] = 6] = "ROLE_SELECT";
      MessageComponentTypes2[MessageComponentTypes2["MENTIONABLE_SELECT"] = 7] = "MENTIONABLE_SELECT";
      MessageComponentTypes2[MessageComponentTypes2["CHANNEL_SELECT"] = 8] = "CHANNEL_SELECT";
    })(MessageComponentTypes || (exports.MessageComponentTypes = MessageComponentTypes = {}));
    var ButtonStyleTypes;
    (function(ButtonStyleTypes2) {
      ButtonStyleTypes2[ButtonStyleTypes2["PRIMARY"] = 1] = "PRIMARY";
      ButtonStyleTypes2[ButtonStyleTypes2["SECONDARY"] = 2] = "SECONDARY";
      ButtonStyleTypes2[ButtonStyleTypes2["SUCCESS"] = 3] = "SUCCESS";
      ButtonStyleTypes2[ButtonStyleTypes2["DANGER"] = 4] = "DANGER";
      ButtonStyleTypes2[ButtonStyleTypes2["LINK"] = 5] = "LINK";
      ButtonStyleTypes2[ButtonStyleTypes2["PREMIUM"] = 6] = "PREMIUM";
    })(ButtonStyleTypes || (exports.ButtonStyleTypes = ButtonStyleTypes = {}));
    var ChannelTypes;
    (function(ChannelTypes2) {
      ChannelTypes2[ChannelTypes2["DM"] = 1] = "DM";
      ChannelTypes2[ChannelTypes2["GROUP_DM"] = 3] = "GROUP_DM";
      ChannelTypes2[ChannelTypes2["GUILD_TEXT"] = 0] = "GUILD_TEXT";
      ChannelTypes2[ChannelTypes2["GUILD_VOICE"] = 2] = "GUILD_VOICE";
      ChannelTypes2[ChannelTypes2["GUILD_CATEGORY"] = 4] = "GUILD_CATEGORY";
      ChannelTypes2[ChannelTypes2["GUILD_ANNOUNCEMENT"] = 5] = "GUILD_ANNOUNCEMENT";
      ChannelTypes2[ChannelTypes2["GUILD_STORE"] = 6] = "GUILD_STORE";
    })(ChannelTypes || (exports.ChannelTypes = ChannelTypes = {}));
    var TextStyleTypes;
    (function(TextStyleTypes2) {
      TextStyleTypes2[TextStyleTypes2["SHORT"] = 1] = "SHORT";
      TextStyleTypes2[TextStyleTypes2["PARAGRAPH"] = 2] = "PARAGRAPH";
    })(TextStyleTypes || (exports.TextStyleTypes = TextStyleTypes = {}));
  }
});

// node_modules/discord-interactions/dist/index.js
var require_dist = __commonJS({
  "node_modules/discord-interactions/dist/index.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p2 in m)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m, p2);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyKeyMiddleware = exports.verifyKey = exports.InteractionResponseFlags = exports.InteractionResponseType = exports.InteractionType = void 0;
    var util_1 = require_util();
    var InteractionType2;
    (function(InteractionType3) {
      InteractionType3[InteractionType3["PING"] = 1] = "PING";
      InteractionType3[InteractionType3["APPLICATION_COMMAND"] = 2] = "APPLICATION_COMMAND";
      InteractionType3[InteractionType3["MESSAGE_COMPONENT"] = 3] = "MESSAGE_COMPONENT";
      InteractionType3[InteractionType3["APPLICATION_COMMAND_AUTOCOMPLETE"] = 4] = "APPLICATION_COMMAND_AUTOCOMPLETE";
      InteractionType3[InteractionType3["MODAL_SUBMIT"] = 5] = "MODAL_SUBMIT";
    })(InteractionType2 || (exports.InteractionType = InteractionType2 = {}));
    var InteractionResponseType2;
    (function(InteractionResponseType3) {
      InteractionResponseType3[InteractionResponseType3["PONG"] = 1] = "PONG";
      InteractionResponseType3[InteractionResponseType3["CHANNEL_MESSAGE_WITH_SOURCE"] = 4] = "CHANNEL_MESSAGE_WITH_SOURCE";
      InteractionResponseType3[InteractionResponseType3["DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE"] = 5] = "DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE";
      InteractionResponseType3[InteractionResponseType3["DEFERRED_UPDATE_MESSAGE"] = 6] = "DEFERRED_UPDATE_MESSAGE";
      InteractionResponseType3[InteractionResponseType3["UPDATE_MESSAGE"] = 7] = "UPDATE_MESSAGE";
      InteractionResponseType3[InteractionResponseType3["APPLICATION_COMMAND_AUTOCOMPLETE_RESULT"] = 8] = "APPLICATION_COMMAND_AUTOCOMPLETE_RESULT";
      InteractionResponseType3[InteractionResponseType3["MODAL"] = 9] = "MODAL";
      InteractionResponseType3[InteractionResponseType3["PREMIUM_REQUIRED"] = 10] = "PREMIUM_REQUIRED";
      InteractionResponseType3[InteractionResponseType3["LAUNCH_ACTIVITY"] = 12] = "LAUNCH_ACTIVITY";
    })(InteractionResponseType2 || (exports.InteractionResponseType = InteractionResponseType2 = {}));
    var InteractionResponseFlags;
    (function(InteractionResponseFlags2) {
      InteractionResponseFlags2[InteractionResponseFlags2["EPHEMERAL"] = 64] = "EPHEMERAL";
    })(InteractionResponseFlags || (exports.InteractionResponseFlags = InteractionResponseFlags = {}));
    function verifyKey2(rawBody, signature, timestamp, clientPublicKey) {
      return __awaiter(this, void 0, void 0, function* () {
        try {
          const timestampData = (0, util_1.valueToUint8Array)(timestamp);
          const bodyData = (0, util_1.valueToUint8Array)(rawBody);
          const message = (0, util_1.concatUint8Arrays)(timestampData, bodyData);
          const publicKey = typeof clientPublicKey === "string" ? yield util_1.subtleCrypto.importKey("raw", (0, util_1.valueToUint8Array)(clientPublicKey, "hex"), {
            name: "ed25519",
            namedCurve: "ed25519"
          }, false, ["verify"]) : clientPublicKey;
          const isValid = yield util_1.subtleCrypto.verify({
            name: "ed25519"
          }, publicKey, (0, util_1.valueToUint8Array)(signature, "hex"), message);
          return isValid;
        } catch (ex) {
          return false;
        }
      });
    }
    __name(verifyKey2, "verifyKey");
    exports.verifyKey = verifyKey2;
    function verifyKeyMiddleware(clientPublicKey) {
      if (!clientPublicKey) {
        throw new Error("You must specify a Discord client public key");
      }
      return (req, res, next) => __awaiter(this, void 0, void 0, function* () {
        const timestamp = req.header("X-Signature-Timestamp") || "";
        const signature = req.header("X-Signature-Ed25519") || "";
        if (!timestamp || !signature) {
          res.statusCode = 401;
          res.end("[discord-interactions] Invalid signature");
          return;
        }
        function onBodyComplete(rawBody) {
          return __awaiter(this, void 0, void 0, function* () {
            const isValid = yield verifyKey2(rawBody, signature, timestamp, clientPublicKey);
            if (!isValid) {
              res.statusCode = 401;
              res.end("[discord-interactions] Invalid signature");
              return;
            }
            const body = JSON.parse(rawBody.toString("utf-8")) || {};
            if (body.type === InteractionType2.PING) {
              res.setHeader("Content-Type", "application/json");
              res.end(JSON.stringify({
                type: InteractionResponseType2.PONG
              }));
              return;
            }
            req.body = body;
            next();
          });
        }
        __name(onBodyComplete, "onBodyComplete");
        if (req.body) {
          if (Buffer.isBuffer(req.body)) {
            yield onBodyComplete(req.body);
          } else if (typeof req.body === "string") {
            yield onBodyComplete(Buffer.from(req.body, "utf-8"));
          } else {
            console.warn("[discord-interactions]: req.body was tampered with, probably by some other middleware. We recommend disabling middleware for interaction routes so that req.body is a raw buffer.");
            yield onBodyComplete(Buffer.from(JSON.stringify(req.body), "utf-8"));
          }
        } else {
          const chunks = [];
          req.on("data", (chunk) => {
            chunks.push(chunk);
          });
          req.on("end", () => __awaiter(this, void 0, void 0, function* () {
            const rawBody = Buffer.concat(chunks);
            yield onBodyComplete(rawBody);
          }));
        }
      });
    }
    __name(verifyKeyMiddleware, "verifyKeyMiddleware");
    exports.verifyKeyMiddleware = verifyKeyMiddleware;
    __exportStar(require_components(), exports);
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    __name(getRawTag, "getRawTag");
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    __name(objectToString, "objectToString");
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    __name(baseGetTag, "baseGetTag");
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    __name(isObjectLike, "isObjectLike");
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    __name(isSymbol, "isSymbol");
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    __name(isKey, "isKey");
    module.exports = isKey;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    __name(isObject, "isObject");
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    __name(isFunction, "isFunction");
    module.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    __name(isMasked, "isMasked");
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    __name(toSource, "toSource");
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    __name(baseIsNative, "baseIsNative");
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    __name(getValue, "getValue");
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    __name(getNative, "getNative");
    module.exports = getNative;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    __name(hashClear, "hashClear");
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    __name(hashDelete, "hashDelete");
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    __name(hashGet, "hashGet");
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    __name(hashHas, "hashHas");
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    __name(hashSet, "hashSet");
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    __name(Hash, "Hash");
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    __name(listCacheClear, "listCacheClear");
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    __name(eq, "eq");
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    __name(assocIndexOf, "assocIndexOf");
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    __name(listCacheDelete, "listCacheDelete");
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    __name(listCacheGet, "listCacheGet");
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    __name(listCacheHas, "listCacheHas");
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    __name(listCacheSet, "listCacheSet");
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    __name(ListCache, "ListCache");
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    __name(mapCacheClear, "mapCacheClear");
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    __name(isKeyable, "isKeyable");
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    __name(getMapData, "getMapData");
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    __name(mapCacheDelete, "mapCacheDelete");
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    __name(mapCacheGet, "mapCacheGet");
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    __name(mapCacheHas, "mapCacheHas");
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    __name(mapCacheSet, "mapCacheSet");
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    __name(MapCache, "MapCache");
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = /* @__PURE__ */ __name(function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      }, "memoized");
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    __name(memoize, "memoize");
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    __name(memoizeCapped, "memoizeCapped");
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    module.exports = stringToPath;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    __name(arrayMap, "arrayMap");
    module.exports = arrayMap;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    __name(baseToString, "baseToString");
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    __name(toString, "toString");
    module.exports = toString;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }
    __name(castPath, "castPath");
    module.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    __name(toKey, "toKey");
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path) {
      path = castPath(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    __name(baseGet, "baseGet");
    module.exports = baseGet;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var baseGet = require_baseGet();
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    __name(get, "get");
    module.exports = get;
  }
});

// node_modules/fast-deep-equal/es6/index.js
var require_es6 = __commonJS({
  "node_modules/fast-deep-equal/es6/index.js"(exports, module) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    module.exports = /* @__PURE__ */ __name(function equal(a2, b) {
      if (a2 === b)
        return true;
      if (a2 && b && typeof a2 == "object" && typeof b == "object") {
        if (a2.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a2[i], b[i]))
              return false;
          return true;
        }
        if (a2 instanceof Map && b instanceof Map) {
          if (a2.size !== b.size)
            return false;
          for (i of a2.entries())
            if (!b.has(i[0]))
              return false;
          for (i of a2.entries())
            if (!equal(i[1], b.get(i[0])))
              return false;
          return true;
        }
        if (a2 instanceof Set && b instanceof Set) {
          if (a2.size !== b.size)
            return false;
          for (i of a2.entries())
            if (!b.has(i[0]))
              return false;
          return true;
        }
        if (ArrayBuffer.isView(a2) && ArrayBuffer.isView(b)) {
          length = a2.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a2[i] !== b[i])
              return false;
          return true;
        }
        if (a2.constructor === RegExp)
          return a2.source === b.source && a2.flags === b.flags;
        if (a2.valueOf !== Object.prototype.valueOf)
          return a2.valueOf() === b.valueOf();
        if (a2.toString !== Object.prototype.toString)
          return a2.toString() === b.toString();
        keys = Object.keys(a2);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal(a2[key], b[key]))
            return false;
        }
        return true;
      }
      return a2 !== a2 && b !== b;
    }, "equal");
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    __name(setCacheAdd, "setCacheAdd");
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    __name(setCacheHas, "setCacheHas");
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    __name(SetCache, "SetCache");
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_baseFindIndex.js
var require_baseFindIndex = __commonJS({
  "node_modules/lodash/_baseFindIndex.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    __name(baseFindIndex, "baseFindIndex");
    module.exports = baseFindIndex;
  }
});

// node_modules/lodash/_baseIsNaN.js
var require_baseIsNaN = __commonJS({
  "node_modules/lodash/_baseIsNaN.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function baseIsNaN(value) {
      return value !== value;
    }
    __name(baseIsNaN, "baseIsNaN");
    module.exports = baseIsNaN;
  }
});

// node_modules/lodash/_strictIndexOf.js
var require_strictIndexOf = __commonJS({
  "node_modules/lodash/_strictIndexOf.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    __name(strictIndexOf, "strictIndexOf");
    module.exports = strictIndexOf;
  }
});

// node_modules/lodash/_baseIndexOf.js
var require_baseIndexOf = __commonJS({
  "node_modules/lodash/_baseIndexOf.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    __name(baseIndexOf, "baseIndexOf");
    module.exports = baseIndexOf;
  }
});

// node_modules/lodash/_arrayIncludes.js
var require_arrayIncludes = __commonJS({
  "node_modules/lodash/_arrayIncludes.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    __name(arrayIncludes, "arrayIncludes");
    module.exports = arrayIncludes;
  }
});

// node_modules/lodash/_arrayIncludesWith.js
var require_arrayIncludesWith = __commonJS({
  "node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    __name(arrayIncludesWith, "arrayIncludesWith");
    module.exports = arrayIncludesWith;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    __name(cacheHas, "cacheHas");
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function noop() {
    }
    __name(noop, "noop");
    module.exports = noop;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    __name(setToArray, "setToArray");
    module.exports = setToArray;
  }
});

// node_modules/lodash/_createSet.js
var require_createSet = __commonJS({
  "node_modules/lodash/_createSet.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var Set2 = require_Set();
    var noop = require_noop();
    var setToArray = require_setToArray();
    var INFINITY = 1 / 0;
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values) {
      return new Set2(values);
    };
    module.exports = createSet;
  }
});

// node_modules/lodash/_baseUniq.js
var require_baseUniq = __commonJS({
  "node_modules/lodash/_baseUniq.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var cacheHas = require_cacheHas();
    var createSet = require_createSet();
    var setToArray = require_setToArray();
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq(array, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    __name(baseUniq, "baseUniq");
    module.exports = baseUniq;
  }
});

// node_modules/lodash/uniqWith.js
var require_uniqWith = __commonJS({
  "node_modules/lodash/uniqWith.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var baseUniq = require_baseUniq();
    function uniqWith(array, comparator) {
      comparator = typeof comparator == "function" ? comparator : void 0;
      return array && array.length ? baseUniq(array, void 0, comparator) : [];
    }
    __name(uniqWith, "uniqWith");
    module.exports = uniqWith;
  }
});

// node_modules/@sapphire/shapeshift/dist/cjs/index.cjs
var require_cjs = __commonJS({
  "node_modules/@sapphire/shapeshift/dist/cjs/index.cjs"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var get = require_get();
    var fastDeepEqual = require_es6();
    var uniqWith = require_uniqWith();
    function _interopDefault(e3) {
      return e3 && e3.__esModule ? e3 : { default: e3 };
    }
    __name(_interopDefault, "_interopDefault");
    var get__default = /* @__PURE__ */ _interopDefault(get);
    var fastDeepEqual__default = /* @__PURE__ */ _interopDefault(fastDeepEqual);
    var uniqWith__default = /* @__PURE__ */ _interopDefault(uniqWith);
    var __defProp2 = Object.defineProperty;
    var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
    var e;
    var t2;
    var n2;
    var r2 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : globalThis;
    var o2 = e = {};
    function i() {
      throw new Error("setTimeout has not been defined");
    }
    __name(i, "i");
    __name2(i, "i");
    function u2() {
      throw new Error("clearTimeout has not been defined");
    }
    __name(u2, "u");
    __name2(u2, "u");
    function c2(e3) {
      if (t2 === setTimeout)
        return setTimeout(e3, 0);
      if ((t2 === i || !t2) && setTimeout)
        return t2 = setTimeout, setTimeout(e3, 0);
      try {
        return t2(e3, 0);
      } catch (n3) {
        try {
          return t2.call(null, e3, 0);
        } catch (n4) {
          return t2.call(this || r2, e3, 0);
        }
      }
    }
    __name(c2, "c");
    __name2(c2, "c");
    !function() {
      try {
        t2 = "function" == typeof setTimeout ? setTimeout : i;
      } catch (e3) {
        t2 = i;
      }
      try {
        n2 = "function" == typeof clearTimeout ? clearTimeout : u2;
      } catch (e3) {
        n2 = u2;
      }
    }();
    var l;
    var s2 = [];
    var f2 = false;
    var a2 = -1;
    function h2() {
      f2 && l && (f2 = false, l.length ? s2 = l.concat(s2) : a2 = -1, s2.length && d());
    }
    __name(h2, "h");
    __name2(h2, "h");
    function d() {
      if (!f2) {
        var e3 = c2(h2);
        f2 = true;
        for (var t3 = s2.length; t3; ) {
          for (l = s2, s2 = []; ++a2 < t3; )
            l && l[a2].run();
          a2 = -1, t3 = s2.length;
        }
        l = null, f2 = false, function(e4) {
          if (n2 === clearTimeout)
            return clearTimeout(e4);
          if ((n2 === u2 || !n2) && clearTimeout)
            return n2 = clearTimeout, clearTimeout(e4);
          try {
            n2(e4);
          } catch (t4) {
            try {
              return n2.call(null, e4);
            } catch (t5) {
              return n2.call(this || r2, e4);
            }
          }
        }(e3);
      }
    }
    __name(d, "d");
    __name2(d, "d");
    function m(e3, t3) {
      (this || r2).fun = e3, (this || r2).array = t3;
    }
    __name(m, "m");
    __name2(m, "m");
    function p2() {
    }
    __name(p2, "p");
    __name2(p2, "p");
    o2.nextTick = function(e3) {
      var t3 = new Array(arguments.length - 1);
      if (arguments.length > 1)
        for (var n3 = 1; n3 < arguments.length; n3++)
          t3[n3 - 1] = arguments[n3];
      s2.push(new m(e3, t3)), 1 !== s2.length || f2 || c2(d);
    }, m.prototype.run = function() {
      (this || r2).fun.apply(null, (this || r2).array);
    }, o2.title = "browser", o2.browser = true, o2.env = {}, o2.argv = [], o2.version = "", o2.versions = {}, o2.on = p2, o2.addListener = p2, o2.once = p2, o2.off = p2, o2.removeListener = p2, o2.removeAllListeners = p2, o2.emit = p2, o2.prependListener = p2, o2.prependOnceListener = p2, o2.listeners = function(e3) {
      return [];
    }, o2.binding = function(e3) {
      throw new Error("process.binding is not supported");
    }, o2.cwd = function() {
      return "/";
    }, o2.chdir = function(e3) {
      throw new Error("process.chdir is not supported");
    }, o2.umask = function() {
      return 0;
    };
    var T = e;
    T.addListener;
    T.argv;
    T.binding;
    T.browser;
    T.chdir;
    T.cwd;
    T.emit;
    T.env;
    T.listeners;
    T.nextTick;
    T.off;
    T.on;
    T.once;
    T.prependListener;
    T.prependOnceListener;
    T.removeAllListeners;
    T.removeListener;
    T.title;
    T.umask;
    T.version;
    T.versions;
    var t22 = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
    var e2 = Object.prototype.toString;
    var o22 = /* @__PURE__ */ __name2(function(o3) {
      return !(t22 && o3 && "object" == typeof o3 && Symbol.toStringTag in o3) && "[object Arguments]" === e2.call(o3);
    }, "o");
    var n22 = /* @__PURE__ */ __name2(function(t3) {
      return !!o22(t3) || null !== t3 && "object" == typeof t3 && "number" == typeof t3.length && t3.length >= 0 && "[object Array]" !== e2.call(t3) && "[object Function]" === e2.call(t3.callee);
    }, "n");
    var r22 = function() {
      return o22(arguments);
    }();
    o22.isLegacyArguments = n22;
    var l2 = r22 ? o22 : n22;
    var t$1 = Object.prototype.toString;
    var o$1 = Function.prototype.toString;
    var n$1 = /^\s*(?:function)?\*/;
    var e$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
    var r$1 = Object.getPrototypeOf;
    var c22 = function() {
      if (!e$1)
        return false;
      try {
        return Function("return function*() {}")();
      } catch (t3) {
      }
    }();
    var u22 = c22 ? r$1(c22) : {};
    var i2 = /* @__PURE__ */ __name2(function(c3) {
      return "function" == typeof c3 && (!!n$1.test(o$1.call(c3)) || (e$1 ? r$1(c3) === u22 : "[object GeneratorFunction]" === t$1.call(c3)));
    }, "i");
    var t$2 = "function" == typeof Object.create ? function(t3, e3) {
      e3 && (t3.super_ = e3, t3.prototype = Object.create(e3.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } }));
    } : function(t3, e3) {
      if (e3) {
        t3.super_ = e3;
        var o3 = /* @__PURE__ */ __name2(function() {
        }, "o");
        o3.prototype = e3.prototype, t3.prototype = new o3(), t3.prototype.constructor = t3;
      }
    };
    var i$1 = /* @__PURE__ */ __name2(function(e3) {
      return e3 && "object" == typeof e3 && "function" == typeof e3.copy && "function" == typeof e3.fill && "function" == typeof e3.readUInt8;
    }, "i$1");
    var o$2 = {};
    var u$1 = i$1;
    var f22 = l2;
    var a22 = i2;
    function c$1(e3) {
      return e3.call.bind(e3);
    }
    __name(c$1, "c$1");
    __name2(c$1, "c$1");
    var s22 = "undefined" != typeof BigInt;
    var p22 = "undefined" != typeof Symbol;
    var y = p22 && void 0 !== Symbol.toStringTag;
    var l$1 = "undefined" != typeof Uint8Array;
    var d2 = "undefined" != typeof ArrayBuffer;
    if (l$1 && y)
      var g2 = Object.getPrototypeOf(Uint8Array.prototype), b = c$1(Object.getOwnPropertyDescriptor(g2, Symbol.toStringTag).get);
    var m2 = c$1(Object.prototype.toString);
    var h22 = c$1(Number.prototype.valueOf);
    var j = c$1(String.prototype.valueOf);
    var A = c$1(Boolean.prototype.valueOf);
    if (s22)
      var w = c$1(BigInt.prototype.valueOf);
    if (p22)
      var v = c$1(Symbol.prototype.valueOf);
    function O(e3, t3) {
      if ("object" != typeof e3)
        return false;
      try {
        return t3(e3), true;
      } catch (e4) {
        return false;
      }
    }
    __name(O, "O");
    __name2(O, "O");
    function S(e3) {
      return l$1 && y ? void 0 !== b(e3) : B(e3) || k(e3) || E(e3) || D(e3) || U(e3) || P(e3) || x(e3) || I(e3) || M(e3) || z(e3) || F(e3);
    }
    __name(S, "S");
    __name2(S, "S");
    function B(e3) {
      return l$1 && y ? "Uint8Array" === b(e3) : "[object Uint8Array]" === m2(e3) || u$1(e3) && void 0 !== e3.buffer;
    }
    __name(B, "B");
    __name2(B, "B");
    function k(e3) {
      return l$1 && y ? "Uint8ClampedArray" === b(e3) : "[object Uint8ClampedArray]" === m2(e3);
    }
    __name(k, "k");
    __name2(k, "k");
    function E(e3) {
      return l$1 && y ? "Uint16Array" === b(e3) : "[object Uint16Array]" === m2(e3);
    }
    __name(E, "E");
    __name2(E, "E");
    function D(e3) {
      return l$1 && y ? "Uint32Array" === b(e3) : "[object Uint32Array]" === m2(e3);
    }
    __name(D, "D");
    __name2(D, "D");
    function U(e3) {
      return l$1 && y ? "Int8Array" === b(e3) : "[object Int8Array]" === m2(e3);
    }
    __name(U, "U");
    __name2(U, "U");
    function P(e3) {
      return l$1 && y ? "Int16Array" === b(e3) : "[object Int16Array]" === m2(e3);
    }
    __name(P, "P");
    __name2(P, "P");
    function x(e3) {
      return l$1 && y ? "Int32Array" === b(e3) : "[object Int32Array]" === m2(e3);
    }
    __name(x, "x");
    __name2(x, "x");
    function I(e3) {
      return l$1 && y ? "Float32Array" === b(e3) : "[object Float32Array]" === m2(e3);
    }
    __name(I, "I");
    __name2(I, "I");
    function M(e3) {
      return l$1 && y ? "Float64Array" === b(e3) : "[object Float64Array]" === m2(e3);
    }
    __name(M, "M");
    __name2(M, "M");
    function z(e3) {
      return l$1 && y ? "BigInt64Array" === b(e3) : "[object BigInt64Array]" === m2(e3);
    }
    __name(z, "z");
    __name2(z, "z");
    function F(e3) {
      return l$1 && y ? "BigUint64Array" === b(e3) : "[object BigUint64Array]" === m2(e3);
    }
    __name(F, "F");
    __name2(F, "F");
    function T2(e3) {
      return "[object Map]" === m2(e3);
    }
    __name(T2, "T2");
    __name2(T2, "T");
    function N(e3) {
      return "[object Set]" === m2(e3);
    }
    __name(N, "N");
    __name2(N, "N");
    function W(e3) {
      return "[object WeakMap]" === m2(e3);
    }
    __name(W, "W");
    __name2(W, "W");
    function $(e3) {
      return "[object WeakSet]" === m2(e3);
    }
    __name($, "$");
    __name2($, "$");
    function C(e3) {
      return "[object ArrayBuffer]" === m2(e3);
    }
    __name(C, "C");
    __name2(C, "C");
    function V(e3) {
      return "undefined" != typeof ArrayBuffer && (C.working ? C(e3) : e3 instanceof ArrayBuffer);
    }
    __name(V, "V");
    __name2(V, "V");
    function G(e3) {
      return "[object DataView]" === m2(e3);
    }
    __name(G, "G");
    __name2(G, "G");
    function R(e3) {
      return "undefined" != typeof DataView && (G.working ? G(e3) : e3 instanceof DataView);
    }
    __name(R, "R");
    __name2(R, "R");
    function J(e3) {
      return "[object SharedArrayBuffer]" === m2(e3);
    }
    __name(J, "J");
    __name2(J, "J");
    function _(e3) {
      return "undefined" != typeof SharedArrayBuffer && (J.working ? J(e3) : e3 instanceof SharedArrayBuffer);
    }
    __name(_, "_");
    __name2(_, "_");
    function H(e3) {
      return O(e3, h22);
    }
    __name(H, "H");
    __name2(H, "H");
    function Z(e3) {
      return O(e3, j);
    }
    __name(Z, "Z");
    __name2(Z, "Z");
    function q(e3) {
      return O(e3, A);
    }
    __name(q, "q");
    __name2(q, "q");
    function K(e3) {
      return s22 && O(e3, w);
    }
    __name(K, "K");
    __name2(K, "K");
    function L(e3) {
      return p22 && O(e3, v);
    }
    __name(L, "L");
    __name2(L, "L");
    o$2.isArgumentsObject = f22, o$2.isGeneratorFunction = a22, o$2.isPromise = function(e3) {
      return "undefined" != typeof Promise && e3 instanceof Promise || null !== e3 && "object" == typeof e3 && "function" == typeof e3.then && "function" == typeof e3.catch;
    }, o$2.isArrayBufferView = function(e3) {
      return d2 && ArrayBuffer.isView ? ArrayBuffer.isView(e3) : S(e3) || R(e3);
    }, o$2.isTypedArray = S, o$2.isUint8Array = B, o$2.isUint8ClampedArray = k, o$2.isUint16Array = E, o$2.isUint32Array = D, o$2.isInt8Array = U, o$2.isInt16Array = P, o$2.isInt32Array = x, o$2.isFloat32Array = I, o$2.isFloat64Array = M, o$2.isBigInt64Array = z, o$2.isBigUint64Array = F, T2.working = "undefined" != typeof Map && T2(/* @__PURE__ */ new Map()), o$2.isMap = function(e3) {
      return "undefined" != typeof Map && (T2.working ? T2(e3) : e3 instanceof Map);
    }, N.working = "undefined" != typeof Set && N(/* @__PURE__ */ new Set()), o$2.isSet = function(e3) {
      return "undefined" != typeof Set && (N.working ? N(e3) : e3 instanceof Set);
    }, W.working = "undefined" != typeof WeakMap && W(/* @__PURE__ */ new WeakMap()), o$2.isWeakMap = function(e3) {
      return "undefined" != typeof WeakMap && (W.working ? W(e3) : e3 instanceof WeakMap);
    }, $.working = "undefined" != typeof WeakSet && $(/* @__PURE__ */ new WeakSet()), o$2.isWeakSet = function(e3) {
      return $(e3);
    }, C.working = "undefined" != typeof ArrayBuffer && C(new ArrayBuffer()), o$2.isArrayBuffer = V, G.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && G(new DataView(new ArrayBuffer(1), 0, 1)), o$2.isDataView = R, J.working = "undefined" != typeof SharedArrayBuffer && J(new SharedArrayBuffer()), o$2.isSharedArrayBuffer = _, o$2.isAsyncFunction = function(e3) {
      return "[object AsyncFunction]" === m2(e3);
    }, o$2.isMapIterator = function(e3) {
      return "[object Map Iterator]" === m2(e3);
    }, o$2.isSetIterator = function(e3) {
      return "[object Set Iterator]" === m2(e3);
    }, o$2.isGeneratorObject = function(e3) {
      return "[object Generator]" === m2(e3);
    }, o$2.isWebAssemblyCompiledModule = function(e3) {
      return "[object WebAssembly.Module]" === m2(e3);
    }, o$2.isNumberObject = H, o$2.isStringObject = Z, o$2.isBooleanObject = q, o$2.isBigIntObject = K, o$2.isSymbolObject = L, o$2.isBoxedPrimitive = function(e3) {
      return H(e3) || Z(e3) || q(e3) || K(e3) || L(e3);
    }, o$2.isAnyArrayBuffer = function(e3) {
      return l$1 && (V(e3) || _(e3));
    }, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(e3) {
      Object.defineProperty(o$2, e3, { enumerable: false, value: function() {
        throw new Error(e3 + " is not supported in userland");
      } });
    });
    var Q = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : globalThis;
    var X = {};
    var Y = T;
    var ee = Object.getOwnPropertyDescriptors || function(e3) {
      for (var t3 = Object.keys(e3), r3 = {}, n3 = 0; n3 < t3.length; n3++)
        r3[t3[n3]] = Object.getOwnPropertyDescriptor(e3, t3[n3]);
      return r3;
    };
    var te = /%[sdj%]/g;
    X.format = function(e3) {
      if (!ge(e3)) {
        for (var t3 = [], r3 = 0; r3 < arguments.length; r3++)
          t3.push(oe(arguments[r3]));
        return t3.join(" ");
      }
      r3 = 1;
      for (var n3 = arguments, i3 = n3.length, o3 = String(e3).replace(te, function(e4) {
        if ("%%" === e4)
          return "%";
        if (r3 >= i3)
          return e4;
        switch (e4) {
          case "%s":
            return String(n3[r3++]);
          case "%d":
            return Number(n3[r3++]);
          case "%j":
            try {
              return JSON.stringify(n3[r3++]);
            } catch (e5) {
              return "[Circular]";
            }
          default:
            return e4;
        }
      }), u3 = n3[r3]; r3 < i3; u3 = n3[++r3])
        le(u3) || !he(u3) ? o3 += " " + u3 : o3 += " " + oe(u3);
      return o3;
    }, X.deprecate = function(e3, t3) {
      if (void 0 !== Y && true === Y.noDeprecation)
        return e3;
      if (void 0 === Y)
        return function() {
          return X.deprecate(e3, t3).apply(this || Q, arguments);
        };
      var r3 = false;
      return function() {
        if (!r3) {
          if (Y.throwDeprecation)
            throw new Error(t3);
          Y.traceDeprecation ? console.trace(t3) : console.error(t3), r3 = true;
        }
        return e3.apply(this || Q, arguments);
      };
    };
    var re = {};
    var ne = /^$/;
    if (Y.env.NODE_DEBUG) {
      ie = Y.env.NODE_DEBUG;
      ie = ie.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), ne = new RegExp("^" + ie + "$", "i");
    }
    var ie;
    function oe(e3, t3) {
      var r3 = { seen: [], stylize: fe };
      return arguments.length >= 3 && (r3.depth = arguments[2]), arguments.length >= 4 && (r3.colors = arguments[3]), ye(t3) ? r3.showHidden = t3 : t3 && X._extend(r3, t3), be(r3.showHidden) && (r3.showHidden = false), be(r3.depth) && (r3.depth = 2), be(r3.colors) && (r3.colors = false), be(r3.customInspect) && (r3.customInspect = true), r3.colors && (r3.stylize = ue), ae(r3, e3, r3.depth);
    }
    __name(oe, "oe");
    __name2(oe, "oe");
    function ue(e3, t3) {
      var r3 = oe.styles[t3];
      return r3 ? "\x1B[" + oe.colors[r3][0] + "m" + e3 + "\x1B[" + oe.colors[r3][1] + "m" : e3;
    }
    __name(ue, "ue");
    __name2(ue, "ue");
    function fe(e3, t3) {
      return e3;
    }
    __name(fe, "fe");
    __name2(fe, "fe");
    function ae(e3, t3, r3) {
      if (e3.customInspect && t3 && we(t3.inspect) && t3.inspect !== X.inspect && (!t3.constructor || t3.constructor.prototype !== t3)) {
        var n3 = t3.inspect(r3, e3);
        return ge(n3) || (n3 = ae(e3, n3, r3)), n3;
      }
      var i3 = function(e4, t4) {
        if (be(t4))
          return e4.stylize("undefined", "undefined");
        if (ge(t4)) {
          var r4 = "'" + JSON.stringify(t4).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
          return e4.stylize(r4, "string");
        }
        if (de(t4))
          return e4.stylize("" + t4, "number");
        if (ye(t4))
          return e4.stylize("" + t4, "boolean");
        if (le(t4))
          return e4.stylize("null", "null");
      }(e3, t3);
      if (i3)
        return i3;
      var o3 = Object.keys(t3), u3 = function(e4) {
        var t4 = {};
        return e4.forEach(function(e5, r4) {
          t4[e5] = true;
        }), t4;
      }(o3);
      if (e3.showHidden && (o3 = Object.getOwnPropertyNames(t3)), Ae(t3) && (o3.indexOf("message") >= 0 || o3.indexOf("description") >= 0))
        return ce(t3);
      if (0 === o3.length) {
        if (we(t3)) {
          var f3 = t3.name ? ": " + t3.name : "";
          return e3.stylize("[Function" + f3 + "]", "special");
        }
        if (me(t3))
          return e3.stylize(RegExp.prototype.toString.call(t3), "regexp");
        if (je(t3))
          return e3.stylize(Date.prototype.toString.call(t3), "date");
        if (Ae(t3))
          return ce(t3);
      }
      var a3, c3 = "", s4 = false, p3 = ["{", "}"];
      (pe(t3) && (s4 = true, p3 = ["[", "]"]), we(t3)) && (c3 = " [Function" + (t3.name ? ": " + t3.name : "") + "]");
      return me(t3) && (c3 = " " + RegExp.prototype.toString.call(t3)), je(t3) && (c3 = " " + Date.prototype.toUTCString.call(t3)), Ae(t3) && (c3 = " " + ce(t3)), 0 !== o3.length || s4 && 0 != t3.length ? r3 < 0 ? me(t3) ? e3.stylize(RegExp.prototype.toString.call(t3), "regexp") : e3.stylize("[Object]", "special") : (e3.seen.push(t3), a3 = s4 ? function(e4, t4, r4, n4, i4) {
        for (var o4 = [], u4 = 0, f4 = t4.length; u4 < f4; ++u4)
          ke(t4, String(u4)) ? o4.push(se(e4, t4, r4, n4, String(u4), true)) : o4.push("");
        return i4.forEach(function(i5) {
          i5.match(/^\d+$/) || o4.push(se(e4, t4, r4, n4, i5, true));
        }), o4;
      }(e3, t3, r3, u3, o3) : o3.map(function(n4) {
        return se(e3, t3, r3, u3, n4, s4);
      }), e3.seen.pop(), function(e4, t4, r4) {
        var n4 = 0;
        if (e4.reduce(function(e5, t5) {
          return n4++, t5.indexOf("\n") >= 0 && n4++, e5 + t5.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0) > 60)
          return r4[0] + ("" === t4 ? "" : t4 + "\n ") + " " + e4.join(",\n  ") + " " + r4[1];
        return r4[0] + t4 + " " + e4.join(", ") + " " + r4[1];
      }(a3, c3, p3)) : p3[0] + c3 + p3[1];
    }
    __name(ae, "ae");
    __name2(ae, "ae");
    function ce(e3) {
      return "[" + Error.prototype.toString.call(e3) + "]";
    }
    __name(ce, "ce");
    __name2(ce, "ce");
    function se(e3, t3, r3, n3, i3, o3) {
      var u3, f3, a3;
      if ((a3 = Object.getOwnPropertyDescriptor(t3, i3) || { value: t3[i3] }).get ? f3 = a3.set ? e3.stylize("[Getter/Setter]", "special") : e3.stylize("[Getter]", "special") : a3.set && (f3 = e3.stylize("[Setter]", "special")), ke(n3, i3) || (u3 = "[" + i3 + "]"), f3 || (e3.seen.indexOf(a3.value) < 0 ? (f3 = le(r3) ? ae(e3, a3.value, null) : ae(e3, a3.value, r3 - 1)).indexOf("\n") > -1 && (f3 = o3 ? f3.split("\n").map(function(e4) {
        return "  " + e4;
      }).join("\n").substr(2) : "\n" + f3.split("\n").map(function(e4) {
        return "   " + e4;
      }).join("\n")) : f3 = e3.stylize("[Circular]", "special")), be(u3)) {
        if (o3 && i3.match(/^\d+$/))
          return f3;
        (u3 = JSON.stringify("" + i3)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (u3 = u3.substr(1, u3.length - 2), u3 = e3.stylize(u3, "name")) : (u3 = u3.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), u3 = e3.stylize(u3, "string"));
      }
      return u3 + ": " + f3;
    }
    __name(se, "se");
    __name2(se, "se");
    function pe(e3) {
      return Array.isArray(e3);
    }
    __name(pe, "pe");
    __name2(pe, "pe");
    function ye(e3) {
      return "boolean" == typeof e3;
    }
    __name(ye, "ye");
    __name2(ye, "ye");
    function le(e3) {
      return null === e3;
    }
    __name(le, "le");
    __name2(le, "le");
    function de(e3) {
      return "number" == typeof e3;
    }
    __name(de, "de");
    __name2(de, "de");
    function ge(e3) {
      return "string" == typeof e3;
    }
    __name(ge, "ge");
    __name2(ge, "ge");
    function be(e3) {
      return void 0 === e3;
    }
    __name(be, "be");
    __name2(be, "be");
    function me(e3) {
      return he(e3) && "[object RegExp]" === ve(e3);
    }
    __name(me, "me");
    __name2(me, "me");
    function he(e3) {
      return "object" == typeof e3 && null !== e3;
    }
    __name(he, "he");
    __name2(he, "he");
    function je(e3) {
      return he(e3) && "[object Date]" === ve(e3);
    }
    __name(je, "je");
    __name2(je, "je");
    function Ae(e3) {
      return he(e3) && ("[object Error]" === ve(e3) || e3 instanceof Error);
    }
    __name(Ae, "Ae");
    __name2(Ae, "Ae");
    function we(e3) {
      return "function" == typeof e3;
    }
    __name(we, "we");
    __name2(we, "we");
    function ve(e3) {
      return Object.prototype.toString.call(e3);
    }
    __name(ve, "ve");
    __name2(ve, "ve");
    function Oe(e3) {
      return e3 < 10 ? "0" + e3.toString(10) : e3.toString(10);
    }
    __name(Oe, "Oe");
    __name2(Oe, "Oe");
    X.debuglog = function(e3) {
      if (e3 = e3.toUpperCase(), !re[e3])
        if (ne.test(e3)) {
          var t3 = Y.pid;
          re[e3] = function() {
            var r3 = X.format.apply(X, arguments);
            console.error("%s %d: %s", e3, t3, r3);
          };
        } else
          re[e3] = function() {
          };
      return re[e3];
    }, X.inspect = oe, oe.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, oe.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" }, X.types = o$2, X.isArray = pe, X.isBoolean = ye, X.isNull = le, X.isNullOrUndefined = function(e3) {
      return null == e3;
    }, X.isNumber = de, X.isString = ge, X.isSymbol = function(e3) {
      return "symbol" == typeof e3;
    }, X.isUndefined = be, X.isRegExp = me, X.types.isRegExp = me, X.isObject = he, X.isDate = je, X.types.isDate = je, X.isError = Ae, X.types.isNativeError = Ae, X.isFunction = we, X.isPrimitive = function(e3) {
      return null === e3 || "boolean" == typeof e3 || "number" == typeof e3 || "string" == typeof e3 || "symbol" == typeof e3 || void 0 === e3;
    }, X.isBuffer = i$1;
    var Se = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function Be() {
      var e3 = /* @__PURE__ */ new Date(), t3 = [Oe(e3.getHours()), Oe(e3.getMinutes()), Oe(e3.getSeconds())].join(":");
      return [e3.getDate(), Se[e3.getMonth()], t3].join(" ");
    }
    __name(Be, "Be");
    __name2(Be, "Be");
    function ke(e3, t3) {
      return Object.prototype.hasOwnProperty.call(e3, t3);
    }
    __name(ke, "ke");
    __name2(ke, "ke");
    X.log = function() {
      console.log("%s - %s", Be(), X.format.apply(X, arguments));
    }, X.inherits = t$2, X._extend = function(e3, t3) {
      if (!t3 || !he(t3))
        return e3;
      for (var r3 = Object.keys(t3), n3 = r3.length; n3--; )
        e3[r3[n3]] = t3[r3[n3]];
      return e3;
    };
    var Ee = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
    function De(e3, t3) {
      if (!e3) {
        var r3 = new Error("Promise was rejected with a falsy value");
        r3.reason = e3, e3 = r3;
      }
      return t3(e3);
    }
    __name(De, "De");
    __name2(De, "De");
    X.promisify = function(e3) {
      if ("function" != typeof e3)
        throw new TypeError('The "original" argument must be of type Function');
      if (Ee && e3[Ee]) {
        var t3;
        if ("function" != typeof (t3 = e3[Ee]))
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        return Object.defineProperty(t3, Ee, { value: t3, enumerable: false, writable: false, configurable: true }), t3;
      }
      function t3() {
        for (var t4, r3, n3 = new Promise(function(e4, n4) {
          t4 = e4, r3 = n4;
        }), i3 = [], o3 = 0; o3 < arguments.length; o3++)
          i3.push(arguments[o3]);
        i3.push(function(e4, n4) {
          e4 ? r3(e4) : t4(n4);
        });
        try {
          e3.apply(this || Q, i3);
        } catch (e4) {
          r3(e4);
        }
        return n3;
      }
      __name(t3, "t3");
      __name2(t3, "t");
      return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), Ee && Object.defineProperty(t3, Ee, { value: t3, enumerable: false, writable: false, configurable: true }), Object.defineProperties(t3, ee(e3));
    }, X.promisify.custom = Ee, X.callbackify = function(e3) {
      if ("function" != typeof e3)
        throw new TypeError('The "original" argument must be of type Function');
      function t3() {
        for (var t4 = [], r3 = 0; r3 < arguments.length; r3++)
          t4.push(arguments[r3]);
        var n3 = t4.pop();
        if ("function" != typeof n3)
          throw new TypeError("The last argument must be of type Function");
        var i3 = this || Q, o3 = /* @__PURE__ */ __name2(function() {
          return n3.apply(i3, arguments);
        }, "o");
        e3.apply(this || Q, t4).then(function(e4) {
          Y.nextTick(o3.bind(null, null, e4));
        }, function(e4) {
          Y.nextTick(De.bind(null, e4, o3));
        });
      }
      __name(t3, "t3");
      __name2(t3, "t");
      return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), Object.defineProperties(t3, ee(e3)), t3;
    };
    X._extend;
    X.callbackify;
    X.debuglog;
    X.deprecate;
    X.format;
    X.inherits;
    X.inspect;
    X.isArray;
    X.isBoolean;
    X.isBuffer;
    X.isDate;
    X.isError;
    X.isFunction;
    X.isNull;
    X.isNullOrUndefined;
    X.isNumber;
    X.isObject;
    X.isPrimitive;
    X.isRegExp;
    X.isString;
    X.isSymbol;
    X.isUndefined;
    X.log;
    X.promisify;
    X._extend;
    X.callbackify;
    X.debuglog;
    X.deprecate;
    X.format;
    X.inherits;
    X.inspect;
    X.isArray;
    X.isBoolean;
    X.isBuffer;
    X.isDate;
    X.isError;
    X.isFunction;
    X.isNull;
    X.isNullOrUndefined;
    X.isNumber;
    X.isObject;
    X.isPrimitive;
    X.isRegExp;
    X.isString;
    X.isSymbol;
    X.isUndefined;
    X.log;
    X.promisify;
    X.types;
    X._extend;
    X.callbackify;
    X.debuglog;
    X.deprecate;
    X.format;
    X.inherits;
    var inspect2 = X.inspect;
    X.isArray;
    X.isBoolean;
    X.isBuffer;
    X.isDate;
    X.isError;
    X.isFunction;
    X.isNull;
    X.isNullOrUndefined;
    X.isNumber;
    X.isObject;
    X.isPrimitive;
    X.isRegExp;
    X.isString;
    X.isSymbol;
    X.isUndefined;
    X.log;
    X.promisify;
    X.types;
    X.TextEncoder = globalThis.TextEncoder;
    X.TextDecoder = globalThis.TextDecoder;
    var customInspectSymbol = Symbol.for("nodejs.util.inspect.custom");
    var customInspectSymbolStackLess = Symbol.for("nodejs.util.inspect.custom.stack-less");
    var _BaseError = /* @__PURE__ */ __name(class _BaseError extends Error {
      toJSON() {
        return {
          name: this.name,
          message: this.message
        };
      }
      [customInspectSymbol](depth, options) {
        return `${this[customInspectSymbolStackLess](depth, options)}
${this.stack.slice(this.stack.indexOf("\n"))}`;
      }
    }, "_BaseError");
    __name2(_BaseError, "BaseError");
    var BaseError = _BaseError;
    var _BaseConstraintError = /* @__PURE__ */ __name(class _BaseConstraintError extends BaseError {
      constructor(constraint, message, given) {
        super(message);
        this.constraint = constraint;
        this.given = given;
      }
      toJSON() {
        return {
          name: this.name,
          constraint: this.constraint,
          given: this.given,
          message: this.message
        };
      }
    }, "_BaseConstraintError");
    __name2(_BaseConstraintError, "BaseConstraintError");
    var BaseConstraintError = _BaseConstraintError;
    var _ExpectedConstraintError = /* @__PURE__ */ __name(class _ExpectedConstraintError extends BaseConstraintError {
      constructor(constraint, message, given, expected) {
        super(constraint, message, given);
        this.expected = expected;
      }
      toJSON() {
        return {
          name: this.name,
          constraint: this.constraint,
          given: this.given,
          expected: this.expected,
          message: this.message
        };
      }
      [customInspectSymbolStackLess](depth, options) {
        const constraint = options.stylize(this.constraint, "string");
        if (depth < 0) {
          return options.stylize(`[ExpectedConstraintError: ${constraint}]`, "special");
        }
        const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1 };
        const padding = `
  ${options.stylize("|", "undefined")} `;
        const given = inspect2(this.given, newOptions).replace(/\n/g, padding);
        const header = `${options.stylize("ExpectedConstraintError", "special")} > ${constraint}`;
        const message = options.stylize(this.message, "regexp");
        const expectedBlock = `
  ${options.stylize("Expected: ", "string")}${options.stylize(this.expected, "boolean")}`;
        const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
        return `${header}
  ${message}
${expectedBlock}
${givenBlock}`;
      }
    }, "_ExpectedConstraintError");
    __name2(_ExpectedConstraintError, "ExpectedConstraintError");
    var ExpectedConstraintError = _ExpectedConstraintError;
    var _Result = /* @__PURE__ */ __name(class _Result2 {
      constructor(success, value, error) {
        this.success = success;
        if (success) {
          this.value = value;
        } else {
          this.error = error;
        }
      }
      isOk() {
        return this.success;
      }
      isErr() {
        return !this.success;
      }
      unwrap() {
        if (this.isOk())
          return this.value;
        throw this.error;
      }
      static ok(value) {
        return new _Result2(true, value);
      }
      static err(error) {
        return new _Result2(false, void 0, error);
      }
    }, "_Result");
    __name2(_Result, "Result");
    var Result = _Result;
    function whenConstraint(key, options, validator, validatorOptions) {
      return {
        run(input, parent) {
          if (!parent) {
            return Result.err(
              new ExpectedConstraintError(
                "s.object(T.when)",
                validatorOptions?.message ?? "Validator has no parent",
                parent,
                "Validator to have a parent"
              )
            );
          }
          const isKeyArray = Array.isArray(key);
          const value = isKeyArray ? key.map((k2) => get__default.default(parent, k2)) : get__default.default(parent, key);
          const predicate = resolveBooleanIs(options, value, isKeyArray) ? options.then : options.otherwise;
          if (predicate) {
            return predicate(validator).run(input);
          }
          return Result.ok(input);
        }
      };
    }
    __name(whenConstraint, "whenConstraint");
    __name2(whenConstraint, "whenConstraint");
    function resolveBooleanIs(options, value, isKeyArray) {
      if (options.is === void 0) {
        return isKeyArray ? !value.some((val) => !val) : Boolean(value);
      }
      if (typeof options.is === "function") {
        return options.is(value);
      }
      return value === options.is;
    }
    __name(resolveBooleanIs, "resolveBooleanIs");
    __name2(resolveBooleanIs, "resolveBooleanIs");
    var validationEnabled = true;
    function setGlobalValidationEnabled(enabled) {
      validationEnabled = enabled;
    }
    __name(setGlobalValidationEnabled, "setGlobalValidationEnabled");
    __name2(setGlobalValidationEnabled, "setGlobalValidationEnabled");
    function getGlobalValidationEnabled() {
      return validationEnabled;
    }
    __name(getGlobalValidationEnabled, "getGlobalValidationEnabled");
    __name2(getGlobalValidationEnabled, "getGlobalValidationEnabled");
    function getValue(valueOrFn) {
      return typeof valueOrFn === "function" ? valueOrFn() : valueOrFn;
    }
    __name(getValue, "getValue");
    __name2(getValue, "getValue");
    var _BaseValidator = /* @__PURE__ */ __name(class _BaseValidator {
      constructor(validatorOptions = {}, constraints = []) {
        this.constraints = [];
        this.isValidationEnabled = null;
        this.constraints = constraints;
        this.validatorOptions = validatorOptions;
      }
      setParent(parent) {
        this.parent = parent;
        return this;
      }
      optional(options = this.validatorOptions) {
        return new UnionValidator([new LiteralValidator(void 0, options), this.clone()], options);
      }
      nullable(options = this.validatorOptions) {
        return new UnionValidator([new LiteralValidator(null, options), this.clone()], options);
      }
      nullish(options = this.validatorOptions) {
        return new UnionValidator([new NullishValidator(options), this.clone()], options);
      }
      array(options = this.validatorOptions) {
        return new ArrayValidator(this.clone(), options);
      }
      set(options = this.validatorOptions) {
        return new SetValidator(this.clone(), options);
      }
      or(...predicates) {
        return new UnionValidator([this.clone(), ...predicates], this.validatorOptions);
      }
      transform(cb, options = this.validatorOptions) {
        return this.addConstraint(
          {
            run: (input) => Result.ok(cb(input))
          },
          options
        );
      }
      reshape(cb, options = this.validatorOptions) {
        return this.addConstraint(
          {
            run: cb
          },
          options
        );
      }
      default(value, options = this.validatorOptions) {
        return new DefaultValidator(this.clone(), value, options);
      }
      when(key, options, validatorOptions) {
        return this.addConstraint(whenConstraint(key, options, this, validatorOptions));
      }
      describe(description) {
        const clone = this.clone();
        clone.description = description;
        return clone;
      }
      run(value) {
        let result = this.handle(value);
        if (result.isErr())
          return result;
        for (const constraint of this.constraints) {
          result = constraint.run(result.value, this.parent);
          if (result.isErr())
            break;
        }
        return result;
      }
      parse(value) {
        if (!this.shouldRunConstraints) {
          return this.handle(value).unwrap();
        }
        return this.constraints.reduce((v2, constraint) => constraint.run(v2).unwrap(), this.handle(value).unwrap());
      }
      is(value) {
        return this.run(value).isOk();
      }
      /**
       * Sets if the validator should also run constraints or just do basic checks.
       * @param isValidationEnabled Whether this validator should be enabled or disabled. You can pass boolean or a function returning boolean which will be called just before parsing.
       * Set to `null` to go off of the global configuration.
       */
      setValidationEnabled(isValidationEnabled) {
        const clone = this.clone();
        clone.isValidationEnabled = isValidationEnabled;
        return clone;
      }
      getValidationEnabled() {
        return getValue(this.isValidationEnabled);
      }
      get shouldRunConstraints() {
        return getValue(this.isValidationEnabled) ?? getGlobalValidationEnabled();
      }
      clone() {
        const clone = Reflect.construct(this.constructor, [this.validatorOptions, this.constraints]);
        clone.isValidationEnabled = this.isValidationEnabled;
        return clone;
      }
      addConstraint(constraint, validatorOptions = this.validatorOptions) {
        const clone = this.clone();
        clone.validatorOptions = validatorOptions;
        clone.constraints = clone.constraints.concat(constraint);
        return clone;
      }
    }, "_BaseValidator");
    __name2(_BaseValidator, "BaseValidator");
    var BaseValidator = _BaseValidator;
    function isUnique(input) {
      if (input.length < 2)
        return true;
      const uniqueArray2 = uniqWith__default.default(input, fastDeepEqual__default.default);
      return uniqueArray2.length === input.length;
    }
    __name(isUnique, "isUnique");
    __name2(isUnique, "isUnique");
    function lessThan(a3, b2) {
      return a3 < b2;
    }
    __name(lessThan, "lessThan");
    __name2(lessThan, "lessThan");
    function lessThanOrEqual(a3, b2) {
      return a3 <= b2;
    }
    __name(lessThanOrEqual, "lessThanOrEqual");
    __name2(lessThanOrEqual, "lessThanOrEqual");
    function greaterThan(a3, b2) {
      return a3 > b2;
    }
    __name(greaterThan, "greaterThan");
    __name2(greaterThan, "greaterThan");
    function greaterThanOrEqual(a3, b2) {
      return a3 >= b2;
    }
    __name(greaterThanOrEqual, "greaterThanOrEqual");
    __name2(greaterThanOrEqual, "greaterThanOrEqual");
    function equal(a3, b2) {
      return a3 === b2;
    }
    __name(equal, "equal");
    __name2(equal, "equal");
    function notEqual(a3, b2) {
      return a3 !== b2;
    }
    __name(notEqual, "notEqual");
    __name2(notEqual, "notEqual");
    function arrayLengthComparator(comparator, name, expected, length, options) {
      return {
        run(input) {
          return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid Array length", input, expected));
        }
      };
    }
    __name(arrayLengthComparator, "arrayLengthComparator");
    __name2(arrayLengthComparator, "arrayLengthComparator");
    function arrayLengthLessThan(value, options) {
      const expected = `expected.length < ${value}`;
      return arrayLengthComparator(lessThan, "s.array(T).lengthLessThan()", expected, value, options);
    }
    __name(arrayLengthLessThan, "arrayLengthLessThan");
    __name2(arrayLengthLessThan, "arrayLengthLessThan");
    function arrayLengthLessThanOrEqual(value, options) {
      const expected = `expected.length <= ${value}`;
      return arrayLengthComparator(lessThanOrEqual, "s.array(T).lengthLessThanOrEqual()", expected, value, options);
    }
    __name(arrayLengthLessThanOrEqual, "arrayLengthLessThanOrEqual");
    __name2(arrayLengthLessThanOrEqual, "arrayLengthLessThanOrEqual");
    function arrayLengthGreaterThan(value, options) {
      const expected = `expected.length > ${value}`;
      return arrayLengthComparator(greaterThan, "s.array(T).lengthGreaterThan()", expected, value, options);
    }
    __name(arrayLengthGreaterThan, "arrayLengthGreaterThan");
    __name2(arrayLengthGreaterThan, "arrayLengthGreaterThan");
    function arrayLengthGreaterThanOrEqual(value, options) {
      const expected = `expected.length >= ${value}`;
      return arrayLengthComparator(greaterThanOrEqual, "s.array(T).lengthGreaterThanOrEqual()", expected, value, options);
    }
    __name(arrayLengthGreaterThanOrEqual, "arrayLengthGreaterThanOrEqual");
    __name2(arrayLengthGreaterThanOrEqual, "arrayLengthGreaterThanOrEqual");
    function arrayLengthEqual(value, options) {
      const expected = `expected.length === ${value}`;
      return arrayLengthComparator(equal, "s.array(T).lengthEqual()", expected, value, options);
    }
    __name(arrayLengthEqual, "arrayLengthEqual");
    __name2(arrayLengthEqual, "arrayLengthEqual");
    function arrayLengthNotEqual(value, options) {
      const expected = `expected.length !== ${value}`;
      return arrayLengthComparator(notEqual, "s.array(T).lengthNotEqual()", expected, value, options);
    }
    __name(arrayLengthNotEqual, "arrayLengthNotEqual");
    __name2(arrayLengthNotEqual, "arrayLengthNotEqual");
    function arrayLengthRange(start, endBefore, options) {
      const expected = `expected.length >= ${start} && expected.length < ${endBefore}`;
      return {
        run(input) {
          return input.length >= start && input.length < endBefore ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.array(T).lengthRange()", options?.message ?? "Invalid Array length", input, expected));
        }
      };
    }
    __name(arrayLengthRange, "arrayLengthRange");
    __name2(arrayLengthRange, "arrayLengthRange");
    function arrayLengthRangeInclusive(start, end, options) {
      const expected = `expected.length >= ${start} && expected.length <= ${end}`;
      return {
        run(input) {
          return input.length >= start && input.length <= end ? Result.ok(input) : Result.err(
            new ExpectedConstraintError("s.array(T).lengthRangeInclusive()", options?.message ?? "Invalid Array length", input, expected)
          );
        }
      };
    }
    __name(arrayLengthRangeInclusive, "arrayLengthRangeInclusive");
    __name2(arrayLengthRangeInclusive, "arrayLengthRangeInclusive");
    function arrayLengthRangeExclusive(startAfter, endBefore, options) {
      const expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;
      return {
        run(input) {
          return input.length > startAfter && input.length < endBefore ? Result.ok(input) : Result.err(
            new ExpectedConstraintError("s.array(T).lengthRangeExclusive()", options?.message ?? "Invalid Array length", input, expected)
          );
        }
      };
    }
    __name(arrayLengthRangeExclusive, "arrayLengthRangeExclusive");
    __name2(arrayLengthRangeExclusive, "arrayLengthRangeExclusive");
    function uniqueArray(options) {
      return {
        run(input) {
          return isUnique(input) ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.array(T).unique()",
              options?.message ?? "Array values are not unique",
              input,
              "Expected all values to be unique"
            )
          );
        }
      };
    }
    __name(uniqueArray, "uniqueArray");
    __name2(uniqueArray, "uniqueArray");
    var _CombinedPropertyError = /* @__PURE__ */ __name(class _CombinedPropertyError2 extends BaseError {
      constructor(errors, validatorOptions) {
        super(validatorOptions?.message ?? "Received one or more errors");
        this.errors = errors;
      }
      [customInspectSymbolStackLess](depth, options) {
        if (depth < 0) {
          return options.stylize("[CombinedPropertyError]", "special");
        }
        const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };
        const padding = `
  ${options.stylize("|", "undefined")} `;
        const header = `${options.stylize("CombinedPropertyError", "special")} (${options.stylize(this.errors.length.toString(), "number")})`;
        const message = options.stylize(this.message, "regexp");
        const errors = this.errors.map(([key, error]) => {
          const property = _CombinedPropertyError2.formatProperty(key, options);
          const body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\n/g, padding);
          return `  input${property}${padding}${body}`;
        }).join("\n\n");
        return `${header}
  ${message}

${errors}`;
      }
      static formatProperty(key, options) {
        if (typeof key === "string")
          return options.stylize(`.${key}`, "symbol");
        if (typeof key === "number")
          return `[${options.stylize(key.toString(), "number")}]`;
        return `[${options.stylize("Symbol", "symbol")}(${key.description})]`;
      }
    }, "_CombinedPropertyError");
    __name2(_CombinedPropertyError, "CombinedPropertyError");
    var CombinedPropertyError = _CombinedPropertyError;
    var _ValidationError = /* @__PURE__ */ __name(class _ValidationError extends BaseError {
      constructor(validator, message, given) {
        super(message);
        this.validator = validator;
        this.given = given;
      }
      toJSON() {
        return {
          name: this.name,
          message: "Unknown validation error occurred.",
          validator: this.validator,
          given: this.given
        };
      }
      [customInspectSymbolStackLess](depth, options) {
        const validator = options.stylize(this.validator, "string");
        if (depth < 0) {
          return options.stylize(`[ValidationError: ${validator}]`, "special");
        }
        const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };
        const padding = `
  ${options.stylize("|", "undefined")} `;
        const given = inspect2(this.given, newOptions).replace(/\n/g, padding);
        const header = `${options.stylize("ValidationError", "special")} > ${validator}`;
        const message = options.stylize(this.message, "regexp");
        const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
        return `${header}
  ${message}
${givenBlock}`;
      }
    }, "_ValidationError");
    __name2(_ValidationError, "ValidationError");
    var ValidationError = _ValidationError;
    var _ArrayValidator = /* @__PURE__ */ __name(class _ArrayValidator extends BaseValidator {
      constructor(validator, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.validator = validator;
      }
      lengthLessThan(length, options = this.validatorOptions) {
        return this.addConstraint(arrayLengthLessThan(length, options));
      }
      lengthLessThanOrEqual(length, options = this.validatorOptions) {
        return this.addConstraint(arrayLengthLessThanOrEqual(length, options));
      }
      lengthGreaterThan(length, options = this.validatorOptions) {
        return this.addConstraint(arrayLengthGreaterThan(length, options));
      }
      lengthGreaterThanOrEqual(length, options = this.validatorOptions) {
        return this.addConstraint(arrayLengthGreaterThanOrEqual(length, options));
      }
      lengthEqual(length, options = this.validatorOptions) {
        return this.addConstraint(arrayLengthEqual(length, options));
      }
      lengthNotEqual(length, options = this.validatorOptions) {
        return this.addConstraint(arrayLengthNotEqual(length, options));
      }
      lengthRange(start, endBefore, options = this.validatorOptions) {
        return this.addConstraint(arrayLengthRange(start, endBefore, options));
      }
      lengthRangeInclusive(startAt, endAt, options = this.validatorOptions) {
        return this.addConstraint(arrayLengthRangeInclusive(startAt, endAt, options));
      }
      lengthRangeExclusive(startAfter, endBefore, options = this.validatorOptions) {
        return this.addConstraint(arrayLengthRangeExclusive(startAfter, endBefore, options));
      }
      unique(options = this.validatorOptions) {
        return this.addConstraint(uniqueArray(options));
      }
      clone() {
        return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);
      }
      handle(values) {
        if (!Array.isArray(values)) {
          return Result.err(new ValidationError("s.array(T)", this.validatorOptions.message ?? "Expected an array", values));
        }
        if (!this.shouldRunConstraints) {
          return Result.ok(values);
        }
        const errors = [];
        const transformed = [];
        for (let i3 = 0; i3 < values.length; i3++) {
          const result = this.validator.run(values[i3]);
          if (result.isOk())
            transformed.push(result.value);
          else
            errors.push([i3, result.error]);
        }
        return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
      }
    }, "_ArrayValidator");
    __name2(_ArrayValidator, "ArrayValidator");
    var ArrayValidator = _ArrayValidator;
    function bigintComparator(comparator, name, expected, number, options) {
      return {
        run(input) {
          return comparator(input, number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid bigint value", input, expected));
        }
      };
    }
    __name(bigintComparator, "bigintComparator");
    __name2(bigintComparator, "bigintComparator");
    function bigintLessThan(value, options) {
      const expected = `expected < ${value}n`;
      return bigintComparator(lessThan, "s.bigint().lessThan()", expected, value, options);
    }
    __name(bigintLessThan, "bigintLessThan");
    __name2(bigintLessThan, "bigintLessThan");
    function bigintLessThanOrEqual(value, options) {
      const expected = `expected <= ${value}n`;
      return bigintComparator(lessThanOrEqual, "s.bigint().lessThanOrEqual()", expected, value, options);
    }
    __name(bigintLessThanOrEqual, "bigintLessThanOrEqual");
    __name2(bigintLessThanOrEqual, "bigintLessThanOrEqual");
    function bigintGreaterThan(value, options) {
      const expected = `expected > ${value}n`;
      return bigintComparator(greaterThan, "s.bigint().greaterThan()", expected, value, options);
    }
    __name(bigintGreaterThan, "bigintGreaterThan");
    __name2(bigintGreaterThan, "bigintGreaterThan");
    function bigintGreaterThanOrEqual(value, options) {
      const expected = `expected >= ${value}n`;
      return bigintComparator(greaterThanOrEqual, "s.bigint().greaterThanOrEqual()", expected, value, options);
    }
    __name(bigintGreaterThanOrEqual, "bigintGreaterThanOrEqual");
    __name2(bigintGreaterThanOrEqual, "bigintGreaterThanOrEqual");
    function bigintEqual(value, options) {
      const expected = `expected === ${value}n`;
      return bigintComparator(equal, "s.bigint().equal()", expected, value, options);
    }
    __name(bigintEqual, "bigintEqual");
    __name2(bigintEqual, "bigintEqual");
    function bigintNotEqual(value, options) {
      const expected = `expected !== ${value}n`;
      return bigintComparator(notEqual, "s.bigint().notEqual()", expected, value, options);
    }
    __name(bigintNotEqual, "bigintNotEqual");
    __name2(bigintNotEqual, "bigintNotEqual");
    function bigintDivisibleBy(divider, options) {
      const expected = `expected % ${divider}n === 0n`;
      return {
        run(input) {
          return input % divider === 0n ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.bigint().divisibleBy()", options?.message ?? "BigInt is not divisible", input, expected));
        }
      };
    }
    __name(bigintDivisibleBy, "bigintDivisibleBy");
    __name2(bigintDivisibleBy, "bigintDivisibleBy");
    var _BigIntValidator = /* @__PURE__ */ __name(class _BigIntValidator extends BaseValidator {
      lessThan(number, options = this.validatorOptions) {
        return this.addConstraint(bigintLessThan(number, options));
      }
      lessThanOrEqual(number, options = this.validatorOptions) {
        return this.addConstraint(bigintLessThanOrEqual(number, options));
      }
      greaterThan(number, options = this.validatorOptions) {
        return this.addConstraint(bigintGreaterThan(number, options));
      }
      greaterThanOrEqual(number, options = this.validatorOptions) {
        return this.addConstraint(bigintGreaterThanOrEqual(number, options));
      }
      equal(number, options = this.validatorOptions) {
        return this.addConstraint(bigintEqual(number, options));
      }
      notEqual(number, options = this.validatorOptions) {
        return this.addConstraint(bigintNotEqual(number, options));
      }
      positive(options = this.validatorOptions) {
        return this.greaterThanOrEqual(0n, options);
      }
      negative(options = this.validatorOptions) {
        return this.lessThan(0n, options);
      }
      divisibleBy(number, options = this.validatorOptions) {
        return this.addConstraint(bigintDivisibleBy(number, options));
      }
      abs(options = this.validatorOptions) {
        return this.transform((value) => value < 0 ? -value : value, options);
      }
      intN(bits, options = this.validatorOptions) {
        return this.transform((value) => BigInt.asIntN(bits, value), options);
      }
      uintN(bits, options = this.validatorOptions) {
        return this.transform((value) => BigInt.asUintN(bits, value), options);
      }
      handle(value) {
        return typeof value === "bigint" ? Result.ok(value) : Result.err(new ValidationError("s.bigint()", this.validatorOptions.message ?? "Expected a bigint primitive", value));
      }
    }, "_BigIntValidator");
    __name2(_BigIntValidator, "BigIntValidator");
    var BigIntValidator = _BigIntValidator;
    function booleanTrue(options) {
      return {
        run(input) {
          return input ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.boolean().true()", options?.message ?? "Invalid boolean value", input, "true"));
        }
      };
    }
    __name(booleanTrue, "booleanTrue");
    __name2(booleanTrue, "booleanTrue");
    function booleanFalse(options) {
      return {
        run(input) {
          return input ? Result.err(new ExpectedConstraintError("s.boolean().false()", options?.message ?? "Invalid boolean value", input, "false")) : Result.ok(input);
        }
      };
    }
    __name(booleanFalse, "booleanFalse");
    __name2(booleanFalse, "booleanFalse");
    var _BooleanValidator = /* @__PURE__ */ __name(class _BooleanValidator extends BaseValidator {
      true(options = this.validatorOptions) {
        return this.addConstraint(booleanTrue(options));
      }
      false(options = this.validatorOptions) {
        return this.addConstraint(booleanFalse(options));
      }
      equal(value, options = this.validatorOptions) {
        return value ? this.true(options) : this.false(options);
      }
      notEqual(value, options = this.validatorOptions) {
        return value ? this.false(options) : this.true(options);
      }
      handle(value) {
        return typeof value === "boolean" ? Result.ok(value) : Result.err(new ValidationError("s.boolean()", this.validatorOptions.message ?? "Expected a boolean primitive", value));
      }
    }, "_BooleanValidator");
    __name2(_BooleanValidator, "BooleanValidator");
    var BooleanValidator = _BooleanValidator;
    function dateComparator(comparator, name, expected, number, options) {
      return {
        run(input) {
          return comparator(input.getTime(), number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid Date value", input, expected));
        }
      };
    }
    __name(dateComparator, "dateComparator");
    __name2(dateComparator, "dateComparator");
    function dateLessThan(value, options) {
      const expected = `expected < ${value.toISOString()}`;
      return dateComparator(lessThan, "s.date().lessThan()", expected, value.getTime(), options);
    }
    __name(dateLessThan, "dateLessThan");
    __name2(dateLessThan, "dateLessThan");
    function dateLessThanOrEqual(value, options) {
      const expected = `expected <= ${value.toISOString()}`;
      return dateComparator(lessThanOrEqual, "s.date().lessThanOrEqual()", expected, value.getTime(), options);
    }
    __name(dateLessThanOrEqual, "dateLessThanOrEqual");
    __name2(dateLessThanOrEqual, "dateLessThanOrEqual");
    function dateGreaterThan(value, options) {
      const expected = `expected > ${value.toISOString()}`;
      return dateComparator(greaterThan, "s.date().greaterThan()", expected, value.getTime(), options);
    }
    __name(dateGreaterThan, "dateGreaterThan");
    __name2(dateGreaterThan, "dateGreaterThan");
    function dateGreaterThanOrEqual(value, options) {
      const expected = `expected >= ${value.toISOString()}`;
      return dateComparator(greaterThanOrEqual, "s.date().greaterThanOrEqual()", expected, value.getTime(), options);
    }
    __name(dateGreaterThanOrEqual, "dateGreaterThanOrEqual");
    __name2(dateGreaterThanOrEqual, "dateGreaterThanOrEqual");
    function dateEqual(value, options) {
      const expected = `expected === ${value.toISOString()}`;
      return dateComparator(equal, "s.date().equal()", expected, value.getTime(), options);
    }
    __name(dateEqual, "dateEqual");
    __name2(dateEqual, "dateEqual");
    function dateNotEqual(value, options) {
      const expected = `expected !== ${value.toISOString()}`;
      return dateComparator(notEqual, "s.date().notEqual()", expected, value.getTime(), options);
    }
    __name(dateNotEqual, "dateNotEqual");
    __name2(dateNotEqual, "dateNotEqual");
    function dateInvalid(options) {
      return {
        run(input) {
          return Number.isNaN(input.getTime()) ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.date().invalid()", options?.message ?? "Invalid Date value", input, "expected === NaN"));
        }
      };
    }
    __name(dateInvalid, "dateInvalid");
    __name2(dateInvalid, "dateInvalid");
    function dateValid(options) {
      return {
        run(input) {
          return Number.isNaN(input.getTime()) ? Result.err(new ExpectedConstraintError("s.date().valid()", options?.message ?? "Invalid Date value", input, "expected !== NaN")) : Result.ok(input);
        }
      };
    }
    __name(dateValid, "dateValid");
    __name2(dateValid, "dateValid");
    var _DateValidator = /* @__PURE__ */ __name(class _DateValidator extends BaseValidator {
      lessThan(date, options = this.validatorOptions) {
        return this.addConstraint(dateLessThan(new Date(date), options));
      }
      lessThanOrEqual(date, options = this.validatorOptions) {
        return this.addConstraint(dateLessThanOrEqual(new Date(date), options));
      }
      greaterThan(date, options = this.validatorOptions) {
        return this.addConstraint(dateGreaterThan(new Date(date), options));
      }
      greaterThanOrEqual(date, options = this.validatorOptions) {
        return this.addConstraint(dateGreaterThanOrEqual(new Date(date), options));
      }
      equal(date, options = this.validatorOptions) {
        const resolved = new Date(date);
        return Number.isNaN(resolved.getTime()) ? this.invalid(options) : this.addConstraint(dateEqual(resolved, options));
      }
      notEqual(date, options = this.validatorOptions) {
        const resolved = new Date(date);
        return Number.isNaN(resolved.getTime()) ? this.valid(options) : this.addConstraint(dateNotEqual(resolved, options));
      }
      valid(options = this.validatorOptions) {
        return this.addConstraint(dateValid(options));
      }
      invalid(options = this.validatorOptions) {
        return this.addConstraint(dateInvalid(options));
      }
      handle(value) {
        return value instanceof Date ? Result.ok(value) : Result.err(new ValidationError("s.date()", this.validatorOptions.message ?? "Expected a Date", value));
      }
    }, "_DateValidator");
    __name2(_DateValidator, "DateValidator");
    var DateValidator = _DateValidator;
    var _ExpectedValidationError = /* @__PURE__ */ __name(class _ExpectedValidationError extends ValidationError {
      constructor(validator, message, given, expected) {
        super(validator, message, given);
        this.expected = expected;
      }
      toJSON() {
        return {
          name: this.name,
          validator: this.validator,
          given: this.given,
          expected: this.expected,
          message: this.message
        };
      }
      [customInspectSymbolStackLess](depth, options) {
        const validator = options.stylize(this.validator, "string");
        if (depth < 0) {
          return options.stylize(`[ExpectedValidationError: ${validator}]`, "special");
        }
        const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1 };
        const padding = `
  ${options.stylize("|", "undefined")} `;
        const expected = inspect2(this.expected, newOptions).replace(/\n/g, padding);
        const given = inspect2(this.given, newOptions).replace(/\n/g, padding);
        const header = `${options.stylize("ExpectedValidationError", "special")} > ${validator}`;
        const message = options.stylize(this.message, "regexp");
        const expectedBlock = `
  ${options.stylize("Expected:", "string")}${padding}${expected}`;
        const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
        return `${header}
  ${message}
${expectedBlock}
${givenBlock}`;
      }
    }, "_ExpectedValidationError");
    __name2(_ExpectedValidationError, "ExpectedValidationError");
    var ExpectedValidationError = _ExpectedValidationError;
    var _InstanceValidator = /* @__PURE__ */ __name(class _InstanceValidator extends BaseValidator {
      constructor(expected, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.expected = expected;
      }
      handle(value) {
        return value instanceof this.expected ? Result.ok(value) : Result.err(new ExpectedValidationError("s.instance(V)", this.validatorOptions.message ?? "Expected", value, this.expected));
      }
      clone() {
        return Reflect.construct(this.constructor, [this.expected, this.validatorOptions, this.constraints]);
      }
    }, "_InstanceValidator");
    __name2(_InstanceValidator, "InstanceValidator");
    var InstanceValidator = _InstanceValidator;
    var _LiteralValidator = /* @__PURE__ */ __name(class _LiteralValidator extends BaseValidator {
      constructor(literal, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.expected = literal;
      }
      handle(value) {
        return Object.is(value, this.expected) ? Result.ok(value) : Result.err(
          new ExpectedValidationError("s.literal(V)", this.validatorOptions.message ?? "Expected values to be equals", value, this.expected)
        );
      }
      clone() {
        return Reflect.construct(this.constructor, [this.expected, this.validatorOptions, this.constraints]);
      }
    }, "_LiteralValidator");
    __name2(_LiteralValidator, "LiteralValidator");
    var LiteralValidator = _LiteralValidator;
    var _NeverValidator = /* @__PURE__ */ __name(class _NeverValidator extends BaseValidator {
      handle(value) {
        return Result.err(new ValidationError("s.never()", this.validatorOptions.message ?? "Expected a value to not be passed", value));
      }
    }, "_NeverValidator");
    __name2(_NeverValidator, "NeverValidator");
    var NeverValidator = _NeverValidator;
    var _NullishValidator = /* @__PURE__ */ __name(class _NullishValidator extends BaseValidator {
      handle(value) {
        return value === void 0 || value === null ? Result.ok(value) : Result.err(new ValidationError("s.nullish()", this.validatorOptions.message ?? "Expected undefined or null", value));
      }
    }, "_NullishValidator");
    __name2(_NullishValidator, "NullishValidator");
    var NullishValidator = _NullishValidator;
    function numberComparator(comparator, name, expected, number, options) {
      return {
        run(input) {
          return comparator(input, number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid number value", input, expected));
        }
      };
    }
    __name(numberComparator, "numberComparator");
    __name2(numberComparator, "numberComparator");
    function numberLessThan(value, options) {
      const expected = `expected < ${value}`;
      return numberComparator(lessThan, "s.number().lessThan()", expected, value, options);
    }
    __name(numberLessThan, "numberLessThan");
    __name2(numberLessThan, "numberLessThan");
    function numberLessThanOrEqual(value, options) {
      const expected = `expected <= ${value}`;
      return numberComparator(lessThanOrEqual, "s.number().lessThanOrEqual()", expected, value, options);
    }
    __name(numberLessThanOrEqual, "numberLessThanOrEqual");
    __name2(numberLessThanOrEqual, "numberLessThanOrEqual");
    function numberGreaterThan(value, options) {
      const expected = `expected > ${value}`;
      return numberComparator(greaterThan, "s.number().greaterThan()", expected, value, options);
    }
    __name(numberGreaterThan, "numberGreaterThan");
    __name2(numberGreaterThan, "numberGreaterThan");
    function numberGreaterThanOrEqual(value, options) {
      const expected = `expected >= ${value}`;
      return numberComparator(greaterThanOrEqual, "s.number().greaterThanOrEqual()", expected, value, options);
    }
    __name(numberGreaterThanOrEqual, "numberGreaterThanOrEqual");
    __name2(numberGreaterThanOrEqual, "numberGreaterThanOrEqual");
    function numberEqual(value, options) {
      const expected = `expected === ${value}`;
      return numberComparator(equal, "s.number().equal()", expected, value, options);
    }
    __name(numberEqual, "numberEqual");
    __name2(numberEqual, "numberEqual");
    function numberNotEqual(value, options) {
      const expected = `expected !== ${value}`;
      return numberComparator(notEqual, "s.number().notEqual()", expected, value, options);
    }
    __name(numberNotEqual, "numberNotEqual");
    __name2(numberNotEqual, "numberNotEqual");
    function numberInt(options) {
      return {
        run(input) {
          return Number.isInteger(input) ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.number().int()",
              options?.message ?? "Given value is not an integer",
              input,
              "Number.isInteger(expected) to be true"
            )
          );
        }
      };
    }
    __name(numberInt, "numberInt");
    __name2(numberInt, "numberInt");
    function numberSafeInt(options) {
      return {
        run(input) {
          return Number.isSafeInteger(input) ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.number().safeInt()",
              options?.message ?? "Given value is not a safe integer",
              input,
              "Number.isSafeInteger(expected) to be true"
            )
          );
        }
      };
    }
    __name(numberSafeInt, "numberSafeInt");
    __name2(numberSafeInt, "numberSafeInt");
    function numberFinite(options) {
      return {
        run(input) {
          return Number.isFinite(input) ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.number().finite()",
              options?.message ?? "Given value is not finite",
              input,
              "Number.isFinite(expected) to be true"
            )
          );
        }
      };
    }
    __name(numberFinite, "numberFinite");
    __name2(numberFinite, "numberFinite");
    function numberNaN(options) {
      return {
        run(input) {
          return Number.isNaN(input) ? Result.ok(input) : Result.err(
            new ExpectedConstraintError("s.number().equal(NaN)", options?.message ?? "Invalid number value", input, "expected === NaN")
          );
        }
      };
    }
    __name(numberNaN, "numberNaN");
    __name2(numberNaN, "numberNaN");
    function numberNotNaN(options) {
      return {
        run(input) {
          return Number.isNaN(input) ? Result.err(
            new ExpectedConstraintError("s.number().notEqual(NaN)", options?.message ?? "Invalid number value", input, "expected !== NaN")
          ) : Result.ok(input);
        }
      };
    }
    __name(numberNotNaN, "numberNotNaN");
    __name2(numberNotNaN, "numberNotNaN");
    function numberDivisibleBy(divider, options) {
      const expected = `expected % ${divider} === 0`;
      return {
        run(input) {
          return input % divider === 0 ? Result.ok(input) : Result.err(new ExpectedConstraintError("s.number().divisibleBy()", options?.message ?? "Number is not divisible", input, expected));
        }
      };
    }
    __name(numberDivisibleBy, "numberDivisibleBy");
    __name2(numberDivisibleBy, "numberDivisibleBy");
    var _NumberValidator = /* @__PURE__ */ __name(class _NumberValidator extends BaseValidator {
      lessThan(number, options = this.validatorOptions) {
        return this.addConstraint(numberLessThan(number, options));
      }
      lessThanOrEqual(number, options = this.validatorOptions) {
        return this.addConstraint(numberLessThanOrEqual(number, options));
      }
      greaterThan(number, options = this.validatorOptions) {
        return this.addConstraint(numberGreaterThan(number, options));
      }
      greaterThanOrEqual(number, options = this.validatorOptions) {
        return this.addConstraint(numberGreaterThanOrEqual(number, options));
      }
      equal(number, options = this.validatorOptions) {
        return Number.isNaN(number) ? this.addConstraint(numberNaN(options)) : this.addConstraint(numberEqual(number, options));
      }
      notEqual(number, options = this.validatorOptions) {
        return Number.isNaN(number) ? this.addConstraint(numberNotNaN(options)) : this.addConstraint(numberNotEqual(number, options));
      }
      int(options = this.validatorOptions) {
        return this.addConstraint(numberInt(options));
      }
      safeInt(options = this.validatorOptions) {
        return this.addConstraint(numberSafeInt(options));
      }
      finite(options = this.validatorOptions) {
        return this.addConstraint(numberFinite(options));
      }
      positive(options = this.validatorOptions) {
        return this.greaterThanOrEqual(0, options);
      }
      negative(options = this.validatorOptions) {
        return this.lessThan(0, options);
      }
      divisibleBy(divider, options = this.validatorOptions) {
        return this.addConstraint(numberDivisibleBy(divider, options));
      }
      abs(options = this.validatorOptions) {
        return this.transform(Math.abs, options);
      }
      sign(options = this.validatorOptions) {
        return this.transform(Math.sign, options);
      }
      trunc(options = this.validatorOptions) {
        return this.transform(Math.trunc, options);
      }
      floor(options = this.validatorOptions) {
        return this.transform(Math.floor, options);
      }
      fround(options = this.validatorOptions) {
        return this.transform(Math.fround, options);
      }
      round(options = this.validatorOptions) {
        return this.transform(Math.round, options);
      }
      ceil(options = this.validatorOptions) {
        return this.transform(Math.ceil, options);
      }
      handle(value) {
        return typeof value === "number" ? Result.ok(value) : Result.err(new ValidationError("s.number()", this.validatorOptions.message ?? "Expected a number primitive", value));
      }
    }, "_NumberValidator");
    __name2(_NumberValidator, "NumberValidator");
    var NumberValidator = _NumberValidator;
    var _MissingPropertyError = /* @__PURE__ */ __name(class _MissingPropertyError extends BaseError {
      constructor(property, validatorOptions) {
        super(validatorOptions?.message ?? "A required property is missing");
        this.property = property;
      }
      toJSON() {
        return {
          name: this.name,
          message: this.message,
          property: this.property
        };
      }
      [customInspectSymbolStackLess](depth, options) {
        const property = options.stylize(this.property.toString(), "string");
        if (depth < 0) {
          return options.stylize(`[MissingPropertyError: ${property}]`, "special");
        }
        const header = `${options.stylize("MissingPropertyError", "special")} > ${property}`;
        const message = options.stylize(this.message, "regexp");
        return `${header}
  ${message}`;
      }
    }, "_MissingPropertyError");
    __name2(_MissingPropertyError, "MissingPropertyError");
    var MissingPropertyError = _MissingPropertyError;
    var _UnknownPropertyError = /* @__PURE__ */ __name(class _UnknownPropertyError extends BaseError {
      constructor(property, value, options) {
        super(options?.message ?? "Received unexpected property");
        this.property = property;
        this.value = value;
      }
      toJSON() {
        return {
          name: this.name,
          message: this.message,
          property: this.property,
          value: this.value
        };
      }
      [customInspectSymbolStackLess](depth, options) {
        const property = options.stylize(this.property.toString(), "string");
        if (depth < 0) {
          return options.stylize(`[UnknownPropertyError: ${property}]`, "special");
        }
        const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };
        const padding = `
  ${options.stylize("|", "undefined")} `;
        const given = inspect2(this.value, newOptions).replace(/\n/g, padding);
        const header = `${options.stylize("UnknownPropertyError", "special")} > ${property}`;
        const message = options.stylize(this.message, "regexp");
        const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
        return `${header}
  ${message}
${givenBlock}`;
      }
    }, "_UnknownPropertyError");
    __name2(_UnknownPropertyError, "UnknownPropertyError");
    var UnknownPropertyError = _UnknownPropertyError;
    var _DefaultValidator = /* @__PURE__ */ __name(class _DefaultValidator extends BaseValidator {
      constructor(validator, value, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.validator = validator;
        this.defaultValue = value;
      }
      default(value, options = this.validatorOptions) {
        const clone = this.clone();
        clone.validatorOptions = options;
        clone.defaultValue = value;
        return clone;
      }
      handle(value) {
        return typeof value === "undefined" ? Result.ok(getValue(this.defaultValue)) : this.validator["handle"](value);
      }
      clone() {
        return Reflect.construct(this.constructor, [this.validator, this.defaultValue, this.validatorOptions, this.constraints]);
      }
    }, "_DefaultValidator");
    __name2(_DefaultValidator, "DefaultValidator");
    var DefaultValidator = _DefaultValidator;
    var _CombinedError = /* @__PURE__ */ __name(class _CombinedError extends BaseError {
      constructor(errors, validatorOptions) {
        super(validatorOptions?.message ?? "Received one or more errors");
        this.errors = errors;
      }
      [customInspectSymbolStackLess](depth, options) {
        if (depth < 0) {
          return options.stylize("[CombinedError]", "special");
        }
        const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };
        const padding = `
  ${options.stylize("|", "undefined")} `;
        const header = `${options.stylize("CombinedError", "special")} (${options.stylize(this.errors.length.toString(), "number")})`;
        const message = options.stylize(this.message, "regexp");
        const errors = this.errors.map((error, i3) => {
          const index = options.stylize((i3 + 1).toString(), "number");
          const body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\n/g, padding);
          return `  ${index} ${body}`;
        }).join("\n\n");
        return `${header}
  ${message}

${errors}`;
      }
    }, "_CombinedError");
    __name2(_CombinedError, "CombinedError");
    var CombinedError = _CombinedError;
    var _UnionValidator = /* @__PURE__ */ __name(class _UnionValidator2 extends BaseValidator {
      constructor(validators, validatorOptions, constraints = []) {
        super(validatorOptions, constraints);
        this.validators = validators;
      }
      optional(options = this.validatorOptions) {
        if (this.validators.length === 0)
          return new _UnionValidator2([new LiteralValidator(void 0, options)], this.validatorOptions, this.constraints);
        const [validator] = this.validators;
        if (validator instanceof LiteralValidator) {
          if (validator.expected === void 0)
            return this.clone();
          if (validator.expected === null) {
            return new _UnionValidator2(
              [new NullishValidator(options), ...this.validators.slice(1)],
              this.validatorOptions,
              this.constraints
            );
          }
        } else if (validator instanceof NullishValidator) {
          return this.clone();
        }
        return new _UnionValidator2([new LiteralValidator(void 0, options), ...this.validators], this.validatorOptions);
      }
      required(options = this.validatorOptions) {
        if (this.validators.length === 0)
          return this.clone();
        const [validator] = this.validators;
        if (validator instanceof LiteralValidator) {
          if (validator.expected === void 0) {
            return new _UnionValidator2(this.validators.slice(1), this.validatorOptions, this.constraints);
          }
        } else if (validator instanceof NullishValidator) {
          return new _UnionValidator2(
            [new LiteralValidator(null, options), ...this.validators.slice(1)],
            this.validatorOptions,
            this.constraints
          );
        }
        return this.clone();
      }
      nullable(options = this.validatorOptions) {
        if (this.validators.length === 0) {
          return new _UnionValidator2([new LiteralValidator(null, options)], this.validatorOptions, this.constraints);
        }
        const [validator] = this.validators;
        if (validator instanceof LiteralValidator) {
          if (validator.expected === null)
            return this.clone();
          if (validator.expected === void 0) {
            return new _UnionValidator2(
              [new NullishValidator(options), ...this.validators.slice(1)],
              this.validatorOptions,
              this.constraints
            );
          }
        } else if (validator instanceof NullishValidator) {
          return this.clone();
        }
        return new _UnionValidator2([new LiteralValidator(null, options), ...this.validators], this.validatorOptions);
      }
      nullish(options = this.validatorOptions) {
        if (this.validators.length === 0) {
          return new _UnionValidator2([new NullishValidator(options)], options, this.constraints);
        }
        const [validator] = this.validators;
        if (validator instanceof LiteralValidator) {
          if (validator.expected === null || validator.expected === void 0) {
            return new _UnionValidator2(
              [new NullishValidator(options), ...this.validators.slice(1)],
              options,
              this.constraints
            );
          }
        } else if (validator instanceof NullishValidator) {
          return this.clone();
        }
        return new _UnionValidator2([new NullishValidator(options), ...this.validators], options);
      }
      or(...predicates) {
        return new _UnionValidator2([...this.validators, ...predicates], this.validatorOptions);
      }
      clone() {
        return Reflect.construct(this.constructor, [this.validators, this.validatorOptions, this.constraints]);
      }
      handle(value) {
        const errors = [];
        for (const validator of this.validators) {
          const result = validator.run(value);
          if (result.isOk())
            return result;
          errors.push(result.error);
        }
        return Result.err(new CombinedError(errors, this.validatorOptions));
      }
    }, "_UnionValidator");
    __name2(_UnionValidator, "UnionValidator");
    var UnionValidator = _UnionValidator;
    var _ObjectValidator = /* @__PURE__ */ __name(class _ObjectValidator2 extends BaseValidator {
      constructor(shape, strategy = 0, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.keys = [];
        this.requiredKeys = /* @__PURE__ */ new Map();
        this.possiblyUndefinedKeys = /* @__PURE__ */ new Map();
        this.possiblyUndefinedKeysWithDefaults = /* @__PURE__ */ new Map();
        this.shape = shape;
        this.strategy = strategy;
        switch (this.strategy) {
          case 0:
            this.handleStrategy = (value) => this.handleIgnoreStrategy(value);
            break;
          case 1: {
            this.handleStrategy = (value) => this.handleStrictStrategy(value);
            break;
          }
          case 2:
            this.handleStrategy = (value) => this.handlePassthroughStrategy(value);
            break;
        }
        const shapeEntries = Object.entries(shape);
        this.keys = shapeEntries.map(([key]) => key);
        for (const [key, validator] of shapeEntries) {
          if (validator instanceof UnionValidator) {
            const [possiblyLiteralOrNullishPredicate] = validator["validators"];
            if (possiblyLiteralOrNullishPredicate instanceof NullishValidator) {
              this.possiblyUndefinedKeys.set(key, validator);
            } else if (possiblyLiteralOrNullishPredicate instanceof LiteralValidator) {
              if (possiblyLiteralOrNullishPredicate.expected === void 0) {
                this.possiblyUndefinedKeys.set(key, validator);
              } else {
                this.requiredKeys.set(key, validator);
              }
            } else if (validator instanceof DefaultValidator) {
              this.possiblyUndefinedKeysWithDefaults.set(key, validator);
            } else {
              this.requiredKeys.set(key, validator);
            }
          } else if (validator instanceof NullishValidator) {
            this.possiblyUndefinedKeys.set(key, validator);
          } else if (validator instanceof LiteralValidator) {
            if (validator.expected === void 0) {
              this.possiblyUndefinedKeys.set(key, validator);
            } else {
              this.requiredKeys.set(key, validator);
            }
          } else if (validator instanceof DefaultValidator) {
            this.possiblyUndefinedKeysWithDefaults.set(key, validator);
          } else {
            this.requiredKeys.set(key, validator);
          }
        }
      }
      strict(options = this.validatorOptions) {
        return Reflect.construct(this.constructor, [this.shape, 1, options, this.constraints]);
      }
      ignore(options = this.validatorOptions) {
        return Reflect.construct(this.constructor, [this.shape, 0, options, this.constraints]);
      }
      passthrough(options = this.validatorOptions) {
        return Reflect.construct(this.constructor, [this.shape, 2, options, this.constraints]);
      }
      partial(options = this.validatorOptions) {
        const shape = Object.fromEntries(this.keys.map((key) => [key, this.shape[key].optional(options)]));
        return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
      }
      required(options = this.validatorOptions) {
        const shape = Object.fromEntries(
          this.keys.map((key) => {
            let validator = this.shape[key];
            if (validator instanceof UnionValidator)
              validator = validator.required(options);
            return [key, validator];
          })
        );
        return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
      }
      extend(schema, options = this.validatorOptions) {
        const shape = { ...this.shape, ...schema instanceof _ObjectValidator2 ? schema.shape : schema };
        return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
      }
      pick(keys, options = this.validatorOptions) {
        const shape = Object.fromEntries(
          keys.filter((key) => this.keys.includes(key)).map((key) => [key, this.shape[key]])
        );
        return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
      }
      omit(keys, options = this.validatorOptions) {
        const shape = Object.fromEntries(
          this.keys.filter((key) => !keys.includes(key)).map((key) => [key, this.shape[key]])
        );
        return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);
      }
      handle(value) {
        const typeOfValue = typeof value;
        if (typeOfValue !== "object") {
          return Result.err(
            new ValidationError(
              "s.object(T)",
              this.validatorOptions.message ?? `Expected the value to be an object, but received ${typeOfValue} instead`,
              value
            )
          );
        }
        if (value === null) {
          return Result.err(new ValidationError("s.object(T)", this.validatorOptions.message ?? "Expected the value to not be null", value));
        }
        if (Array.isArray(value)) {
          return Result.err(new ValidationError("s.object(T)", this.validatorOptions.message ?? "Expected the value to not be an array", value));
        }
        if (!this.shouldRunConstraints) {
          return Result.ok(value);
        }
        for (const predicate of Object.values(this.shape)) {
          predicate.setParent(this.parent ?? value);
        }
        return this.handleStrategy(value);
      }
      clone() {
        return Reflect.construct(this.constructor, [this.shape, this.strategy, this.validatorOptions, this.constraints]);
      }
      handleIgnoreStrategy(value) {
        const errors = [];
        const finalObject = {};
        const inputEntries = new Map(Object.entries(value));
        const runPredicate = /* @__PURE__ */ __name2((key, predicate) => {
          const result = predicate.run(value[key]);
          if (result.isOk()) {
            finalObject[key] = result.value;
          } else {
            const error = result.error;
            errors.push([key, error]);
          }
        }, "runPredicate");
        for (const [key, predicate] of this.requiredKeys) {
          if (inputEntries.delete(key)) {
            runPredicate(key, predicate);
          } else {
            errors.push([key, new MissingPropertyError(key, this.validatorOptions)]);
          }
        }
        for (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {
          inputEntries.delete(key);
          runPredicate(key, validator);
        }
        if (inputEntries.size === 0) {
          return errors.length === 0 ? Result.ok(finalObject) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
        }
        const checkInputEntriesInsteadOfSchemaKeys = this.possiblyUndefinedKeys.size > inputEntries.size;
        if (checkInputEntriesInsteadOfSchemaKeys) {
          for (const [key] of inputEntries) {
            const predicate = this.possiblyUndefinedKeys.get(key);
            if (predicate) {
              runPredicate(key, predicate);
            }
          }
        } else {
          for (const [key, predicate] of this.possiblyUndefinedKeys) {
            if (inputEntries.delete(key)) {
              runPredicate(key, predicate);
            }
          }
        }
        return errors.length === 0 ? Result.ok(finalObject) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
      }
      handleStrictStrategy(value) {
        const errors = [];
        const finalResult = {};
        const inputEntries = new Map(Object.entries(value));
        const runPredicate = /* @__PURE__ */ __name2((key, predicate) => {
          const result = predicate.run(value[key]);
          if (result.isOk()) {
            finalResult[key] = result.value;
          } else {
            const error = result.error;
            errors.push([key, error]);
          }
        }, "runPredicate");
        for (const [key, predicate] of this.requiredKeys) {
          if (inputEntries.delete(key)) {
            runPredicate(key, predicate);
          } else {
            errors.push([key, new MissingPropertyError(key, this.validatorOptions)]);
          }
        }
        for (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {
          inputEntries.delete(key);
          runPredicate(key, validator);
        }
        for (const [key, predicate] of this.possiblyUndefinedKeys) {
          if (inputEntries.size === 0) {
            break;
          }
          if (inputEntries.delete(key)) {
            runPredicate(key, predicate);
          }
        }
        if (inputEntries.size !== 0) {
          for (const [key, value2] of inputEntries.entries()) {
            errors.push([key, new UnknownPropertyError(key, value2, this.validatorOptions)]);
          }
        }
        return errors.length === 0 ? Result.ok(finalResult) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
      }
      handlePassthroughStrategy(value) {
        const result = this.handleIgnoreStrategy(value);
        return result.isErr() ? result : Result.ok({ ...value, ...result.value });
      }
    }, "_ObjectValidator");
    __name2(_ObjectValidator, "ObjectValidator");
    var ObjectValidator = _ObjectValidator;
    var _PassthroughValidator = /* @__PURE__ */ __name(class _PassthroughValidator extends BaseValidator {
      handle(value) {
        return Result.ok(value);
      }
    }, "_PassthroughValidator");
    __name2(_PassthroughValidator, "PassthroughValidator");
    var PassthroughValidator = _PassthroughValidator;
    var _RecordValidator = /* @__PURE__ */ __name(class _RecordValidator extends BaseValidator {
      constructor(validator, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.validator = validator;
      }
      clone() {
        return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);
      }
      handle(value) {
        if (typeof value !== "object") {
          return Result.err(new ValidationError("s.record(T)", this.validatorOptions.message ?? "Expected an object", value));
        }
        if (value === null) {
          return Result.err(new ValidationError("s.record(T)", this.validatorOptions.message ?? "Expected the value to not be null", value));
        }
        if (Array.isArray(value)) {
          return Result.err(new ValidationError("s.record(T)", this.validatorOptions.message ?? "Expected the value to not be an array", value));
        }
        if (!this.shouldRunConstraints) {
          return Result.ok(value);
        }
        const errors = [];
        const transformed = {};
        for (const [key, val] of Object.entries(value)) {
          const result = this.validator.run(val);
          if (result.isOk())
            transformed[key] = result.value;
          else
            errors.push([key, result.error]);
        }
        return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
      }
    }, "_RecordValidator");
    __name2(_RecordValidator, "RecordValidator");
    var RecordValidator = _RecordValidator;
    var _SetValidator = /* @__PURE__ */ __name(class _SetValidator extends BaseValidator {
      constructor(validator, validatorOptions, constraints = []) {
        super(validatorOptions, constraints);
        this.validator = validator;
      }
      clone() {
        return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);
      }
      handle(values) {
        if (!(values instanceof Set)) {
          return Result.err(new ValidationError("s.set(T)", this.validatorOptions.message ?? "Expected a set", values));
        }
        if (!this.shouldRunConstraints) {
          return Result.ok(values);
        }
        const errors = [];
        const transformed = /* @__PURE__ */ new Set();
        for (const value of values) {
          const result = this.validator.run(value);
          if (result.isOk())
            transformed.add(result.value);
          else
            errors.push(result.error);
        }
        return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedError(errors, this.validatorOptions));
      }
    }, "_SetValidator");
    __name2(_SetValidator, "SetValidator");
    var SetValidator = _SetValidator;
    var accountRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]$/i;
    function validateEmail(email) {
      if (!email)
        return false;
      const atIndex = email.indexOf("@");
      if (atIndex === -1)
        return false;
      if (atIndex > 64)
        return false;
      const domainIndex = atIndex + 1;
      if (email.includes("@", domainIndex))
        return false;
      if (email.length - domainIndex > 255)
        return false;
      let dotIndex = email.indexOf(".", domainIndex);
      if (dotIndex === -1)
        return false;
      let lastDotIndex = domainIndex;
      do {
        if (dotIndex - lastDotIndex > 63)
          return false;
        lastDotIndex = dotIndex + 1;
      } while ((dotIndex = email.indexOf(".", lastDotIndex)) !== -1);
      if (email.length - lastDotIndex > 63)
        return false;
      return accountRegex.test(email.slice(0, atIndex)) && validateEmailDomain(email.slice(domainIndex));
    }
    __name(validateEmail, "validateEmail");
    __name2(validateEmail, "validateEmail");
    function validateEmailDomain(domain) {
      try {
        return new URL(`http://${domain}`).hostname === domain;
      } catch {
        return false;
      }
    }
    __name(validateEmailDomain, "validateEmailDomain");
    __name2(validateEmailDomain, "validateEmailDomain");
    var v4Seg = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
    var v4Str = `(${v4Seg}[.]){3}${v4Seg}`;
    var IPv4Reg = new RegExp(`^${v4Str}$`);
    var v6Seg = "(?:[0-9a-fA-F]{1,4})";
    var IPv6Reg = new RegExp(
      `^((?:${v6Seg}:){7}(?:${v6Seg}|:)|(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:)))(%[0-9a-zA-Z-.:]{1,})?$`
    );
    function isIPv4(s4) {
      return IPv4Reg.test(s4);
    }
    __name(isIPv4, "isIPv4");
    __name2(isIPv4, "isIPv4");
    function isIPv6(s4) {
      return IPv6Reg.test(s4);
    }
    __name(isIPv6, "isIPv6");
    __name2(isIPv6, "isIPv6");
    function isIP(s4) {
      if (isIPv4(s4))
        return 4;
      if (isIPv6(s4))
        return 6;
      return 0;
    }
    __name(isIP, "isIP");
    __name2(isIP, "isIP");
    var phoneNumberRegex = /^((?:\+|0{0,2})\d{1,2}\s?)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/;
    function validatePhoneNumber(input) {
      return phoneNumberRegex.test(input);
    }
    __name(validatePhoneNumber, "validatePhoneNumber");
    __name2(validatePhoneNumber, "validatePhoneNumber");
    var _MultiplePossibilitiesConstraintError = /* @__PURE__ */ __name(class _MultiplePossibilitiesConstraintError extends BaseConstraintError {
      constructor(constraint, message, given, expected) {
        super(constraint, message, given);
        this.expected = expected;
      }
      toJSON() {
        return {
          name: this.name,
          message: this.message,
          constraint: this.constraint,
          given: this.given,
          expected: this.expected
        };
      }
      [customInspectSymbolStackLess](depth, options) {
        const constraint = options.stylize(this.constraint, "string");
        if (depth < 0) {
          return options.stylize(`[MultiplePossibilitiesConstraintError: ${constraint}]`, "special");
        }
        const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1 };
        const verticalLine = options.stylize("|", "undefined");
        const padding = `
  ${verticalLine} `;
        const given = inspect2(this.given, newOptions).replace(/\n/g, padding);
        const header = `${options.stylize("MultiplePossibilitiesConstraintError", "special")} > ${constraint}`;
        const message = options.stylize(this.message, "regexp");
        const expectedPadding = `
  ${verticalLine} - `;
        const expectedBlock = `
  ${options.stylize("Expected any of the following:", "string")}${expectedPadding}${this.expected.map((possible) => options.stylize(possible, "boolean")).join(expectedPadding)}`;
        const givenBlock = `
  ${options.stylize("Received:", "regexp")}${padding}${given}`;
        return `${header}
  ${message}
${expectedBlock}
${givenBlock}`;
      }
    }, "_MultiplePossibilitiesConstraintError");
    __name2(_MultiplePossibilitiesConstraintError, "MultiplePossibilitiesConstraintError");
    var MultiplePossibilitiesConstraintError = _MultiplePossibilitiesConstraintError;
    function combinedErrorFn(...fns) {
      switch (fns.length) {
        case 0:
          return () => null;
        case 1:
          return fns[0];
        case 2: {
          const [fn0, fn1] = fns;
          return (...params) => fn0(...params) || fn1(...params);
        }
        default: {
          return (...params) => {
            for (const fn of fns) {
              const result = fn(...params);
              if (result)
                return result;
            }
            return null;
          };
        }
      }
    }
    __name(combinedErrorFn, "combinedErrorFn");
    __name2(combinedErrorFn, "combinedErrorFn");
    function createUrlValidators(options, validatorOptions) {
      const fns = [];
      if (options?.allowedProtocols?.length)
        fns.push(allowedProtocolsFn(options.allowedProtocols, validatorOptions));
      if (options?.allowedDomains?.length)
        fns.push(allowedDomainsFn(options.allowedDomains, validatorOptions));
      return combinedErrorFn(...fns);
    }
    __name(createUrlValidators, "createUrlValidators");
    __name2(createUrlValidators, "createUrlValidators");
    function allowedProtocolsFn(allowedProtocols, options) {
      return (input, url) => allowedProtocols.includes(url.protocol) ? null : new MultiplePossibilitiesConstraintError("s.string().url()", options?.message ?? "Invalid URL protocol", input, allowedProtocols);
    }
    __name(allowedProtocolsFn, "allowedProtocolsFn");
    __name2(allowedProtocolsFn, "allowedProtocolsFn");
    function allowedDomainsFn(allowedDomains, options) {
      return (input, url) => allowedDomains.includes(url.hostname) ? null : new MultiplePossibilitiesConstraintError("s.string().url()", options?.message ?? "Invalid URL domain", input, allowedDomains);
    }
    __name(allowedDomainsFn, "allowedDomainsFn");
    __name2(allowedDomainsFn, "allowedDomainsFn");
    function stringLengthComparator(comparator, name, expected, length, options) {
      return {
        run(input) {
          return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid string length", input, expected));
        }
      };
    }
    __name(stringLengthComparator, "stringLengthComparator");
    __name2(stringLengthComparator, "stringLengthComparator");
    function stringLengthLessThan(length, options) {
      const expected = `expected.length < ${length}`;
      return stringLengthComparator(lessThan, "s.string().lengthLessThan()", expected, length, options);
    }
    __name(stringLengthLessThan, "stringLengthLessThan");
    __name2(stringLengthLessThan, "stringLengthLessThan");
    function stringLengthLessThanOrEqual(length, options) {
      const expected = `expected.length <= ${length}`;
      return stringLengthComparator(lessThanOrEqual, "s.string().lengthLessThanOrEqual()", expected, length, options);
    }
    __name(stringLengthLessThanOrEqual, "stringLengthLessThanOrEqual");
    __name2(stringLengthLessThanOrEqual, "stringLengthLessThanOrEqual");
    function stringLengthGreaterThan(length, options) {
      const expected = `expected.length > ${length}`;
      return stringLengthComparator(greaterThan, "s.string().lengthGreaterThan()", expected, length, options);
    }
    __name(stringLengthGreaterThan, "stringLengthGreaterThan");
    __name2(stringLengthGreaterThan, "stringLengthGreaterThan");
    function stringLengthGreaterThanOrEqual(length, options) {
      const expected = `expected.length >= ${length}`;
      return stringLengthComparator(greaterThanOrEqual, "s.string().lengthGreaterThanOrEqual()", expected, length, options);
    }
    __name(stringLengthGreaterThanOrEqual, "stringLengthGreaterThanOrEqual");
    __name2(stringLengthGreaterThanOrEqual, "stringLengthGreaterThanOrEqual");
    function stringLengthEqual(length, options) {
      const expected = `expected.length === ${length}`;
      return stringLengthComparator(equal, "s.string().lengthEqual()", expected, length, options);
    }
    __name(stringLengthEqual, "stringLengthEqual");
    __name2(stringLengthEqual, "stringLengthEqual");
    function stringLengthNotEqual(length, options) {
      const expected = `expected.length !== ${length}`;
      return stringLengthComparator(notEqual, "s.string().lengthNotEqual()", expected, length, options);
    }
    __name(stringLengthNotEqual, "stringLengthNotEqual");
    __name2(stringLengthNotEqual, "stringLengthNotEqual");
    function stringEmail(options) {
      return {
        run(input) {
          return validateEmail(input) ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.string().email()",
              options?.message ?? "Invalid email address",
              input,
              "expected to be an email address"
            )
          );
        }
      };
    }
    __name(stringEmail, "stringEmail");
    __name2(stringEmail, "stringEmail");
    function stringRegexValidator(type, expected, regex, options) {
      return {
        run(input) {
          return regex.test(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(type, options?.message ?? "Invalid string format", input, expected));
        }
      };
    }
    __name(stringRegexValidator, "stringRegexValidator");
    __name2(stringRegexValidator, "stringRegexValidator");
    function stringUrl(options, validatorOptions) {
      const validatorFn = createUrlValidators(options, validatorOptions);
      return {
        run(input) {
          let url;
          try {
            url = new URL(input);
          } catch {
            return Result.err(
              new ExpectedConstraintError("s.string().url()", validatorOptions?.message ?? "Invalid URL", input, "expected to match a URL")
            );
          }
          const validatorFnResult = validatorFn(input, url);
          if (validatorFnResult === null)
            return Result.ok(input);
          return Result.err(validatorFnResult);
        }
      };
    }
    __name(stringUrl, "stringUrl");
    __name2(stringUrl, "stringUrl");
    function stringIp(version, options) {
      const ipVersion = version ? `v${version}` : "";
      const validatorFn = version === 4 ? isIPv4 : version === 6 ? isIPv6 : isIP;
      const name = `s.string().ip${ipVersion}()`;
      const message = `Invalid IP${ipVersion} address`;
      const expected = `expected to be an IP${ipVersion} address`;
      return {
        run(input) {
          return validatorFn(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? message, input, expected));
        }
      };
    }
    __name(stringIp, "stringIp");
    __name2(stringIp, "stringIp");
    function stringRegex(regex, options) {
      return stringRegexValidator("s.string().regex()", `expected ${regex}.test(expected) to be true`, regex, options);
    }
    __name(stringRegex, "stringRegex");
    __name2(stringRegex, "stringRegex");
    function stringUuid({ version = 4, nullable = false } = {}, options) {
      version ?? (version = "1-5");
      const regex = new RegExp(
        `^(?:[0-9A-F]{8}-[0-9A-F]{4}-[${version}][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}${nullable ? "|00000000-0000-0000-0000-000000000000" : ""})$`,
        "i"
      );
      const expected = `expected to match UUID${typeof version === "number" ? `v${version}` : ` in range of ${version}`}`;
      return stringRegexValidator("s.string().uuid()", expected, regex, options);
    }
    __name(stringUuid, "stringUuid");
    __name2(stringUuid, "stringUuid");
    function stringDate(options) {
      return {
        run(input) {
          const time = Date.parse(input);
          return Number.isNaN(time) ? Result.err(
            new ExpectedConstraintError(
              "s.string().date()",
              options?.message ?? "Invalid date string",
              input,
              "expected to be a valid date string (in the ISO 8601 or ECMA-262 format)"
            )
          ) : Result.ok(input);
        }
      };
    }
    __name(stringDate, "stringDate");
    __name2(stringDate, "stringDate");
    function stringPhone(options) {
      return {
        run(input) {
          return validatePhoneNumber(input) ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.string().phone()",
              options?.message ?? "Invalid phone number",
              input,
              "expected to be a phone number"
            )
          );
        }
      };
    }
    __name(stringPhone, "stringPhone");
    __name2(stringPhone, "stringPhone");
    var _StringValidator = /* @__PURE__ */ __name(class _StringValidator extends BaseValidator {
      lengthLessThan(length, options = this.validatorOptions) {
        return this.addConstraint(stringLengthLessThan(length, options));
      }
      lengthLessThanOrEqual(length, options = this.validatorOptions) {
        return this.addConstraint(stringLengthLessThanOrEqual(length, options));
      }
      lengthGreaterThan(length, options = this.validatorOptions) {
        return this.addConstraint(stringLengthGreaterThan(length, options));
      }
      lengthGreaterThanOrEqual(length, options = this.validatorOptions) {
        return this.addConstraint(stringLengthGreaterThanOrEqual(length, options));
      }
      lengthEqual(length, options = this.validatorOptions) {
        return this.addConstraint(stringLengthEqual(length, options));
      }
      lengthNotEqual(length, options = this.validatorOptions) {
        return this.addConstraint(stringLengthNotEqual(length, options));
      }
      email(options = this.validatorOptions) {
        return this.addConstraint(stringEmail(options));
      }
      url(options, validatorOptions = this.validatorOptions) {
        const urlOptions = this.isUrlOptions(options);
        if (urlOptions) {
          return this.addConstraint(stringUrl(options, validatorOptions));
        }
        return this.addConstraint(stringUrl(void 0, validatorOptions));
      }
      uuid(options, validatorOptions = this.validatorOptions) {
        const stringUuidOptions = this.isStringUuidOptions(options);
        if (stringUuidOptions) {
          return this.addConstraint(stringUuid(options, validatorOptions));
        }
        return this.addConstraint(stringUuid(void 0, validatorOptions));
      }
      regex(regex, options = this.validatorOptions) {
        return this.addConstraint(stringRegex(regex, options));
      }
      date(options = this.validatorOptions) {
        return this.addConstraint(stringDate(options));
      }
      ipv4(options = this.validatorOptions) {
        return this.ip(4, options);
      }
      ipv6(options = this.validatorOptions) {
        return this.ip(6, options);
      }
      ip(version, options = this.validatorOptions) {
        return this.addConstraint(stringIp(version, options));
      }
      phone(options = this.validatorOptions) {
        return this.addConstraint(stringPhone(options));
      }
      handle(value) {
        return typeof value === "string" ? Result.ok(value) : Result.err(new ValidationError("s.string()", this.validatorOptions.message ?? "Expected a string primitive", value));
      }
      isUrlOptions(options) {
        return options?.message === void 0;
      }
      isStringUuidOptions(options) {
        return options?.message === void 0;
      }
    }, "_StringValidator");
    __name2(_StringValidator, "StringValidator");
    var StringValidator = _StringValidator;
    var _TupleValidator = /* @__PURE__ */ __name(class _TupleValidator extends BaseValidator {
      constructor(validators, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.validators = [];
        this.validators = validators;
      }
      clone() {
        return Reflect.construct(this.constructor, [this.validators, this.validatorOptions, this.constraints]);
      }
      handle(values) {
        if (!Array.isArray(values)) {
          return Result.err(new ValidationError("s.tuple(T)", this.validatorOptions.message ?? "Expected an array", values));
        }
        if (values.length !== this.validators.length) {
          return Result.err(
            new ValidationError("s.tuple(T)", this.validatorOptions.message ?? `Expected an array of length ${this.validators.length}`, values)
          );
        }
        if (!this.shouldRunConstraints) {
          return Result.ok(values);
        }
        const errors = [];
        const transformed = [];
        for (let i3 = 0; i3 < values.length; i3++) {
          const result = this.validators[i3].run(values[i3]);
          if (result.isOk())
            transformed.push(result.value);
          else
            errors.push([i3, result.error]);
        }
        return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
      }
    }, "_TupleValidator");
    __name2(_TupleValidator, "TupleValidator");
    var TupleValidator = _TupleValidator;
    var _MapValidator = /* @__PURE__ */ __name(class _MapValidator extends BaseValidator {
      constructor(keyValidator, valueValidator, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.keyValidator = keyValidator;
        this.valueValidator = valueValidator;
      }
      clone() {
        return Reflect.construct(this.constructor, [this.keyValidator, this.valueValidator, this.validatorOptions, this.constraints]);
      }
      handle(value) {
        if (!(value instanceof Map)) {
          return Result.err(new ValidationError("s.map(K, V)", this.validatorOptions.message ?? "Expected a map", value));
        }
        if (!this.shouldRunConstraints) {
          return Result.ok(value);
        }
        const errors = [];
        const transformed = /* @__PURE__ */ new Map();
        for (const [key, val] of value.entries()) {
          const keyResult = this.keyValidator.run(key);
          const valueResult = this.valueValidator.run(val);
          const { length } = errors;
          if (keyResult.isErr())
            errors.push([key, keyResult.error]);
          if (valueResult.isErr())
            errors.push([key, valueResult.error]);
          if (errors.length === length)
            transformed.set(keyResult.value, valueResult.value);
        }
        return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));
      }
    }, "_MapValidator");
    __name2(_MapValidator, "MapValidator");
    var MapValidator = _MapValidator;
    var _LazyValidator = /* @__PURE__ */ __name(class _LazyValidator extends BaseValidator {
      constructor(validator, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.validator = validator;
      }
      clone() {
        return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);
      }
      handle(values) {
        return this.validator(values).run(values);
      }
    }, "_LazyValidator");
    __name2(_LazyValidator, "LazyValidator");
    var LazyValidator = _LazyValidator;
    var _UnknownEnumValueError = /* @__PURE__ */ __name(class _UnknownEnumValueError extends BaseError {
      constructor(value, keys, enumMappings, validatorOptions) {
        super(validatorOptions?.message ?? "Expected the value to be one of the following enum values:");
        this.value = value;
        this.enumKeys = keys;
        this.enumMappings = enumMappings;
      }
      toJSON() {
        return {
          name: this.name,
          message: this.message,
          value: this.value,
          enumKeys: this.enumKeys,
          enumMappings: [...this.enumMappings.entries()]
        };
      }
      [customInspectSymbolStackLess](depth, options) {
        const value = options.stylize(this.value.toString(), "string");
        if (depth < 0) {
          return options.stylize(`[UnknownEnumValueError: ${value}]`, "special");
        }
        const padding = `
  ${options.stylize("|", "undefined")} `;
        const pairs = this.enumKeys.map((key) => {
          const enumValue = this.enumMappings.get(key);
          return `${options.stylize(key, "string")} or ${options.stylize(
            enumValue.toString(),
            typeof enumValue === "number" ? "number" : "string"
          )}`;
        }).join(padding);
        const header = `${options.stylize("UnknownEnumValueError", "special")} > ${value}`;
        const message = options.stylize(this.message, "regexp");
        const pairsBlock = `${padding}${pairs}`;
        return `${header}
  ${message}
${pairsBlock}`;
      }
    }, "_UnknownEnumValueError");
    __name2(_UnknownEnumValueError, "UnknownEnumValueError");
    var UnknownEnumValueError = _UnknownEnumValueError;
    var _NativeEnumValidator = /* @__PURE__ */ __name(class _NativeEnumValidator extends BaseValidator {
      constructor(enumShape, validatorOptions = {}) {
        super(validatorOptions);
        this.hasNumericElements = false;
        this.enumMapping = /* @__PURE__ */ new Map();
        this.enumShape = enumShape;
        this.enumKeys = Object.keys(enumShape).filter((key) => {
          return typeof enumShape[enumShape[key]] !== "number";
        });
        for (const key of this.enumKeys) {
          const enumValue = enumShape[key];
          this.enumMapping.set(key, enumValue);
          this.enumMapping.set(enumValue, enumValue);
          if (typeof enumValue === "number") {
            this.hasNumericElements = true;
            this.enumMapping.set(`${enumValue}`, enumValue);
          }
        }
      }
      handle(value) {
        const typeOfValue = typeof value;
        if (typeOfValue === "number") {
          if (!this.hasNumericElements) {
            return Result.err(
              new ValidationError("s.nativeEnum(T)", this.validatorOptions.message ?? "Expected the value to be a string", value)
            );
          }
        } else if (typeOfValue !== "string") {
          return Result.err(
            new ValidationError("s.nativeEnum(T)", this.validatorOptions.message ?? "Expected the value to be a string or number", value)
          );
        }
        const casted = value;
        const possibleEnumValue = this.enumMapping.get(casted);
        return typeof possibleEnumValue === "undefined" ? Result.err(new UnknownEnumValueError(casted, this.enumKeys, this.enumMapping, this.validatorOptions)) : Result.ok(possibleEnumValue);
      }
      clone() {
        return Reflect.construct(this.constructor, [this.enumShape, this.validatorOptions]);
      }
    }, "_NativeEnumValidator");
    __name2(_NativeEnumValidator, "NativeEnumValidator");
    var NativeEnumValidator = _NativeEnumValidator;
    function typedArrayByteLengthComparator(comparator, name, expected, length, options) {
      return {
        run(input) {
          return comparator(input.byteLength, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid Typed Array byte length", input, expected));
        }
      };
    }
    __name(typedArrayByteLengthComparator, "typedArrayByteLengthComparator");
    __name2(typedArrayByteLengthComparator, "typedArrayByteLengthComparator");
    function typedArrayByteLengthLessThan(value, options) {
      const expected = `expected.byteLength < ${value}`;
      return typedArrayByteLengthComparator(lessThan, "s.typedArray(T).byteLengthLessThan()", expected, value, options);
    }
    __name(typedArrayByteLengthLessThan, "typedArrayByteLengthLessThan");
    __name2(typedArrayByteLengthLessThan, "typedArrayByteLengthLessThan");
    function typedArrayByteLengthLessThanOrEqual(value, options) {
      const expected = `expected.byteLength <= ${value}`;
      return typedArrayByteLengthComparator(lessThanOrEqual, "s.typedArray(T).byteLengthLessThanOrEqual()", expected, value, options);
    }
    __name(typedArrayByteLengthLessThanOrEqual, "typedArrayByteLengthLessThanOrEqual");
    __name2(typedArrayByteLengthLessThanOrEqual, "typedArrayByteLengthLessThanOrEqual");
    function typedArrayByteLengthGreaterThan(value, options) {
      const expected = `expected.byteLength > ${value}`;
      return typedArrayByteLengthComparator(greaterThan, "s.typedArray(T).byteLengthGreaterThan()", expected, value, options);
    }
    __name(typedArrayByteLengthGreaterThan, "typedArrayByteLengthGreaterThan");
    __name2(typedArrayByteLengthGreaterThan, "typedArrayByteLengthGreaterThan");
    function typedArrayByteLengthGreaterThanOrEqual(value, options) {
      const expected = `expected.byteLength >= ${value}`;
      return typedArrayByteLengthComparator(greaterThanOrEqual, "s.typedArray(T).byteLengthGreaterThanOrEqual()", expected, value, options);
    }
    __name(typedArrayByteLengthGreaterThanOrEqual, "typedArrayByteLengthGreaterThanOrEqual");
    __name2(typedArrayByteLengthGreaterThanOrEqual, "typedArrayByteLengthGreaterThanOrEqual");
    function typedArrayByteLengthEqual(value, options) {
      const expected = `expected.byteLength === ${value}`;
      return typedArrayByteLengthComparator(equal, "s.typedArray(T).byteLengthEqual()", expected, value, options);
    }
    __name(typedArrayByteLengthEqual, "typedArrayByteLengthEqual");
    __name2(typedArrayByteLengthEqual, "typedArrayByteLengthEqual");
    function typedArrayByteLengthNotEqual(value, options) {
      const expected = `expected.byteLength !== ${value}`;
      return typedArrayByteLengthComparator(notEqual, "s.typedArray(T).byteLengthNotEqual()", expected, value, options);
    }
    __name(typedArrayByteLengthNotEqual, "typedArrayByteLengthNotEqual");
    __name2(typedArrayByteLengthNotEqual, "typedArrayByteLengthNotEqual");
    function typedArrayByteLengthRange(start, endBefore, options) {
      const expected = `expected.byteLength >= ${start} && expected.byteLength < ${endBefore}`;
      return {
        run(input) {
          return input.byteLength >= start && input.byteLength < endBefore ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.typedArray(T).byteLengthRange()",
              options?.message ?? "Invalid Typed Array byte length",
              input,
              expected
            )
          );
        }
      };
    }
    __name(typedArrayByteLengthRange, "typedArrayByteLengthRange");
    __name2(typedArrayByteLengthRange, "typedArrayByteLengthRange");
    function typedArrayByteLengthRangeInclusive(start, end, options) {
      const expected = `expected.byteLength >= ${start} && expected.byteLength <= ${end}`;
      return {
        run(input) {
          return input.byteLength >= start && input.byteLength <= end ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.typedArray(T).byteLengthRangeInclusive()",
              options?.message ?? "Invalid Typed Array byte length",
              input,
              expected
            )
          );
        }
      };
    }
    __name(typedArrayByteLengthRangeInclusive, "typedArrayByteLengthRangeInclusive");
    __name2(typedArrayByteLengthRangeInclusive, "typedArrayByteLengthRangeInclusive");
    function typedArrayByteLengthRangeExclusive(startAfter, endBefore, options) {
      const expected = `expected.byteLength > ${startAfter} && expected.byteLength < ${endBefore}`;
      return {
        run(input) {
          return input.byteLength > startAfter && input.byteLength < endBefore ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.typedArray(T).byteLengthRangeExclusive()",
              options?.message ?? "Invalid Typed Array byte length",
              input,
              expected
            )
          );
        }
      };
    }
    __name(typedArrayByteLengthRangeExclusive, "typedArrayByteLengthRangeExclusive");
    __name2(typedArrayByteLengthRangeExclusive, "typedArrayByteLengthRangeExclusive");
    function typedArrayLengthComparator(comparator, name, expected, length, options) {
      return {
        run(input) {
          return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? "Invalid Typed Array length", input, expected));
        }
      };
    }
    __name(typedArrayLengthComparator, "typedArrayLengthComparator");
    __name2(typedArrayLengthComparator, "typedArrayLengthComparator");
    function typedArrayLengthLessThan(value, options) {
      const expected = `expected.length < ${value}`;
      return typedArrayLengthComparator(lessThan, "s.typedArray(T).lengthLessThan()", expected, value, options);
    }
    __name(typedArrayLengthLessThan, "typedArrayLengthLessThan");
    __name2(typedArrayLengthLessThan, "typedArrayLengthLessThan");
    function typedArrayLengthLessThanOrEqual(value, options) {
      const expected = `expected.length <= ${value}`;
      return typedArrayLengthComparator(lessThanOrEqual, "s.typedArray(T).lengthLessThanOrEqual()", expected, value, options);
    }
    __name(typedArrayLengthLessThanOrEqual, "typedArrayLengthLessThanOrEqual");
    __name2(typedArrayLengthLessThanOrEqual, "typedArrayLengthLessThanOrEqual");
    function typedArrayLengthGreaterThan(value, options) {
      const expected = `expected.length > ${value}`;
      return typedArrayLengthComparator(greaterThan, "s.typedArray(T).lengthGreaterThan()", expected, value, options);
    }
    __name(typedArrayLengthGreaterThan, "typedArrayLengthGreaterThan");
    __name2(typedArrayLengthGreaterThan, "typedArrayLengthGreaterThan");
    function typedArrayLengthGreaterThanOrEqual(value, options) {
      const expected = `expected.length >= ${value}`;
      return typedArrayLengthComparator(greaterThanOrEqual, "s.typedArray(T).lengthGreaterThanOrEqual()", expected, value, options);
    }
    __name(typedArrayLengthGreaterThanOrEqual, "typedArrayLengthGreaterThanOrEqual");
    __name2(typedArrayLengthGreaterThanOrEqual, "typedArrayLengthGreaterThanOrEqual");
    function typedArrayLengthEqual(value, options) {
      const expected = `expected.length === ${value}`;
      return typedArrayLengthComparator(equal, "s.typedArray(T).lengthEqual()", expected, value, options);
    }
    __name(typedArrayLengthEqual, "typedArrayLengthEqual");
    __name2(typedArrayLengthEqual, "typedArrayLengthEqual");
    function typedArrayLengthNotEqual(value, options) {
      const expected = `expected.length !== ${value}`;
      return typedArrayLengthComparator(notEqual, "s.typedArray(T).lengthNotEqual()", expected, value, options);
    }
    __name(typedArrayLengthNotEqual, "typedArrayLengthNotEqual");
    __name2(typedArrayLengthNotEqual, "typedArrayLengthNotEqual");
    function typedArrayLengthRange(start, endBefore, options) {
      const expected = `expected.length >= ${start} && expected.length < ${endBefore}`;
      return {
        run(input) {
          return input.length >= start && input.length < endBefore ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.typedArray(T).lengthRange()",
              options?.message ?? "Invalid Typed Array length",
              input,
              expected
            )
          );
        }
      };
    }
    __name(typedArrayLengthRange, "typedArrayLengthRange");
    __name2(typedArrayLengthRange, "typedArrayLengthRange");
    function typedArrayLengthRangeInclusive(start, end, options) {
      const expected = `expected.length >= ${start} && expected.length <= ${end}`;
      return {
        run(input) {
          return input.length >= start && input.length <= end ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.typedArray(T).lengthRangeInclusive()",
              options?.message ?? "Invalid Typed Array length",
              input,
              expected
            )
          );
        }
      };
    }
    __name(typedArrayLengthRangeInclusive, "typedArrayLengthRangeInclusive");
    __name2(typedArrayLengthRangeInclusive, "typedArrayLengthRangeInclusive");
    function typedArrayLengthRangeExclusive(startAfter, endBefore, options) {
      const expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;
      return {
        run(input) {
          return input.length > startAfter && input.length < endBefore ? Result.ok(input) : Result.err(
            new ExpectedConstraintError(
              "s.typedArray(T).lengthRangeExclusive()",
              options?.message ?? "Invalid Typed Array length",
              input,
              expected
            )
          );
        }
      };
    }
    __name(typedArrayLengthRangeExclusive, "typedArrayLengthRangeExclusive");
    __name2(typedArrayLengthRangeExclusive, "typedArrayLengthRangeExclusive");
    var vowels = ["a", "e", "i", "o", "u"];
    var aOrAn = /* @__PURE__ */ __name2((word) => {
      return `${vowels.includes(word[0].toLowerCase()) ? "an" : "a"} ${word}`;
    }, "aOrAn");
    var TypedArrays = {
      Int8Array: (x2) => x2 instanceof Int8Array,
      Uint8Array: (x2) => x2 instanceof Uint8Array,
      Uint8ClampedArray: (x2) => x2 instanceof Uint8ClampedArray,
      Int16Array: (x2) => x2 instanceof Int16Array,
      Uint16Array: (x2) => x2 instanceof Uint16Array,
      Int32Array: (x2) => x2 instanceof Int32Array,
      Uint32Array: (x2) => x2 instanceof Uint32Array,
      Float32Array: (x2) => x2 instanceof Float32Array,
      Float64Array: (x2) => x2 instanceof Float64Array,
      BigInt64Array: (x2) => x2 instanceof BigInt64Array,
      BigUint64Array: (x2) => x2 instanceof BigUint64Array,
      TypedArray: (x2) => ArrayBuffer.isView(x2) && !(x2 instanceof DataView)
    };
    var _TypedArrayValidator = /* @__PURE__ */ __name(class _TypedArrayValidator extends BaseValidator {
      constructor(type, validatorOptions = {}, constraints = []) {
        super(validatorOptions, constraints);
        this.type = type;
      }
      byteLengthLessThan(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayByteLengthLessThan(length, options));
      }
      byteLengthLessThanOrEqual(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayByteLengthLessThanOrEqual(length, options));
      }
      byteLengthGreaterThan(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayByteLengthGreaterThan(length, options));
      }
      byteLengthGreaterThanOrEqual(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayByteLengthGreaterThanOrEqual(length, options));
      }
      byteLengthEqual(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayByteLengthEqual(length, options));
      }
      byteLengthNotEqual(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayByteLengthNotEqual(length, options));
      }
      byteLengthRange(start, endBefore, options = this.validatorOptions) {
        return this.addConstraint(typedArrayByteLengthRange(start, endBefore, options));
      }
      byteLengthRangeInclusive(startAt, endAt, options = this.validatorOptions) {
        return this.addConstraint(typedArrayByteLengthRangeInclusive(startAt, endAt, options));
      }
      byteLengthRangeExclusive(startAfter, endBefore, options = this.validatorOptions) {
        return this.addConstraint(typedArrayByteLengthRangeExclusive(startAfter, endBefore, options));
      }
      lengthLessThan(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayLengthLessThan(length, options));
      }
      lengthLessThanOrEqual(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayLengthLessThanOrEqual(length, options));
      }
      lengthGreaterThan(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayLengthGreaterThan(length, options));
      }
      lengthGreaterThanOrEqual(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayLengthGreaterThanOrEqual(length, options));
      }
      lengthEqual(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayLengthEqual(length, options));
      }
      lengthNotEqual(length, options = this.validatorOptions) {
        return this.addConstraint(typedArrayLengthNotEqual(length, options));
      }
      lengthRange(start, endBefore, options = this.validatorOptions) {
        return this.addConstraint(typedArrayLengthRange(start, endBefore, options));
      }
      lengthRangeInclusive(startAt, endAt, options = this.validatorOptions) {
        return this.addConstraint(typedArrayLengthRangeInclusive(startAt, endAt, options));
      }
      lengthRangeExclusive(startAfter, endBefore, options = this.validatorOptions) {
        return this.addConstraint(typedArrayLengthRangeExclusive(startAfter, endBefore, options));
      }
      clone() {
        return Reflect.construct(this.constructor, [this.type, this.validatorOptions, this.constraints]);
      }
      handle(value) {
        return TypedArrays[this.type](value) ? Result.ok(value) : Result.err(new ValidationError("s.typedArray()", this.validatorOptions.message ?? `Expected ${aOrAn(this.type)}`, value));
      }
    }, "_TypedArrayValidator");
    __name2(_TypedArrayValidator, "TypedArrayValidator");
    var TypedArrayValidator = _TypedArrayValidator;
    var _Shapes = /* @__PURE__ */ __name(class _Shapes {
      string(options) {
        return new StringValidator(options);
      }
      number(options) {
        return new NumberValidator(options);
      }
      bigint(options) {
        return new BigIntValidator(options);
      }
      boolean(options) {
        return new BooleanValidator(options);
      }
      date(options) {
        return new DateValidator(options);
      }
      object(shape, options) {
        return new ObjectValidator(shape, 0, options);
      }
      undefined(options) {
        return this.literal(void 0, { equalsOptions: options });
      }
      null(options) {
        return this.literal(null, { equalsOptions: options });
      }
      nullish(options) {
        return new NullishValidator(options);
      }
      any(options) {
        return new PassthroughValidator(options);
      }
      unknown(options) {
        return new PassthroughValidator(options);
      }
      never(options) {
        return new NeverValidator(options);
      }
      enum(values, options) {
        return this.union(
          values.map((value) => this.literal(value, { equalsOptions: options })),
          options
        );
      }
      nativeEnum(enumShape, options) {
        return new NativeEnumValidator(enumShape, options);
      }
      literal(value, options) {
        if (value instanceof Date) {
          return this.date(options?.dateOptions).equal(value, options?.equalsOptions);
        }
        return new LiteralValidator(value, options?.equalsOptions);
      }
      instance(expected, options) {
        return new InstanceValidator(expected, options);
      }
      union(validators, options) {
        return new UnionValidator(validators, options);
      }
      array(validator, options) {
        return new ArrayValidator(validator, options);
      }
      typedArray(type = "TypedArray", options) {
        return new TypedArrayValidator(type, options);
      }
      int8Array(options) {
        return this.typedArray("Int8Array", options);
      }
      uint8Array(options) {
        return this.typedArray("Uint8Array", options);
      }
      uint8ClampedArray(options) {
        return this.typedArray("Uint8ClampedArray", options);
      }
      int16Array(options) {
        return this.typedArray("Int16Array", options);
      }
      uint16Array(options) {
        return this.typedArray("Uint16Array", options);
      }
      int32Array(options) {
        return this.typedArray("Int32Array", options);
      }
      uint32Array(options) {
        return this.typedArray("Uint32Array", options);
      }
      float32Array(options) {
        return this.typedArray("Float32Array", options);
      }
      float64Array(options) {
        return this.typedArray("Float64Array", options);
      }
      bigInt64Array(options) {
        return this.typedArray("BigInt64Array", options);
      }
      bigUint64Array(options) {
        return this.typedArray("BigUint64Array", options);
      }
      tuple(validators, options) {
        return new TupleValidator(validators, options);
      }
      set(validator, options) {
        return new SetValidator(validator, options);
      }
      record(validator, options) {
        return new RecordValidator(validator, options);
      }
      map(keyValidator, valueValidator, options) {
        return new MapValidator(keyValidator, valueValidator, options);
      }
      lazy(validator, options) {
        return new LazyValidator(validator, options);
      }
    }, "_Shapes");
    __name2(_Shapes, "Shapes");
    var Shapes = _Shapes;
    var s3 = new Shapes();
    exports.BaseError = BaseError;
    exports.CombinedError = CombinedError;
    exports.CombinedPropertyError = CombinedPropertyError;
    exports.ExpectedConstraintError = ExpectedConstraintError;
    exports.ExpectedValidationError = ExpectedValidationError;
    exports.MissingPropertyError = MissingPropertyError;
    exports.MultiplePossibilitiesConstraintError = MultiplePossibilitiesConstraintError;
    exports.Result = Result;
    exports.UnknownEnumValueError = UnknownEnumValueError;
    exports.UnknownPropertyError = UnknownPropertyError;
    exports.ValidationError = ValidationError;
    exports.customInspectSymbol = customInspectSymbol;
    exports.customInspectSymbolStackLess = customInspectSymbolStackLess;
    exports.getGlobalValidationEnabled = getGlobalValidationEnabled;
    exports.s = s3;
    exports.setGlobalValidationEnabled = setGlobalValidationEnabled;
  }
});

// node_modules/@discordjs/formatters/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@discordjs/formatters/dist/index.js"(exports, module) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      Faces: () => Faces,
      GuildNavigationMentions: () => GuildNavigationMentions,
      HeadingLevel: () => HeadingLevel,
      TimestampStyles: () => TimestampStyles,
      applicationDirectory: () => applicationDirectory,
      blockQuote: () => blockQuote,
      bold: () => bold,
      channelLink: () => channelLink,
      channelMention: () => channelMention,
      chatInputApplicationCommandMention: () => chatInputApplicationCommandMention,
      codeBlock: () => codeBlock,
      escapeBold: () => escapeBold,
      escapeBulletedList: () => escapeBulletedList,
      escapeCodeBlock: () => escapeCodeBlock,
      escapeEscape: () => escapeEscape,
      escapeHeading: () => escapeHeading,
      escapeInlineCode: () => escapeInlineCode,
      escapeItalic: () => escapeItalic,
      escapeMarkdown: () => escapeMarkdown,
      escapeMaskedLink: () => escapeMaskedLink,
      escapeNumberedList: () => escapeNumberedList,
      escapeSpoiler: () => escapeSpoiler,
      escapeStrikethrough: () => escapeStrikethrough,
      escapeUnderline: () => escapeUnderline,
      formatEmoji: () => formatEmoji,
      heading: () => heading,
      hideLinkEmbed: () => hideLinkEmbed,
      hyperlink: () => hyperlink,
      inlineCode: () => inlineCode,
      italic: () => italic,
      messageLink: () => messageLink,
      orderedList: () => orderedList,
      quote: () => quote,
      roleMention: () => roleMention,
      spoiler: () => spoiler,
      strikethrough: () => strikethrough,
      subtext: () => subtext,
      time: () => time,
      underline: () => underline,
      underscore: () => underscore,
      unorderedList: () => unorderedList,
      userMention: () => userMention,
      version: () => version
    });
    module.exports = __toCommonJS2(src_exports);
    function escapeMarkdown(text, options = {}) {
      const {
        codeBlock: codeBlock2 = true,
        inlineCode: inlineCode2 = true,
        bold: bold2 = true,
        italic: italic2 = true,
        underline: underline2 = true,
        strikethrough: strikethrough2 = true,
        spoiler: spoiler2 = true,
        codeBlockContent = true,
        inlineCodeContent = true,
        escape = true,
        heading: heading2 = false,
        bulletedList = false,
        numberedList = false,
        maskedLink = false
      } = options;
      if (!codeBlockContent) {
        return text.split("```").map((subString, index, array) => {
          if (index % 2 && index !== array.length - 1)
            return subString;
          return escapeMarkdown(subString, {
            inlineCode: inlineCode2,
            bold: bold2,
            italic: italic2,
            underline: underline2,
            strikethrough: strikethrough2,
            spoiler: spoiler2,
            inlineCodeContent,
            escape,
            heading: heading2,
            bulletedList,
            numberedList,
            maskedLink
          });
        }).join(codeBlock2 ? "\\`\\`\\`" : "```");
      }
      if (!inlineCodeContent) {
        return text.split(/(?<=^|[^`])`(?=[^`]|$)/g).map((subString, index, array) => {
          if (index % 2 && index !== array.length - 1)
            return subString;
          return escapeMarkdown(subString, {
            codeBlock: codeBlock2,
            bold: bold2,
            italic: italic2,
            underline: underline2,
            strikethrough: strikethrough2,
            spoiler: spoiler2,
            escape,
            heading: heading2,
            bulletedList,
            numberedList,
            maskedLink
          });
        }).join(inlineCode2 ? "\\`" : "`");
      }
      let res = text;
      if (escape)
        res = escapeEscape(res);
      if (inlineCode2)
        res = escapeInlineCode(res);
      if (codeBlock2)
        res = escapeCodeBlock(res);
      if (italic2)
        res = escapeItalic(res);
      if (bold2)
        res = escapeBold(res);
      if (underline2)
        res = escapeUnderline(res);
      if (strikethrough2)
        res = escapeStrikethrough(res);
      if (spoiler2)
        res = escapeSpoiler(res);
      if (heading2)
        res = escapeHeading(res);
      if (bulletedList)
        res = escapeBulletedList(res);
      if (numberedList)
        res = escapeNumberedList(res);
      if (maskedLink)
        res = escapeMaskedLink(res);
      return res;
    }
    __name(escapeMarkdown, "escapeMarkdown");
    __name2(escapeMarkdown, "escapeMarkdown");
    function escapeCodeBlock(text) {
      return text.replaceAll("```", "\\`\\`\\`");
    }
    __name(escapeCodeBlock, "escapeCodeBlock");
    __name2(escapeCodeBlock, "escapeCodeBlock");
    function escapeInlineCode(text) {
      return text.replaceAll(/(?<=^|[^`])``?(?=[^`]|$)/g, (match) => match.length === 2 ? "\\`\\`" : "\\`");
    }
    __name(escapeInlineCode, "escapeInlineCode");
    __name2(escapeInlineCode, "escapeInlineCode");
    function escapeItalic(text) {
      let idx = 0;
      const newText = text.replaceAll(/(?<=^|[^*])\*([^*]|\*\*|$)/g, (_, match) => {
        if (match === "**")
          return ++idx % 2 ? `\\*${match}` : `${match}\\*`;
        return `\\*${match}`;
      });
      idx = 0;
      return newText.replaceAll(/(?<=^|[^_])(?<!<a?:.+|https?:\/\/\S+)_(?!:\d+>)([^_]|__|$)/g, (_, match) => {
        if (match === "__")
          return ++idx % 2 ? `\\_${match}` : `${match}\\_`;
        return `\\_${match}`;
      });
    }
    __name(escapeItalic, "escapeItalic");
    __name2(escapeItalic, "escapeItalic");
    function escapeBold(text) {
      let idx = 0;
      return text.replaceAll(/\*\*(\*)?/g, (_, match) => {
        if (match)
          return ++idx % 2 ? `${match}\\*\\*` : `\\*\\*${match}`;
        return "\\*\\*";
      });
    }
    __name(escapeBold, "escapeBold");
    __name2(escapeBold, "escapeBold");
    function escapeUnderline(text) {
      let idx = 0;
      return text.replaceAll(/(?<!<a?:.+|https?:\/\/\S+)__(_)?(?!:\d+>)/g, (_, match) => {
        if (match)
          return ++idx % 2 ? `${match}\\_\\_` : `\\_\\_${match}`;
        return "\\_\\_";
      });
    }
    __name(escapeUnderline, "escapeUnderline");
    __name2(escapeUnderline, "escapeUnderline");
    function escapeStrikethrough(text) {
      return text.replaceAll("~~", "\\~\\~");
    }
    __name(escapeStrikethrough, "escapeStrikethrough");
    __name2(escapeStrikethrough, "escapeStrikethrough");
    function escapeSpoiler(text) {
      return text.replaceAll("||", "\\|\\|");
    }
    __name(escapeSpoiler, "escapeSpoiler");
    __name2(escapeSpoiler, "escapeSpoiler");
    function escapeEscape(text) {
      return text.replaceAll("\\", "\\\\");
    }
    __name(escapeEscape, "escapeEscape");
    __name2(escapeEscape, "escapeEscape");
    function escapeHeading(text) {
      return text.replaceAll(/^( {0,2})([*-] )?( *)(#{1,3} )/gm, "$1$2$3\\$4");
    }
    __name(escapeHeading, "escapeHeading");
    __name2(escapeHeading, "escapeHeading");
    function escapeBulletedList(text) {
      return text.replaceAll(/^( *)([*-])( +)/gm, "$1\\$2$3");
    }
    __name(escapeBulletedList, "escapeBulletedList");
    __name2(escapeBulletedList, "escapeBulletedList");
    function escapeNumberedList(text) {
      return text.replaceAll(/^( *\d+)\./gm, "$1\\.");
    }
    __name(escapeNumberedList, "escapeNumberedList");
    __name2(escapeNumberedList, "escapeNumberedList");
    function escapeMaskedLink(text) {
      return text.replaceAll(/\[.+]\(.+\)/gm, "\\$&");
    }
    __name(escapeMaskedLink, "escapeMaskedLink");
    __name2(escapeMaskedLink, "escapeMaskedLink");
    function codeBlock(language, content) {
      return content === void 0 ? `\`\`\`
${language}
\`\`\`` : `\`\`\`${language}
${content}
\`\`\``;
    }
    __name(codeBlock, "codeBlock");
    __name2(codeBlock, "codeBlock");
    function inlineCode(content) {
      return `\`${content}\``;
    }
    __name(inlineCode, "inlineCode");
    __name2(inlineCode, "inlineCode");
    function italic(content) {
      return `_${content}_`;
    }
    __name(italic, "italic");
    __name2(italic, "italic");
    function bold(content) {
      return `**${content}**`;
    }
    __name(bold, "bold");
    __name2(bold, "bold");
    function underscore(content) {
      return underline(content);
    }
    __name(underscore, "underscore");
    __name2(underscore, "underscore");
    function underline(content) {
      return `__${content}__`;
    }
    __name(underline, "underline");
    __name2(underline, "underline");
    function strikethrough(content) {
      return `~~${content}~~`;
    }
    __name(strikethrough, "strikethrough");
    __name2(strikethrough, "strikethrough");
    function quote(content) {
      return `> ${content}`;
    }
    __name(quote, "quote");
    __name2(quote, "quote");
    function blockQuote(content) {
      return `>>> ${content}`;
    }
    __name(blockQuote, "blockQuote");
    __name2(blockQuote, "blockQuote");
    function hideLinkEmbed(url) {
      return `<${url}>`;
    }
    __name(hideLinkEmbed, "hideLinkEmbed");
    __name2(hideLinkEmbed, "hideLinkEmbed");
    function hyperlink(content, url, title) {
      return title ? `[${content}](${url} "${title}")` : `[${content}](${url})`;
    }
    __name(hyperlink, "hyperlink");
    __name2(hyperlink, "hyperlink");
    function spoiler(content) {
      return `||${content}||`;
    }
    __name(spoiler, "spoiler");
    __name2(spoiler, "spoiler");
    function userMention(userId) {
      return `<@${userId}>`;
    }
    __name(userMention, "userMention");
    __name2(userMention, "userMention");
    function channelMention(channelId) {
      return `<#${channelId}>`;
    }
    __name(channelMention, "channelMention");
    __name2(channelMention, "channelMention");
    function roleMention(roleId) {
      return `<@&${roleId}>`;
    }
    __name(roleMention, "roleMention");
    __name2(roleMention, "roleMention");
    function chatInputApplicationCommandMention(commandName, subcommandGroupName, subcommandName, commandId) {
      if (commandId !== void 0) {
        return `</${commandName} ${subcommandGroupName} ${subcommandName}:${commandId}>`;
      }
      if (subcommandName !== void 0) {
        return `</${commandName} ${subcommandGroupName}:${subcommandName}>`;
      }
      return `</${commandName}:${subcommandGroupName}>`;
    }
    __name(chatInputApplicationCommandMention, "chatInputApplicationCommandMention");
    __name2(chatInputApplicationCommandMention, "chatInputApplicationCommandMention");
    function formatEmoji(emojiIdOrOptions, animated) {
      const options = typeof emojiIdOrOptions === "string" ? {
        id: emojiIdOrOptions,
        animated: animated ?? false
      } : emojiIdOrOptions;
      const { id, animated: isAnimated, name: emojiName } = options;
      return `<${isAnimated ? "a" : ""}:${emojiName ?? "_"}:${id}>`;
    }
    __name(formatEmoji, "formatEmoji");
    __name2(formatEmoji, "formatEmoji");
    function channelLink(channelId, guildId) {
      return `https://discord.com/channels/${guildId ?? "@me"}/${channelId}`;
    }
    __name(channelLink, "channelLink");
    __name2(channelLink, "channelLink");
    function messageLink(channelId, messageId, guildId) {
      return `${guildId === void 0 ? channelLink(channelId) : channelLink(channelId, guildId)}/${messageId}`;
    }
    __name(messageLink, "messageLink");
    __name2(messageLink, "messageLink");
    var HeadingLevel = /* @__PURE__ */ ((HeadingLevel2) => {
      HeadingLevel2[HeadingLevel2["One"] = 1] = "One";
      HeadingLevel2[HeadingLevel2["Two"] = 2] = "Two";
      HeadingLevel2[HeadingLevel2["Three"] = 3] = "Three";
      return HeadingLevel2;
    })(HeadingLevel || {});
    function heading(content, level) {
      switch (level) {
        case 3:
          return `### ${content}`;
        case 2:
          return `## ${content}`;
        default:
          return `# ${content}`;
      }
    }
    __name(heading, "heading");
    __name2(heading, "heading");
    function listCallback(element, startNumber, depth = 0) {
      if (Array.isArray(element)) {
        return element.map((element2) => listCallback(element2, startNumber, depth + 1)).join("\n");
      }
      return `${"  ".repeat(depth - 1)}${startNumber ? `${startNumber}.` : "-"} ${element}`;
    }
    __name(listCallback, "listCallback");
    __name2(listCallback, "listCallback");
    function orderedList(list, startNumber = 1) {
      return listCallback(list, Math.max(startNumber, 1));
    }
    __name(orderedList, "orderedList");
    __name2(orderedList, "orderedList");
    function unorderedList(list) {
      return listCallback(list);
    }
    __name(unorderedList, "unorderedList");
    __name2(unorderedList, "unorderedList");
    function subtext(content) {
      return `-# ${content}`;
    }
    __name(subtext, "subtext");
    __name2(subtext, "subtext");
    function time(timeOrSeconds, style) {
      if (typeof timeOrSeconds !== "number") {
        timeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1e3);
      }
      return typeof style === "string" ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;
    }
    __name(time, "time");
    __name2(time, "time");
    function applicationDirectory(applicationId, skuId) {
      const url = `https://discord.com/application-directory/${applicationId}/store`;
      return skuId ? `${url}/${skuId}` : url;
    }
    __name(applicationDirectory, "applicationDirectory");
    __name2(applicationDirectory, "applicationDirectory");
    var TimestampStyles = {
      /**
       * Short time format, consisting of hours and minutes.
       *
       * @example `16:20`
       */
      ShortTime: "t",
      /**
       * Long time format, consisting of hours, minutes, and seconds.
       *
       * @example `16:20:30`
       */
      LongTime: "T",
      /**
       * Short date format, consisting of day, month, and year.
       *
       * @example `20/04/2021`
       */
      ShortDate: "d",
      /**
       * Long date format, consisting of day, month, and year.
       *
       * @example `20 April 2021`
       */
      LongDate: "D",
      /**
       * Short date-time format, consisting of short date and short time formats.
       *
       * @example `20 April 2021 16:20`
       */
      ShortDateTime: "f",
      /**
       * Long date-time format, consisting of long date and short time formats.
       *
       * @example `Tuesday, 20 April 2021 16:20`
       */
      LongDateTime: "F",
      /**
       * Relative time format, consisting of a relative duration format.
       *
       * @example `2 months ago`
       */
      RelativeTime: "R"
    };
    var Faces = /* @__PURE__ */ ((Faces2) => {
      Faces2["Shrug"] = "\xAF\\_(\u30C4)_/\xAF";
      Faces2["Tableflip"] = "(\u256F\xB0\u25A1\xB0)\u256F\uFE35 \u253B\u2501\u253B";
      Faces2["Unflip"] = "\u252C\u2500\u252C\u30CE( \xBA _ \xBA\u30CE)";
      return Faces2;
    })(Faces || {});
    var GuildNavigationMentions = /* @__PURE__ */ ((GuildNavigationMentions2) => {
      GuildNavigationMentions2["Browse"] = "<id:browse>";
      GuildNavigationMentions2["Customize"] = "<id:customize>";
      GuildNavigationMentions2["Guide"] = "<id:guide>";
      return GuildNavigationMentions2;
    })(GuildNavigationMentions || {});
    var version = "0.6.0";
  }
});

// node_modules/discord-api-types/gateway/common.js
var require_common = __commonJS({
  "node_modules/discord-api-types/gateway/common.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/gateway/v10.js
var require_v10 = __commonJS({
  "node_modules/discord-api-types/gateway/v10.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p2 in m)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VoiceChannelEffectSendAnimationType = exports.GatewayDispatchEvents = exports.GatewayIntentBits = exports.GatewayCloseCodes = exports.GatewayOpcodes = exports.GatewayVersion = void 0;
    __exportStar(require_common(), exports);
    exports.GatewayVersion = "10";
    var GatewayOpcodes;
    (function(GatewayOpcodes2) {
      GatewayOpcodes2[GatewayOpcodes2["Dispatch"] = 0] = "Dispatch";
      GatewayOpcodes2[GatewayOpcodes2["Heartbeat"] = 1] = "Heartbeat";
      GatewayOpcodes2[GatewayOpcodes2["Identify"] = 2] = "Identify";
      GatewayOpcodes2[GatewayOpcodes2["PresenceUpdate"] = 3] = "PresenceUpdate";
      GatewayOpcodes2[GatewayOpcodes2["VoiceStateUpdate"] = 4] = "VoiceStateUpdate";
      GatewayOpcodes2[GatewayOpcodes2["Resume"] = 6] = "Resume";
      GatewayOpcodes2[GatewayOpcodes2["Reconnect"] = 7] = "Reconnect";
      GatewayOpcodes2[GatewayOpcodes2["RequestGuildMembers"] = 8] = "RequestGuildMembers";
      GatewayOpcodes2[GatewayOpcodes2["InvalidSession"] = 9] = "InvalidSession";
      GatewayOpcodes2[GatewayOpcodes2["Hello"] = 10] = "Hello";
      GatewayOpcodes2[GatewayOpcodes2["HeartbeatAck"] = 11] = "HeartbeatAck";
      GatewayOpcodes2[GatewayOpcodes2["RequestSoundboardSounds"] = 31] = "RequestSoundboardSounds";
    })(GatewayOpcodes || (exports.GatewayOpcodes = GatewayOpcodes = {}));
    var GatewayCloseCodes;
    (function(GatewayCloseCodes2) {
      GatewayCloseCodes2[GatewayCloseCodes2["UnknownError"] = 4e3] = "UnknownError";
      GatewayCloseCodes2[GatewayCloseCodes2["UnknownOpcode"] = 4001] = "UnknownOpcode";
      GatewayCloseCodes2[GatewayCloseCodes2["DecodeError"] = 4002] = "DecodeError";
      GatewayCloseCodes2[GatewayCloseCodes2["NotAuthenticated"] = 4003] = "NotAuthenticated";
      GatewayCloseCodes2[GatewayCloseCodes2["AuthenticationFailed"] = 4004] = "AuthenticationFailed";
      GatewayCloseCodes2[GatewayCloseCodes2["AlreadyAuthenticated"] = 4005] = "AlreadyAuthenticated";
      GatewayCloseCodes2[GatewayCloseCodes2["InvalidSeq"] = 4007] = "InvalidSeq";
      GatewayCloseCodes2[GatewayCloseCodes2["RateLimited"] = 4008] = "RateLimited";
      GatewayCloseCodes2[GatewayCloseCodes2["SessionTimedOut"] = 4009] = "SessionTimedOut";
      GatewayCloseCodes2[GatewayCloseCodes2["InvalidShard"] = 4010] = "InvalidShard";
      GatewayCloseCodes2[GatewayCloseCodes2["ShardingRequired"] = 4011] = "ShardingRequired";
      GatewayCloseCodes2[GatewayCloseCodes2["InvalidAPIVersion"] = 4012] = "InvalidAPIVersion";
      GatewayCloseCodes2[GatewayCloseCodes2["InvalidIntents"] = 4013] = "InvalidIntents";
      GatewayCloseCodes2[GatewayCloseCodes2["DisallowedIntents"] = 4014] = "DisallowedIntents";
    })(GatewayCloseCodes || (exports.GatewayCloseCodes = GatewayCloseCodes = {}));
    var GatewayIntentBits;
    (function(GatewayIntentBits2) {
      GatewayIntentBits2[GatewayIntentBits2["Guilds"] = 1] = "Guilds";
      GatewayIntentBits2[GatewayIntentBits2["GuildMembers"] = 2] = "GuildMembers";
      GatewayIntentBits2[GatewayIntentBits2["GuildModeration"] = 4] = "GuildModeration";
      GatewayIntentBits2[GatewayIntentBits2["GuildBans"] = 4] = "GuildBans";
      GatewayIntentBits2[GatewayIntentBits2["GuildExpressions"] = 8] = "GuildExpressions";
      GatewayIntentBits2[GatewayIntentBits2["GuildEmojisAndStickers"] = 8] = "GuildEmojisAndStickers";
      GatewayIntentBits2[GatewayIntentBits2["GuildIntegrations"] = 16] = "GuildIntegrations";
      GatewayIntentBits2[GatewayIntentBits2["GuildWebhooks"] = 32] = "GuildWebhooks";
      GatewayIntentBits2[GatewayIntentBits2["GuildInvites"] = 64] = "GuildInvites";
      GatewayIntentBits2[GatewayIntentBits2["GuildVoiceStates"] = 128] = "GuildVoiceStates";
      GatewayIntentBits2[GatewayIntentBits2["GuildPresences"] = 256] = "GuildPresences";
      GatewayIntentBits2[GatewayIntentBits2["GuildMessages"] = 512] = "GuildMessages";
      GatewayIntentBits2[GatewayIntentBits2["GuildMessageReactions"] = 1024] = "GuildMessageReactions";
      GatewayIntentBits2[GatewayIntentBits2["GuildMessageTyping"] = 2048] = "GuildMessageTyping";
      GatewayIntentBits2[GatewayIntentBits2["DirectMessages"] = 4096] = "DirectMessages";
      GatewayIntentBits2[GatewayIntentBits2["DirectMessageReactions"] = 8192] = "DirectMessageReactions";
      GatewayIntentBits2[GatewayIntentBits2["DirectMessageTyping"] = 16384] = "DirectMessageTyping";
      GatewayIntentBits2[GatewayIntentBits2["MessageContent"] = 32768] = "MessageContent";
      GatewayIntentBits2[GatewayIntentBits2["GuildScheduledEvents"] = 65536] = "GuildScheduledEvents";
      GatewayIntentBits2[GatewayIntentBits2["AutoModerationConfiguration"] = 1048576] = "AutoModerationConfiguration";
      GatewayIntentBits2[GatewayIntentBits2["AutoModerationExecution"] = 2097152] = "AutoModerationExecution";
      GatewayIntentBits2[GatewayIntentBits2["GuildMessagePolls"] = 16777216] = "GuildMessagePolls";
      GatewayIntentBits2[GatewayIntentBits2["DirectMessagePolls"] = 33554432] = "DirectMessagePolls";
    })(GatewayIntentBits || (exports.GatewayIntentBits = GatewayIntentBits = {}));
    var GatewayDispatchEvents;
    (function(GatewayDispatchEvents2) {
      GatewayDispatchEvents2["ApplicationCommandPermissionsUpdate"] = "APPLICATION_COMMAND_PERMISSIONS_UPDATE";
      GatewayDispatchEvents2["AutoModerationActionExecution"] = "AUTO_MODERATION_ACTION_EXECUTION";
      GatewayDispatchEvents2["AutoModerationRuleCreate"] = "AUTO_MODERATION_RULE_CREATE";
      GatewayDispatchEvents2["AutoModerationRuleDelete"] = "AUTO_MODERATION_RULE_DELETE";
      GatewayDispatchEvents2["AutoModerationRuleUpdate"] = "AUTO_MODERATION_RULE_UPDATE";
      GatewayDispatchEvents2["ChannelCreate"] = "CHANNEL_CREATE";
      GatewayDispatchEvents2["ChannelDelete"] = "CHANNEL_DELETE";
      GatewayDispatchEvents2["ChannelPinsUpdate"] = "CHANNEL_PINS_UPDATE";
      GatewayDispatchEvents2["ChannelUpdate"] = "CHANNEL_UPDATE";
      GatewayDispatchEvents2["EntitlementCreate"] = "ENTITLEMENT_CREATE";
      GatewayDispatchEvents2["EntitlementDelete"] = "ENTITLEMENT_DELETE";
      GatewayDispatchEvents2["EntitlementUpdate"] = "ENTITLEMENT_UPDATE";
      GatewayDispatchEvents2["GuildAuditLogEntryCreate"] = "GUILD_AUDIT_LOG_ENTRY_CREATE";
      GatewayDispatchEvents2["GuildBanAdd"] = "GUILD_BAN_ADD";
      GatewayDispatchEvents2["GuildBanRemove"] = "GUILD_BAN_REMOVE";
      GatewayDispatchEvents2["GuildCreate"] = "GUILD_CREATE";
      GatewayDispatchEvents2["GuildDelete"] = "GUILD_DELETE";
      GatewayDispatchEvents2["GuildEmojisUpdate"] = "GUILD_EMOJIS_UPDATE";
      GatewayDispatchEvents2["GuildIntegrationsUpdate"] = "GUILD_INTEGRATIONS_UPDATE";
      GatewayDispatchEvents2["GuildMemberAdd"] = "GUILD_MEMBER_ADD";
      GatewayDispatchEvents2["GuildMemberRemove"] = "GUILD_MEMBER_REMOVE";
      GatewayDispatchEvents2["GuildMembersChunk"] = "GUILD_MEMBERS_CHUNK";
      GatewayDispatchEvents2["GuildMemberUpdate"] = "GUILD_MEMBER_UPDATE";
      GatewayDispatchEvents2["GuildRoleCreate"] = "GUILD_ROLE_CREATE";
      GatewayDispatchEvents2["GuildRoleDelete"] = "GUILD_ROLE_DELETE";
      GatewayDispatchEvents2["GuildRoleUpdate"] = "GUILD_ROLE_UPDATE";
      GatewayDispatchEvents2["GuildScheduledEventCreate"] = "GUILD_SCHEDULED_EVENT_CREATE";
      GatewayDispatchEvents2["GuildScheduledEventDelete"] = "GUILD_SCHEDULED_EVENT_DELETE";
      GatewayDispatchEvents2["GuildScheduledEventUpdate"] = "GUILD_SCHEDULED_EVENT_UPDATE";
      GatewayDispatchEvents2["GuildScheduledEventUserAdd"] = "GUILD_SCHEDULED_EVENT_USER_ADD";
      GatewayDispatchEvents2["GuildScheduledEventUserRemove"] = "GUILD_SCHEDULED_EVENT_USER_REMOVE";
      GatewayDispatchEvents2["GuildSoundboardSoundCreate"] = "GUILD_SOUNDBOARD_SOUND_CREATE";
      GatewayDispatchEvents2["GuildSoundboardSoundDelete"] = "GUILD_SOUNDBOARD_SOUND_DELETE";
      GatewayDispatchEvents2["GuildSoundboardSoundsUpdate"] = "GUILD_SOUNDBOARD_SOUNDS_UPDATE";
      GatewayDispatchEvents2["GuildSoundboardSoundUpdate"] = "GUILD_SOUNDBOARD_SOUND_UPDATE";
      GatewayDispatchEvents2["SoundboardSounds"] = "SOUNDBOARD_SOUNDS";
      GatewayDispatchEvents2["GuildStickersUpdate"] = "GUILD_STICKERS_UPDATE";
      GatewayDispatchEvents2["GuildUpdate"] = "GUILD_UPDATE";
      GatewayDispatchEvents2["IntegrationCreate"] = "INTEGRATION_CREATE";
      GatewayDispatchEvents2["IntegrationDelete"] = "INTEGRATION_DELETE";
      GatewayDispatchEvents2["IntegrationUpdate"] = "INTEGRATION_UPDATE";
      GatewayDispatchEvents2["InteractionCreate"] = "INTERACTION_CREATE";
      GatewayDispatchEvents2["InviteCreate"] = "INVITE_CREATE";
      GatewayDispatchEvents2["InviteDelete"] = "INVITE_DELETE";
      GatewayDispatchEvents2["MessageCreate"] = "MESSAGE_CREATE";
      GatewayDispatchEvents2["MessageDelete"] = "MESSAGE_DELETE";
      GatewayDispatchEvents2["MessageDeleteBulk"] = "MESSAGE_DELETE_BULK";
      GatewayDispatchEvents2["MessagePollVoteAdd"] = "MESSAGE_POLL_VOTE_ADD";
      GatewayDispatchEvents2["MessagePollVoteRemove"] = "MESSAGE_POLL_VOTE_REMOVE";
      GatewayDispatchEvents2["MessageReactionAdd"] = "MESSAGE_REACTION_ADD";
      GatewayDispatchEvents2["MessageReactionRemove"] = "MESSAGE_REACTION_REMOVE";
      GatewayDispatchEvents2["MessageReactionRemoveAll"] = "MESSAGE_REACTION_REMOVE_ALL";
      GatewayDispatchEvents2["MessageReactionRemoveEmoji"] = "MESSAGE_REACTION_REMOVE_EMOJI";
      GatewayDispatchEvents2["MessageUpdate"] = "MESSAGE_UPDATE";
      GatewayDispatchEvents2["PresenceUpdate"] = "PRESENCE_UPDATE";
      GatewayDispatchEvents2["Ready"] = "READY";
      GatewayDispatchEvents2["Resumed"] = "RESUMED";
      GatewayDispatchEvents2["StageInstanceCreate"] = "STAGE_INSTANCE_CREATE";
      GatewayDispatchEvents2["StageInstanceDelete"] = "STAGE_INSTANCE_DELETE";
      GatewayDispatchEvents2["StageInstanceUpdate"] = "STAGE_INSTANCE_UPDATE";
      GatewayDispatchEvents2["SubscriptionCreate"] = "SUBSCRIPTION_CREATE";
      GatewayDispatchEvents2["SubscriptionDelete"] = "SUBSCRIPTION_DELETE";
      GatewayDispatchEvents2["SubscriptionUpdate"] = "SUBSCRIPTION_UPDATE";
      GatewayDispatchEvents2["ThreadCreate"] = "THREAD_CREATE";
      GatewayDispatchEvents2["ThreadDelete"] = "THREAD_DELETE";
      GatewayDispatchEvents2["ThreadListSync"] = "THREAD_LIST_SYNC";
      GatewayDispatchEvents2["ThreadMembersUpdate"] = "THREAD_MEMBERS_UPDATE";
      GatewayDispatchEvents2["ThreadMemberUpdate"] = "THREAD_MEMBER_UPDATE";
      GatewayDispatchEvents2["ThreadUpdate"] = "THREAD_UPDATE";
      GatewayDispatchEvents2["TypingStart"] = "TYPING_START";
      GatewayDispatchEvents2["UserUpdate"] = "USER_UPDATE";
      GatewayDispatchEvents2["VoiceChannelEffectSend"] = "VOICE_CHANNEL_EFFECT_SEND";
      GatewayDispatchEvents2["VoiceServerUpdate"] = "VOICE_SERVER_UPDATE";
      GatewayDispatchEvents2["VoiceStateUpdate"] = "VOICE_STATE_UPDATE";
      GatewayDispatchEvents2["WebhooksUpdate"] = "WEBHOOKS_UPDATE";
    })(GatewayDispatchEvents || (exports.GatewayDispatchEvents = GatewayDispatchEvents = {}));
    var VoiceChannelEffectSendAnimationType;
    (function(VoiceChannelEffectSendAnimationType2) {
      VoiceChannelEffectSendAnimationType2[VoiceChannelEffectSendAnimationType2["Premium"] = 0] = "Premium";
      VoiceChannelEffectSendAnimationType2[VoiceChannelEffectSendAnimationType2["Basic"] = 1] = "Basic";
    })(VoiceChannelEffectSendAnimationType || (exports.VoiceChannelEffectSendAnimationType = VoiceChannelEffectSendAnimationType = {}));
  }
});

// node_modules/discord-api-types/globals.js
var require_globals = __commonJS({
  "node_modules/discord-api-types/globals.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FormattingPatterns = void 0;
    exports.FormattingPatterns = {
      /**
       * Regular expression for matching a user mention, strictly without a nickname
       *
       * The `id` group property is present on the `exec` result of this expression
       */
      User: /<@(?<id>\d{17,20})>/,
      /**
       * Regular expression for matching a user mention, strictly with a nickname
       *
       * The `id` group property is present on the `exec` result of this expression
       *
       * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
       */
      UserWithNickname: /<@!(?<id>\d{17,20})>/,
      /**
       * Regular expression for matching a user mention, with or without a nickname
       *
       * The `id` group property is present on the `exec` result of this expression
       *
       * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
       */
      UserWithOptionalNickname: /<@!?(?<id>\d{17,20})>/,
      /**
       * Regular expression for matching a channel mention
       *
       * The `id` group property is present on the `exec` result of this expression
       */
      Channel: /<#(?<id>\d{17,20})>/,
      /**
       * Regular expression for matching a role mention
       *
       * The `id` group property is present on the `exec` result of this expression
       */
      Role: /<@&(?<id>\d{17,20})>/,
      /**
       * Regular expression for matching a application command mention
       *
       * The `fullName` (possibly including `name`, `subcommandOrGroup` and `subcommand`) and `id` group properties are present on the `exec` result of this expression
       */
      SlashCommand: (
        // eslint-disable-next-line unicorn/no-unsafe-regex
        /<\/(?<fullName>(?<name>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32})(?: (?<subcommandOrGroup>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?(?: (?<subcommand>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?):(?<id>\d{17,20})>/u
      ),
      /**
       * Regular expression for matching a custom emoji, either static or animated
       *
       * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
       */
      Emoji: /<(?<animated>a)?:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
      /**
       * Regular expression for matching strictly an animated custom emoji
       *
       * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
       */
      AnimatedEmoji: /<(?<animated>a):(?<name>\w{2,32}):(?<id>\d{17,20})>/,
      /**
       * Regular expression for matching strictly a static custom emoji
       *
       * The `name` and `id` group properties are present on the `exec` result of this expression
       */
      StaticEmoji: /<:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
      /**
       * Regular expression for matching a timestamp, either default or custom styled
       *
       * The `timestamp` and `style` group properties are present on the `exec` result of this expression
       */
      // eslint-disable-next-line prefer-named-capture-group
      Timestamp: /<t:(?<timestamp>-?\d{1,13})(:(?<style>[DFRTdft]))?>/,
      /**
       * Regular expression for matching strictly default styled timestamps
       *
       * The `timestamp` group property is present on the `exec` result of this expression
       */
      DefaultStyledTimestamp: /<t:(?<timestamp>-?\d{1,13})>/,
      /**
       * Regular expression for matching strictly custom styled timestamps
       *
       * The `timestamp` and `style` group properties are present on the `exec` result of this expression
       */
      StyledTimestamp: /<t:(?<timestamp>-?\d{1,13}):(?<style>[DFRTdft])>/,
      /**
       * Regular expression for matching a guild navigation mention
       *
       * The `type` group property is present on the `exec` result of this expression
       */
      GuildNavigation: /<id:(?<type>customize|browse|guide|linked-roles)>/,
      /**
       * Regular expression for matching a linked role mention
       *
       * The `id` group property is present on the `exec` result of this expression
       */
      LinkedRole: /<id:linked-roles:(?<id>\d{17,20})>/
    };
    Object.freeze(exports.FormattingPatterns);
  }
});

// node_modules/discord-api-types/payloads/common.js
var require_common2 = __commonJS({
  "node_modules/discord-api-types/payloads/common.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PermissionFlagsBits = void 0;
    exports.PermissionFlagsBits = {
      /**
       * Allows creation of instant invites
       *
       * Applies to channel types: Text, Voice, Stage
       */
      CreateInstantInvite: 1n << 0n,
      /**
       * Allows kicking members
       */
      // eslint-disable-next-line sonarjs/no-identical-expressions
      KickMembers: 1n << 1n,
      /**
       * Allows banning members
       */
      BanMembers: 1n << 2n,
      /**
       * Allows all permissions and bypasses channel permission overwrites
       */
      Administrator: 1n << 3n,
      /**
       * Allows management and editing of channels
       *
       * Applies to channel types: Text, Voice, Stage
       */
      ManageChannels: 1n << 4n,
      /**
       * Allows management and editing of the guild
       */
      ManageGuild: 1n << 5n,
      /**
       * Allows for the addition of reactions to messages
       *
       * Applies to channel types: Text, Voice, Stage
       */
      AddReactions: 1n << 6n,
      /**
       * Allows for viewing of audit logs
       */
      ViewAuditLog: 1n << 7n,
      /**
       * Allows for using priority speaker in a voice channel
       *
       * Applies to channel types: Voice
       */
      PrioritySpeaker: 1n << 8n,
      /**
       * Allows the user to go live
       *
       * Applies to channel types: Voice, Stage
       */
      Stream: 1n << 9n,
      /**
       * Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels
       *
       * Applies to channel types: Text, Voice, Stage
       */
      ViewChannel: 1n << 10n,
      /**
       * Allows for sending messages in a channel and creating threads in a forum
       * (does not allow sending messages in threads)
       *
       * Applies to channel types: Text, Voice, Stage
       */
      SendMessages: 1n << 11n,
      /**
       * Allows for sending of `/tts` messages
       *
       * Applies to channel types: Text, Voice, Stage
       */
      SendTTSMessages: 1n << 12n,
      /**
       * Allows for deletion of other users messages
       *
       * Applies to channel types: Text, Voice, Stage
       */
      ManageMessages: 1n << 13n,
      /**
       * Links sent by users with this permission will be auto-embedded
       *
       * Applies to channel types: Text, Voice, Stage
       */
      EmbedLinks: 1n << 14n,
      /**
       * Allows for uploading images and files
       *
       * Applies to channel types: Text, Voice, Stage
       */
      AttachFiles: 1n << 15n,
      /**
       * Allows for reading of message history
       *
       * Applies to channel types: Text, Voice, Stage
       */
      ReadMessageHistory: 1n << 16n,
      /**
       * Allows for using the `@everyone` tag to notify all users in a channel,
       * and the `@here` tag to notify all online users in a channel
       *
       * Applies to channel types: Text, Voice, Stage
       */
      MentionEveryone: 1n << 17n,
      /**
       * Allows the usage of custom emojis from other servers
       *
       * Applies to channel types: Text, Voice, Stage
       */
      UseExternalEmojis: 1n << 18n,
      /**
       * Allows for viewing guild insights
       */
      ViewGuildInsights: 1n << 19n,
      /**
       * Allows for joining of a voice channel
       *
       * Applies to channel types: Voice, Stage
       */
      Connect: 1n << 20n,
      /**
       * Allows for speaking in a voice channel
       *
       * Applies to channel types: Voice
       */
      Speak: 1n << 21n,
      /**
       * Allows for muting members in a voice channel
       *
       * Applies to channel types: Voice, Stage
       */
      MuteMembers: 1n << 22n,
      /**
       * Allows for deafening of members in a voice channel
       *
       * Applies to channel types: Voice
       */
      DeafenMembers: 1n << 23n,
      /**
       * Allows for moving of members between voice channels
       *
       * Applies to channel types: Voice, Stage
       */
      MoveMembers: 1n << 24n,
      /**
       * Allows for using voice-activity-detection in a voice channel
       *
       * Applies to channel types: Voice
       */
      UseVAD: 1n << 25n,
      /**
       * Allows for modification of own nickname
       */
      ChangeNickname: 1n << 26n,
      /**
       * Allows for modification of other users nicknames
       */
      ManageNicknames: 1n << 27n,
      /**
       * Allows management and editing of roles
       *
       * Applies to channel types: Text, Voice, Stage
       */
      ManageRoles: 1n << 28n,
      /**
       * Allows management and editing of webhooks
       *
       * Applies to channel types: Text, Voice, Stage
       */
      ManageWebhooks: 1n << 29n,
      /**
       * Allows management and editing of emojis, stickers, and soundboard sounds
       *
       * @deprecated This is the old name for {@apilink PermissionFlagsBits#ManageGuildExpressions}
       */
      ManageEmojisAndStickers: 1n << 30n,
      /**
       * Allows for editing and deleting emojis, stickers, and soundboard sounds created by all users
       */
      ManageGuildExpressions: 1n << 30n,
      /**
       * Allows members to use application commands, including slash commands and context menu commands
       *
       * Applies to channel types: Text, Voice, Stage
       */
      UseApplicationCommands: 1n << 31n,
      /**
       * Allows for requesting to speak in stage channels
       *
       * Applies to channel types: Stage
       */
      RequestToSpeak: 1n << 32n,
      /**
       * Allows for editing and deleting scheduled events created by all users
       *
       * Applies to channel types: Voice, Stage
       */
      ManageEvents: 1n << 33n,
      /**
       * Allows for deleting and archiving threads, and viewing all private threads
       *
       * Applies to channel types: Text
       */
      ManageThreads: 1n << 34n,
      /**
       * Allows for creating public and announcement threads
       *
       * Applies to channel types: Text
       */
      CreatePublicThreads: 1n << 35n,
      /**
       * Allows for creating private threads
       *
       * Applies to channel types: Text
       */
      CreatePrivateThreads: 1n << 36n,
      /**
       * Allows the usage of custom stickers from other servers
       *
       * Applies to channel types: Text, Voice, Stage
       */
      UseExternalStickers: 1n << 37n,
      /**
       * Allows for sending messages in threads
       *
       * Applies to channel types: Text
       */
      SendMessagesInThreads: 1n << 38n,
      /**
       * Allows for using Activities (applications with the {@apilink ApplicationFlags.Embedded} flag) in a voice channel
       *
       * Applies to channel types: Voice
       */
      UseEmbeddedActivities: 1n << 39n,
      /**
       * Allows for timing out users to prevent them from sending or reacting to messages in chat and threads,
       * and from speaking in voice and stage channels
       */
      ModerateMembers: 1n << 40n,
      /**
       * Allows for viewing role subscription insights
       */
      ViewCreatorMonetizationAnalytics: 1n << 41n,
      /**
       * Allows for using soundboard in a voice channel
       *
       * Applies to channel types: Voice
       */
      UseSoundboard: 1n << 42n,
      /**
       * Allows for creating emojis, stickers, and soundboard sounds, and editing and deleting those created by the current user
       */
      CreateGuildExpressions: 1n << 43n,
      /**
       * Allows for creating scheduled events, and editing and deleting those created by the current user
       *
       * Applies to channel types: Voice, Stage
       */
      CreateEvents: 1n << 44n,
      /**
       * Allows the usage of custom soundboard sounds from other servers
       *
       * Applies to channel types: Voice
       */
      UseExternalSounds: 1n << 45n,
      /**
       * Allows sending voice messages
       *
       * Applies to channel types: Text, Voice, Stage
       */
      SendVoiceMessages: 1n << 46n,
      /**
       * Allows sending polls
       *
       * Applies to channel types: Text, Voice, Stage
       */
      SendPolls: 1n << 49n,
      /**
       * Allows user-installed apps to send public responses. When disabled, users will still be allowed to use their apps but the responses will be ephemeral. This only applies to apps not also installed to the server
       *
       * Applies to channel types: Text, Voice, Stage
       */
      UseExternalApps: 1n << 50n
    };
    Object.freeze(exports.PermissionFlagsBits);
  }
});

// node_modules/discord-api-types/payloads/v10/application.js
var require_application = __commonJS({
  "node_modules/discord-api-types/payloads/v10/application.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplicationWebhookEventStatus = exports.ApplicationRoleConnectionMetadataType = exports.ApplicationFlags = void 0;
    var ApplicationFlags;
    (function(ApplicationFlags2) {
      ApplicationFlags2[ApplicationFlags2["EmbeddedReleased"] = 2] = "EmbeddedReleased";
      ApplicationFlags2[ApplicationFlags2["ManagedEmoji"] = 4] = "ManagedEmoji";
      ApplicationFlags2[ApplicationFlags2["EmbeddedIAP"] = 8] = "EmbeddedIAP";
      ApplicationFlags2[ApplicationFlags2["GroupDMCreate"] = 16] = "GroupDMCreate";
      ApplicationFlags2[ApplicationFlags2["ApplicationAutoModerationRuleCreateBadge"] = 64] = "ApplicationAutoModerationRuleCreateBadge";
      ApplicationFlags2[ApplicationFlags2["RPCHasConnected"] = 2048] = "RPCHasConnected";
      ApplicationFlags2[ApplicationFlags2["GatewayPresence"] = 4096] = "GatewayPresence";
      ApplicationFlags2[ApplicationFlags2["GatewayPresenceLimited"] = 8192] = "GatewayPresenceLimited";
      ApplicationFlags2[ApplicationFlags2["GatewayGuildMembers"] = 16384] = "GatewayGuildMembers";
      ApplicationFlags2[ApplicationFlags2["GatewayGuildMembersLimited"] = 32768] = "GatewayGuildMembersLimited";
      ApplicationFlags2[ApplicationFlags2["VerificationPendingGuildLimit"] = 65536] = "VerificationPendingGuildLimit";
      ApplicationFlags2[ApplicationFlags2["Embedded"] = 131072] = "Embedded";
      ApplicationFlags2[ApplicationFlags2["GatewayMessageContent"] = 262144] = "GatewayMessageContent";
      ApplicationFlags2[ApplicationFlags2["GatewayMessageContentLimited"] = 524288] = "GatewayMessageContentLimited";
      ApplicationFlags2[ApplicationFlags2["EmbeddedFirstParty"] = 1048576] = "EmbeddedFirstParty";
      ApplicationFlags2[ApplicationFlags2["ApplicationCommandBadge"] = 8388608] = "ApplicationCommandBadge";
    })(ApplicationFlags || (exports.ApplicationFlags = ApplicationFlags = {}));
    var ApplicationRoleConnectionMetadataType;
    (function(ApplicationRoleConnectionMetadataType2) {
      ApplicationRoleConnectionMetadataType2[ApplicationRoleConnectionMetadataType2["IntegerLessThanOrEqual"] = 1] = "IntegerLessThanOrEqual";
      ApplicationRoleConnectionMetadataType2[ApplicationRoleConnectionMetadataType2["IntegerGreaterThanOrEqual"] = 2] = "IntegerGreaterThanOrEqual";
      ApplicationRoleConnectionMetadataType2[ApplicationRoleConnectionMetadataType2["IntegerEqual"] = 3] = "IntegerEqual";
      ApplicationRoleConnectionMetadataType2[ApplicationRoleConnectionMetadataType2["IntegerNotEqual"] = 4] = "IntegerNotEqual";
      ApplicationRoleConnectionMetadataType2[ApplicationRoleConnectionMetadataType2["DatetimeLessThanOrEqual"] = 5] = "DatetimeLessThanOrEqual";
      ApplicationRoleConnectionMetadataType2[ApplicationRoleConnectionMetadataType2["DatetimeGreaterThanOrEqual"] = 6] = "DatetimeGreaterThanOrEqual";
      ApplicationRoleConnectionMetadataType2[ApplicationRoleConnectionMetadataType2["BooleanEqual"] = 7] = "BooleanEqual";
      ApplicationRoleConnectionMetadataType2[ApplicationRoleConnectionMetadataType2["BooleanNotEqual"] = 8] = "BooleanNotEqual";
    })(ApplicationRoleConnectionMetadataType || (exports.ApplicationRoleConnectionMetadataType = ApplicationRoleConnectionMetadataType = {}));
    var ApplicationWebhookEventStatus;
    (function(ApplicationWebhookEventStatus2) {
      ApplicationWebhookEventStatus2[ApplicationWebhookEventStatus2["Disabled"] = 1] = "Disabled";
      ApplicationWebhookEventStatus2[ApplicationWebhookEventStatus2["Enabled"] = 2] = "Enabled";
      ApplicationWebhookEventStatus2[ApplicationWebhookEventStatus2["DisabledByDiscord"] = 3] = "DisabledByDiscord";
    })(ApplicationWebhookEventStatus || (exports.ApplicationWebhookEventStatus = ApplicationWebhookEventStatus = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/auditLog.js
var require_auditLog = __commonJS({
  "node_modules/discord-api-types/payloads/v10/auditLog.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuditLogOptionsType = exports.AuditLogEvent = void 0;
    var AuditLogEvent;
    (function(AuditLogEvent2) {
      AuditLogEvent2[AuditLogEvent2["GuildUpdate"] = 1] = "GuildUpdate";
      AuditLogEvent2[AuditLogEvent2["ChannelCreate"] = 10] = "ChannelCreate";
      AuditLogEvent2[AuditLogEvent2["ChannelUpdate"] = 11] = "ChannelUpdate";
      AuditLogEvent2[AuditLogEvent2["ChannelDelete"] = 12] = "ChannelDelete";
      AuditLogEvent2[AuditLogEvent2["ChannelOverwriteCreate"] = 13] = "ChannelOverwriteCreate";
      AuditLogEvent2[AuditLogEvent2["ChannelOverwriteUpdate"] = 14] = "ChannelOverwriteUpdate";
      AuditLogEvent2[AuditLogEvent2["ChannelOverwriteDelete"] = 15] = "ChannelOverwriteDelete";
      AuditLogEvent2[AuditLogEvent2["MemberKick"] = 20] = "MemberKick";
      AuditLogEvent2[AuditLogEvent2["MemberPrune"] = 21] = "MemberPrune";
      AuditLogEvent2[AuditLogEvent2["MemberBanAdd"] = 22] = "MemberBanAdd";
      AuditLogEvent2[AuditLogEvent2["MemberBanRemove"] = 23] = "MemberBanRemove";
      AuditLogEvent2[AuditLogEvent2["MemberUpdate"] = 24] = "MemberUpdate";
      AuditLogEvent2[AuditLogEvent2["MemberRoleUpdate"] = 25] = "MemberRoleUpdate";
      AuditLogEvent2[AuditLogEvent2["MemberMove"] = 26] = "MemberMove";
      AuditLogEvent2[AuditLogEvent2["MemberDisconnect"] = 27] = "MemberDisconnect";
      AuditLogEvent2[AuditLogEvent2["BotAdd"] = 28] = "BotAdd";
      AuditLogEvent2[AuditLogEvent2["RoleCreate"] = 30] = "RoleCreate";
      AuditLogEvent2[AuditLogEvent2["RoleUpdate"] = 31] = "RoleUpdate";
      AuditLogEvent2[AuditLogEvent2["RoleDelete"] = 32] = "RoleDelete";
      AuditLogEvent2[AuditLogEvent2["InviteCreate"] = 40] = "InviteCreate";
      AuditLogEvent2[AuditLogEvent2["InviteUpdate"] = 41] = "InviteUpdate";
      AuditLogEvent2[AuditLogEvent2["InviteDelete"] = 42] = "InviteDelete";
      AuditLogEvent2[AuditLogEvent2["WebhookCreate"] = 50] = "WebhookCreate";
      AuditLogEvent2[AuditLogEvent2["WebhookUpdate"] = 51] = "WebhookUpdate";
      AuditLogEvent2[AuditLogEvent2["WebhookDelete"] = 52] = "WebhookDelete";
      AuditLogEvent2[AuditLogEvent2["EmojiCreate"] = 60] = "EmojiCreate";
      AuditLogEvent2[AuditLogEvent2["EmojiUpdate"] = 61] = "EmojiUpdate";
      AuditLogEvent2[AuditLogEvent2["EmojiDelete"] = 62] = "EmojiDelete";
      AuditLogEvent2[AuditLogEvent2["MessageDelete"] = 72] = "MessageDelete";
      AuditLogEvent2[AuditLogEvent2["MessageBulkDelete"] = 73] = "MessageBulkDelete";
      AuditLogEvent2[AuditLogEvent2["MessagePin"] = 74] = "MessagePin";
      AuditLogEvent2[AuditLogEvent2["MessageUnpin"] = 75] = "MessageUnpin";
      AuditLogEvent2[AuditLogEvent2["IntegrationCreate"] = 80] = "IntegrationCreate";
      AuditLogEvent2[AuditLogEvent2["IntegrationUpdate"] = 81] = "IntegrationUpdate";
      AuditLogEvent2[AuditLogEvent2["IntegrationDelete"] = 82] = "IntegrationDelete";
      AuditLogEvent2[AuditLogEvent2["StageInstanceCreate"] = 83] = "StageInstanceCreate";
      AuditLogEvent2[AuditLogEvent2["StageInstanceUpdate"] = 84] = "StageInstanceUpdate";
      AuditLogEvent2[AuditLogEvent2["StageInstanceDelete"] = 85] = "StageInstanceDelete";
      AuditLogEvent2[AuditLogEvent2["StickerCreate"] = 90] = "StickerCreate";
      AuditLogEvent2[AuditLogEvent2["StickerUpdate"] = 91] = "StickerUpdate";
      AuditLogEvent2[AuditLogEvent2["StickerDelete"] = 92] = "StickerDelete";
      AuditLogEvent2[AuditLogEvent2["GuildScheduledEventCreate"] = 100] = "GuildScheduledEventCreate";
      AuditLogEvent2[AuditLogEvent2["GuildScheduledEventUpdate"] = 101] = "GuildScheduledEventUpdate";
      AuditLogEvent2[AuditLogEvent2["GuildScheduledEventDelete"] = 102] = "GuildScheduledEventDelete";
      AuditLogEvent2[AuditLogEvent2["ThreadCreate"] = 110] = "ThreadCreate";
      AuditLogEvent2[AuditLogEvent2["ThreadUpdate"] = 111] = "ThreadUpdate";
      AuditLogEvent2[AuditLogEvent2["ThreadDelete"] = 112] = "ThreadDelete";
      AuditLogEvent2[AuditLogEvent2["ApplicationCommandPermissionUpdate"] = 121] = "ApplicationCommandPermissionUpdate";
      AuditLogEvent2[AuditLogEvent2["SoundboardSoundCreate"] = 130] = "SoundboardSoundCreate";
      AuditLogEvent2[AuditLogEvent2["SoundboardSoundUpdate"] = 131] = "SoundboardSoundUpdate";
      AuditLogEvent2[AuditLogEvent2["SoundboardSoundDelete"] = 132] = "SoundboardSoundDelete";
      AuditLogEvent2[AuditLogEvent2["AutoModerationRuleCreate"] = 140] = "AutoModerationRuleCreate";
      AuditLogEvent2[AuditLogEvent2["AutoModerationRuleUpdate"] = 141] = "AutoModerationRuleUpdate";
      AuditLogEvent2[AuditLogEvent2["AutoModerationRuleDelete"] = 142] = "AutoModerationRuleDelete";
      AuditLogEvent2[AuditLogEvent2["AutoModerationBlockMessage"] = 143] = "AutoModerationBlockMessage";
      AuditLogEvent2[AuditLogEvent2["AutoModerationFlagToChannel"] = 144] = "AutoModerationFlagToChannel";
      AuditLogEvent2[AuditLogEvent2["AutoModerationUserCommunicationDisabled"] = 145] = "AutoModerationUserCommunicationDisabled";
      AuditLogEvent2[AuditLogEvent2["CreatorMonetizationRequestCreated"] = 150] = "CreatorMonetizationRequestCreated";
      AuditLogEvent2[AuditLogEvent2["CreatorMonetizationTermsAccepted"] = 151] = "CreatorMonetizationTermsAccepted";
      AuditLogEvent2[AuditLogEvent2["OnboardingPromptCreate"] = 163] = "OnboardingPromptCreate";
      AuditLogEvent2[AuditLogEvent2["OnboardingPromptUpdate"] = 164] = "OnboardingPromptUpdate";
      AuditLogEvent2[AuditLogEvent2["OnboardingPromptDelete"] = 165] = "OnboardingPromptDelete";
      AuditLogEvent2[AuditLogEvent2["OnboardingCreate"] = 166] = "OnboardingCreate";
      AuditLogEvent2[AuditLogEvent2["OnboardingUpdate"] = 167] = "OnboardingUpdate";
      AuditLogEvent2[AuditLogEvent2["HomeSettingsCreate"] = 190] = "HomeSettingsCreate";
      AuditLogEvent2[AuditLogEvent2["HomeSettingsUpdate"] = 191] = "HomeSettingsUpdate";
    })(AuditLogEvent || (exports.AuditLogEvent = AuditLogEvent = {}));
    var AuditLogOptionsType;
    (function(AuditLogOptionsType2) {
      AuditLogOptionsType2["Role"] = "0";
      AuditLogOptionsType2["Member"] = "1";
    })(AuditLogOptionsType || (exports.AuditLogOptionsType = AuditLogOptionsType = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/autoModeration.js
var require_autoModeration = __commonJS({
  "node_modules/discord-api-types/payloads/v10/autoModeration.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AutoModerationActionType = exports.AutoModerationRuleEventType = exports.AutoModerationRuleKeywordPresetType = exports.AutoModerationRuleTriggerType = void 0;
    var AutoModerationRuleTriggerType;
    (function(AutoModerationRuleTriggerType2) {
      AutoModerationRuleTriggerType2[AutoModerationRuleTriggerType2["Keyword"] = 1] = "Keyword";
      AutoModerationRuleTriggerType2[AutoModerationRuleTriggerType2["Spam"] = 3] = "Spam";
      AutoModerationRuleTriggerType2[AutoModerationRuleTriggerType2["KeywordPreset"] = 4] = "KeywordPreset";
      AutoModerationRuleTriggerType2[AutoModerationRuleTriggerType2["MentionSpam"] = 5] = "MentionSpam";
      AutoModerationRuleTriggerType2[AutoModerationRuleTriggerType2["MemberProfile"] = 6] = "MemberProfile";
    })(AutoModerationRuleTriggerType || (exports.AutoModerationRuleTriggerType = AutoModerationRuleTriggerType = {}));
    var AutoModerationRuleKeywordPresetType;
    (function(AutoModerationRuleKeywordPresetType2) {
      AutoModerationRuleKeywordPresetType2[AutoModerationRuleKeywordPresetType2["Profanity"] = 1] = "Profanity";
      AutoModerationRuleKeywordPresetType2[AutoModerationRuleKeywordPresetType2["SexualContent"] = 2] = "SexualContent";
      AutoModerationRuleKeywordPresetType2[AutoModerationRuleKeywordPresetType2["Slurs"] = 3] = "Slurs";
    })(AutoModerationRuleKeywordPresetType || (exports.AutoModerationRuleKeywordPresetType = AutoModerationRuleKeywordPresetType = {}));
    var AutoModerationRuleEventType;
    (function(AutoModerationRuleEventType2) {
      AutoModerationRuleEventType2[AutoModerationRuleEventType2["MessageSend"] = 1] = "MessageSend";
      AutoModerationRuleEventType2[AutoModerationRuleEventType2["MemberUpdate"] = 2] = "MemberUpdate";
    })(AutoModerationRuleEventType || (exports.AutoModerationRuleEventType = AutoModerationRuleEventType = {}));
    var AutoModerationActionType;
    (function(AutoModerationActionType2) {
      AutoModerationActionType2[AutoModerationActionType2["BlockMessage"] = 1] = "BlockMessage";
      AutoModerationActionType2[AutoModerationActionType2["SendAlertMessage"] = 2] = "SendAlertMessage";
      AutoModerationActionType2[AutoModerationActionType2["Timeout"] = 3] = "Timeout";
      AutoModerationActionType2[AutoModerationActionType2["BlockMemberInteraction"] = 4] = "BlockMemberInteraction";
    })(AutoModerationActionType || (exports.AutoModerationActionType = AutoModerationActionType = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/channel.js
var require_channel = __commonJS({
  "node_modules/discord-api-types/payloads/v10/channel.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChannelFlags = exports.SelectMenuDefaultValueType = exports.TextInputStyle = exports.ButtonStyle = exports.ComponentType = exports.AllowedMentionsTypes = exports.AttachmentFlags = exports.EmbedType = exports.ThreadMemberFlags = exports.ThreadAutoArchiveDuration = exports.OverwriteType = exports.MessageFlags = exports.MessageReferenceType = exports.MessageActivityType = exports.MessageType = exports.VideoQualityMode = exports.ChannelType = exports.ForumLayoutType = exports.SortOrderType = void 0;
    var SortOrderType;
    (function(SortOrderType2) {
      SortOrderType2[SortOrderType2["LatestActivity"] = 0] = "LatestActivity";
      SortOrderType2[SortOrderType2["CreationDate"] = 1] = "CreationDate";
    })(SortOrderType || (exports.SortOrderType = SortOrderType = {}));
    var ForumLayoutType;
    (function(ForumLayoutType2) {
      ForumLayoutType2[ForumLayoutType2["NotSet"] = 0] = "NotSet";
      ForumLayoutType2[ForumLayoutType2["ListView"] = 1] = "ListView";
      ForumLayoutType2[ForumLayoutType2["GalleryView"] = 2] = "GalleryView";
    })(ForumLayoutType || (exports.ForumLayoutType = ForumLayoutType = {}));
    var ChannelType;
    (function(ChannelType2) {
      ChannelType2[ChannelType2["GuildText"] = 0] = "GuildText";
      ChannelType2[ChannelType2["DM"] = 1] = "DM";
      ChannelType2[ChannelType2["GuildVoice"] = 2] = "GuildVoice";
      ChannelType2[ChannelType2["GroupDM"] = 3] = "GroupDM";
      ChannelType2[ChannelType2["GuildCategory"] = 4] = "GuildCategory";
      ChannelType2[ChannelType2["GuildAnnouncement"] = 5] = "GuildAnnouncement";
      ChannelType2[ChannelType2["AnnouncementThread"] = 10] = "AnnouncementThread";
      ChannelType2[ChannelType2["PublicThread"] = 11] = "PublicThread";
      ChannelType2[ChannelType2["PrivateThread"] = 12] = "PrivateThread";
      ChannelType2[ChannelType2["GuildStageVoice"] = 13] = "GuildStageVoice";
      ChannelType2[ChannelType2["GuildDirectory"] = 14] = "GuildDirectory";
      ChannelType2[ChannelType2["GuildForum"] = 15] = "GuildForum";
      ChannelType2[ChannelType2["GuildMedia"] = 16] = "GuildMedia";
      ChannelType2[ChannelType2["GuildNews"] = 5] = "GuildNews";
      ChannelType2[ChannelType2["GuildNewsThread"] = 10] = "GuildNewsThread";
      ChannelType2[ChannelType2["GuildPublicThread"] = 11] = "GuildPublicThread";
      ChannelType2[ChannelType2["GuildPrivateThread"] = 12] = "GuildPrivateThread";
    })(ChannelType || (exports.ChannelType = ChannelType = {}));
    var VideoQualityMode;
    (function(VideoQualityMode2) {
      VideoQualityMode2[VideoQualityMode2["Auto"] = 1] = "Auto";
      VideoQualityMode2[VideoQualityMode2["Full"] = 2] = "Full";
    })(VideoQualityMode || (exports.VideoQualityMode = VideoQualityMode = {}));
    var MessageType;
    (function(MessageType2) {
      MessageType2[MessageType2["Default"] = 0] = "Default";
      MessageType2[MessageType2["RecipientAdd"] = 1] = "RecipientAdd";
      MessageType2[MessageType2["RecipientRemove"] = 2] = "RecipientRemove";
      MessageType2[MessageType2["Call"] = 3] = "Call";
      MessageType2[MessageType2["ChannelNameChange"] = 4] = "ChannelNameChange";
      MessageType2[MessageType2["ChannelIconChange"] = 5] = "ChannelIconChange";
      MessageType2[MessageType2["ChannelPinnedMessage"] = 6] = "ChannelPinnedMessage";
      MessageType2[MessageType2["UserJoin"] = 7] = "UserJoin";
      MessageType2[MessageType2["GuildBoost"] = 8] = "GuildBoost";
      MessageType2[MessageType2["GuildBoostTier1"] = 9] = "GuildBoostTier1";
      MessageType2[MessageType2["GuildBoostTier2"] = 10] = "GuildBoostTier2";
      MessageType2[MessageType2["GuildBoostTier3"] = 11] = "GuildBoostTier3";
      MessageType2[MessageType2["ChannelFollowAdd"] = 12] = "ChannelFollowAdd";
      MessageType2[MessageType2["GuildDiscoveryDisqualified"] = 14] = "GuildDiscoveryDisqualified";
      MessageType2[MessageType2["GuildDiscoveryRequalified"] = 15] = "GuildDiscoveryRequalified";
      MessageType2[MessageType2["GuildDiscoveryGracePeriodInitialWarning"] = 16] = "GuildDiscoveryGracePeriodInitialWarning";
      MessageType2[MessageType2["GuildDiscoveryGracePeriodFinalWarning"] = 17] = "GuildDiscoveryGracePeriodFinalWarning";
      MessageType2[MessageType2["ThreadCreated"] = 18] = "ThreadCreated";
      MessageType2[MessageType2["Reply"] = 19] = "Reply";
      MessageType2[MessageType2["ChatInputCommand"] = 20] = "ChatInputCommand";
      MessageType2[MessageType2["ThreadStarterMessage"] = 21] = "ThreadStarterMessage";
      MessageType2[MessageType2["GuildInviteReminder"] = 22] = "GuildInviteReminder";
      MessageType2[MessageType2["ContextMenuCommand"] = 23] = "ContextMenuCommand";
      MessageType2[MessageType2["AutoModerationAction"] = 24] = "AutoModerationAction";
      MessageType2[MessageType2["RoleSubscriptionPurchase"] = 25] = "RoleSubscriptionPurchase";
      MessageType2[MessageType2["InteractionPremiumUpsell"] = 26] = "InteractionPremiumUpsell";
      MessageType2[MessageType2["StageStart"] = 27] = "StageStart";
      MessageType2[MessageType2["StageEnd"] = 28] = "StageEnd";
      MessageType2[MessageType2["StageSpeaker"] = 29] = "StageSpeaker";
      MessageType2[MessageType2["StageRaiseHand"] = 30] = "StageRaiseHand";
      MessageType2[MessageType2["StageTopic"] = 31] = "StageTopic";
      MessageType2[MessageType2["GuildApplicationPremiumSubscription"] = 32] = "GuildApplicationPremiumSubscription";
      MessageType2[MessageType2["GuildIncidentAlertModeEnabled"] = 36] = "GuildIncidentAlertModeEnabled";
      MessageType2[MessageType2["GuildIncidentAlertModeDisabled"] = 37] = "GuildIncidentAlertModeDisabled";
      MessageType2[MessageType2["GuildIncidentReportRaid"] = 38] = "GuildIncidentReportRaid";
      MessageType2[MessageType2["GuildIncidentReportFalseAlarm"] = 39] = "GuildIncidentReportFalseAlarm";
      MessageType2[MessageType2["PurchaseNotification"] = 44] = "PurchaseNotification";
      MessageType2[MessageType2["PollResult"] = 46] = "PollResult";
    })(MessageType || (exports.MessageType = MessageType = {}));
    var MessageActivityType;
    (function(MessageActivityType2) {
      MessageActivityType2[MessageActivityType2["Join"] = 1] = "Join";
      MessageActivityType2[MessageActivityType2["Spectate"] = 2] = "Spectate";
      MessageActivityType2[MessageActivityType2["Listen"] = 3] = "Listen";
      MessageActivityType2[MessageActivityType2["JoinRequest"] = 5] = "JoinRequest";
    })(MessageActivityType || (exports.MessageActivityType = MessageActivityType = {}));
    var MessageReferenceType;
    (function(MessageReferenceType2) {
      MessageReferenceType2[MessageReferenceType2["Default"] = 0] = "Default";
      MessageReferenceType2[MessageReferenceType2["Forward"] = 1] = "Forward";
    })(MessageReferenceType || (exports.MessageReferenceType = MessageReferenceType = {}));
    var MessageFlags;
    (function(MessageFlags2) {
      MessageFlags2[MessageFlags2["Crossposted"] = 1] = "Crossposted";
      MessageFlags2[MessageFlags2["IsCrosspost"] = 2] = "IsCrosspost";
      MessageFlags2[MessageFlags2["SuppressEmbeds"] = 4] = "SuppressEmbeds";
      MessageFlags2[MessageFlags2["SourceMessageDeleted"] = 8] = "SourceMessageDeleted";
      MessageFlags2[MessageFlags2["Urgent"] = 16] = "Urgent";
      MessageFlags2[MessageFlags2["HasThread"] = 32] = "HasThread";
      MessageFlags2[MessageFlags2["Ephemeral"] = 64] = "Ephemeral";
      MessageFlags2[MessageFlags2["Loading"] = 128] = "Loading";
      MessageFlags2[MessageFlags2["FailedToMentionSomeRolesInThread"] = 256] = "FailedToMentionSomeRolesInThread";
      MessageFlags2[MessageFlags2["ShouldShowLinkNotDiscordWarning"] = 1024] = "ShouldShowLinkNotDiscordWarning";
      MessageFlags2[MessageFlags2["SuppressNotifications"] = 4096] = "SuppressNotifications";
      MessageFlags2[MessageFlags2["IsVoiceMessage"] = 8192] = "IsVoiceMessage";
      MessageFlags2[MessageFlags2["HasSnapshot"] = 16384] = "HasSnapshot";
    })(MessageFlags || (exports.MessageFlags = MessageFlags = {}));
    var OverwriteType;
    (function(OverwriteType2) {
      OverwriteType2[OverwriteType2["Role"] = 0] = "Role";
      OverwriteType2[OverwriteType2["Member"] = 1] = "Member";
    })(OverwriteType || (exports.OverwriteType = OverwriteType = {}));
    var ThreadAutoArchiveDuration;
    (function(ThreadAutoArchiveDuration2) {
      ThreadAutoArchiveDuration2[ThreadAutoArchiveDuration2["OneHour"] = 60] = "OneHour";
      ThreadAutoArchiveDuration2[ThreadAutoArchiveDuration2["OneDay"] = 1440] = "OneDay";
      ThreadAutoArchiveDuration2[ThreadAutoArchiveDuration2["ThreeDays"] = 4320] = "ThreeDays";
      ThreadAutoArchiveDuration2[ThreadAutoArchiveDuration2["OneWeek"] = 10080] = "OneWeek";
    })(ThreadAutoArchiveDuration || (exports.ThreadAutoArchiveDuration = ThreadAutoArchiveDuration = {}));
    var ThreadMemberFlags;
    (function(ThreadMemberFlags2) {
      ThreadMemberFlags2[ThreadMemberFlags2["HasInteracted"] = 1] = "HasInteracted";
      ThreadMemberFlags2[ThreadMemberFlags2["AllMessages"] = 2] = "AllMessages";
      ThreadMemberFlags2[ThreadMemberFlags2["OnlyMentions"] = 4] = "OnlyMentions";
      ThreadMemberFlags2[ThreadMemberFlags2["NoMessages"] = 8] = "NoMessages";
    })(ThreadMemberFlags || (exports.ThreadMemberFlags = ThreadMemberFlags = {}));
    var EmbedType;
    (function(EmbedType2) {
      EmbedType2["Rich"] = "rich";
      EmbedType2["Image"] = "image";
      EmbedType2["Video"] = "video";
      EmbedType2["GIFV"] = "gifv";
      EmbedType2["Article"] = "article";
      EmbedType2["Link"] = "link";
      EmbedType2["AutoModerationMessage"] = "auto_moderation_message";
      EmbedType2["PollResult"] = "poll_result";
    })(EmbedType || (exports.EmbedType = EmbedType = {}));
    var AttachmentFlags;
    (function(AttachmentFlags2) {
      AttachmentFlags2[AttachmentFlags2["IsRemix"] = 4] = "IsRemix";
    })(AttachmentFlags || (exports.AttachmentFlags = AttachmentFlags = {}));
    var AllowedMentionsTypes;
    (function(AllowedMentionsTypes2) {
      AllowedMentionsTypes2["Everyone"] = "everyone";
      AllowedMentionsTypes2["Role"] = "roles";
      AllowedMentionsTypes2["User"] = "users";
    })(AllowedMentionsTypes || (exports.AllowedMentionsTypes = AllowedMentionsTypes = {}));
    var ComponentType;
    (function(ComponentType2) {
      ComponentType2[ComponentType2["ActionRow"] = 1] = "ActionRow";
      ComponentType2[ComponentType2["Button"] = 2] = "Button";
      ComponentType2[ComponentType2["StringSelect"] = 3] = "StringSelect";
      ComponentType2[ComponentType2["TextInput"] = 4] = "TextInput";
      ComponentType2[ComponentType2["UserSelect"] = 5] = "UserSelect";
      ComponentType2[ComponentType2["RoleSelect"] = 6] = "RoleSelect";
      ComponentType2[ComponentType2["MentionableSelect"] = 7] = "MentionableSelect";
      ComponentType2[ComponentType2["ChannelSelect"] = 8] = "ChannelSelect";
      ComponentType2[ComponentType2["SelectMenu"] = 3] = "SelectMenu";
    })(ComponentType || (exports.ComponentType = ComponentType = {}));
    var ButtonStyle;
    (function(ButtonStyle2) {
      ButtonStyle2[ButtonStyle2["Primary"] = 1] = "Primary";
      ButtonStyle2[ButtonStyle2["Secondary"] = 2] = "Secondary";
      ButtonStyle2[ButtonStyle2["Success"] = 3] = "Success";
      ButtonStyle2[ButtonStyle2["Danger"] = 4] = "Danger";
      ButtonStyle2[ButtonStyle2["Link"] = 5] = "Link";
      ButtonStyle2[ButtonStyle2["Premium"] = 6] = "Premium";
    })(ButtonStyle || (exports.ButtonStyle = ButtonStyle = {}));
    var TextInputStyle;
    (function(TextInputStyle2) {
      TextInputStyle2[TextInputStyle2["Short"] = 1] = "Short";
      TextInputStyle2[TextInputStyle2["Paragraph"] = 2] = "Paragraph";
    })(TextInputStyle || (exports.TextInputStyle = TextInputStyle = {}));
    var SelectMenuDefaultValueType;
    (function(SelectMenuDefaultValueType2) {
      SelectMenuDefaultValueType2["Channel"] = "channel";
      SelectMenuDefaultValueType2["Role"] = "role";
      SelectMenuDefaultValueType2["User"] = "user";
    })(SelectMenuDefaultValueType || (exports.SelectMenuDefaultValueType = SelectMenuDefaultValueType = {}));
    var ChannelFlags;
    (function(ChannelFlags2) {
      ChannelFlags2[ChannelFlags2["GuildFeedRemoved"] = 1] = "GuildFeedRemoved";
      ChannelFlags2[ChannelFlags2["Pinned"] = 2] = "Pinned";
      ChannelFlags2[ChannelFlags2["ActiveChannelsRemoved"] = 4] = "ActiveChannelsRemoved";
      ChannelFlags2[ChannelFlags2["RequireTag"] = 16] = "RequireTag";
      ChannelFlags2[ChannelFlags2["IsSpam"] = 32] = "IsSpam";
      ChannelFlags2[ChannelFlags2["IsGuildResourceChannel"] = 128] = "IsGuildResourceChannel";
      ChannelFlags2[ChannelFlags2["ClydeAI"] = 256] = "ClydeAI";
      ChannelFlags2[ChannelFlags2["IsScheduledForDeletion"] = 512] = "IsScheduledForDeletion";
      ChannelFlags2[ChannelFlags2["HideMediaDownloadOptions"] = 32768] = "HideMediaDownloadOptions";
    })(ChannelFlags || (exports.ChannelFlags = ChannelFlags = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/emoji.js
var require_emoji = __commonJS({
  "node_modules/discord-api-types/payloads/v10/emoji.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/gateway.js
var require_gateway = __commonJS({
  "node_modules/discord-api-types/payloads/v10/gateway.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActivityFlags = exports.ActivityType = exports.ActivityPlatform = exports.PresenceUpdateStatus = void 0;
    var PresenceUpdateStatus;
    (function(PresenceUpdateStatus2) {
      PresenceUpdateStatus2["Online"] = "online";
      PresenceUpdateStatus2["DoNotDisturb"] = "dnd";
      PresenceUpdateStatus2["Idle"] = "idle";
      PresenceUpdateStatus2["Invisible"] = "invisible";
      PresenceUpdateStatus2["Offline"] = "offline";
    })(PresenceUpdateStatus || (exports.PresenceUpdateStatus = PresenceUpdateStatus = {}));
    var ActivityPlatform;
    (function(ActivityPlatform2) {
      ActivityPlatform2["Desktop"] = "desktop";
      ActivityPlatform2["Xbox"] = "xbox";
      ActivityPlatform2["Samsung"] = "samsung";
      ActivityPlatform2["IOS"] = "ios";
      ActivityPlatform2["Android"] = "android";
      ActivityPlatform2["Embedded"] = "embedded";
      ActivityPlatform2["PS4"] = "ps4";
      ActivityPlatform2["PS5"] = "ps5";
    })(ActivityPlatform || (exports.ActivityPlatform = ActivityPlatform = {}));
    var ActivityType;
    (function(ActivityType2) {
      ActivityType2[ActivityType2["Playing"] = 0] = "Playing";
      ActivityType2[ActivityType2["Streaming"] = 1] = "Streaming";
      ActivityType2[ActivityType2["Listening"] = 2] = "Listening";
      ActivityType2[ActivityType2["Watching"] = 3] = "Watching";
      ActivityType2[ActivityType2["Custom"] = 4] = "Custom";
      ActivityType2[ActivityType2["Competing"] = 5] = "Competing";
    })(ActivityType || (exports.ActivityType = ActivityType = {}));
    var ActivityFlags;
    (function(ActivityFlags2) {
      ActivityFlags2[ActivityFlags2["Instance"] = 1] = "Instance";
      ActivityFlags2[ActivityFlags2["Join"] = 2] = "Join";
      ActivityFlags2[ActivityFlags2["Spectate"] = 4] = "Spectate";
      ActivityFlags2[ActivityFlags2["JoinRequest"] = 8] = "JoinRequest";
      ActivityFlags2[ActivityFlags2["Sync"] = 16] = "Sync";
      ActivityFlags2[ActivityFlags2["Play"] = 32] = "Play";
      ActivityFlags2[ActivityFlags2["PartyPrivacyFriends"] = 64] = "PartyPrivacyFriends";
      ActivityFlags2[ActivityFlags2["PartyPrivacyVoiceChannel"] = 128] = "PartyPrivacyVoiceChannel";
      ActivityFlags2[ActivityFlags2["Embedded"] = 256] = "Embedded";
    })(ActivityFlags || (exports.ActivityFlags = ActivityFlags = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/guild.js
var require_guild = __commonJS({
  "node_modules/discord-api-types/payloads/v10/guild.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GuildOnboardingPromptType = exports.GuildOnboardingMode = exports.MembershipScreeningFieldType = exports.GuildWidgetStyle = exports.IntegrationExpireBehavior = exports.GuildMemberFlags = exports.GuildFeature = exports.GuildSystemChannelFlags = exports.GuildHubType = exports.GuildPremiumTier = exports.GuildVerificationLevel = exports.GuildNSFWLevel = exports.GuildMFALevel = exports.GuildExplicitContentFilter = exports.GuildDefaultMessageNotifications = void 0;
    var GuildDefaultMessageNotifications;
    (function(GuildDefaultMessageNotifications2) {
      GuildDefaultMessageNotifications2[GuildDefaultMessageNotifications2["AllMessages"] = 0] = "AllMessages";
      GuildDefaultMessageNotifications2[GuildDefaultMessageNotifications2["OnlyMentions"] = 1] = "OnlyMentions";
    })(GuildDefaultMessageNotifications || (exports.GuildDefaultMessageNotifications = GuildDefaultMessageNotifications = {}));
    var GuildExplicitContentFilter;
    (function(GuildExplicitContentFilter2) {
      GuildExplicitContentFilter2[GuildExplicitContentFilter2["Disabled"] = 0] = "Disabled";
      GuildExplicitContentFilter2[GuildExplicitContentFilter2["MembersWithoutRoles"] = 1] = "MembersWithoutRoles";
      GuildExplicitContentFilter2[GuildExplicitContentFilter2["AllMembers"] = 2] = "AllMembers";
    })(GuildExplicitContentFilter || (exports.GuildExplicitContentFilter = GuildExplicitContentFilter = {}));
    var GuildMFALevel;
    (function(GuildMFALevel2) {
      GuildMFALevel2[GuildMFALevel2["None"] = 0] = "None";
      GuildMFALevel2[GuildMFALevel2["Elevated"] = 1] = "Elevated";
    })(GuildMFALevel || (exports.GuildMFALevel = GuildMFALevel = {}));
    var GuildNSFWLevel;
    (function(GuildNSFWLevel2) {
      GuildNSFWLevel2[GuildNSFWLevel2["Default"] = 0] = "Default";
      GuildNSFWLevel2[GuildNSFWLevel2["Explicit"] = 1] = "Explicit";
      GuildNSFWLevel2[GuildNSFWLevel2["Safe"] = 2] = "Safe";
      GuildNSFWLevel2[GuildNSFWLevel2["AgeRestricted"] = 3] = "AgeRestricted";
    })(GuildNSFWLevel || (exports.GuildNSFWLevel = GuildNSFWLevel = {}));
    var GuildVerificationLevel;
    (function(GuildVerificationLevel2) {
      GuildVerificationLevel2[GuildVerificationLevel2["None"] = 0] = "None";
      GuildVerificationLevel2[GuildVerificationLevel2["Low"] = 1] = "Low";
      GuildVerificationLevel2[GuildVerificationLevel2["Medium"] = 2] = "Medium";
      GuildVerificationLevel2[GuildVerificationLevel2["High"] = 3] = "High";
      GuildVerificationLevel2[GuildVerificationLevel2["VeryHigh"] = 4] = "VeryHigh";
    })(GuildVerificationLevel || (exports.GuildVerificationLevel = GuildVerificationLevel = {}));
    var GuildPremiumTier;
    (function(GuildPremiumTier2) {
      GuildPremiumTier2[GuildPremiumTier2["None"] = 0] = "None";
      GuildPremiumTier2[GuildPremiumTier2["Tier1"] = 1] = "Tier1";
      GuildPremiumTier2[GuildPremiumTier2["Tier2"] = 2] = "Tier2";
      GuildPremiumTier2[GuildPremiumTier2["Tier3"] = 3] = "Tier3";
    })(GuildPremiumTier || (exports.GuildPremiumTier = GuildPremiumTier = {}));
    var GuildHubType;
    (function(GuildHubType2) {
      GuildHubType2[GuildHubType2["Default"] = 0] = "Default";
      GuildHubType2[GuildHubType2["HighSchool"] = 1] = "HighSchool";
      GuildHubType2[GuildHubType2["College"] = 2] = "College";
    })(GuildHubType || (exports.GuildHubType = GuildHubType = {}));
    var GuildSystemChannelFlags;
    (function(GuildSystemChannelFlags2) {
      GuildSystemChannelFlags2[GuildSystemChannelFlags2["SuppressJoinNotifications"] = 1] = "SuppressJoinNotifications";
      GuildSystemChannelFlags2[GuildSystemChannelFlags2["SuppressPremiumSubscriptions"] = 2] = "SuppressPremiumSubscriptions";
      GuildSystemChannelFlags2[GuildSystemChannelFlags2["SuppressGuildReminderNotifications"] = 4] = "SuppressGuildReminderNotifications";
      GuildSystemChannelFlags2[GuildSystemChannelFlags2["SuppressJoinNotificationReplies"] = 8] = "SuppressJoinNotificationReplies";
      GuildSystemChannelFlags2[GuildSystemChannelFlags2["SuppressRoleSubscriptionPurchaseNotifications"] = 16] = "SuppressRoleSubscriptionPurchaseNotifications";
      GuildSystemChannelFlags2[GuildSystemChannelFlags2["SuppressRoleSubscriptionPurchaseNotificationReplies"] = 32] = "SuppressRoleSubscriptionPurchaseNotificationReplies";
    })(GuildSystemChannelFlags || (exports.GuildSystemChannelFlags = GuildSystemChannelFlags = {}));
    var GuildFeature;
    (function(GuildFeature2) {
      GuildFeature2["AnimatedBanner"] = "ANIMATED_BANNER";
      GuildFeature2["AnimatedIcon"] = "ANIMATED_ICON";
      GuildFeature2["ApplicationCommandPermissionsV2"] = "APPLICATION_COMMAND_PERMISSIONS_V2";
      GuildFeature2["AutoModeration"] = "AUTO_MODERATION";
      GuildFeature2["Banner"] = "BANNER";
      GuildFeature2["Community"] = "COMMUNITY";
      GuildFeature2["CreatorMonetizableProvisional"] = "CREATOR_MONETIZABLE_PROVISIONAL";
      GuildFeature2["CreatorStorePage"] = "CREATOR_STORE_PAGE";
      GuildFeature2["DeveloperSupportServer"] = "DEVELOPER_SUPPORT_SERVER";
      GuildFeature2["Discoverable"] = "DISCOVERABLE";
      GuildFeature2["Featurable"] = "FEATURABLE";
      GuildFeature2["HasDirectoryEntry"] = "HAS_DIRECTORY_ENTRY";
      GuildFeature2["Hub"] = "HUB";
      GuildFeature2["InvitesDisabled"] = "INVITES_DISABLED";
      GuildFeature2["InviteSplash"] = "INVITE_SPLASH";
      GuildFeature2["LinkedToHub"] = "LINKED_TO_HUB";
      GuildFeature2["MemberVerificationGateEnabled"] = "MEMBER_VERIFICATION_GATE_ENABLED";
      GuildFeature2["MoreSoundboard"] = "MORE_SOUNDBOARD";
      GuildFeature2["MonetizationEnabled"] = "MONETIZATION_ENABLED";
      GuildFeature2["MoreStickers"] = "MORE_STICKERS";
      GuildFeature2["News"] = "NEWS";
      GuildFeature2["Partnered"] = "PARTNERED";
      GuildFeature2["PreviewEnabled"] = "PREVIEW_ENABLED";
      GuildFeature2["PrivateThreads"] = "PRIVATE_THREADS";
      GuildFeature2["RaidAlertsDisabled"] = "RAID_ALERTS_DISABLED";
      GuildFeature2["RelayEnabled"] = "RELAY_ENABLED";
      GuildFeature2["RoleIcons"] = "ROLE_ICONS";
      GuildFeature2["RoleSubscriptionsAvailableForPurchase"] = "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE";
      GuildFeature2["RoleSubscriptionsEnabled"] = "ROLE_SUBSCRIPTIONS_ENABLED";
      GuildFeature2["Soundboard"] = "SOUNDBOARD";
      GuildFeature2["TicketedEventsEnabled"] = "TICKETED_EVENTS_ENABLED";
      GuildFeature2["VanityURL"] = "VANITY_URL";
      GuildFeature2["Verified"] = "VERIFIED";
      GuildFeature2["VIPRegions"] = "VIP_REGIONS";
      GuildFeature2["WelcomeScreenEnabled"] = "WELCOME_SCREEN_ENABLED";
    })(GuildFeature || (exports.GuildFeature = GuildFeature = {}));
    var GuildMemberFlags;
    (function(GuildMemberFlags2) {
      GuildMemberFlags2[GuildMemberFlags2["DidRejoin"] = 1] = "DidRejoin";
      GuildMemberFlags2[GuildMemberFlags2["CompletedOnboarding"] = 2] = "CompletedOnboarding";
      GuildMemberFlags2[GuildMemberFlags2["BypassesVerification"] = 4] = "BypassesVerification";
      GuildMemberFlags2[GuildMemberFlags2["StartedOnboarding"] = 8] = "StartedOnboarding";
      GuildMemberFlags2[GuildMemberFlags2["IsGuest"] = 16] = "IsGuest";
      GuildMemberFlags2[GuildMemberFlags2["StartedHomeActions"] = 32] = "StartedHomeActions";
      GuildMemberFlags2[GuildMemberFlags2["CompletedHomeActions"] = 64] = "CompletedHomeActions";
      GuildMemberFlags2[GuildMemberFlags2["AutomodQuarantinedUsernameOrGuildNickname"] = 128] = "AutomodQuarantinedUsernameOrGuildNickname";
      GuildMemberFlags2[GuildMemberFlags2["AutomodQuarantinedBio"] = 256] = "AutomodQuarantinedBio";
      GuildMemberFlags2[GuildMemberFlags2["DmSettingsUpsellAcknowledged"] = 512] = "DmSettingsUpsellAcknowledged";
    })(GuildMemberFlags || (exports.GuildMemberFlags = GuildMemberFlags = {}));
    var IntegrationExpireBehavior;
    (function(IntegrationExpireBehavior2) {
      IntegrationExpireBehavior2[IntegrationExpireBehavior2["RemoveRole"] = 0] = "RemoveRole";
      IntegrationExpireBehavior2[IntegrationExpireBehavior2["Kick"] = 1] = "Kick";
    })(IntegrationExpireBehavior || (exports.IntegrationExpireBehavior = IntegrationExpireBehavior = {}));
    var GuildWidgetStyle;
    (function(GuildWidgetStyle2) {
      GuildWidgetStyle2["Shield"] = "shield";
      GuildWidgetStyle2["Banner1"] = "banner1";
      GuildWidgetStyle2["Banner2"] = "banner2";
      GuildWidgetStyle2["Banner3"] = "banner3";
      GuildWidgetStyle2["Banner4"] = "banner4";
    })(GuildWidgetStyle || (exports.GuildWidgetStyle = GuildWidgetStyle = {}));
    var MembershipScreeningFieldType;
    (function(MembershipScreeningFieldType2) {
      MembershipScreeningFieldType2["Terms"] = "TERMS";
    })(MembershipScreeningFieldType || (exports.MembershipScreeningFieldType = MembershipScreeningFieldType = {}));
    var GuildOnboardingMode;
    (function(GuildOnboardingMode2) {
      GuildOnboardingMode2[GuildOnboardingMode2["OnboardingDefault"] = 0] = "OnboardingDefault";
      GuildOnboardingMode2[GuildOnboardingMode2["OnboardingAdvanced"] = 1] = "OnboardingAdvanced";
    })(GuildOnboardingMode || (exports.GuildOnboardingMode = GuildOnboardingMode = {}));
    var GuildOnboardingPromptType;
    (function(GuildOnboardingPromptType2) {
      GuildOnboardingPromptType2[GuildOnboardingPromptType2["MultipleChoice"] = 0] = "MultipleChoice";
      GuildOnboardingPromptType2[GuildOnboardingPromptType2["Dropdown"] = 1] = "Dropdown";
    })(GuildOnboardingPromptType || (exports.GuildOnboardingPromptType = GuildOnboardingPromptType = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/guildScheduledEvent.js
var require_guildScheduledEvent = __commonJS({
  "node_modules/discord-api-types/payloads/v10/guildScheduledEvent.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GuildScheduledEventPrivacyLevel = exports.GuildScheduledEventStatus = exports.GuildScheduledEventEntityType = exports.GuildScheduledEventRecurrenceRuleMonth = exports.GuildScheduledEventRecurrenceRuleWeekday = exports.GuildScheduledEventRecurrenceRuleFrequency = void 0;
    var GuildScheduledEventRecurrenceRuleFrequency;
    (function(GuildScheduledEventRecurrenceRuleFrequency2) {
      GuildScheduledEventRecurrenceRuleFrequency2[GuildScheduledEventRecurrenceRuleFrequency2["Yearly"] = 0] = "Yearly";
      GuildScheduledEventRecurrenceRuleFrequency2[GuildScheduledEventRecurrenceRuleFrequency2["Monthly"] = 1] = "Monthly";
      GuildScheduledEventRecurrenceRuleFrequency2[GuildScheduledEventRecurrenceRuleFrequency2["Weekly"] = 2] = "Weekly";
      GuildScheduledEventRecurrenceRuleFrequency2[GuildScheduledEventRecurrenceRuleFrequency2["Daily"] = 3] = "Daily";
    })(GuildScheduledEventRecurrenceRuleFrequency || (exports.GuildScheduledEventRecurrenceRuleFrequency = GuildScheduledEventRecurrenceRuleFrequency = {}));
    var GuildScheduledEventRecurrenceRuleWeekday;
    (function(GuildScheduledEventRecurrenceRuleWeekday2) {
      GuildScheduledEventRecurrenceRuleWeekday2[GuildScheduledEventRecurrenceRuleWeekday2["Monday"] = 0] = "Monday";
      GuildScheduledEventRecurrenceRuleWeekday2[GuildScheduledEventRecurrenceRuleWeekday2["Tuesday"] = 1] = "Tuesday";
      GuildScheduledEventRecurrenceRuleWeekday2[GuildScheduledEventRecurrenceRuleWeekday2["Wednesday"] = 2] = "Wednesday";
      GuildScheduledEventRecurrenceRuleWeekday2[GuildScheduledEventRecurrenceRuleWeekday2["Thursday"] = 3] = "Thursday";
      GuildScheduledEventRecurrenceRuleWeekday2[GuildScheduledEventRecurrenceRuleWeekday2["Friday"] = 4] = "Friday";
      GuildScheduledEventRecurrenceRuleWeekday2[GuildScheduledEventRecurrenceRuleWeekday2["Saturday"] = 5] = "Saturday";
      GuildScheduledEventRecurrenceRuleWeekday2[GuildScheduledEventRecurrenceRuleWeekday2["Sunday"] = 6] = "Sunday";
    })(GuildScheduledEventRecurrenceRuleWeekday || (exports.GuildScheduledEventRecurrenceRuleWeekday = GuildScheduledEventRecurrenceRuleWeekday = {}));
    var GuildScheduledEventRecurrenceRuleMonth;
    (function(GuildScheduledEventRecurrenceRuleMonth2) {
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["January"] = 1] = "January";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["February"] = 2] = "February";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["March"] = 3] = "March";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["April"] = 4] = "April";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["May"] = 5] = "May";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["June"] = 6] = "June";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["July"] = 7] = "July";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["August"] = 8] = "August";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["September"] = 9] = "September";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["October"] = 10] = "October";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["November"] = 11] = "November";
      GuildScheduledEventRecurrenceRuleMonth2[GuildScheduledEventRecurrenceRuleMonth2["December"] = 12] = "December";
    })(GuildScheduledEventRecurrenceRuleMonth || (exports.GuildScheduledEventRecurrenceRuleMonth = GuildScheduledEventRecurrenceRuleMonth = {}));
    var GuildScheduledEventEntityType;
    (function(GuildScheduledEventEntityType2) {
      GuildScheduledEventEntityType2[GuildScheduledEventEntityType2["StageInstance"] = 1] = "StageInstance";
      GuildScheduledEventEntityType2[GuildScheduledEventEntityType2["Voice"] = 2] = "Voice";
      GuildScheduledEventEntityType2[GuildScheduledEventEntityType2["External"] = 3] = "External";
    })(GuildScheduledEventEntityType || (exports.GuildScheduledEventEntityType = GuildScheduledEventEntityType = {}));
    var GuildScheduledEventStatus;
    (function(GuildScheduledEventStatus2) {
      GuildScheduledEventStatus2[GuildScheduledEventStatus2["Scheduled"] = 1] = "Scheduled";
      GuildScheduledEventStatus2[GuildScheduledEventStatus2["Active"] = 2] = "Active";
      GuildScheduledEventStatus2[GuildScheduledEventStatus2["Completed"] = 3] = "Completed";
      GuildScheduledEventStatus2[GuildScheduledEventStatus2["Canceled"] = 4] = "Canceled";
    })(GuildScheduledEventStatus || (exports.GuildScheduledEventStatus = GuildScheduledEventStatus = {}));
    var GuildScheduledEventPrivacyLevel;
    (function(GuildScheduledEventPrivacyLevel2) {
      GuildScheduledEventPrivacyLevel2[GuildScheduledEventPrivacyLevel2["GuildOnly"] = 2] = "GuildOnly";
    })(GuildScheduledEventPrivacyLevel || (exports.GuildScheduledEventPrivacyLevel = GuildScheduledEventPrivacyLevel = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/attachment.js
var require_attachment = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/attachment.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/base.js
var require_base = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/base.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/boolean.js
var require_boolean = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/boolean.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/channel.js
var require_channel2 = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/channel.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/integer.js
var require_integer = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/integer.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/mentionable.js
var require_mentionable = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/mentionable.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/number.js
var require_number = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/number.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/role.js
var require_role = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/role.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/shared.js
var require_shared = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/shared.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplicationCommandOptionType = void 0;
    var ApplicationCommandOptionType;
    (function(ApplicationCommandOptionType2) {
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["Subcommand"] = 1] = "Subcommand";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["SubcommandGroup"] = 2] = "SubcommandGroup";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["String"] = 3] = "String";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["Integer"] = 4] = "Integer";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["Boolean"] = 5] = "Boolean";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["User"] = 6] = "User";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["Channel"] = 7] = "Channel";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["Role"] = 8] = "Role";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["Mentionable"] = 9] = "Mentionable";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["Number"] = 10] = "Number";
      ApplicationCommandOptionType2[ApplicationCommandOptionType2["Attachment"] = 11] = "Attachment";
    })(ApplicationCommandOptionType || (exports.ApplicationCommandOptionType = ApplicationCommandOptionType = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/string.js
var require_string = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/string.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/subcommand.js
var require_subcommand = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/subcommand.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/subcommandGroup.js
var require_subcommandGroup = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/subcommandGroup.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/user.js
var require_user = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/user.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/chatInput.js
var require_chatInput = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/chatInput.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p2 in m)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_attachment(), exports);
    __exportStar(require_base(), exports);
    __exportStar(require_boolean(), exports);
    __exportStar(require_channel2(), exports);
    __exportStar(require_integer(), exports);
    __exportStar(require_mentionable(), exports);
    __exportStar(require_number(), exports);
    __exportStar(require_role(), exports);
    __exportStar(require_shared(), exports);
    __exportStar(require_string(), exports);
    __exportStar(require_subcommand(), exports);
    __exportStar(require_subcommandGroup(), exports);
    __exportStar(require_user(), exports);
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/contextMenu.js
var require_contextMenu = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/contextMenu.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/permissions.js
var require_permissions = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/permissions.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.APIApplicationCommandPermissionsConstant = exports.ApplicationCommandPermissionType = void 0;
    var ApplicationCommandPermissionType;
    (function(ApplicationCommandPermissionType2) {
      ApplicationCommandPermissionType2[ApplicationCommandPermissionType2["Role"] = 1] = "Role";
      ApplicationCommandPermissionType2[ApplicationCommandPermissionType2["User"] = 2] = "User";
      ApplicationCommandPermissionType2[ApplicationCommandPermissionType2["Channel"] = 3] = "Channel";
    })(ApplicationCommandPermissionType || (exports.ApplicationCommandPermissionType = ApplicationCommandPermissionType = {}));
    exports.APIApplicationCommandPermissionsConstant = {
      // eslint-disable-next-line unicorn/prefer-native-coercion-functions
      Everyone: (guildId) => String(guildId),
      AllChannels: (guildId) => String(BigInt(guildId) - 1n)
    };
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/entryPoint.js
var require_entryPoint = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/entryPoint.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/applicationCommands.js
var require_applicationCommands = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/applicationCommands.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p2 in m)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntryPointCommandHandlerType = exports.InteractionContextType = exports.ApplicationIntegrationType = exports.ApplicationCommandType = void 0;
    __exportStar(require_chatInput(), exports);
    __exportStar(require_contextMenu(), exports);
    __exportStar(require_permissions(), exports);
    __exportStar(require_entryPoint(), exports);
    var ApplicationCommandType;
    (function(ApplicationCommandType2) {
      ApplicationCommandType2[ApplicationCommandType2["ChatInput"] = 1] = "ChatInput";
      ApplicationCommandType2[ApplicationCommandType2["User"] = 2] = "User";
      ApplicationCommandType2[ApplicationCommandType2["Message"] = 3] = "Message";
      ApplicationCommandType2[ApplicationCommandType2["PrimaryEntryPoint"] = 4] = "PrimaryEntryPoint";
    })(ApplicationCommandType || (exports.ApplicationCommandType = ApplicationCommandType = {}));
    var ApplicationIntegrationType;
    (function(ApplicationIntegrationType2) {
      ApplicationIntegrationType2[ApplicationIntegrationType2["GuildInstall"] = 0] = "GuildInstall";
      ApplicationIntegrationType2[ApplicationIntegrationType2["UserInstall"] = 1] = "UserInstall";
    })(ApplicationIntegrationType || (exports.ApplicationIntegrationType = ApplicationIntegrationType = {}));
    var InteractionContextType;
    (function(InteractionContextType2) {
      InteractionContextType2[InteractionContextType2["Guild"] = 0] = "Guild";
      InteractionContextType2[InteractionContextType2["BotDM"] = 1] = "BotDM";
      InteractionContextType2[InteractionContextType2["PrivateChannel"] = 2] = "PrivateChannel";
    })(InteractionContextType || (exports.InteractionContextType = InteractionContextType = {}));
    var EntryPointCommandHandlerType;
    (function(EntryPointCommandHandlerType2) {
      EntryPointCommandHandlerType2[EntryPointCommandHandlerType2["AppHandler"] = 1] = "AppHandler";
      EntryPointCommandHandlerType2[EntryPointCommandHandlerType2["DiscordLaunchActivity"] = 2] = "DiscordLaunchActivity";
    })(EntryPointCommandHandlerType || (exports.EntryPointCommandHandlerType = EntryPointCommandHandlerType = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/autocomplete.js
var require_autocomplete = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/autocomplete.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/base.js
var require_base2 = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/base.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/messageComponents.js
var require_messageComponents = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/messageComponents.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/modalSubmit.js
var require_modalSubmit = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/modalSubmit.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/ping.js
var require_ping = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/ping.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/_interactions/responses.js
var require_responses = __commonJS({
  "node_modules/discord-api-types/payloads/v10/_interactions/responses.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InteractionResponseType = exports.InteractionType = void 0;
    var InteractionType2;
    (function(InteractionType3) {
      InteractionType3[InteractionType3["Ping"] = 1] = "Ping";
      InteractionType3[InteractionType3["ApplicationCommand"] = 2] = "ApplicationCommand";
      InteractionType3[InteractionType3["MessageComponent"] = 3] = "MessageComponent";
      InteractionType3[InteractionType3["ApplicationCommandAutocomplete"] = 4] = "ApplicationCommandAutocomplete";
      InteractionType3[InteractionType3["ModalSubmit"] = 5] = "ModalSubmit";
    })(InteractionType2 || (exports.InteractionType = InteractionType2 = {}));
    var InteractionResponseType2;
    (function(InteractionResponseType3) {
      InteractionResponseType3[InteractionResponseType3["Pong"] = 1] = "Pong";
      InteractionResponseType3[InteractionResponseType3["ChannelMessageWithSource"] = 4] = "ChannelMessageWithSource";
      InteractionResponseType3[InteractionResponseType3["DeferredChannelMessageWithSource"] = 5] = "DeferredChannelMessageWithSource";
      InteractionResponseType3[InteractionResponseType3["DeferredMessageUpdate"] = 6] = "DeferredMessageUpdate";
      InteractionResponseType3[InteractionResponseType3["UpdateMessage"] = 7] = "UpdateMessage";
      InteractionResponseType3[InteractionResponseType3["ApplicationCommandAutocompleteResult"] = 8] = "ApplicationCommandAutocompleteResult";
      InteractionResponseType3[InteractionResponseType3["Modal"] = 9] = "Modal";
      InteractionResponseType3[InteractionResponseType3["PremiumRequired"] = 10] = "PremiumRequired";
      InteractionResponseType3[InteractionResponseType3["LaunchActivity"] = 12] = "LaunchActivity";
    })(InteractionResponseType2 || (exports.InteractionResponseType = InteractionResponseType2 = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/interactions.js
var require_interactions = __commonJS({
  "node_modules/discord-api-types/payloads/v10/interactions.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p2 in m)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_applicationCommands(), exports);
    __exportStar(require_autocomplete(), exports);
    __exportStar(require_base2(), exports);
    __exportStar(require_messageComponents(), exports);
    __exportStar(require_modalSubmit(), exports);
    __exportStar(require_ping(), exports);
    __exportStar(require_responses(), exports);
  }
});

// node_modules/discord-api-types/payloads/v10/invite.js
var require_invite = __commonJS({
  "node_modules/discord-api-types/payloads/v10/invite.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InviteTargetType = exports.InviteType = void 0;
    var InviteType;
    (function(InviteType2) {
      InviteType2[InviteType2["Guild"] = 0] = "Guild";
      InviteType2[InviteType2["GroupDM"] = 1] = "GroupDM";
      InviteType2[InviteType2["Friend"] = 2] = "Friend";
    })(InviteType || (exports.InviteType = InviteType = {}));
    var InviteTargetType;
    (function(InviteTargetType2) {
      InviteTargetType2[InviteTargetType2["Stream"] = 1] = "Stream";
      InviteTargetType2[InviteTargetType2["EmbeddedApplication"] = 2] = "EmbeddedApplication";
    })(InviteTargetType || (exports.InviteTargetType = InviteTargetType = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/monetization.js
var require_monetization = __commonJS({
  "node_modules/discord-api-types/payloads/v10/monetization.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubscriptionStatus = exports.SKUType = exports.SKUFlags = exports.EntitlementType = void 0;
    var EntitlementType;
    (function(EntitlementType2) {
      EntitlementType2[EntitlementType2["Purchase"] = 1] = "Purchase";
      EntitlementType2[EntitlementType2["PremiumSubscription"] = 2] = "PremiumSubscription";
      EntitlementType2[EntitlementType2["DeveloperGift"] = 3] = "DeveloperGift";
      EntitlementType2[EntitlementType2["TestModePurchase"] = 4] = "TestModePurchase";
      EntitlementType2[EntitlementType2["FreePurchase"] = 5] = "FreePurchase";
      EntitlementType2[EntitlementType2["UserGift"] = 6] = "UserGift";
      EntitlementType2[EntitlementType2["PremiumPurchase"] = 7] = "PremiumPurchase";
      EntitlementType2[EntitlementType2["ApplicationSubscription"] = 8] = "ApplicationSubscription";
    })(EntitlementType || (exports.EntitlementType = EntitlementType = {}));
    var SKUFlags;
    (function(SKUFlags2) {
      SKUFlags2[SKUFlags2["Available"] = 4] = "Available";
      SKUFlags2[SKUFlags2["GuildSubscription"] = 128] = "GuildSubscription";
      SKUFlags2[SKUFlags2["UserSubscription"] = 256] = "UserSubscription";
    })(SKUFlags || (exports.SKUFlags = SKUFlags = {}));
    var SKUType;
    (function(SKUType2) {
      SKUType2[SKUType2["Durable"] = 2] = "Durable";
      SKUType2[SKUType2["Consumable"] = 3] = "Consumable";
      SKUType2[SKUType2["Subscription"] = 5] = "Subscription";
      SKUType2[SKUType2["SubscriptionGroup"] = 6] = "SubscriptionGroup";
    })(SKUType || (exports.SKUType = SKUType = {}));
    var SubscriptionStatus;
    (function(SubscriptionStatus2) {
      SubscriptionStatus2[SubscriptionStatus2["Active"] = 0] = "Active";
      SubscriptionStatus2[SubscriptionStatus2["Ending"] = 1] = "Ending";
      SubscriptionStatus2[SubscriptionStatus2["Inactive"] = 2] = "Inactive";
    })(SubscriptionStatus || (exports.SubscriptionStatus = SubscriptionStatus = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/oauth2.js
var require_oauth2 = __commonJS({
  "node_modules/discord-api-types/payloads/v10/oauth2.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuth2Scopes = void 0;
    var OAuth2Scopes;
    (function(OAuth2Scopes2) {
      OAuth2Scopes2["Bot"] = "bot";
      OAuth2Scopes2["Connections"] = "connections";
      OAuth2Scopes2["DMChannelsRead"] = "dm_channels.read";
      OAuth2Scopes2["Email"] = "email";
      OAuth2Scopes2["Identify"] = "identify";
      OAuth2Scopes2["Guilds"] = "guilds";
      OAuth2Scopes2["GuildsJoin"] = "guilds.join";
      OAuth2Scopes2["GuildsMembersRead"] = "guilds.members.read";
      OAuth2Scopes2["GroupDMJoins"] = "gdm.join";
      OAuth2Scopes2["MessagesRead"] = "messages.read";
      OAuth2Scopes2["RoleConnectionsWrite"] = "role_connections.write";
      OAuth2Scopes2["RPC"] = "rpc";
      OAuth2Scopes2["RPCNotificationsRead"] = "rpc.notifications.read";
      OAuth2Scopes2["WebhookIncoming"] = "webhook.incoming";
      OAuth2Scopes2["Voice"] = "voice";
      OAuth2Scopes2["ApplicationsBuildsUpload"] = "applications.builds.upload";
      OAuth2Scopes2["ApplicationsBuildsRead"] = "applications.builds.read";
      OAuth2Scopes2["ApplicationsStoreUpdate"] = "applications.store.update";
      OAuth2Scopes2["ApplicationsEntitlements"] = "applications.entitlements";
      OAuth2Scopes2["RelationshipsRead"] = "relationships.read";
      OAuth2Scopes2["ActivitiesRead"] = "activities.read";
      OAuth2Scopes2["ActivitiesWrite"] = "activities.write";
      OAuth2Scopes2["ApplicationsCommands"] = "applications.commands";
      OAuth2Scopes2["ApplicationsCommandsUpdate"] = "applications.commands.update";
      OAuth2Scopes2["ApplicationCommandsPermissionsUpdate"] = "applications.commands.permissions.update";
    })(OAuth2Scopes || (exports.OAuth2Scopes = OAuth2Scopes = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/permissions.js
var require_permissions2 = __commonJS({
  "node_modules/discord-api-types/payloads/v10/permissions.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RoleFlags = void 0;
    var RoleFlags;
    (function(RoleFlags2) {
      RoleFlags2[RoleFlags2["InPrompt"] = 1] = "InPrompt";
    })(RoleFlags || (exports.RoleFlags = RoleFlags = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/poll.js
var require_poll = __commonJS({
  "node_modules/discord-api-types/payloads/v10/poll.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PollLayoutType = void 0;
    var PollLayoutType;
    (function(PollLayoutType2) {
      PollLayoutType2[PollLayoutType2["Default"] = 1] = "Default";
    })(PollLayoutType || (exports.PollLayoutType = PollLayoutType = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/soundboard.js
var require_soundboard = __commonJS({
  "node_modules/discord-api-types/payloads/v10/soundboard.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/stageInstance.js
var require_stageInstance = __commonJS({
  "node_modules/discord-api-types/payloads/v10/stageInstance.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StageInstancePrivacyLevel = void 0;
    var StageInstancePrivacyLevel;
    (function(StageInstancePrivacyLevel2) {
      StageInstancePrivacyLevel2[StageInstancePrivacyLevel2["Public"] = 1] = "Public";
      StageInstancePrivacyLevel2[StageInstancePrivacyLevel2["GuildOnly"] = 2] = "GuildOnly";
    })(StageInstancePrivacyLevel || (exports.StageInstancePrivacyLevel = StageInstancePrivacyLevel = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/sticker.js
var require_sticker = __commonJS({
  "node_modules/discord-api-types/payloads/v10/sticker.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StickerFormatType = exports.StickerType = void 0;
    var StickerType;
    (function(StickerType2) {
      StickerType2[StickerType2["Standard"] = 1] = "Standard";
      StickerType2[StickerType2["Guild"] = 2] = "Guild";
    })(StickerType || (exports.StickerType = StickerType = {}));
    var StickerFormatType;
    (function(StickerFormatType2) {
      StickerFormatType2[StickerFormatType2["PNG"] = 1] = "PNG";
      StickerFormatType2[StickerFormatType2["APNG"] = 2] = "APNG";
      StickerFormatType2[StickerFormatType2["Lottie"] = 3] = "Lottie";
      StickerFormatType2[StickerFormatType2["GIF"] = 4] = "GIF";
    })(StickerFormatType || (exports.StickerFormatType = StickerFormatType = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/teams.js
var require_teams = __commonJS({
  "node_modules/discord-api-types/payloads/v10/teams.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TeamMemberRole = exports.TeamMemberMembershipState = void 0;
    var TeamMemberMembershipState;
    (function(TeamMemberMembershipState2) {
      TeamMemberMembershipState2[TeamMemberMembershipState2["Invited"] = 1] = "Invited";
      TeamMemberMembershipState2[TeamMemberMembershipState2["Accepted"] = 2] = "Accepted";
    })(TeamMemberMembershipState || (exports.TeamMemberMembershipState = TeamMemberMembershipState = {}));
    var TeamMemberRole;
    (function(TeamMemberRole2) {
      TeamMemberRole2["Admin"] = "admin";
      TeamMemberRole2["Developer"] = "developer";
      TeamMemberRole2["ReadOnly"] = "read_only";
    })(TeamMemberRole || (exports.TeamMemberRole = TeamMemberRole = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/template.js
var require_template = __commonJS({
  "node_modules/discord-api-types/payloads/v10/template.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/user.js
var require_user2 = __commonJS({
  "node_modules/discord-api-types/payloads/v10/user.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionVisibility = exports.ConnectionService = exports.UserPremiumType = exports.UserFlags = void 0;
    var UserFlags;
    (function(UserFlags2) {
      UserFlags2[UserFlags2["Staff"] = 1] = "Staff";
      UserFlags2[UserFlags2["Partner"] = 2] = "Partner";
      UserFlags2[UserFlags2["Hypesquad"] = 4] = "Hypesquad";
      UserFlags2[UserFlags2["BugHunterLevel1"] = 8] = "BugHunterLevel1";
      UserFlags2[UserFlags2["MFASMS"] = 16] = "MFASMS";
      UserFlags2[UserFlags2["PremiumPromoDismissed"] = 32] = "PremiumPromoDismissed";
      UserFlags2[UserFlags2["HypeSquadOnlineHouse1"] = 64] = "HypeSquadOnlineHouse1";
      UserFlags2[UserFlags2["HypeSquadOnlineHouse2"] = 128] = "HypeSquadOnlineHouse2";
      UserFlags2[UserFlags2["HypeSquadOnlineHouse3"] = 256] = "HypeSquadOnlineHouse3";
      UserFlags2[UserFlags2["PremiumEarlySupporter"] = 512] = "PremiumEarlySupporter";
      UserFlags2[UserFlags2["TeamPseudoUser"] = 1024] = "TeamPseudoUser";
      UserFlags2[UserFlags2["HasUnreadUrgentMessages"] = 8192] = "HasUnreadUrgentMessages";
      UserFlags2[UserFlags2["BugHunterLevel2"] = 16384] = "BugHunterLevel2";
      UserFlags2[UserFlags2["VerifiedBot"] = 65536] = "VerifiedBot";
      UserFlags2[UserFlags2["VerifiedDeveloper"] = 131072] = "VerifiedDeveloper";
      UserFlags2[UserFlags2["CertifiedModerator"] = 262144] = "CertifiedModerator";
      UserFlags2[UserFlags2["BotHTTPInteractions"] = 524288] = "BotHTTPInteractions";
      UserFlags2[UserFlags2["Spammer"] = 1048576] = "Spammer";
      UserFlags2[UserFlags2["DisablePremium"] = 2097152] = "DisablePremium";
      UserFlags2[UserFlags2["ActiveDeveloper"] = 4194304] = "ActiveDeveloper";
      UserFlags2[UserFlags2["Quarantined"] = 17592186044416] = "Quarantined";
      UserFlags2[UserFlags2["Collaborator"] = 1125899906842624] = "Collaborator";
      UserFlags2[UserFlags2["RestrictedCollaborator"] = 2251799813685248] = "RestrictedCollaborator";
    })(UserFlags || (exports.UserFlags = UserFlags = {}));
    var UserPremiumType;
    (function(UserPremiumType2) {
      UserPremiumType2[UserPremiumType2["None"] = 0] = "None";
      UserPremiumType2[UserPremiumType2["NitroClassic"] = 1] = "NitroClassic";
      UserPremiumType2[UserPremiumType2["Nitro"] = 2] = "Nitro";
      UserPremiumType2[UserPremiumType2["NitroBasic"] = 3] = "NitroBasic";
    })(UserPremiumType || (exports.UserPremiumType = UserPremiumType = {}));
    var ConnectionService;
    (function(ConnectionService2) {
      ConnectionService2["AmazonMusic"] = "amazon-music";
      ConnectionService2["BattleNet"] = "battlenet";
      ConnectionService2["Bluesky"] = "bluesky";
      ConnectionService2["BungieNet"] = "bungie";
      ConnectionService2["Crunchyroll"] = "crunchyroll";
      ConnectionService2["Domain"] = "domain";
      ConnectionService2["eBay"] = "ebay";
      ConnectionService2["EpicGames"] = "epicgames";
      ConnectionService2["Facebook"] = "facebook";
      ConnectionService2["GitHub"] = "github";
      ConnectionService2["Instagram"] = "instagram";
      ConnectionService2["LeagueOfLegends"] = "leagueoflegends";
      ConnectionService2["Mastodon"] = "mastodon";
      ConnectionService2["PayPal"] = "paypal";
      ConnectionService2["PlayStationNetwork"] = "playstation";
      ConnectionService2["Reddit"] = "reddit";
      ConnectionService2["RiotGames"] = "riotgames";
      ConnectionService2["Roblox"] = "roblox";
      ConnectionService2["Spotify"] = "spotify";
      ConnectionService2["Skype"] = "skype";
      ConnectionService2["Steam"] = "steam";
      ConnectionService2["TikTok"] = "tiktok";
      ConnectionService2["Twitch"] = "twitch";
      ConnectionService2["X"] = "twitter";
      ConnectionService2["Twitter"] = "twitter";
      ConnectionService2["Xbox"] = "xbox";
      ConnectionService2["YouTube"] = "youtube";
    })(ConnectionService || (exports.ConnectionService = ConnectionService = {}));
    var ConnectionVisibility;
    (function(ConnectionVisibility2) {
      ConnectionVisibility2[ConnectionVisibility2["None"] = 0] = "None";
      ConnectionVisibility2[ConnectionVisibility2["Everyone"] = 1] = "Everyone";
    })(ConnectionVisibility || (exports.ConnectionVisibility = ConnectionVisibility = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/voice.js
var require_voice = __commonJS({
  "node_modules/discord-api-types/payloads/v10/voice.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/payloads/v10/webhook.js
var require_webhook = __commonJS({
  "node_modules/discord-api-types/payloads/v10/webhook.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebhookType = exports.ApplicationWebhookEventType = exports.ApplicationWebhookType = void 0;
    var ApplicationWebhookType;
    (function(ApplicationWebhookType2) {
      ApplicationWebhookType2[ApplicationWebhookType2["Ping"] = 0] = "Ping";
      ApplicationWebhookType2[ApplicationWebhookType2["Event"] = 1] = "Event";
    })(ApplicationWebhookType || (exports.ApplicationWebhookType = ApplicationWebhookType = {}));
    var ApplicationWebhookEventType;
    (function(ApplicationWebhookEventType2) {
      ApplicationWebhookEventType2["ApplicationAuthorized"] = "APPLICATION_AUTHORIZED";
      ApplicationWebhookEventType2["EntitlementCreate"] = "ENTITLEMENT_CREATE";
      ApplicationWebhookEventType2["QuestUserEnrollment"] = "QUEST_USER_ENROLLMENT";
    })(ApplicationWebhookEventType || (exports.ApplicationWebhookEventType = ApplicationWebhookEventType = {}));
    var WebhookType;
    (function(WebhookType2) {
      WebhookType2[WebhookType2["Incoming"] = 1] = "Incoming";
      WebhookType2[WebhookType2["ChannelFollower"] = 2] = "ChannelFollower";
      WebhookType2[WebhookType2["Application"] = 3] = "Application";
    })(WebhookType || (exports.WebhookType = WebhookType = {}));
  }
});

// node_modules/discord-api-types/payloads/v10/index.js
var require_v102 = __commonJS({
  "node_modules/discord-api-types/payloads/v10/index.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p2 in m)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_common2(), exports);
    __exportStar(require_application(), exports);
    __exportStar(require_auditLog(), exports);
    __exportStar(require_autoModeration(), exports);
    __exportStar(require_channel(), exports);
    __exportStar(require_emoji(), exports);
    __exportStar(require_gateway(), exports);
    __exportStar(require_guild(), exports);
    __exportStar(require_guildScheduledEvent(), exports);
    __exportStar(require_interactions(), exports);
    __exportStar(require_invite(), exports);
    __exportStar(require_monetization(), exports);
    __exportStar(require_oauth2(), exports);
    __exportStar(require_permissions2(), exports);
    __exportStar(require_poll(), exports);
    __exportStar(require_soundboard(), exports);
    __exportStar(require_stageInstance(), exports);
    __exportStar(require_sticker(), exports);
    __exportStar(require_teams(), exports);
    __exportStar(require_template(), exports);
    __exportStar(require_user2(), exports);
    __exportStar(require_voice(), exports);
    __exportStar(require_webhook(), exports);
  }
});

// node_modules/discord-api-types/utils/internals.js
var require_internals = __commonJS({
  "node_modules/discord-api-types/utils/internals.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.urlSafeCharacters = void 0;
    var pattern = /^[\d%A-Za-z-_]+$/g;
    exports.urlSafeCharacters = {
      test(input) {
        const result = pattern.test(input);
        pattern.lastIndex = 0;
        return result;
      }
    };
  }
});

// node_modules/discord-api-types/rest/common.js
var require_common3 = __commonJS({
  "node_modules/discord-api-types/rest/common.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Locale = exports.RESTJSONErrorCodes = void 0;
    var RESTJSONErrorCodes;
    (function(RESTJSONErrorCodes2) {
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["GeneralError"] = 0] = "GeneralError";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownAccount"] = 10001] = "UnknownAccount";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownApplication"] = 10002] = "UnknownApplication";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownChannel"] = 10003] = "UnknownChannel";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownGuild"] = 10004] = "UnknownGuild";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownIntegration"] = 10005] = "UnknownIntegration";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownInvite"] = 10006] = "UnknownInvite";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownMember"] = 10007] = "UnknownMember";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownMessage"] = 10008] = "UnknownMessage";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownPermissionOverwrite"] = 10009] = "UnknownPermissionOverwrite";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownProvider"] = 10010] = "UnknownProvider";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownRole"] = 10011] = "UnknownRole";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownToken"] = 10012] = "UnknownToken";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownUser"] = 10013] = "UnknownUser";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownEmoji"] = 10014] = "UnknownEmoji";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownWebhook"] = 10015] = "UnknownWebhook";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownWebhookService"] = 10016] = "UnknownWebhookService";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownSession"] = 10020] = "UnknownSession";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownAsset"] = 10021] = "UnknownAsset";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownBan"] = 10026] = "UnknownBan";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownSKU"] = 10027] = "UnknownSKU";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownStoreListing"] = 10028] = "UnknownStoreListing";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownEntitlement"] = 10029] = "UnknownEntitlement";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownBuild"] = 10030] = "UnknownBuild";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownLobby"] = 10031] = "UnknownLobby";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownBranch"] = 10032] = "UnknownBranch";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownStoreDirectoryLayout"] = 10033] = "UnknownStoreDirectoryLayout";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownRedistributable"] = 10036] = "UnknownRedistributable";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownGiftCode"] = 10038] = "UnknownGiftCode";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownStream"] = 10049] = "UnknownStream";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownPremiumServerSubscribeCooldown"] = 10050] = "UnknownPremiumServerSubscribeCooldown";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownGuildTemplate"] = 10057] = "UnknownGuildTemplate";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownDiscoverableServerCategory"] = 10059] = "UnknownDiscoverableServerCategory";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownSticker"] = 10060] = "UnknownSticker";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownStickerPack"] = 10061] = "UnknownStickerPack";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownInteraction"] = 10062] = "UnknownInteraction";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownApplicationCommand"] = 10063] = "UnknownApplicationCommand";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownVoiceState"] = 10065] = "UnknownVoiceState";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownApplicationCommandPermissions"] = 10066] = "UnknownApplicationCommandPermissions";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownStageInstance"] = 10067] = "UnknownStageInstance";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownGuildMemberVerificationForm"] = 10068] = "UnknownGuildMemberVerificationForm";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownGuildWelcomeScreen"] = 10069] = "UnknownGuildWelcomeScreen";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownGuildScheduledEvent"] = 10070] = "UnknownGuildScheduledEvent";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownGuildScheduledEventUser"] = 10071] = "UnknownGuildScheduledEventUser";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownTag"] = 10087] = "UnknownTag";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnknownSound"] = 10097] = "UnknownSound";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["BotsCannotUseThisEndpoint"] = 20001] = "BotsCannotUseThisEndpoint";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["OnlyBotsCanUseThisEndpoint"] = 20002] = "OnlyBotsCanUseThisEndpoint";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ExplicitContentCannotBeSentToTheDesiredRecipient"] = 20009] = "ExplicitContentCannotBeSentToTheDesiredRecipient";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["NotAuthorizedToPerformThisActionOnThisApplication"] = 20012] = "NotAuthorizedToPerformThisActionOnThisApplication";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ActionCannotBePerformedDueToSlowmodeRateLimit"] = 20016] = "ActionCannotBePerformedDueToSlowmodeRateLimit";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TheMazeIsntMeantForYou"] = 20017] = "TheMazeIsntMeantForYou";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["OnlyTheOwnerOfThisAccountCanPerformThisAction"] = 20018] = "OnlyTheOwnerOfThisAccountCanPerformThisAction";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["AnnouncementEditLimitExceeded"] = 20022] = "AnnouncementEditLimitExceeded";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UnderMinimumAge"] = 20024] = "UnderMinimumAge";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ChannelSendRateLimit"] = 20028] = "ChannelSendRateLimit";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ServerSendRateLimit"] = 20029] = "ServerSendRateLimit";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords"] = 20031] = "StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["GuildPremiumSubscriptionLevelTooLow"] = 20035] = "GuildPremiumSubscriptionLevelTooLow";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfGuildsReached"] = 30001] = "MaximumNumberOfGuildsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfFriendsReached"] = 30002] = "MaximumNumberOfFriendsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfPinsReachedForTheChannel"] = 30003] = "MaximumNumberOfPinsReachedForTheChannel";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfRecipientsReached"] = 30004] = "MaximumNumberOfRecipientsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfGuildRolesReached"] = 30005] = "MaximumNumberOfGuildRolesReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfWebhooksReached"] = 30007] = "MaximumNumberOfWebhooksReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfEmojisReached"] = 30008] = "MaximumNumberOfEmojisReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfReactionsReached"] = 30010] = "MaximumNumberOfReactionsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfGroupDMsReached"] = 30011] = "MaximumNumberOfGroupDMsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfGuildChannelsReached"] = 30013] = "MaximumNumberOfGuildChannelsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfAttachmentsInAMessageReached"] = 30015] = "MaximumNumberOfAttachmentsInAMessageReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfInvitesReached"] = 30016] = "MaximumNumberOfInvitesReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfAnimatedEmojisReached"] = 30018] = "MaximumNumberOfAnimatedEmojisReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfServerMembersReached"] = 30019] = "MaximumNumberOfServerMembersReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfServerCategoriesReached"] = 30030] = "MaximumNumberOfServerCategoriesReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["GuildAlreadyHasTemplate"] = 30031] = "GuildAlreadyHasTemplate";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfApplicationCommandsReached"] = 30032] = "MaximumNumberOfApplicationCommandsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumThreadParticipantsReached"] = 30033] = "MaximumThreadParticipantsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumDailyApplicationCommandCreatesReached"] = 30034] = "MaximumDailyApplicationCommandCreatesReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfNonGuildMemberBansHasBeenExceeded"] = 30035] = "MaximumNumberOfNonGuildMemberBansHasBeenExceeded";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfBanFetchesHasBeenReached"] = 30037] = "MaximumNumberOfBanFetchesHasBeenReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfUncompletedGuildScheduledEventsReached"] = 30038] = "MaximumNumberOfUncompletedGuildScheduledEventsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfStickersReached"] = 30039] = "MaximumNumberOfStickersReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfPruneRequestsHasBeenReached"] = 30040] = "MaximumNumberOfPruneRequestsHasBeenReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached"] = 30042] = "MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfSoundboardSoundsReached"] = 30045] = "MaximumNumberOfSoundboardSoundsReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfEditsToMessagesOlderThanOneHourReached"] = 30046] = "MaximumNumberOfEditsToMessagesOlderThanOneHourReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfPinnedThreadsInForumHasBeenReached"] = 30047] = "MaximumNumberOfPinnedThreadsInForumHasBeenReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfTagsInForumHasBeenReached"] = 30048] = "MaximumNumberOfTagsInForumHasBeenReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["BitrateIsTooHighForChannelOfThisType"] = 30052] = "BitrateIsTooHighForChannelOfThisType";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfPremiumEmojisReached"] = 30056] = "MaximumNumberOfPremiumEmojisReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfWebhooksPerGuildReached"] = 30058] = "MaximumNumberOfWebhooksPerGuildReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumNumberOfChannelPermissionOverwritesReached"] = 30060] = "MaximumNumberOfChannelPermissionOverwritesReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TheChannelsForThisGuildAreTooLarge"] = 30061] = "TheChannelsForThisGuildAreTooLarge";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["Unauthorized"] = 40001] = "Unauthorized";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["VerifyYourAccount"] = 40002] = "VerifyYourAccount";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["OpeningDirectMessagesTooFast"] = 40003] = "OpeningDirectMessagesTooFast";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["SendMessagesHasBeenTemporarilyDisabled"] = 40004] = "SendMessagesHasBeenTemporarilyDisabled";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["RequestEntityTooLarge"] = 40005] = "RequestEntityTooLarge";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["FeatureTemporarilyDisabledServerSide"] = 40006] = "FeatureTemporarilyDisabledServerSide";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UserBannedFromThisGuild"] = 40007] = "UserBannedFromThisGuild";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ConnectionHasBeenRevoked"] = 40012] = "ConnectionHasBeenRevoked";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["OnlyConsumableSKUsCanBeConsumed"] = 40018] = "OnlyConsumableSKUsCanBeConsumed";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["YouCanOnlyDeleteSandboxEntitlements"] = 40019] = "YouCanOnlyDeleteSandboxEntitlements";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TargetUserIsNotConnectedToVoice"] = 40032] = "TargetUserIsNotConnectedToVoice";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ThisMessageWasAlreadyCrossposted"] = 40033] = "ThisMessageWasAlreadyCrossposted";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ApplicationCommandWithThatNameAlreadyExists"] = 40041] = "ApplicationCommandWithThatNameAlreadyExists";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ApplicationInteractionFailedToSend"] = 40043] = "ApplicationInteractionFailedToSend";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotSendAMessageInAForumChannel"] = 40058] = "CannotSendAMessageInAForumChannel";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InteractionHasAlreadyBeenAcknowledged"] = 40060] = "InteractionHasAlreadyBeenAcknowledged";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TagNamesMustBeUnique"] = 40061] = "TagNamesMustBeUnique";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ServiceResourceIsBeingRateLimited"] = 40062] = "ServiceResourceIsBeingRateLimited";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ThereAreNoTagsAvailableThatCanBeSetByNonModerators"] = 40066] = "ThereAreNoTagsAvailableThatCanBeSetByNonModerators";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TagRequiredToCreateAForumPostInThisChannel"] = 40067] = "TagRequiredToCreateAForumPostInThisChannel";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["AnEntitlementHasAlreadyBeenGrantedForThisResource"] = 40074] = "AnEntitlementHasAlreadyBeenGrantedForThisResource";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ThisInteractionHasHitTheMaximumNumberOfFollowUpMessages"] = 40094] = "ThisInteractionHasHitTheMaximumNumberOfFollowUpMessages";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CloudflareIsBlockingYourRequest"] = 40333] = "CloudflareIsBlockingYourRequest";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MissingAccess"] = 50001] = "MissingAccess";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidAccountType"] = 50002] = "InvalidAccountType";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotExecuteActionOnDMChannel"] = 50003] = "CannotExecuteActionOnDMChannel";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["GuildWidgetDisabled"] = 50004] = "GuildWidgetDisabled";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotEditMessageAuthoredByAnotherUser"] = 50005] = "CannotEditMessageAuthoredByAnotherUser";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotSendAnEmptyMessage"] = 50006] = "CannotSendAnEmptyMessage";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotSendMessagesToThisUser"] = 50007] = "CannotSendMessagesToThisUser";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotSendMessagesInNonTextChannel"] = 50008] = "CannotSendMessagesInNonTextChannel";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ChannelVerificationLevelTooHighForYouToGainAccess"] = 50009] = "ChannelVerificationLevelTooHighForYouToGainAccess";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["OAuth2ApplicationDoesNotHaveBot"] = 50010] = "OAuth2ApplicationDoesNotHaveBot";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["OAuth2ApplicationLimitReached"] = 50011] = "OAuth2ApplicationLimitReached";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidOAuth2State"] = 50012] = "InvalidOAuth2State";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MissingPermissions"] = 50013] = "MissingPermissions";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidToken"] = 50014] = "InvalidToken";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["NoteWasTooLong"] = 50015] = "NoteWasTooLong";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ProvidedTooFewOrTooManyMessagesToDelete"] = 50016] = "ProvidedTooFewOrTooManyMessagesToDelete";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidMFALevel"] = 50017] = "InvalidMFALevel";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MessageCanOnlyBePinnedInTheChannelItWasSentIn"] = 50019] = "MessageCanOnlyBePinnedInTheChannelItWasSentIn";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InviteCodeInvalidOrTaken"] = 50020] = "InviteCodeInvalidOrTaken";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotExecuteActionOnSystemMessage"] = 50021] = "CannotExecuteActionOnSystemMessage";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotExecuteActionOnThisChannelType"] = 50024] = "CannotExecuteActionOnThisChannelType";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidOAuth2AccessToken"] = 50025] = "InvalidOAuth2AccessToken";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MissingRequiredOAuth2Scope"] = 50026] = "MissingRequiredOAuth2Scope";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidWebhookToken"] = 50027] = "InvalidWebhookToken";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidRole"] = 50028] = "InvalidRole";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidRecipients"] = 50033] = "InvalidRecipients";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["OneOfTheMessagesProvidedWasTooOldForBulkDelete"] = 50034] = "OneOfTheMessagesProvidedWasTooOldForBulkDelete";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidFormBodyOrContentType"] = 50035] = "InvalidFormBodyOrContentType";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InviteAcceptedToGuildWithoutTheBotBeingIn"] = 50036] = "InviteAcceptedToGuildWithoutTheBotBeingIn";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidActivityAction"] = 50039] = "InvalidActivityAction";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidAPIVersion"] = 50041] = "InvalidAPIVersion";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["FileUploadedExceedsMaximumSize"] = 50045] = "FileUploadedExceedsMaximumSize";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidFileUploaded"] = 50046] = "InvalidFileUploaded";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotSelfRedeemThisGift"] = 50054] = "CannotSelfRedeemThisGift";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidGuild"] = 50055] = "InvalidGuild";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidSKU"] = 50057] = "InvalidSKU";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidRequestOrigin"] = 50067] = "InvalidRequestOrigin";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidMessageType"] = 50068] = "InvalidMessageType";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["PaymentSourceRequiredToRedeemGift"] = 50070] = "PaymentSourceRequiredToRedeemGift";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotModifyASystemWebhook"] = 50073] = "CannotModifyASystemWebhook";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotDeleteChannelRequiredForCommunityGuilds"] = 50074] = "CannotDeleteChannelRequiredForCommunityGuilds";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotEditStickersWithinMessage"] = 50080] = "CannotEditStickersWithinMessage";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidStickerSent"] = 50081] = "InvalidStickerSent";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidActionOnArchivedThread"] = 50083] = "InvalidActionOnArchivedThread";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidThreadNotificationSettings"] = 50084] = "InvalidThreadNotificationSettings";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ParameterEarlierThanCreation"] = 50085] = "ParameterEarlierThanCreation";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CommunityServerChannelsMustBeTextChannels"] = 50086] = "CommunityServerChannelsMustBeTextChannels";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor"] = 50091] = "TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ServerNotAvailableInYourLocation"] = 50095] = "ServerNotAvailableInYourLocation";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ServerNeedsMonetizationEnabledToPerformThisAction"] = 50097] = "ServerNeedsMonetizationEnabledToPerformThisAction";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ServerNeedsMoreBoostsToPerformThisAction"] = 50101] = "ServerNeedsMoreBoostsToPerformThisAction";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["RequestBodyContainsInvalidJSON"] = 50109] = "RequestBodyContainsInvalidJSON";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ProvidedFileIsInvalid"] = 50110] = "ProvidedFileIsInvalid";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ProvidedFileTypeIsInvalid"] = 50123] = "ProvidedFileTypeIsInvalid";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ProvidedFileDurationExceedsMaximumLength"] = 50124] = "ProvidedFileDurationExceedsMaximumLength";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["OwnerCannotBePendingMember"] = 50131] = "OwnerCannotBePendingMember";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["OwnershipCannotBeMovedToABotUser"] = 50132] = "OwnershipCannotBeMovedToABotUser";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["FailedToResizeAssetBelowTheMinimumSize"] = 50138] = "FailedToResizeAssetBelowTheMinimumSize";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji"] = 50144] = "CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotConvertBetweenPremiumEmojiAndNormalEmoji"] = 50145] = "CannotConvertBetweenPremiumEmojiAndNormalEmoji";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UploadedFileNotFound"] = 50146] = "UploadedFileNotFound";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["SpecifiedEmojiIsInvalid"] = 50151] = "SpecifiedEmojiIsInvalid";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["VoiceMessagesDoNotSupportAdditionalContent"] = 50159] = "VoiceMessagesDoNotSupportAdditionalContent";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["VoiceMessagesMustHaveASingleAudioAttachment"] = 50160] = "VoiceMessagesMustHaveASingleAudioAttachment";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["VoiceMessagesMustHaveSupportingMetadata"] = 50161] = "VoiceMessagesMustHaveSupportingMetadata";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["VoiceMessagesCannotBeEdited"] = 50162] = "VoiceMessagesCannotBeEdited";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotDeleteGuildSubscriptionIntegration"] = 50163] = "CannotDeleteGuildSubscriptionIntegration";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["YouCannotSendVoiceMessagesInThisChannel"] = 50173] = "YouCannotSendVoiceMessagesInThisChannel";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TheUserAccountMustFirstBeVerified"] = 50178] = "TheUserAccountMustFirstBeVerified";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ProvidedFileDoesNotHaveAValidDuration"] = 50192] = "ProvidedFileDoesNotHaveAValidDuration";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["YouDoNotHavePermissionToSendThisSticker"] = 50600] = "YouDoNotHavePermissionToSendThisSticker";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TwoFactorAuthenticationIsRequired"] = 60003] = "TwoFactorAuthenticationIsRequired";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["NoUsersWithDiscordTagExist"] = 80004] = "NoUsersWithDiscordTagExist";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ReactionWasBlocked"] = 90001] = "ReactionWasBlocked";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UserCannotUseBurstReactions"] = 90002] = "UserCannotUseBurstReactions";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ApplicationNotYetAvailable"] = 110001] = "ApplicationNotYetAvailable";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["APIResourceOverloaded"] = 13e4] = "APIResourceOverloaded";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TheStageIsAlreadyOpen"] = 150006] = "TheStageIsAlreadyOpen";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotReplyWithoutPermissionToReadMessageHistory"] = 160002] = "CannotReplyWithoutPermissionToReadMessageHistory";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ThreadAlreadyCreatedForMessage"] = 160004] = "ThreadAlreadyCreatedForMessage";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["ThreadLocked"] = 160005] = "ThreadLocked";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumActiveThreads"] = 160006] = "MaximumActiveThreads";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MaximumActiveAnnouncementThreads"] = 160007] = "MaximumActiveAnnouncementThreads";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidJSONForUploadedLottieFile"] = 170001] = "InvalidJSONForUploadedLottieFile";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["UploadedLottiesCannotContainRasterizedImages"] = 170002] = "UploadedLottiesCannotContainRasterizedImages";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["StickerMaximumFramerateExceeded"] = 170003] = "StickerMaximumFramerateExceeded";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["StickerFrameCountExceedsMaximumOf1000Frames"] = 170004] = "StickerFrameCountExceedsMaximumOf1000Frames";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["LottieAnimationMaximumDimensionsExceeded"] = 170005] = "LottieAnimationMaximumDimensionsExceeded";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["StickerFramerateIsTooSmallOrTooLarge"] = 170006] = "StickerFramerateIsTooSmallOrTooLarge";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["StickerAnimationDurationExceedsMaximumOf5Seconds"] = 170007] = "StickerAnimationDurationExceedsMaximumOf5Seconds";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotUpdateAFinishedEvent"] = 18e4] = "CannotUpdateAFinishedEvent";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["FailedToCreateStageNeededForStageEvent"] = 180002] = "FailedToCreateStageNeededForStageEvent";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MessageWasBlockedByAutomaticModeration"] = 2e5] = "MessageWasBlockedByAutomaticModeration";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["TitleWasBlockedByAutomaticModeration"] = 200001] = "TitleWasBlockedByAutomaticModeration";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId"] = 220001] = "WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId"] = 220002] = "WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["WebhooksCanOnlyCreateThreadsInForumChannels"] = 220003] = "WebhooksCanOnlyCreateThreadsInForumChannels";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["WebhookServicesCannotBeUsedInForumChannels"] = 220004] = "WebhookServicesCannotBeUsedInForumChannels";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["MessageBlockedByHarmfulLinksFilter"] = 24e4] = "MessageBlockedByHarmfulLinksFilter";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotEnableOnboardingRequirementsAreNotMet"] = 35e4] = "CannotEnableOnboardingRequirementsAreNotMet";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotUpdateOnboardingWhileBelowRequirements"] = 350001] = "CannotUpdateOnboardingWhileBelowRequirements";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["FailedToBanUsers"] = 5e5] = "FailedToBanUsers";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["PollVotingBlocked"] = 52e4] = "PollVotingBlocked";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["PollExpired"] = 520001] = "PollExpired";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["InvalidChannelTypeForPollCreation"] = 520002] = "InvalidChannelTypeForPollCreation";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotEditAPollMessage"] = 520003] = "CannotEditAPollMessage";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotUseAnEmojiIncludedWithThePoll"] = 520004] = "CannotUseAnEmojiIncludedWithThePoll";
      RESTJSONErrorCodes2[RESTJSONErrorCodes2["CannotExpireANonPollMessage"] = 520006] = "CannotExpireANonPollMessage";
    })(RESTJSONErrorCodes || (exports.RESTJSONErrorCodes = RESTJSONErrorCodes = {}));
    var Locale;
    (function(Locale2) {
      Locale2["Indonesian"] = "id";
      Locale2["EnglishUS"] = "en-US";
      Locale2["EnglishGB"] = "en-GB";
      Locale2["Bulgarian"] = "bg";
      Locale2["ChineseCN"] = "zh-CN";
      Locale2["ChineseTW"] = "zh-TW";
      Locale2["Croatian"] = "hr";
      Locale2["Czech"] = "cs";
      Locale2["Danish"] = "da";
      Locale2["Dutch"] = "nl";
      Locale2["Finnish"] = "fi";
      Locale2["French"] = "fr";
      Locale2["German"] = "de";
      Locale2["Greek"] = "el";
      Locale2["Hindi"] = "hi";
      Locale2["Hungarian"] = "hu";
      Locale2["Italian"] = "it";
      Locale2["Japanese"] = "ja";
      Locale2["Korean"] = "ko";
      Locale2["Lithuanian"] = "lt";
      Locale2["Norwegian"] = "no";
      Locale2["Polish"] = "pl";
      Locale2["PortugueseBR"] = "pt-BR";
      Locale2["Romanian"] = "ro";
      Locale2["Russian"] = "ru";
      Locale2["SpanishES"] = "es-ES";
      Locale2["SpanishLATAM"] = "es-419";
      Locale2["Swedish"] = "sv-SE";
      Locale2["Thai"] = "th";
      Locale2["Turkish"] = "tr";
      Locale2["Ukrainian"] = "uk";
      Locale2["Vietnamese"] = "vi";
    })(Locale || (exports.Locale = Locale = {}));
  }
});

// node_modules/discord-api-types/rest/v10/application.js
var require_application2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/application.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/auditLog.js
var require_auditLog2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/auditLog.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/autoModeration.js
var require_autoModeration2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/autoModeration.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/channel.js
var require_channel3 = __commonJS({
  "node_modules/discord-api-types/rest/v10/channel.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReactionType = void 0;
    var ReactionType;
    (function(ReactionType2) {
      ReactionType2[ReactionType2["Normal"] = 0] = "Normal";
      ReactionType2[ReactionType2["Super"] = 1] = "Super";
    })(ReactionType || (exports.ReactionType = ReactionType = {}));
  }
});

// node_modules/discord-api-types/rest/v10/emoji.js
var require_emoji2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/emoji.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/gateway.js
var require_gateway2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/gateway.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/guild.js
var require_guild2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/guild.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/guildScheduledEvent.js
var require_guildScheduledEvent2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/guildScheduledEvent.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/interactions.js
var require_interactions2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/interactions.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/invite.js
var require_invite2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/invite.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/monetization.js
var require_monetization2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/monetization.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntitlementOwnerType = void 0;
    var EntitlementOwnerType;
    (function(EntitlementOwnerType2) {
      EntitlementOwnerType2[EntitlementOwnerType2["Guild"] = 1] = "Guild";
      EntitlementOwnerType2[EntitlementOwnerType2["User"] = 2] = "User";
    })(EntitlementOwnerType || (exports.EntitlementOwnerType = EntitlementOwnerType = {}));
  }
});

// node_modules/discord-api-types/rest/v10/oauth2.js
var require_oauth22 = __commonJS({
  "node_modules/discord-api-types/rest/v10/oauth2.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/poll.js
var require_poll2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/poll.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/soundboard.js
var require_soundboard2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/soundboard.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/stageInstance.js
var require_stageInstance2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/stageInstance.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/sticker.js
var require_sticker2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/sticker.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/template.js
var require_template2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/template.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/user.js
var require_user3 = __commonJS({
  "node_modules/discord-api-types/rest/v10/user.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/voice.js
var require_voice2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/voice.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/webhook.js
var require_webhook2 = __commonJS({
  "node_modules/discord-api-types/rest/v10/webhook.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/discord-api-types/rest/v10/index.js
var require_v103 = __commonJS({
  "node_modules/discord-api-types/rest/v10/index.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p2 in m)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuth2Routes = exports.RouteBases = exports.CDNRoutes = exports.ImageFormat = exports.StickerPackApplicationId = exports.Routes = exports.APIVersion = void 0;
    var internals_1 = require_internals();
    __exportStar(require_common3(), exports);
    __exportStar(require_application2(), exports);
    __exportStar(require_auditLog2(), exports);
    __exportStar(require_autoModeration2(), exports);
    __exportStar(require_channel3(), exports);
    __exportStar(require_emoji2(), exports);
    __exportStar(require_gateway2(), exports);
    __exportStar(require_guild2(), exports);
    __exportStar(require_guildScheduledEvent2(), exports);
    __exportStar(require_interactions2(), exports);
    __exportStar(require_invite2(), exports);
    __exportStar(require_monetization2(), exports);
    __exportStar(require_oauth22(), exports);
    __exportStar(require_poll2(), exports);
    __exportStar(require_soundboard2(), exports);
    __exportStar(require_stageInstance2(), exports);
    __exportStar(require_sticker2(), exports);
    __exportStar(require_template2(), exports);
    __exportStar(require_user3(), exports);
    __exportStar(require_voice2(), exports);
    __exportStar(require_webhook2(), exports);
    exports.APIVersion = "10";
    exports.Routes = {
      /**
       * Route for:
       * - GET `/applications/{application.id}/role-connections/metadata`
       * - PUT `/applications/{application.id}/role-connections/metadata`
       */
      applicationRoleConnectionMetadata(applicationId) {
        return `/applications/${applicationId}/role-connections/metadata`;
      },
      /**
       * Route for:
       * - GET  `/guilds/{guild.id}/auto-moderation/rules`
       * - POST `/guilds/{guild.id}/auto-moderation/rules`
       */
      guildAutoModerationRules(guildId) {
        return `/guilds/${guildId}/auto-moderation/rules`;
      },
      /**
       * Routes for:
       * - GET    `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
       * - PATCH  `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
       * - DELETE `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
       */
      guildAutoModerationRule(guildId, ruleId) {
        return `/guilds/${guildId}/auto-moderation/rules/${ruleId}`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/audit-logs`
       */
      guildAuditLog(guildId) {
        return `/guilds/${guildId}/audit-logs`;
      },
      /**
       * Route for:
       * - GET    `/channels/{channel.id}`
       * - PATCH  `/channels/{channel.id}`
       * - DELETE `/channels/{channel.id}`
       */
      channel(channelId) {
        return `/channels/${channelId}`;
      },
      /**
       * Route for:
       * - GET  `/channels/{channel.id}/messages`
       * - POST `/channels/{channel.id}/messages`
       */
      channelMessages(channelId) {
        return `/channels/${channelId}/messages`;
      },
      /**
       * Route for:
       * - GET    `/channels/{channel.id}/messages/{message.id}`
       * - PATCH  `/channels/{channel.id}/messages/{message.id}`
       * - DELETE `/channels/{channel.id}/messages/{message.id}`
       */
      channelMessage(channelId, messageId) {
        return `/channels/${channelId}/messages/${messageId}`;
      },
      /**
       * Route for:
       * - POST `/channels/{channel.id}/messages/{message.id}/crosspost`
       */
      channelMessageCrosspost(channelId, messageId) {
        return `/channels/${channelId}/messages/${messageId}/crosspost`;
      },
      /**
       * Route for:
       * - PUT    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
       * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
       *
       * **Note**: You need to URL encode the emoji yourself
       */
      channelMessageOwnReaction(channelId, messageId, emoji) {
        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`;
      },
      /**
       * Route for:
       * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}`
       *
       * **Note**: You need to URL encode the emoji yourself
       */
      channelMessageUserReaction(channelId, messageId, emoji, userId) {
        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`;
      },
      /**
       * Route for:
       * - GET    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
       * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
       *
       * **Note**: You need to URL encode the emoji yourself
       */
      channelMessageReaction(channelId, messageId, emoji) {
        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`;
      },
      /**
       * Route for:
       * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions`
       */
      channelMessageAllReactions(channelId, messageId) {
        return `/channels/${channelId}/messages/${messageId}/reactions`;
      },
      /**
       * Route for:
       * - POST `/channels/{channel.id}/messages/bulk-delete`
       */
      channelBulkDelete(channelId) {
        return `/channels/${channelId}/messages/bulk-delete`;
      },
      /**
       * Route for:
       * - PUT    `/channels/{channel.id}/permissions/{overwrite.id}`
       * - DELETE `/channels/{channel.id}/permissions/{overwrite.id}`
       */
      channelPermission(channelId, overwriteId) {
        return `/channels/${channelId}/permissions/${overwriteId}`;
      },
      /**
       * Route for:
       * - GET  `/channels/{channel.id}/invites`
       * - POST `/channels/{channel.id}/invites`
       */
      channelInvites(channelId) {
        return `/channels/${channelId}/invites`;
      },
      /**
       * Route for:
       * - POST `/channels/{channel.id}/followers`
       */
      channelFollowers(channelId) {
        return `/channels/${channelId}/followers`;
      },
      /**
       * Route for:
       * - POST `/channels/{channel.id}/typing`
       */
      channelTyping(channelId) {
        return `/channels/${channelId}/typing`;
      },
      /**
       * Route for:
       * - GET `/channels/{channel.id}/pins`
       */
      channelPins(channelId) {
        return `/channels/${channelId}/pins`;
      },
      /**
       * Route for:
       * - PUT    `/channels/{channel.id}/pins/{message.id}`
       * - DELETE `/channels/{channel.id}/pins/{message.id}`
       */
      channelPin(channelId, messageId) {
        return `/channels/${channelId}/pins/${messageId}`;
      },
      /**
       * Route for:
       * - PUT    `/channels/{channel.id}/recipients/{user.id}`
       * - DELETE `/channels/{channel.id}/recipients/{user.id}`
       */
      channelRecipient(channelId, userId) {
        return `/channels/${channelId}/recipients/${userId}`;
      },
      /**
       * Route for:
       * - GET  `/guilds/{guild.id}/emojis`
       * - POST `/guilds/{guild.id}/emojis`
       */
      guildEmojis(guildId) {
        return `/guilds/${guildId}/emojis`;
      },
      /**
       * Route for:
       * - GET    `/guilds/{guild.id}/emojis/{emoji.id}`
       * - PATCH  `/guilds/{guild.id}/emojis/{emoji.id}`
       * - DELETE `/guilds/{guild.id}/emojis/{emoji.id}`
       */
      guildEmoji(guildId, emojiId) {
        return `/guilds/${guildId}/emojis/${emojiId}`;
      },
      /**
       * Route for:
       * - POST `/guilds`
       */
      guilds() {
        return "/guilds";
      },
      /**
       * Route for:
       * - GET    `/guilds/{guild.id}`
       * - PATCH  `/guilds/{guild.id}`
       * - DELETE `/guilds/{guild.id}`
       */
      guild(guildId) {
        return `/guilds/${guildId}`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/preview`
       */
      guildPreview(guildId) {
        return `/guilds/${guildId}/preview`;
      },
      /**
       * Route for:
       * - GET   `/guilds/{guild.id}/channels`
       * - POST  `/guilds/{guild.id}/channels`
       * - PATCH `/guilds/{guild.id}/channels`
       */
      guildChannels(guildId) {
        return `/guilds/${guildId}/channels`;
      },
      /**
       * Route for:
       * - GET    `/guilds/{guild.id}/members/{user.id}`
       * - PUT    `/guilds/{guild.id}/members/{user.id}`
       * - PATCH  `/guilds/{guild.id}/members/@me`
       * - PATCH  `/guilds/{guild.id}/members/{user.id}`
       * - DELETE `/guilds/{guild.id}/members/{user.id}`
       */
      guildMember(guildId, userId = "@me") {
        return `/guilds/${guildId}/members/${userId}`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/members`
       */
      guildMembers(guildId) {
        return `/guilds/${guildId}/members`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/members/search`
       */
      guildMembersSearch(guildId) {
        return `/guilds/${guildId}/members/search`;
      },
      /**
       * Route for:
       * - PATCH `/guilds/{guild.id}/members/@me/nick`
       *
       * @deprecated Use {@link Routes.guildMember} instead.
       */
      guildCurrentMemberNickname(guildId) {
        return `/guilds/${guildId}/members/@me/nick`;
      },
      /**
       * Route for:
       * - PUT    `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
       * - DELETE `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
       */
      guildMemberRole(guildId, memberId, roleId) {
        return `/guilds/${guildId}/members/${memberId}/roles/${roleId}`;
      },
      /**
       * Route for:
       * - POST `/guilds/{guild.id}/mfa`
       */
      guildMFA(guildId) {
        return `/guilds/${guildId}/mfa`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/bans`
       */
      guildBans(guildId) {
        return `/guilds/${guildId}/bans`;
      },
      /**
       * Route for:
       * - GET    `/guilds/{guild.id}/bans/{user.id}`
       * - PUT    `/guilds/{guild.id}/bans/{user.id}`
       * - DELETE `/guilds/{guild.id}/bans/{user.id}`
       */
      guildBan(guildId, userId) {
        return `/guilds/${guildId}/bans/${userId}`;
      },
      /**
       * Route for:
       * - GET   `/guilds/{guild.id}/roles`
       * - POST  `/guilds/{guild.id}/roles`
       * - PATCH `/guilds/{guild.id}/roles`
       */
      guildRoles(guildId) {
        return `/guilds/${guildId}/roles`;
      },
      /**
       * Route for:
       * - GET    `/guilds/{guild.id}/roles/{role.id}`
       * - PATCH  `/guilds/{guild.id}/roles/{role.id}`
       * - DELETE `/guilds/{guild.id}/roles/{role.id}`
       */
      guildRole(guildId, roleId) {
        return `/guilds/${guildId}/roles/${roleId}`;
      },
      /**
       * Route for:
       * - GET  `/guilds/{guild.id}/prune`
       * - POST `/guilds/{guild.id}/prune`
       */
      guildPrune(guildId) {
        return `/guilds/${guildId}/prune`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/regions`
       */
      guildVoiceRegions(guildId) {
        return `/guilds/${guildId}/regions`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/invites`
       */
      guildInvites(guildId) {
        return `/guilds/${guildId}/invites`;
      },
      /**
       * Route for:
       * - GET  `/guilds/{guild.id}/integrations`
       */
      guildIntegrations(guildId) {
        return `/guilds/${guildId}/integrations`;
      },
      /**
       * Route for:
       * - DELETE `/guilds/{guild.id}/integrations/{integration.id}`
       */
      guildIntegration(guildId, integrationId) {
        return `/guilds/${guildId}/integrations/${integrationId}`;
      },
      /**
       * Route for:
       * - GET   `/guilds/{guild.id}/widget`
       * - PATCH `/guilds/{guild.id}/widget`
       */
      guildWidgetSettings(guildId) {
        return `/guilds/${guildId}/widget`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/widget.json`
       */
      guildWidgetJSON(guildId) {
        return `/guilds/${guildId}/widget.json`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/vanity-url`
       */
      guildVanityUrl(guildId) {
        return `/guilds/${guildId}/vanity-url`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/widget.png`
       */
      guildWidgetImage(guildId) {
        return `/guilds/${guildId}/widget.png`;
      },
      /**
       * Route for:
       * - GET    `/invites/{invite.code}`
       * - DELETE `/invites/{invite.code}`
       */
      invite(code) {
        return `/invites/${code}`;
      },
      /**
       * Route for:
       * - GET  `/guilds/templates/{template.code}`
       * - POST `/guilds/templates/{template.code}`
       */
      template(code) {
        return `/guilds/templates/${code}`;
      },
      /**
       * Route for:
       * - GET  `/guilds/{guild.id}/templates`
       * - POST `/guilds/{guild.id}/templates`
       */
      guildTemplates(guildId) {
        return `/guilds/${guildId}/templates`;
      },
      /**
       * Route for:
       * - PUT    `/guilds/{guild.id}/templates/{template.code}`
       * - PATCH  `/guilds/{guild.id}/templates/{template.code}`
       * - DELETE `/guilds/{guild.id}/templates/{template.code}`
       */
      guildTemplate(guildId, code) {
        return `/guilds/${guildId}/templates/${code}`;
      },
      /**
       * Route for:
       * - GET `/channels/{channel.id}/polls/{message.id}/answers/{answer_id}`
       */
      pollAnswerVoters(channelId, messageId, answerId) {
        return `/channels/${channelId}/polls/${messageId}/answers/${answerId}`;
      },
      /**
       * Route for:
       * - POST `/channels/{channel.id}/polls/{message.id}/expire`
       */
      expirePoll(channelId, messageId) {
        return `/channels/${channelId}/polls/${messageId}/expire`;
      },
      /**
       * Route for:
       * - POST `/channels/{channel.id}/threads`
       * - POST `/channels/{channel.id}/messages/{message.id}/threads`
       */
      threads(parentId, messageId) {
        const parts = ["", "channels", parentId];
        if (messageId)
          parts.push("messages", messageId);
        parts.push("threads");
        return parts.join("/");
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/threads/active`
       */
      guildActiveThreads(guildId) {
        return `/guilds/${guildId}/threads/active`;
      },
      /**
       * Route for:
       * - GET `/channels/{channel.id}/threads/archived/public`
       * - GET `/channels/{channel.id}/threads/archived/private`
       */
      channelThreads(channelId, archivedStatus) {
        return `/channels/${channelId}/threads/archived/${archivedStatus}`;
      },
      /**
       * Route for:
       * - GET `/channels/{channel.id}/users/@me/threads/archived/private`
       */
      channelJoinedArchivedThreads(channelId) {
        return `/channels/${channelId}/users/@me/threads/archived/private`;
      },
      /**
       * Route for:
       * - GET    `/channels/{thread.id}/thread-members`
       * - GET    `/channels/{thread.id}/thread-members/{user.id}`
       * - PUT    `/channels/{thread.id}/thread-members/@me`
       * - PUT    `/channels/{thread.id}/thread-members/{user.id}`
       * - DELETE `/channels/{thread.id}/thread-members/@me`
       * - DELETE `/channels/{thread.id}/thread-members/{user.id}`
       */
      threadMembers(threadId, userId) {
        const parts = ["", "channels", threadId, "thread-members"];
        if (userId)
          parts.push(userId);
        return parts.join("/");
      },
      /**
       * Route for:
       * - GET   `/users/@me`
       * - GET   `/users/{user.id}`
       * - PATCH `/users/@me`
       *
       * @param [userId] The user ID, defaulted to `@me`
       */
      user(userId = "@me") {
        return `/users/${userId}`;
      },
      /**
       * Route for:
       * - GET `/users/@me/applications/{application.id}/role-connection`
       * - PUT `/users/@me/applications/{application.id}/role-connection`
       */
      userApplicationRoleConnection(applicationId) {
        return `/users/@me/applications/${applicationId}/role-connection`;
      },
      /**
       * Route for:
       * - GET `/users/@me/guilds`
       */
      userGuilds() {
        return `/users/@me/guilds`;
      },
      /**
       * Route for:
       * - GET `/users/@me/guilds/{guild.id}/member`
       */
      userGuildMember(guildId) {
        return `/users/@me/guilds/${guildId}/member`;
      },
      /**
       * Route for:
       * - DELETE `/users/@me/guilds/{guild.id}`
       */
      userGuild(guildId) {
        return `/users/@me/guilds/${guildId}`;
      },
      /**
       * Route for:
       * - POST `/users/@me/channels`
       */
      userChannels() {
        return `/users/@me/channels`;
      },
      /**
       * Route for:
       * - GET `/users/@me/connections`
       */
      userConnections() {
        return `/users/@me/connections`;
      },
      /**
       * Route for:
       * - GET `/voice/regions`
       */
      voiceRegions() {
        return `/voice/regions`;
      },
      /**
       * Route for:
       * - GET  `/channels/{channel.id}/webhooks`
       * - POST `/channels/{channel.id}/webhooks`
       */
      channelWebhooks(channelId) {
        return `/channels/${channelId}/webhooks`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/webhooks`
       */
      guildWebhooks(guildId) {
        return `/guilds/${guildId}/webhooks`;
      },
      /**
       * Route for:
       * - GET    `/webhooks/{webhook.id}`
       * - GET    `/webhooks/{webhook.id}/{webhook.token}`
       * - PATCH  `/webhooks/{webhook.id}`
       * - PATCH  `/webhooks/{webhook.id}/{webhook.token}`
       * - DELETE `/webhooks/{webhook.id}`
       * - DELETE `/webhooks/{webhook.id}/{webhook.token}`
       * - POST   `/webhooks/{webhook.id}/{webhook.token}`
       *
       * - POST   `/webhooks/{application.id}/{interaction.token}`
       */
      webhook(webhookId, webhookToken) {
        const parts = ["", "webhooks", webhookId];
        if (webhookToken)
          parts.push(webhookToken);
        return parts.join("/");
      },
      /**
       * Route for:
       * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
       * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
       * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
       * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
       * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
       * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
       *
       * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/@original`
       * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
       * - DELETE `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
       */
      webhookMessage(webhookId, webhookToken, messageId = "@original") {
        return `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`;
      },
      /**
       * Route for:
       * - POST `/webhooks/{webhook.id}/{webhook.token}/github`
       * - POST `/webhooks/{webhook.id}/{webhook.token}/slack`
       */
      webhookPlatform(webhookId, webhookToken, platform) {
        return `/webhooks/${webhookId}/${webhookToken}/${platform}`;
      },
      /**
       * Route for:
       * - GET `/gateway`
       */
      gateway() {
        return `/gateway`;
      },
      /**
       * Route for:
       * - GET `/gateway/bot`
       */
      gatewayBot() {
        return `/gateway/bot`;
      },
      /**
       * Route for:
       * - GET `/oauth2/applications/@me`
       */
      oauth2CurrentApplication() {
        return `/oauth2/applications/@me`;
      },
      /**
       * Route for:
       * - GET `/oauth2/@me`
       */
      oauth2CurrentAuthorization() {
        return `/oauth2/@me`;
      },
      /**
       * Route for:
       * - GET `/oauth2/authorize`
       */
      oauth2Authorization() {
        return `/oauth2/authorize`;
      },
      /**
       * Route for:
       * - POST `/oauth2/token`
       */
      oauth2TokenExchange() {
        return `/oauth2/token`;
      },
      /**
       * Route for:
       * - POST `/oauth2/token/revoke`
       */
      oauth2TokenRevocation() {
        return `/oauth2/token/revoke`;
      },
      /**
       * Route for:
       * - GET  `/applications/{application.id}/commands`
       * - PUT  `/applications/{application.id}/commands`
       * - POST `/applications/{application.id}/commands`
       */
      applicationCommands(applicationId) {
        return `/applications/${applicationId}/commands`;
      },
      /**
       * Route for:
       * - GET    `/applications/{application.id}/commands/{command.id}`
       * - PATCH  `/applications/{application.id}/commands/{command.id}`
       * - DELETE `/applications/{application.id}/commands/{command.id}`
       */
      applicationCommand(applicationId, commandId) {
        return `/applications/${applicationId}/commands/${commandId}`;
      },
      /**
       * Route for:
       * - GET  `/applications/{application.id}/guilds/{guild.id}/commands`
       * - PUT  `/applications/{application.id}/guilds/{guild.id}/commands`
       * - POST `/applications/{application.id}/guilds/{guild.id}/commands`
       */
      applicationGuildCommands(applicationId, guildId) {
        return `/applications/${applicationId}/guilds/${guildId}/commands`;
      },
      /**
       * Route for:
       * - GET    `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
       * - PATCH  `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
       * - DELETE `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
       */
      applicationGuildCommand(applicationId, guildId, commandId) {
        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`;
      },
      /**
       * Route for:
       * - POST `/interactions/{interaction.id}/{interaction.token}/callback`
       */
      interactionCallback(interactionId, interactionToken) {
        return `/interactions/${interactionId}/${interactionToken}/callback`;
      },
      /**
       * Route for:
       * - GET   `/guilds/{guild.id}/member-verification`
       * - PATCH `/guilds/{guild.id}/member-verification`
       */
      guildMemberVerification(guildId) {
        return `/guilds/${guildId}/member-verification`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/voice-states/@me`
       * - GET `/guilds/{guild.id}/voice-states/{user.id}`
       * - PATCH `/guilds/{guild.id}/voice-states/@me`
       * - PATCH `/guilds/{guild.id}/voice-states/{user.id}`
       */
      guildVoiceState(guildId, userId = "@me") {
        return `/guilds/${guildId}/voice-states/${userId}`;
      },
      /**
       * Route for:
       * - GET `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
       * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
       */
      guildApplicationCommandsPermissions(applicationId, guildId) {
        return `/applications/${applicationId}/guilds/${guildId}/commands/permissions`;
      },
      /**
       * Route for:
       * - GET `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
       * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
       */
      applicationCommandPermissions(applicationId, guildId, commandId) {
        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`;
      },
      /**
       * Route for:
       * - GET   `/guilds/{guild.id}/welcome-screen`
       * - PATCH `/guilds/{guild.id}/welcome-screen`
       */
      guildWelcomeScreen(guildId) {
        return `/guilds/${guildId}/welcome-screen`;
      },
      /**
       * Route for:
       * - POST `/stage-instances`
       */
      stageInstances() {
        return `/stage-instances`;
      },
      /**
       * Route for:
       * - GET `/stage-instances/{channel.id}`
       * - PATCH `/stage-instances/{channel.id}`
       * - DELETE `/stage-instances/{channel.id}`
       */
      stageInstance(channelId) {
        return `/stage-instances/${channelId}`;
      },
      /**
       * Route for:
       * - GET `/stickers/{sticker.id}`
       */
      sticker(stickerId) {
        return `/stickers/${stickerId}`;
      },
      /**
       * Route for:
       * - GET `/sticker-packs`
       */
      stickerPacks() {
        return "/sticker-packs";
      },
      /**
       * Route for:
       * - GET `/sticker-packs/{pack.id}`
       */
      stickerPack(packId) {
        return `/sticker-packs/${packId}`;
      },
      /**
       * Route for:
       * - GET `/sticker-packs`
       *
       * @deprecated Use {@link Routes.stickerPacks} instead.
       */
      nitroStickerPacks() {
        return "/sticker-packs";
      },
      /**
       * Route for:
       * - GET  `/guilds/{guild.id}/stickers`
       * - POST `/guilds/{guild.id}/stickers`
       */
      guildStickers(guildId) {
        return `/guilds/${guildId}/stickers`;
      },
      /**
       * Route for:
       * - GET    `/guilds/{guild.id}/stickers/{sticker.id}`
       * - PATCH  `/guilds/{guild.id}/stickers/{sticker.id}`
       * - DELETE `/guilds/{guild.id}/stickers/{sticker.id}`
       */
      guildSticker(guildId, stickerId) {
        return `/guilds/${guildId}/stickers/${stickerId}`;
      },
      /**
       * Route for:
       * - GET  `/guilds/{guild.id}/scheduled-events`
       * - POST `/guilds/{guild.id}/scheduled-events`
       */
      guildScheduledEvents(guildId) {
        return `/guilds/${guildId}/scheduled-events`;
      },
      /**
       * Route for:
       * - GET  `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
       * - PATCH `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
       * - DELETE `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
       */
      guildScheduledEvent(guildId, guildScheduledEventId) {
        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}/users`
       */
      guildScheduledEventUsers(guildId, guildScheduledEventId) {
        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/onboarding`
       * - PUT `/guilds/{guild.id}/onboarding`
       */
      guildOnboarding(guildId) {
        return `/guilds/${guildId}/onboarding`;
      },
      /**
       * Route for:
       * - PUT `/guilds/${guild.id}/incident-actions`
       */
      guildIncidentActions(guildId) {
        return `/guilds/${guildId}/incident-actions`;
      },
      /**
       * Route for:
       * - GET `/applications/@me`
       * - PATCH `/applications/@me`
       */
      currentApplication() {
        return "/applications/@me";
      },
      /**
       * Route for:
       * - GET `/applications/{application.id}/entitlements`
       * - POST `/applications/{application.id}/entitlements`
       */
      entitlements(applicationId) {
        return `/applications/${applicationId}/entitlements`;
      },
      /**
       * Route for:
       * - GET `/applications/{application.id}/entitlements/{entitlement.id}`
       * - DELETE `/applications/{application.id}/entitlements/{entitlement.id}`
       */
      entitlement(applicationId, entitlementId) {
        return `/applications/${applicationId}/entitlements/${entitlementId}`;
      },
      /**
       * Route for:
       * - GET `/applications/{application.id}/skus`
       */
      skus(applicationId) {
        return `/applications/${applicationId}/skus`;
      },
      /**
       * Route for:
       * - POST `/guilds/{guild.id}/bulk-ban`
       */
      guildBulkBan(guildId) {
        return `/guilds/${guildId}/bulk-ban`;
      },
      /**
       * Route for:
       * - POST `/applications/{application.id}/entitlements/{entitlement.id}/consume`
       */
      consumeEntitlement(applicationId, entitlementId) {
        return `/applications/${applicationId}/entitlements/${entitlementId}/consume`;
      },
      /**
       * Route for:
       * - GET `/applications/{application.id}/emojis`
       * - POST `/applications/{application.id}/emojis`
       */
      applicationEmojis(applicationId) {
        return `/applications/${applicationId}/emojis`;
      },
      /**
       * Route for:
       * - GET `/applications/{application.id}/emojis/{emoji.id}`
       * - PATCH `/applications/{application.id}/emojis/{emoji.id}`
       * - DELETE `/applications/{application.id}/emojis/{emoji.id}`
       */
      applicationEmoji(applicationId, emojiId) {
        return `/applications/${applicationId}/emojis/${emojiId}`;
      },
      /**
       * Route for:
       * - GET `/skus/{sku.id}/subscriptions`
       */
      skuSubscriptions(skuId) {
        return `/skus/${skuId}/subscriptions`;
      },
      /**
       * Route for:
       * - GET `/skus/{sku.id}/subscriptions/{subscription.id}`
       */
      skuSubscription(skuId, subscriptionId) {
        return `/skus/${skuId}/subscriptions/${subscriptionId}`;
      },
      /**
       * Route for:
       * - POST `/channels/{channel.id}/send-soundboard-sound`
       */
      sendSoundboardSound(channelId) {
        return `/channels/${channelId}/send-soundboard-sound`;
      },
      /**
       * Route for:
       * - GET `/soundboard-default-sounds`
       */
      soundboardDefaultSounds() {
        return "/soundboard-default-sounds";
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/soundboard-sounds`
       * - POST `/guilds/{guild.id}/soundboard-sounds`
       */
      guildSoundboardSounds(guildId) {
        return `/guilds/${guildId}/soundboard-sounds`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/soundboard-sounds/{sound.id}`
       * - PATCH `/guilds/{guild.id}/soundboard-sounds/{sound.id}`
       * - DELETE `/guilds/{guild.id}/soundboard-sounds/{sound.id}`
       */
      guildSoundboardSound(guildId, soundId) {
        return `/guilds/${guildId}/soundboard-sounds/${soundId}`;
      }
    };
    for (const [key, fn] of Object.entries(exports.Routes)) {
      exports.Routes[key] = (...args) => {
        const escaped = args.map((arg) => {
          if (arg) {
            if (internals_1.urlSafeCharacters.test(String(arg))) {
              return arg;
            }
            return encodeURIComponent(arg);
          }
          return arg;
        });
        return fn.call(null, ...escaped);
      };
    }
    Object.freeze(exports.Routes);
    exports.StickerPackApplicationId = "710982414301790216";
    var ImageFormat;
    (function(ImageFormat2) {
      ImageFormat2["JPEG"] = "jpeg";
      ImageFormat2["PNG"] = "png";
      ImageFormat2["WebP"] = "webp";
      ImageFormat2["GIF"] = "gif";
      ImageFormat2["Lottie"] = "json";
    })(ImageFormat || (exports.ImageFormat = ImageFormat = {}));
    exports.CDNRoutes = {
      /**
       * Route for:
       * - GET `/emojis/{emoji.id}.{png|jpeg|webp|gif}`
       *
       * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
       *
       * This route supports the extensions: PNG, JPEG, WebP, GIF
       */
      emoji(emojiId, format) {
        return `/emojis/${emojiId}.${format}`;
      },
      /**
       * Route for:
       * - GET `/icons/{guild.id}/{guild.icon}.{png|jpeg|webp|gif}`
       *
       * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
       *
       * This route supports the extensions: PNG, JPEG, WebP, GIF
       */
      guildIcon(guildId, guildIcon, format) {
        return `/icons/${guildId}/${guildIcon}.${format}`;
      },
      /**
       * Route for:
       * - GET `/splashes/{guild.id}/{guild.splash}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      guildSplash(guildId, guildSplash, format) {
        return `/splashes/${guildId}/${guildSplash}.${format}`;
      },
      /**
       * Route for:
       * - GET `/discovery-splashes/{guild.id}/{guild.discovery_splash}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      guildDiscoverySplash(guildId, guildDiscoverySplash, format) {
        return `/discovery-splashes/${guildId}/${guildDiscoverySplash}.${format}`;
      },
      /**
       * Route for:
       * - GET `/banners/{guild.id}/{guild.banner}.{png|jpeg|webp|gif}`
       *
       * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
       *
       * This route supports the extensions: PNG, JPEG, WebP, GIF
       */
      guildBanner(guildId, guildBanner, format) {
        return `/banners/${guildId}/${guildBanner}.${format}`;
      },
      /**
       * Route for:
       * - GET `/banners/{user.id}/{user.banner}.{png|jpeg|webp|gif}`
       *
       * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
       *
       * This route supports the extensions: PNG, JPEG, WebP, GIF
       */
      userBanner(userId, userBanner, format) {
        return `/banners/${userId}/${userBanner}.${format}`;
      },
      /**
       * Route for:
       * - GET `/embed/avatars/{index}.png`
       *
       * The value for `index` parameter depends on whether the user is [migrated to the new username system](https://discord.com/developers/docs/change-log#unique-usernames-on-discord).
       * For users on the new username system, `index` will be `(user.id >> 22) % 6`.
       * For users on the legacy username system, `index` will be `user.discriminator % 5`.
       *
       * This route supports the extension: PNG
       */
      defaultUserAvatar(index) {
        return `/embed/avatars/${index}.png`;
      },
      /**
       * Route for:
       * - GET `/avatars/{user.id}/{user.avatar}.{png|jpeg|webp|gif}`
       *
       * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
       *
       * This route supports the extensions: PNG, JPEG, WebP, GIF
       */
      userAvatar(userId, userAvatar, format) {
        return `/avatars/${userId}/${userAvatar}.${format}`;
      },
      /**
       * Route for:
       * - GET `/guilds/{guild.id}/users/{user.id}/avatars/{guild_member.avatar}.{png|jpeg|webp|gif}`
       *
       * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
       *
       * This route supports the extensions: PNG, JPEG, WebP, GIF
       */
      guildMemberAvatar(guildId, userId, memberAvatar, format) {
        return `/guilds/${guildId}/users/${userId}/avatars/${memberAvatar}.${format}`;
      },
      /**
       * Route for:
       * - GET `/avatar-decorations/{user.id}/{user.avatar_decoration}.png`
       *
       * This route supports the extension: PNG
       *
       * @deprecated Use {@link CDNRoutes.avatarDecoration} instead.
       */
      userAvatarDecoration(userId, userAvatarDecoration) {
        return `/avatar-decorations/${userId}/${userAvatarDecoration}.png`;
      },
      /**
       * Route for:
       * - GET `/avatar-decoration-presets/{avatar_decoration_data_asset}.png`
       *
       * This route supports the extension: PNG
       */
      avatarDecoration(avatarDecorationDataAsset) {
        return `/avatar-decoration-presets/${avatarDecorationDataAsset}.png`;
      },
      /**
       * Route for:
       * - GET `/app-icons/{application.id}/{application.icon}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      applicationIcon(applicationId, applicationIcon, format) {
        return `/app-icons/${applicationId}/${applicationIcon}.${format}`;
      },
      /**
       * Route for:
       * - GET `/app-icons/{application.id}/{application.cover_image}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      applicationCover(applicationId, applicationCoverImage, format) {
        return `/app-icons/${applicationId}/${applicationCoverImage}.${format}`;
      },
      /**
       * Route for:
       * - GET `/app-assets/{application.id}/{application.asset_id}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      applicationAsset(applicationId, applicationAssetId, format) {
        return `/app-assets/${applicationId}/${applicationAssetId}.${format}`;
      },
      /**
       * Route for:
       * - GET `/app-assets/{application.id}/achievements/{achievement.id}/icons/{achievement.icon}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      achievementIcon(applicationId, achievementId, achievementIconHash, format) {
        return `/app-assets/${applicationId}/achievements/${achievementId}/icons/${achievementIconHash}.${format}`;
      },
      /**
       * Route for:
       * - GET `/app-assets/710982414301790216/store/{sticker_pack.banner.asset_id}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      stickerPackBanner(stickerPackBannerAssetId, format) {
        return `/app-assets/${exports.StickerPackApplicationId}/store/${stickerPackBannerAssetId}.${format}`;
      },
      /**
       * Route for:
       * - GET `/app-assets/${application.id}/store/${asset.id}.{png|jpeg|webp}}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      storePageAsset(applicationId, assetId, format = ImageFormat.PNG) {
        return `/app-assets/${applicationId}/store/${assetId}.${format}`;
      },
      /**
       * Route for:
       * - GET `/team-icons/{team.id}/{team.icon}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      teamIcon(teamId, teamIcon, format) {
        return `/team-icons/${teamId}/${teamIcon}.${format}`;
      },
      /**
       * Route for:
       * - GET `/stickers/{sticker.id}.{png|json}`
       *
       * This route supports the extensions: PNG, Lottie, GIF
       */
      sticker(stickerId, format) {
        return `/stickers/${stickerId}.${format}`;
      },
      /**
       * Route for:
       * - GET `/role-icons/{role.id}/{role.icon}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      roleIcon(roleId, roleIcon, format) {
        return `/role-icons/${roleId}/${roleIcon}.${format}`;
      },
      /**
       * Route for:
       * - GET `/guild-events/{guild_scheduled_event.id}/{guild_scheduled_event.image}.{png|jpeg|webp}`
       *
       * This route supports the extensions: PNG, JPEG, WebP
       */
      guildScheduledEventCover(guildScheduledEventId, guildScheduledEventCoverImage, format) {
        return `/guild-events/${guildScheduledEventId}/${guildScheduledEventCoverImage}.${format}`;
      },
      /**
       * Route for:
       * - GET `/guilds/${guild.id}/users/${user.id}/banners/${guild_member.banner}.{png|jpeg|webp|gif}`
       *
       * This route supports the extensions: PNG, JPEG, WebP, GIF
       */
      guildMemberBanner(guildId, userId, guildMemberBanner, format) {
        return `/guilds/${guildId}/users/${userId}/banners/${guildMemberBanner}.${format}`;
      },
      /**
       * Route for:
       * - GET `/soundboard-sounds/${sound.id}`
       */
      soundboardSound(soundId) {
        return `/soundboard-sounds/${soundId}`;
      }
    };
    for (const [key, fn] of Object.entries(exports.CDNRoutes)) {
      exports.CDNRoutes[key] = (...args) => {
        const escaped = args.map((arg) => {
          if (arg) {
            if (internals_1.urlSafeCharacters.test(String(arg))) {
              return arg;
            }
            return encodeURIComponent(arg);
          }
          return arg;
        });
        return fn.call(null, ...escaped);
      };
    }
    Object.freeze(exports.CDNRoutes);
    exports.RouteBases = {
      api: `https://discord.com/api/v${exports.APIVersion}`,
      cdn: "https://cdn.discordapp.com",
      media: "https://media.discordapp.net",
      invite: "https://discord.gg",
      template: "https://discord.new",
      gift: "https://discord.gift",
      scheduledEvent: "https://discord.com/events"
    };
    Object.freeze(exports.RouteBases);
    exports.OAuth2Routes = {
      authorizationURL: `${exports.RouteBases.api}${exports.Routes.oauth2Authorization()}`,
      tokenURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenExchange()}`,
      /**
       * See https://tools.ietf.org/html/rfc7009
       */
      tokenRevocationURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenRevocation()}`
    };
    Object.freeze(exports.OAuth2Routes);
  }
});

// node_modules/discord-api-types/rpc/common.js
var require_common4 = __commonJS({
  "node_modules/discord-api-types/rpc/common.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RPCCloseEventCodes = exports.RPCErrorCodes = void 0;
    var RPCErrorCodes;
    (function(RPCErrorCodes2) {
      RPCErrorCodes2[RPCErrorCodes2["UnknownError"] = 1e3] = "UnknownError";
      RPCErrorCodes2[RPCErrorCodes2["InvalidPayload"] = 4e3] = "InvalidPayload";
      RPCErrorCodes2[RPCErrorCodes2["InvalidCommand"] = 4002] = "InvalidCommand";
      RPCErrorCodes2[RPCErrorCodes2["InvalidGuild"] = 4003] = "InvalidGuild";
      RPCErrorCodes2[RPCErrorCodes2["InvalidEvent"] = 4004] = "InvalidEvent";
      RPCErrorCodes2[RPCErrorCodes2["InvalidChannel"] = 4005] = "InvalidChannel";
      RPCErrorCodes2[RPCErrorCodes2["InvalidPermissions"] = 4006] = "InvalidPermissions";
      RPCErrorCodes2[RPCErrorCodes2["InvalidClientId"] = 4007] = "InvalidClientId";
      RPCErrorCodes2[RPCErrorCodes2["InvalidOrigin"] = 4008] = "InvalidOrigin";
      RPCErrorCodes2[RPCErrorCodes2["InvalidToken"] = 4009] = "InvalidToken";
      RPCErrorCodes2[RPCErrorCodes2["InvalidUser"] = 4010] = "InvalidUser";
      RPCErrorCodes2[RPCErrorCodes2["OAuth2Error"] = 5e3] = "OAuth2Error";
      RPCErrorCodes2[RPCErrorCodes2["SelectChannelTimedOut"] = 5001] = "SelectChannelTimedOut";
      RPCErrorCodes2[RPCErrorCodes2["GetGuildTimedOut"] = 5002] = "GetGuildTimedOut";
      RPCErrorCodes2[RPCErrorCodes2["SelectVoiceForceRequired"] = 5003] = "SelectVoiceForceRequired";
      RPCErrorCodes2[RPCErrorCodes2["CaptureShortcutAlreadyListening"] = 5004] = "CaptureShortcutAlreadyListening";
    })(RPCErrorCodes || (exports.RPCErrorCodes = RPCErrorCodes = {}));
    var RPCCloseEventCodes;
    (function(RPCCloseEventCodes2) {
      RPCCloseEventCodes2[RPCCloseEventCodes2["InvalidClientId"] = 4e3] = "InvalidClientId";
      RPCCloseEventCodes2[RPCCloseEventCodes2["InvalidOrigin"] = 4001] = "InvalidOrigin";
      RPCCloseEventCodes2[RPCCloseEventCodes2["RateLimited"] = 4002] = "RateLimited";
      RPCCloseEventCodes2[RPCCloseEventCodes2["TokenRevoked"] = 4003] = "TokenRevoked";
      RPCCloseEventCodes2[RPCCloseEventCodes2["InvalidVersion"] = 4004] = "InvalidVersion";
      RPCCloseEventCodes2[RPCCloseEventCodes2["InvalidEncoding"] = 4005] = "InvalidEncoding";
    })(RPCCloseEventCodes || (exports.RPCCloseEventCodes = RPCCloseEventCodes = {}));
  }
});

// node_modules/discord-api-types/rpc/v10.js
var require_v104 = __commonJS({
  "node_modules/discord-api-types/rpc/v10.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p2 in m)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_common4(), exports);
  }
});

// node_modules/discord-api-types/utils/v10.js
var require_v105 = __commonJS({
  "node_modules/discord-api-types/utils/v10.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isDMInteraction = isDMInteraction;
    exports.isGuildInteraction = isGuildInteraction;
    exports.isApplicationCommandDMInteraction = isApplicationCommandDMInteraction;
    exports.isApplicationCommandGuildInteraction = isApplicationCommandGuildInteraction;
    exports.isMessageComponentDMInteraction = isMessageComponentDMInteraction;
    exports.isMessageComponentGuildInteraction = isMessageComponentGuildInteraction;
    exports.isLinkButton = isLinkButton;
    exports.isInteractionButton = isInteractionButton;
    exports.isMessageComponentInteraction = isMessageComponentInteraction;
    exports.isMessageComponentButtonInteraction = isMessageComponentButtonInteraction;
    exports.isMessageComponentSelectMenuInteraction = isMessageComponentSelectMenuInteraction;
    exports.isChatInputApplicationCommandInteraction = isChatInputApplicationCommandInteraction;
    exports.isContextMenuApplicationCommandInteraction = isContextMenuApplicationCommandInteraction;
    var index_1 = require_v102();
    function isDMInteraction(interaction) {
      return Reflect.has(interaction, "user");
    }
    __name(isDMInteraction, "isDMInteraction");
    function isGuildInteraction(interaction) {
      return Reflect.has(interaction, "guild_id");
    }
    __name(isGuildInteraction, "isGuildInteraction");
    function isApplicationCommandDMInteraction(interaction) {
      return isDMInteraction(interaction);
    }
    __name(isApplicationCommandDMInteraction, "isApplicationCommandDMInteraction");
    function isApplicationCommandGuildInteraction(interaction) {
      return isGuildInteraction(interaction);
    }
    __name(isApplicationCommandGuildInteraction, "isApplicationCommandGuildInteraction");
    function isMessageComponentDMInteraction(interaction) {
      return isDMInteraction(interaction);
    }
    __name(isMessageComponentDMInteraction, "isMessageComponentDMInteraction");
    function isMessageComponentGuildInteraction(interaction) {
      return isGuildInteraction(interaction);
    }
    __name(isMessageComponentGuildInteraction, "isMessageComponentGuildInteraction");
    function isLinkButton(component) {
      return component.style === index_1.ButtonStyle.Link;
    }
    __name(isLinkButton, "isLinkButton");
    function isInteractionButton(component) {
      return ![index_1.ButtonStyle.Link, index_1.ButtonStyle.Premium].includes(component.style);
    }
    __name(isInteractionButton, "isInteractionButton");
    function isMessageComponentInteraction(interaction) {
      return interaction.type === index_1.InteractionType.MessageComponent;
    }
    __name(isMessageComponentInteraction, "isMessageComponentInteraction");
    function isMessageComponentButtonInteraction(interaction) {
      return interaction.data.component_type === index_1.ComponentType.Button;
    }
    __name(isMessageComponentButtonInteraction, "isMessageComponentButtonInteraction");
    function isMessageComponentSelectMenuInteraction(interaction) {
      return [
        index_1.ComponentType.StringSelect,
        index_1.ComponentType.UserSelect,
        index_1.ComponentType.RoleSelect,
        index_1.ComponentType.MentionableSelect,
        index_1.ComponentType.ChannelSelect
      ].includes(interaction.data.component_type);
    }
    __name(isMessageComponentSelectMenuInteraction, "isMessageComponentSelectMenuInteraction");
    function isChatInputApplicationCommandInteraction(interaction) {
      return interaction.data.type === index_1.ApplicationCommandType.ChatInput;
    }
    __name(isChatInputApplicationCommandInteraction, "isChatInputApplicationCommandInteraction");
    function isContextMenuApplicationCommandInteraction(interaction) {
      return interaction.data.type === index_1.ApplicationCommandType.Message || interaction.data.type === index_1.ApplicationCommandType.User;
    }
    __name(isContextMenuApplicationCommandInteraction, "isContextMenuApplicationCommandInteraction");
  }
});

// node_modules/discord-api-types/v10.js
var require_v106 = __commonJS({
  "node_modules/discord-api-types/v10.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o2, k2, desc);
    } : function(o2, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o2[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p2 in m)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Utils = void 0;
    __exportStar(require_v10(), exports);
    __exportStar(require_globals(), exports);
    __exportStar(require_v102(), exports);
    __exportStar(require_v103(), exports);
    __exportStar(require_v104(), exports);
    exports.Utils = require_v105();
  }
});

// node_modules/@discordjs/util/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@discordjs/util/dist/index.js"(exports, module) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      calculateShardId: () => calculateShardId,
      getUserAgentAppendix: () => getUserAgentAppendix,
      isEquatable: () => isEquatable,
      isJSONEncodable: () => isJSONEncodable,
      lazy: () => lazy,
      polyfillDispose: () => polyfillDispose,
      range: () => range,
      shouldUseGlobalFetchAndWebSocket: () => shouldUseGlobalFetchAndWebSocket,
      version: () => version
    });
    module.exports = __toCommonJS2(src_exports);
    function lazy(cb) {
      let defaultValue;
      return () => defaultValue ??= cb();
    }
    __name(lazy, "lazy");
    __name2(lazy, "lazy");
    function* range(range2) {
      let rangeEnd;
      let start = 0;
      let step = 1;
      if (typeof range2 === "number") {
        rangeEnd = range2;
      } else {
        start = range2.start;
        rangeEnd = range2.end;
        step = range2.step ?? 1;
      }
      for (let index = start; index < rangeEnd; index += step) {
        yield index;
      }
    }
    __name(range, "range");
    __name2(range, "range");
    function calculateShardId(guildId, shardCount) {
      return Number(BigInt(guildId) >> 22n) % shardCount;
    }
    __name(calculateShardId, "calculateShardId");
    __name2(calculateShardId, "calculateShardId");
    function shouldUseGlobalFetchAndWebSocket() {
      if (typeof globalThis.process === "undefined") {
        return "fetch" in globalThis && "WebSocket" in globalThis;
      }
      if ("versions" in globalThis.process) {
        return "deno" in globalThis.process.versions || "bun" in globalThis.process.versions;
      }
      return false;
    }
    __name(shouldUseGlobalFetchAndWebSocket, "shouldUseGlobalFetchAndWebSocket");
    __name2(shouldUseGlobalFetchAndWebSocket, "shouldUseGlobalFetchAndWebSocket");
    function getUserAgentAppendix() {
      if (typeof globalThis.EdgeRuntime !== "undefined") {
        return "Vercel-Edge-Functions";
      }
      if (typeof globalThis.R2 !== "undefined" && typeof globalThis.WebSocketPair !== "undefined") {
        return "Cloudflare-Workers";
      }
      if (typeof globalThis.Netlify !== "undefined") {
        return "Netlify-Edge-Functions";
      }
      if (typeof globalThis.process !== "object") {
        if (typeof globalThis.navigator === "object") {
          return globalThis.navigator.userAgent;
        }
        return "UnknownEnvironment";
      }
      if ("versions" in globalThis.process) {
        if ("deno" in globalThis.process.versions) {
          return `Deno/${globalThis.process.versions.deno}`;
        }
        if ("bun" in globalThis.process.versions) {
          return `Bun/${globalThis.process.versions.bun}`;
        }
        if ("node" in globalThis.process.versions) {
          return `Node.js/${globalThis.process.versions.node}`;
        }
      }
      return "UnknownEnvironment";
    }
    __name(getUserAgentAppendix, "getUserAgentAppendix");
    __name2(getUserAgentAppendix, "getUserAgentAppendix");
    function polyfillDispose() {
      Symbol.dispose ??= Symbol("Symbol.dispose");
      Symbol.asyncDispose ??= Symbol("Symbol.asyncDispose");
    }
    __name(polyfillDispose, "polyfillDispose");
    __name2(polyfillDispose, "polyfillDispose");
    function isJSONEncodable(maybeEncodable) {
      return maybeEncodable !== null && typeof maybeEncodable === "object" && "toJSON" in maybeEncodable;
    }
    __name(isJSONEncodable, "isJSONEncodable");
    __name2(isJSONEncodable, "isJSONEncodable");
    function isEquatable(maybeEquatable) {
      return maybeEquatable !== null && typeof maybeEquatable === "object" && "equals" in maybeEquatable;
    }
    __name(isEquatable, "isEquatable");
    __name2(isEquatable, "isEquatable");
    var version = "1.1.1";
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    module.exports = /* @__PURE__ */ __name(function equal(a2, b) {
      if (a2 === b)
        return true;
      if (a2 && b && typeof a2 == "object" && typeof b == "object") {
        if (a2.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a2[i], b[i]))
              return false;
          return true;
        }
        if (a2.constructor === RegExp)
          return a2.source === b.source && a2.flags === b.flags;
        if (a2.valueOf !== Object.prototype.valueOf)
          return a2.valueOf() === b.valueOf();
        if (a2.toString !== Object.prototype.toString)
          return a2.toString() === b.toString();
        keys = Object.keys(a2);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal(a2[key], b[key]))
            return false;
        }
        return true;
      }
      return a2 !== a2 && b !== b;
    }, "equal");
  }
});

// node_modules/ts-mixer/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  Mixin: () => Mixin,
  decorate: () => decorate,
  hasMixin: () => hasMixin,
  mix: () => mix,
  settings: () => settings
});
function Mixin(...constructors) {
  var _a, _b, _c;
  const prototypes = constructors.map((constructor) => constructor.prototype);
  const initFunctionName = settings.initFunction;
  if (initFunctionName !== null) {
    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === "function");
    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {
      for (let initFunction of initFunctions)
        initFunction.apply(this, args);
    }, "combinedInitFunction");
    const extraProto = { [initFunctionName]: combinedInitFunction };
    prototypes.push(extraProto);
  }
  function MixedClass(...args) {
    for (const constructor of constructors)
      copyProps(this, new constructor(...args));
    if (initFunctionName !== null && typeof this[initFunctionName] === "function")
      this[initFunctionName].apply(this, args);
  }
  __name(MixedClass, "MixedClass");
  MixedClass.prototype = settings.prototypeStrategy === "copy" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);
  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === "copy" ? hardMixProtos(constructors, null, ["prototype"]) : proxyMix(constructors, Function.prototype));
  let DecoratedMixedClass = MixedClass;
  if (settings.decoratorInheritance !== "none") {
    const classDecorators = settings.decoratorInheritance === "deep" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);
    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {
      const result = decorator(DecoratedMixedClass);
      if (result) {
        DecoratedMixedClass = result;
      }
    }
    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);
    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);
  }
  registerMixins(DecoratedMixedClass, constructors);
  return DecoratedMixedClass;
}
var copyProps, protoChain, nearestCommonProto, hardMixProtos, unique, getIngredientWithProp, proxyMix, softMixProtos, settings, mixins, getMixinsForClass, registerMixins, hasMixin, mergeObjectsOfDecorators, mergePropertyAndMethodDecorators, mergeDecorators, decorators, findAllConstituentClasses, deepDecoratorSearch, directDecoratorSearch, getDecoratorsForClass, decorateClass, decorateMember, decorate, applyPropAndMethodDecorators, mix;
var init_esm = __esm({
  "node_modules/ts-mixer/dist/esm/index.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {
      const props = Object.getOwnPropertyDescriptors(src);
      for (let prop of exclude)
        delete props[prop];
      Object.defineProperties(dest, props);
    }, "copyProps");
    protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {
      const proto = Object.getPrototypeOf(obj);
      if (proto === null)
        return currentChain;
      return protoChain(proto, [...currentChain, proto]);
    }, "protoChain");
    nearestCommonProto = /* @__PURE__ */ __name((...objs) => {
      if (objs.length === 0)
        return void 0;
      let commonProto = void 0;
      const protoChains = objs.map((obj) => protoChain(obj));
      while (protoChains.every((protoChain2) => protoChain2.length > 0)) {
        const protos = protoChains.map((protoChain2) => protoChain2.pop());
        const potentialCommonProto = protos[0];
        if (protos.every((proto) => proto === potentialCommonProto))
          commonProto = potentialCommonProto;
        else
          break;
      }
      return commonProto;
    }, "nearestCommonProto");
    hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {
      var _a;
      const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;
      const mixedProto = Object.create(base);
      const visitedProtos = protoChain(base);
      for (let prototype of ingredients) {
        let protos = protoChain(prototype);
        for (let i = protos.length - 1; i >= 0; i--) {
          let newProto = protos[i];
          if (visitedProtos.indexOf(newProto) === -1) {
            copyProps(mixedProto, newProto, ["constructor", ...exclude]);
            visitedProtos.push(newProto);
          }
        }
      }
      mixedProto.constructor = constructor;
      return mixedProto;
    }, "hardMixProtos");
    unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), "unique");
    getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {
      const protoChains = ingredients.map((ingredient) => protoChain(ingredient));
      let protoDepth = 0;
      let protosAreLeftToSearch = true;
      while (protosAreLeftToSearch) {
        protosAreLeftToSearch = false;
        for (let i = ingredients.length - 1; i >= 0; i--) {
          const searchTarget = protoChains[i][protoDepth];
          if (searchTarget !== void 0 && searchTarget !== null) {
            protosAreLeftToSearch = true;
            if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {
              return protoChains[i][0];
            }
          }
        }
        protoDepth++;
      }
      return void 0;
    }, "getIngredientWithProp");
    proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {
      getPrototypeOf() {
        return prototype;
      },
      setPrototypeOf() {
        throw Error("Cannot set prototype of Proxies created by ts-mixer");
      },
      getOwnPropertyDescriptor(_, prop) {
        return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);
      },
      defineProperty() {
        throw new Error("Cannot define new properties on Proxies created by ts-mixer");
      },
      has(_, prop) {
        return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;
      },
      get(_, prop) {
        return (getIngredientWithProp(prop, ingredients) || prototype)[prop];
      },
      set(_, prop, val) {
        const ingredientWithProp = getIngredientWithProp(prop, ingredients);
        if (ingredientWithProp === void 0)
          throw new Error("Cannot set new properties on Proxies created by ts-mixer");
        ingredientWithProp[prop] = val;
        return true;
      },
      deleteProperty() {
        throw new Error("Cannot delete properties on Proxies created by ts-mixer");
      },
      ownKeys() {
        return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));
      }
    }), "proxyMix");
    softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), "softMixProtos");
    settings = {
      initFunction: null,
      staticsStrategy: "copy",
      prototypeStrategy: "copy",
      decoratorInheritance: "deep"
    };
    mixins = /* @__PURE__ */ new WeakMap();
    getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), "getMixinsForClass");
    registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), "registerMixins");
    hasMixin = /* @__PURE__ */ __name((instance, mixin) => {
      if (instance instanceof mixin)
        return true;
      const constructor = instance.constructor;
      const visited = /* @__PURE__ */ new Set();
      let frontier = /* @__PURE__ */ new Set();
      frontier.add(constructor);
      while (frontier.size > 0) {
        if (frontier.has(mixin))
          return true;
        frontier.forEach((item) => visited.add(item));
        const newFrontier = /* @__PURE__ */ new Set();
        frontier.forEach((item) => {
          var _a;
          const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);
          if (itemConstituents)
            itemConstituents.forEach((constituent) => {
              if (!visited.has(constituent) && !frontier.has(constituent))
                newFrontier.add(constituent);
            });
        });
        frontier = newFrontier;
      }
      return false;
    }, "hasMixin");
    mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {
      var _a, _b;
      const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);
      const mergedObject = {};
      for (let key of allKeys)
        mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);
      return mergedObject;
    }, "mergeObjectsOfDecorators");
    mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {
      var _a, _b, _c, _d;
      return {
        property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),
        method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})
      };
    }, "mergePropertyAndMethodDecorators");
    mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {
      var _a, _b, _c, _d, _e, _f;
      return {
        class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),
        static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),
        instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})
      };
    }, "mergeDecorators");
    decorators = /* @__PURE__ */ new Map();
    findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {
      var _a;
      const allClasses = /* @__PURE__ */ new Set();
      const frontier = /* @__PURE__ */ new Set([...classes]);
      while (frontier.size > 0) {
        for (let clazz of frontier) {
          const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);
          const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];
          const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];
          const newClasses = potentiallyNewClasses.filter((c2) => !allClasses.has(c2));
          for (let newClass of newClasses)
            frontier.add(newClass);
          allClasses.add(clazz);
          frontier.delete(clazz);
        }
      }
      return [...allClasses];
    }, "findAllConstituentClasses");
    deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {
      const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);
      if (decoratorsForClassChain.length == 0)
        return {};
      if (decoratorsForClassChain.length == 1)
        return decoratorsForClassChain[0];
      return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));
    }, "deepDecoratorSearch");
    directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {
      const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));
      if (classDecorators.length === 0)
        return {};
      if (classDecorators.length === 1)
        return classDecorators[0];
      return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));
    }, "directDecoratorSearch");
    getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {
      let decoratorsForClass = decorators.get(clazz);
      if (!decoratorsForClass) {
        decoratorsForClass = {};
        decorators.set(clazz, decoratorsForClass);
      }
      return decoratorsForClass;
    }, "getDecoratorsForClass");
    decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {
      const decoratorsForClass = getDecoratorsForClass(clazz);
      let classDecorators = decoratorsForClass.class;
      if (!classDecorators) {
        classDecorators = [];
        decoratorsForClass.class = classDecorators;
      }
      classDecorators.push(decorator);
      return decorator(clazz);
    }, "decorateClass");
    decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {
      var _a, _b, _c;
      const decoratorTargetType = typeof object === "function" ? "static" : "instance";
      const decoratorType = typeof object[key] === "function" ? "method" : "property";
      const clazz = decoratorTargetType === "static" ? object : object.constructor;
      const decoratorsForClass = getDecoratorsForClass(clazz);
      const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};
      decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;
      let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};
      decoratorsForTargetType[decoratorType] = decoratorsForType;
      let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];
      decoratorsForType[key] = decoratorsForKey;
      decoratorsForKey.push(decorator);
      return decorator(object, key, ...otherArgs);
    }, "decorateMember");
    decorate = /* @__PURE__ */ __name((decorator) => (...args) => {
      if (args.length === 1)
        return decorateClass(decorator)(args[0]);
      return decorateMember(decorator)(...args);
    }, "decorate");
    __name(Mixin, "Mixin");
    applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {
      const propDecorators = propAndMethodDecorators.property;
      const methodDecorators = propAndMethodDecorators.method;
      if (propDecorators)
        for (let key in propDecorators)
          for (let decorator of propDecorators[key])
            decorator(target, key);
      if (methodDecorators)
        for (let key in methodDecorators)
          for (let decorator of methodDecorators[key])
            decorator(target, key, Object.getOwnPropertyDescriptor(target, key));
    }, "applyPropAndMethodDecorators");
    mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {
      const mixedClass = Mixin(...ingredients.concat([decoratedClass]));
      Object.defineProperty(mixedClass, "name", {
        value: decoratedClass.name,
        writable: false
      });
      return mixedClass;
    }, "mix");
  }
});

// node_modules/@discordjs/builders/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/@discordjs/builders/dist/index.js"(exports, module) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var __decorateClass = /* @__PURE__ */ __name((decorators2, target, key, kind) => {
      var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc2(target, key) : target;
      for (var i = decorators2.length - 1, decorator; i >= 0; i--)
        if (decorator = decorators2[i])
          result = (kind ? decorator(target, key, result) : decorator(result)) || result;
      if (kind && result)
        __defProp2(target, key, result);
      return result;
    }, "__decorateClass");
    var src_exports = {};
    __export2(src_exports, {
      ActionRowBuilder: () => ActionRowBuilder,
      ApplicationCommandNumericOptionMinMaxValueMixin: () => ApplicationCommandNumericOptionMinMaxValueMixin,
      ApplicationCommandOptionBase: () => ApplicationCommandOptionBase,
      ApplicationCommandOptionChannelTypesMixin: () => ApplicationCommandOptionChannelTypesMixin,
      ApplicationCommandOptionWithAutocompleteMixin: () => ApplicationCommandOptionWithAutocompleteMixin,
      ApplicationCommandOptionWithChoicesMixin: () => ApplicationCommandOptionWithChoicesMixin,
      BaseSelectMenuBuilder: () => BaseSelectMenuBuilder,
      ButtonBuilder: () => ButtonBuilder,
      ChannelSelectMenuBuilder: () => ChannelSelectMenuBuilder,
      ComponentAssertions: () => Assertions_exports2,
      ComponentBuilder: () => ComponentBuilder,
      ContextMenuCommandAssertions: () => Assertions_exports6,
      ContextMenuCommandBuilder: () => ContextMenuCommandBuilder,
      EmbedAssertions: () => Assertions_exports,
      EmbedBuilder: () => EmbedBuilder,
      MentionableSelectMenuBuilder: () => MentionableSelectMenuBuilder,
      ModalAssertions: () => Assertions_exports4,
      ModalBuilder: () => ModalBuilder,
      RoleSelectMenuBuilder: () => RoleSelectMenuBuilder,
      SelectMenuBuilder: () => StringSelectMenuBuilder,
      SelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,
      SharedNameAndDescription: () => SharedNameAndDescription,
      SharedSlashCommand: () => SharedSlashCommand,
      SharedSlashCommandOptions: () => SharedSlashCommandOptions,
      SharedSlashCommandSubcommands: () => SharedSlashCommandSubcommands,
      SlashCommandAssertions: () => Assertions_exports5,
      SlashCommandAttachmentOption: () => SlashCommandAttachmentOption,
      SlashCommandBooleanOption: () => SlashCommandBooleanOption,
      SlashCommandBuilder: () => SlashCommandBuilder,
      SlashCommandChannelOption: () => SlashCommandChannelOption,
      SlashCommandIntegerOption: () => SlashCommandIntegerOption,
      SlashCommandMentionableOption: () => SlashCommandMentionableOption,
      SlashCommandNumberOption: () => SlashCommandNumberOption,
      SlashCommandRoleOption: () => SlashCommandRoleOption,
      SlashCommandStringOption: () => SlashCommandStringOption,
      SlashCommandSubcommandBuilder: () => SlashCommandSubcommandBuilder,
      SlashCommandSubcommandGroupBuilder: () => SlashCommandSubcommandGroupBuilder,
      SlashCommandUserOption: () => SlashCommandUserOption,
      StringSelectMenuBuilder: () => StringSelectMenuBuilder,
      StringSelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,
      TextInputAssertions: () => Assertions_exports3,
      TextInputBuilder: () => TextInputBuilder,
      UserSelectMenuBuilder: () => UserSelectMenuBuilder,
      createComponentBuilder: () => createComponentBuilder,
      disableValidators: () => disableValidators,
      embedLength: () => embedLength,
      enableValidators: () => enableValidators,
      isValidationEnabled: () => isValidationEnabled,
      normalizeArray: () => normalizeArray,
      version: () => version
    });
    module.exports = __toCommonJS2(src_exports);
    var Assertions_exports = {};
    __export2(Assertions_exports, {
      RGBPredicate: () => RGBPredicate,
      authorNamePredicate: () => authorNamePredicate,
      colorPredicate: () => colorPredicate,
      descriptionPredicate: () => descriptionPredicate,
      embedAuthorPredicate: () => embedAuthorPredicate,
      embedFieldPredicate: () => embedFieldPredicate,
      embedFieldsArrayPredicate: () => embedFieldsArrayPredicate,
      embedFooterPredicate: () => embedFooterPredicate,
      fieldInlinePredicate: () => fieldInlinePredicate,
      fieldLengthPredicate: () => fieldLengthPredicate,
      fieldNamePredicate: () => fieldNamePredicate,
      fieldValuePredicate: () => fieldValuePredicate,
      footerTextPredicate: () => footerTextPredicate,
      imageURLPredicate: () => imageURLPredicate,
      timestampPredicate: () => timestampPredicate,
      titlePredicate: () => titlePredicate,
      urlPredicate: () => urlPredicate,
      validateFieldLength: () => validateFieldLength
    });
    var import_shapeshift = require_cjs();
    var validate = true;
    function enableValidators() {
      return validate = true;
    }
    __name(enableValidators, "enableValidators");
    __name2(enableValidators, "enableValidators");
    function disableValidators() {
      return validate = false;
    }
    __name(disableValidators, "disableValidators");
    __name2(disableValidators, "disableValidators");
    function isValidationEnabled() {
      return validate;
    }
    __name(isValidationEnabled, "isValidationEnabled");
    __name2(isValidationEnabled, "isValidationEnabled");
    var fieldNamePredicate = import_shapeshift.s.string().lengthLessThanOrEqual(256).setValidationEnabled(isValidationEnabled);
    var fieldValuePredicate = import_shapeshift.s.string().lengthLessThanOrEqual(1024).setValidationEnabled(isValidationEnabled);
    var fieldInlinePredicate = import_shapeshift.s.boolean().optional();
    var embedFieldPredicate = import_shapeshift.s.object({
      name: fieldNamePredicate,
      value: fieldValuePredicate,
      inline: fieldInlinePredicate
    }).setValidationEnabled(isValidationEnabled);
    var embedFieldsArrayPredicate = embedFieldPredicate.array().setValidationEnabled(isValidationEnabled);
    var fieldLengthPredicate = import_shapeshift.s.number().lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
    function validateFieldLength(amountAdding, fields) {
      fieldLengthPredicate.parse((fields?.length ?? 0) + amountAdding);
    }
    __name(validateFieldLength, "validateFieldLength");
    __name2(validateFieldLength, "validateFieldLength");
    var authorNamePredicate = fieldNamePredicate.lengthGreaterThanOrEqual(1).nullable().setValidationEnabled(isValidationEnabled);
    var imageURLPredicate = import_shapeshift.s.string().url({
      allowedProtocols: ["http:", "https:", "attachment:"]
    }).nullish().setValidationEnabled(isValidationEnabled);
    var urlPredicate = import_shapeshift.s.string().url({
      allowedProtocols: ["http:", "https:"]
    }).nullish().setValidationEnabled(isValidationEnabled);
    var embedAuthorPredicate = import_shapeshift.s.object({
      name: authorNamePredicate,
      iconURL: imageURLPredicate,
      url: urlPredicate
    }).setValidationEnabled(isValidationEnabled);
    var RGBPredicate = import_shapeshift.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(255).setValidationEnabled(isValidationEnabled);
    var colorPredicate = import_shapeshift.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(16777215).or(import_shapeshift.s.tuple([RGBPredicate, RGBPredicate, RGBPredicate])).nullable().setValidationEnabled(isValidationEnabled);
    var descriptionPredicate = import_shapeshift.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(4096).nullable().setValidationEnabled(isValidationEnabled);
    var footerTextPredicate = import_shapeshift.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(2048).nullable().setValidationEnabled(isValidationEnabled);
    var embedFooterPredicate = import_shapeshift.s.object({
      text: footerTextPredicate,
      iconURL: imageURLPredicate
    }).setValidationEnabled(isValidationEnabled);
    var timestampPredicate = import_shapeshift.s.union([import_shapeshift.s.number(), import_shapeshift.s.date()]).nullable().setValidationEnabled(isValidationEnabled);
    var titlePredicate = fieldNamePredicate.lengthGreaterThanOrEqual(1).nullable().setValidationEnabled(isValidationEnabled);
    function normalizeArray(arr) {
      if (Array.isArray(arr[0]))
        return [...arr[0]];
      return arr;
    }
    __name(normalizeArray, "normalizeArray");
    __name2(normalizeArray, "normalizeArray");
    var EmbedBuilder = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "EmbedBuilder");
      }
      /**
       * The API data associated with this embed.
       */
      data;
      /**
       * Creates a new embed from API data.
       *
       * @param data - The API data to create this embed with
       */
      constructor(data = {}) {
        this.data = { ...data };
        if (data.timestamp)
          this.data.timestamp = new Date(data.timestamp).toISOString();
      }
      /**
       * Appends fields to the embed.
       *
       * @remarks
       * This method accepts either an array of fields or a variable number of field parameters.
       * The maximum amount of fields that can be added is 25.
       * @example
       * Using an array:
       * ```ts
       * const fields: APIEmbedField[] = ...;
       * const embed = new EmbedBuilder()
       * 	.addFields(fields);
       * ```
       * @example
       * Using rest parameters (variadic):
       * ```ts
       * const embed = new EmbedBuilder()
       * 	.addFields(
       * 		{ name: 'Field 1', value: 'Value 1' },
       * 		{ name: 'Field 2', value: 'Value 2' },
       * 	);
       * ```
       * @param fields - The fields to add
       */
      addFields(...fields) {
        const normalizedFields = normalizeArray(fields);
        validateFieldLength(normalizedFields.length, this.data.fields);
        embedFieldsArrayPredicate.parse(normalizedFields);
        if (this.data.fields)
          this.data.fields.push(...normalizedFields);
        else
          this.data.fields = normalizedFields;
        return this;
      }
      /**
       * Removes, replaces, or inserts fields for this embed.
       *
       * @remarks
       * This method behaves similarly
       * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice | Array.prototype.splice()}.
       * The maximum amount of fields that can be added is 25.
       *
       * It's useful for modifying and adjusting order of the already-existing fields of an embed.
       * @example
       * Remove the first field:
       * ```ts
       * embed.spliceFields(0, 1);
       * ```
       * @example
       * Remove the first n fields:
       * ```ts
       * const n = 4;
       * embed.spliceFields(0, n);
       * ```
       * @example
       * Remove the last field:
       * ```ts
       * embed.spliceFields(-1, 1);
       * ```
       * @param index - The index to start at
       * @param deleteCount - The number of fields to remove
       * @param fields - The replacing field objects
       */
      spliceFields(index, deleteCount, ...fields) {
        validateFieldLength(fields.length - deleteCount, this.data.fields);
        embedFieldsArrayPredicate.parse(fields);
        if (this.data.fields)
          this.data.fields.splice(index, deleteCount, ...fields);
        else
          this.data.fields = fields;
        return this;
      }
      /**
       * Sets the fields for this embed.
       *
       * @remarks
       * This method is an alias for {@link EmbedBuilder.spliceFields}. More specifically,
       * it splices the entire array of fields, replacing them with the provided fields.
       *
       * You can set a maximum of 25 fields.
       * @param fields - The fields to set
       */
      setFields(...fields) {
        this.spliceFields(0, this.data.fields?.length ?? 0, ...normalizeArray(fields));
        return this;
      }
      /**
       * Sets the author of this embed.
       *
       * @param options - The options to use
       */
      setAuthor(options) {
        if (options === null) {
          this.data.author = void 0;
          return this;
        }
        embedAuthorPredicate.parse(options);
        this.data.author = { name: options.name, url: options.url, icon_url: options.iconURL };
        return this;
      }
      /**
       * Sets the color of this embed.
       *
       * @param color - The color to use
       */
      setColor(color) {
        colorPredicate.parse(color);
        if (Array.isArray(color)) {
          const [red, green, blue] = color;
          this.data.color = (red << 16) + (green << 8) + blue;
          return this;
        }
        this.data.color = color ?? void 0;
        return this;
      }
      /**
       * Sets the description of this embed.
       *
       * @param description - The description to use
       */
      setDescription(description) {
        descriptionPredicate.parse(description);
        this.data.description = description ?? void 0;
        return this;
      }
      /**
       * Sets the footer of this embed.
       *
       * @param options - The footer to use
       */
      setFooter(options) {
        if (options === null) {
          this.data.footer = void 0;
          return this;
        }
        embedFooterPredicate.parse(options);
        this.data.footer = { text: options.text, icon_url: options.iconURL };
        return this;
      }
      /**
       * Sets the image of this embed.
       *
       * @param url - The image URL to use
       */
      setImage(url) {
        imageURLPredicate.parse(url);
        this.data.image = url ? { url } : void 0;
        return this;
      }
      /**
       * Sets the thumbnail of this embed.
       *
       * @param url - The thumbnail URL to use
       */
      setThumbnail(url) {
        imageURLPredicate.parse(url);
        this.data.thumbnail = url ? { url } : void 0;
        return this;
      }
      /**
       * Sets the timestamp of this embed.
       *
       * @param timestamp - The timestamp or date to use
       */
      setTimestamp(timestamp = Date.now()) {
        timestampPredicate.parse(timestamp);
        this.data.timestamp = timestamp ? new Date(timestamp).toISOString() : void 0;
        return this;
      }
      /**
       * Sets the title for this embed.
       *
       * @param title - The title to use
       */
      setTitle(title) {
        titlePredicate.parse(title);
        this.data.title = title ?? void 0;
        return this;
      }
      /**
       * Sets the URL of this embed.
       *
       * @param url - The URL to use
       */
      setURL(url) {
        urlPredicate.parse(url);
        this.data.url = url ?? void 0;
        return this;
      }
      /**
       * Serializes this builder to API-compatible JSON data.
       *
       * @remarks
       * This method runs validations on the data before serializing it.
       * As such, it may throw an error if the data is invalid.
       */
      toJSON() {
        return { ...this.data };
      }
    }, "EmbedBuilder");
    __reExport(src_exports, require_dist2(), module.exports);
    var Assertions_exports2 = {};
    __export2(Assertions_exports2, {
      buttonLabelValidator: () => buttonLabelValidator,
      buttonStyleValidator: () => buttonStyleValidator,
      channelTypesValidator: () => channelTypesValidator,
      customIdValidator: () => customIdValidator,
      defaultValidator: () => defaultValidator,
      disabledValidator: () => disabledValidator,
      emojiValidator: () => emojiValidator,
      jsonOptionValidator: () => jsonOptionValidator,
      labelValueDescriptionValidator: () => labelValueDescriptionValidator,
      minMaxValidator: () => minMaxValidator,
      optionValidator: () => optionValidator,
      optionsLengthValidator: () => optionsLengthValidator,
      optionsValidator: () => optionsValidator,
      placeholderValidator: () => placeholderValidator,
      urlValidator: () => urlValidator,
      validateRequiredButtonParameters: () => validateRequiredButtonParameters,
      validateRequiredSelectMenuOptionParameters: () => validateRequiredSelectMenuOptionParameters,
      validateRequiredSelectMenuParameters: () => validateRequiredSelectMenuParameters
    });
    var import_shapeshift2 = require_cjs();
    var import_v10 = require_v106();
    var StringSelectMenuOptionBuilder = /* @__PURE__ */ __name(class {
      /**
       * Creates a new string select menu option from API data.
       *
       * @param data - The API data to create this string select menu option with
       * @example
       * Creating a string select menu option from an API data object:
       * ```ts
       * const selectMenuOption = new SelectMenuOptionBuilder({
       * 	label: 'catchy label',
       * 	value: '1',
       * });
       * ```
       * @example
       * Creating a string select menu option using setters and API data:
       * ```ts
       * const selectMenuOption = new SelectMenuOptionBuilder({
       * 	default: true,
       * 	value: '1',
       * })
       * 	.setLabel('woah');
       * ```
       */
      constructor(data = {}) {
        this.data = data;
      }
      static {
        __name2(this, "StringSelectMenuOptionBuilder");
      }
      /**
       * Sets the label for this option.
       *
       * @param label - The label to use
       */
      setLabel(label) {
        this.data.label = labelValueDescriptionValidator.parse(label);
        return this;
      }
      /**
       * Sets the value for this option.
       *
       * @param value - The value to use
       */
      setValue(value) {
        this.data.value = labelValueDescriptionValidator.parse(value);
        return this;
      }
      /**
       * Sets the description for this option.
       *
       * @param description - The description to use
       */
      setDescription(description) {
        this.data.description = labelValueDescriptionValidator.parse(description);
        return this;
      }
      /**
       * Sets whether this option is selected by default.
       *
       * @param isDefault - Whether this option is selected by default
       */
      setDefault(isDefault = true) {
        this.data.default = defaultValidator.parse(isDefault);
        return this;
      }
      /**
       * Sets the emoji to display for this option.
       *
       * @param emoji - The emoji to use
       */
      setEmoji(emoji) {
        this.data.emoji = emojiValidator.parse(emoji);
        return this;
      }
      /**
       * {@inheritDoc BaseSelectMenuBuilder.toJSON}
       */
      toJSON() {
        validateRequiredSelectMenuOptionParameters(this.data.label, this.data.value);
        return {
          ...this.data
        };
      }
    }, "StringSelectMenuOptionBuilder");
    var customIdValidator = import_shapeshift2.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);
    var emojiValidator = import_shapeshift2.s.object({
      id: import_shapeshift2.s.string(),
      name: import_shapeshift2.s.string(),
      animated: import_shapeshift2.s.boolean()
    }).partial().strict().setValidationEnabled(isValidationEnabled);
    var disabledValidator = import_shapeshift2.s.boolean();
    var buttonLabelValidator = import_shapeshift2.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(80).setValidationEnabled(isValidationEnabled);
    var buttonStyleValidator = import_shapeshift2.s.nativeEnum(import_v10.ButtonStyle);
    var placeholderValidator = import_shapeshift2.s.string().lengthLessThanOrEqual(150).setValidationEnabled(isValidationEnabled);
    var minMaxValidator = import_shapeshift2.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
    var labelValueDescriptionValidator = import_shapeshift2.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);
    var jsonOptionValidator = import_shapeshift2.s.object({
      label: labelValueDescriptionValidator,
      value: labelValueDescriptionValidator,
      description: labelValueDescriptionValidator.optional(),
      emoji: emojiValidator.optional(),
      default: import_shapeshift2.s.boolean().optional()
    }).setValidationEnabled(isValidationEnabled);
    var optionValidator = import_shapeshift2.s.instance(StringSelectMenuOptionBuilder).setValidationEnabled(isValidationEnabled);
    var optionsValidator = optionValidator.array().lengthGreaterThanOrEqual(0).setValidationEnabled(isValidationEnabled);
    var optionsLengthValidator = import_shapeshift2.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
    function validateRequiredSelectMenuParameters(options, customId) {
      customIdValidator.parse(customId);
      optionsValidator.parse(options);
    }
    __name(validateRequiredSelectMenuParameters, "validateRequiredSelectMenuParameters");
    __name2(validateRequiredSelectMenuParameters, "validateRequiredSelectMenuParameters");
    var defaultValidator = import_shapeshift2.s.boolean();
    function validateRequiredSelectMenuOptionParameters(label, value) {
      labelValueDescriptionValidator.parse(label);
      labelValueDescriptionValidator.parse(value);
    }
    __name(validateRequiredSelectMenuOptionParameters, "validateRequiredSelectMenuOptionParameters");
    __name2(validateRequiredSelectMenuOptionParameters, "validateRequiredSelectMenuOptionParameters");
    var channelTypesValidator = import_shapeshift2.s.nativeEnum(import_v10.ChannelType).array().setValidationEnabled(isValidationEnabled);
    var urlValidator = import_shapeshift2.s.string().url({
      allowedProtocols: ["http:", "https:", "discord:"]
    }).setValidationEnabled(isValidationEnabled);
    function validateRequiredButtonParameters(style, label, emoji, customId, skuId, url) {
      if (style === import_v10.ButtonStyle.Premium) {
        if (!skuId) {
          throw new RangeError("Premium buttons must have an SKU id.");
        }
        if (customId || label || url || emoji) {
          throw new RangeError("Premium buttons cannot have a custom id, label, URL, or emoji.");
        }
      } else {
        if (skuId) {
          throw new RangeError("Non-premium buttons must not have an SKU id.");
        }
        if (url && customId) {
          throw new RangeError("URL and custom id are mutually exclusive.");
        }
        if (!label && !emoji) {
          throw new RangeError("Non-premium buttons must have a label and/or an emoji.");
        }
        if (style === import_v10.ButtonStyle.Link) {
          if (!url) {
            throw new RangeError("Link buttons must have a URL.");
          }
        } else if (url) {
          throw new RangeError("Non-premium and non-link buttons cannot have a URL.");
        }
      }
    }
    __name(validateRequiredButtonParameters, "validateRequiredButtonParameters");
    __name2(validateRequiredButtonParameters, "validateRequiredButtonParameters");
    var import_v1011 = require_v106();
    var ComponentBuilder = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "ComponentBuilder");
      }
      /**
       * The API data associated with this component.
       */
      data;
      /**
       * Constructs a new kind of component.
       *
       * @param data - The data to construct a component out of
       */
      constructor(data) {
        this.data = data;
      }
    }, "ComponentBuilder");
    var import_v1010 = require_v106();
    var import_v102 = require_v106();
    var ButtonBuilder = /* @__PURE__ */ __name(class extends ComponentBuilder {
      static {
        __name2(this, "ButtonBuilder");
      }
      /**
       * Creates a new button from API data.
       *
       * @param data - The API data to create this button with
       * @example
       * Creating a button from an API data object:
       * ```ts
       * const button = new ButtonBuilder({
       * 	custom_id: 'a cool button',
       * 	style: ButtonStyle.Primary,
       * 	label: 'Click Me',
       * 	emoji: {
       * 		name: 'smile',
       * 		id: '123456789012345678',
       * 	},
       * });
       * ```
       * @example
       * Creating a button using setters and API data:
       * ```ts
       * const button = new ButtonBuilder({
       * 	style: ButtonStyle.Secondary,
       * 	label: 'Click Me',
       * })
       * 	.setEmoji({ name: '🙂' })
       * 	.setCustomId('another cool button');
       * ```
       */
      constructor(data) {
        super({ type: import_v102.ComponentType.Button, ...data });
      }
      /**
       * Sets the style of this button.
       *
       * @param style - The style to use
       */
      setStyle(style) {
        this.data.style = buttonStyleValidator.parse(style);
        return this;
      }
      /**
       * Sets the URL for this button.
       *
       * @remarks
       * This method is only available to buttons using the `Link` button style.
       * Only three types of URL schemes are currently supported: `https://`, `http://`, and `discord://`.
       * @param url - The URL to use
       */
      setURL(url) {
        this.data.url = urlValidator.parse(url);
        return this;
      }
      /**
       * Sets the custom id for this button.
       *
       * @remarks
       * This method is only applicable to buttons that are not using the `Link` button style.
       * @param customId - The custom id to use
       */
      setCustomId(customId) {
        this.data.custom_id = customIdValidator.parse(customId);
        return this;
      }
      /**
       * Sets the SKU id that represents a purchasable SKU for this button.
       *
       * @remarks Only available when using premium-style buttons.
       * @param skuId - The SKU id to use
       */
      setSKUId(skuId) {
        this.data.sku_id = skuId;
        return this;
      }
      /**
       * Sets the emoji to display on this button.
       *
       * @param emoji - The emoji to use
       */
      setEmoji(emoji) {
        this.data.emoji = emojiValidator.parse(emoji);
        return this;
      }
      /**
       * Sets whether this button is disabled.
       *
       * @param disabled - Whether to disable this button
       */
      setDisabled(disabled = true) {
        this.data.disabled = disabledValidator.parse(disabled);
        return this;
      }
      /**
       * Sets the label for this button.
       *
       * @param label - The label to use
       */
      setLabel(label) {
        this.data.label = buttonLabelValidator.parse(label);
        return this;
      }
      /**
       * {@inheritDoc ComponentBuilder.toJSON}
       */
      toJSON() {
        validateRequiredButtonParameters(
          this.data.style,
          this.data.label,
          this.data.emoji,
          this.data.custom_id,
          this.data.sku_id,
          this.data.url
        );
        return {
          ...this.data
        };
      }
    }, "ButtonBuilder");
    var import_v103 = require_v106();
    var BaseSelectMenuBuilder = /* @__PURE__ */ __name(class extends ComponentBuilder {
      static {
        __name2(this, "BaseSelectMenuBuilder");
      }
      /**
       * Sets the placeholder for this select menu.
       *
       * @param placeholder - The placeholder to use
       */
      setPlaceholder(placeholder) {
        this.data.placeholder = placeholderValidator.parse(placeholder);
        return this;
      }
      /**
       * Sets the minimum values that must be selected in the select menu.
       *
       * @param minValues - The minimum values that must be selected
       */
      setMinValues(minValues) {
        this.data.min_values = minMaxValidator.parse(minValues);
        return this;
      }
      /**
       * Sets the maximum values that must be selected in the select menu.
       *
       * @param maxValues - The maximum values that must be selected
       */
      setMaxValues(maxValues) {
        this.data.max_values = minMaxValidator.parse(maxValues);
        return this;
      }
      /**
       * Sets the custom id for this select menu.
       *
       * @param customId - The custom id to use
       */
      setCustomId(customId) {
        this.data.custom_id = customIdValidator.parse(customId);
        return this;
      }
      /**
       * Sets whether this select menu is disabled.
       *
       * @param disabled - Whether this select menu is disabled
       */
      setDisabled(disabled = true) {
        this.data.disabled = disabledValidator.parse(disabled);
        return this;
      }
      /**
       * {@inheritDoc ComponentBuilder.toJSON}
       */
      toJSON() {
        customIdValidator.parse(this.data.custom_id);
        return {
          ...this.data
        };
      }
    }, "BaseSelectMenuBuilder");
    var ChannelSelectMenuBuilder = /* @__PURE__ */ __name(class extends BaseSelectMenuBuilder {
      static {
        __name2(this, "ChannelSelectMenuBuilder");
      }
      /**
       * Creates a new select menu from API data.
       *
       * @param data - The API data to create this select menu with
       * @example
       * Creating a select menu from an API data object:
       * ```ts
       * const selectMenu = new ChannelSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * 	placeholder: 'select an option',
       * 	max_values: 2,
       * });
       * ```
       * @example
       * Creating a select menu using setters and API data:
       * ```ts
       * const selectMenu = new ChannelSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * })
       * 	.addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)
       * 	.setMinValues(2);
       * ```
       */
      constructor(data) {
        super({ ...data, type: import_v103.ComponentType.ChannelSelect });
      }
      /**
       * Adds channel types to this select menu.
       *
       * @param types - The channel types to use
       */
      addChannelTypes(...types) {
        const normalizedTypes = normalizeArray(types);
        this.data.channel_types ??= [];
        this.data.channel_types.push(...channelTypesValidator.parse(normalizedTypes));
        return this;
      }
      /**
       * Sets channel types for this select menu.
       *
       * @param types - The channel types to use
       */
      setChannelTypes(...types) {
        const normalizedTypes = normalizeArray(types);
        this.data.channel_types ??= [];
        this.data.channel_types.splice(0, this.data.channel_types.length, ...channelTypesValidator.parse(normalizedTypes));
        return this;
      }
      /**
       * Adds default channels to this auto populated select menu.
       *
       * @param channels - The channels to add
       */
      addDefaultChannels(...channels) {
        const normalizedValues = normalizeArray(channels);
        optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
        this.data.default_values ??= [];
        this.data.default_values.push(
          ...normalizedValues.map((id) => ({
            id,
            type: import_v103.SelectMenuDefaultValueType.Channel
          }))
        );
        return this;
      }
      /**
       * Sets default channels for this auto populated select menu.
       *
       * @param channels - The channels to set
       */
      setDefaultChannels(...channels) {
        const normalizedValues = normalizeArray(channels);
        optionsLengthValidator.parse(normalizedValues.length);
        this.data.default_values = normalizedValues.map((id) => ({
          id,
          type: import_v103.SelectMenuDefaultValueType.Channel
        }));
        return this;
      }
      /**
       * {@inheritDoc BaseSelectMenuBuilder.toJSON}
       */
      toJSON() {
        customIdValidator.parse(this.data.custom_id);
        return {
          ...this.data
        };
      }
    }, "ChannelSelectMenuBuilder");
    var import_v104 = require_v106();
    var MentionableSelectMenuBuilder = /* @__PURE__ */ __name(class extends BaseSelectMenuBuilder {
      static {
        __name2(this, "MentionableSelectMenuBuilder");
      }
      /**
       * Creates a new select menu from API data.
       *
       * @param data - The API data to create this select menu with
       * @example
       * Creating a select menu from an API data object:
       * ```ts
       * const selectMenu = new MentionableSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * 	placeholder: 'select an option',
       * 	max_values: 2,
       * });
       * ```
       * @example
       * Creating a select menu using setters and API data:
       * ```ts
       * const selectMenu = new MentionableSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * })
       * 	.setMinValues(1);
       * ```
       */
      constructor(data) {
        super({ ...data, type: import_v104.ComponentType.MentionableSelect });
      }
      /**
       * Adds default roles to this auto populated select menu.
       *
       * @param roles - The roles to add
       */
      addDefaultRoles(...roles) {
        const normalizedValues = normalizeArray(roles);
        optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
        this.data.default_values ??= [];
        this.data.default_values.push(
          ...normalizedValues.map((id) => ({
            id,
            type: import_v104.SelectMenuDefaultValueType.Role
          }))
        );
        return this;
      }
      /**
       * Adds default users to this auto populated select menu.
       *
       * @param users - The users to add
       */
      addDefaultUsers(...users) {
        const normalizedValues = normalizeArray(users);
        optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
        this.data.default_values ??= [];
        this.data.default_values.push(
          ...normalizedValues.map((id) => ({
            id,
            type: import_v104.SelectMenuDefaultValueType.User
          }))
        );
        return this;
      }
      /**
       * Adds default values to this auto populated select menu.
       *
       * @param values - The values to add
       */
      addDefaultValues(...values) {
        const normalizedValues = normalizeArray(values);
        optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
        this.data.default_values ??= [];
        this.data.default_values.push(...normalizedValues);
        return this;
      }
      /**
       * Sets default values for this auto populated select menu.
       *
       * @param values - The values to set
       */
      setDefaultValues(...values) {
        const normalizedValues = normalizeArray(values);
        optionsLengthValidator.parse(normalizedValues.length);
        this.data.default_values = normalizedValues;
        return this;
      }
    }, "MentionableSelectMenuBuilder");
    var import_v105 = require_v106();
    var RoleSelectMenuBuilder = /* @__PURE__ */ __name(class extends BaseSelectMenuBuilder {
      static {
        __name2(this, "RoleSelectMenuBuilder");
      }
      /**
       * Creates a new select menu from API data.
       *
       * @param data - The API data to create this select menu with
       * @example
       * Creating a select menu from an API data object:
       * ```ts
       * const selectMenu = new RoleSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * 	placeholder: 'select an option',
       * 	max_values: 2,
       * });
       * ```
       * @example
       * Creating a select menu using setters and API data:
       * ```ts
       * const selectMenu = new RoleSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * })
       * 	.setMinValues(1);
       * ```
       */
      constructor(data) {
        super({ ...data, type: import_v105.ComponentType.RoleSelect });
      }
      /**
       * Adds default roles to this auto populated select menu.
       *
       * @param roles - The roles to add
       */
      addDefaultRoles(...roles) {
        const normalizedValues = normalizeArray(roles);
        optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
        this.data.default_values ??= [];
        this.data.default_values.push(
          ...normalizedValues.map((id) => ({
            id,
            type: import_v105.SelectMenuDefaultValueType.Role
          }))
        );
        return this;
      }
      /**
       * Sets default roles for this auto populated select menu.
       *
       * @param roles - The roles to set
       */
      setDefaultRoles(...roles) {
        const normalizedValues = normalizeArray(roles);
        optionsLengthValidator.parse(normalizedValues.length);
        this.data.default_values = normalizedValues.map((id) => ({
          id,
          type: import_v105.SelectMenuDefaultValueType.Role
        }));
        return this;
      }
    }, "RoleSelectMenuBuilder");
    var import_v106 = require_v106();
    var StringSelectMenuBuilder = /* @__PURE__ */ __name(class extends BaseSelectMenuBuilder {
      static {
        __name2(this, "StringSelectMenuBuilder");
      }
      /**
       * The options within this select menu.
       */
      options;
      /**
       * Creates a new select menu from API data.
       *
       * @param data - The API data to create this select menu with
       * @example
       * Creating a select menu from an API data object:
       * ```ts
       * const selectMenu = new StringSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * 	placeholder: 'select an option',
       * 	max_values: 2,
       * 	options: [
       * 		{ label: 'option 1', value: '1' },
       * 		{ label: 'option 2', value: '2' },
       * 		{ label: 'option 3', value: '3' },
       * 	],
       * });
       * ```
       * @example
       * Creating a select menu using setters and API data:
       * ```ts
       * const selectMenu = new StringSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * })
       * 	.setMinValues(1)
       * 	.addOptions({
       * 		label: 'Catchy',
       * 		value: 'catch',
       * 	});
       * ```
       */
      constructor(data) {
        const { options, ...initData } = data ?? {};
        super({ ...initData, type: import_v106.ComponentType.StringSelect });
        this.options = options?.map((option) => new StringSelectMenuOptionBuilder(option)) ?? [];
      }
      /**
       * Adds options to this select menu.
       *
       * @param options - The options to add
       */
      addOptions(...options) {
        const normalizedOptions = normalizeArray(options);
        optionsLengthValidator.parse(this.options.length + normalizedOptions.length);
        this.options.push(
          ...normalizedOptions.map(
            (normalizedOption) => normalizedOption instanceof StringSelectMenuOptionBuilder ? normalizedOption : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption))
          )
        );
        return this;
      }
      /**
       * Sets the options for this select menu.
       *
       * @param options - The options to set
       */
      setOptions(...options) {
        return this.spliceOptions(0, this.options.length, ...options);
      }
      /**
       * Removes, replaces, or inserts options for this select menu.
       *
       * @remarks
       * This method behaves similarly
       * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice()}.
       * It's useful for modifying and adjusting the order of existing options.
       * @example
       * Remove the first option:
       * ```ts
       * selectMenu.spliceOptions(0, 1);
       * ```
       * @example
       * Remove the first n option:
       * ```ts
       * const n = 4;
       * selectMenu.spliceOptions(0, n);
       * ```
       * @example
       * Remove the last option:
       * ```ts
       * selectMenu.spliceOptions(-1, 1);
       * ```
       * @param index - The index to start at
       * @param deleteCount - The number of options to remove
       * @param options - The replacing option objects or builders
       */
      spliceOptions(index, deleteCount, ...options) {
        const normalizedOptions = normalizeArray(options);
        const clone = [...this.options];
        clone.splice(
          index,
          deleteCount,
          ...normalizedOptions.map(
            (normalizedOption) => normalizedOption instanceof StringSelectMenuOptionBuilder ? normalizedOption : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption))
          )
        );
        optionsLengthValidator.parse(clone.length);
        this.options.splice(0, this.options.length, ...clone);
        return this;
      }
      /**
       * {@inheritDoc BaseSelectMenuBuilder.toJSON}
       */
      toJSON() {
        validateRequiredSelectMenuParameters(this.options, this.data.custom_id);
        return {
          ...this.data,
          options: this.options.map((option) => option.toJSON())
        };
      }
    }, "StringSelectMenuBuilder");
    var import_v107 = require_v106();
    var UserSelectMenuBuilder = /* @__PURE__ */ __name(class extends BaseSelectMenuBuilder {
      static {
        __name2(this, "UserSelectMenuBuilder");
      }
      /**
       * Creates a new select menu from API data.
       *
       * @param data - The API data to create this select menu with
       * @example
       * Creating a select menu from an API data object:
       * ```ts
       * const selectMenu = new UserSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * 	placeholder: 'select an option',
       * 	max_values: 2,
       * });
       * ```
       * @example
       * Creating a select menu using setters and API data:
       * ```ts
       * const selectMenu = new UserSelectMenuBuilder({
       * 	custom_id: 'a cool select menu',
       * })
       * 	.setMinValues(1);
       * ```
       */
      constructor(data) {
        super({ ...data, type: import_v107.ComponentType.UserSelect });
      }
      /**
       * Adds default users to this auto populated select menu.
       *
       * @param users - The users to add
       */
      addDefaultUsers(...users) {
        const normalizedValues = normalizeArray(users);
        optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);
        this.data.default_values ??= [];
        this.data.default_values.push(
          ...normalizedValues.map((id) => ({
            id,
            type: import_v107.SelectMenuDefaultValueType.User
          }))
        );
        return this;
      }
      /**
       * Sets default users for this auto populated select menu.
       *
       * @param users - The users to set
       */
      setDefaultUsers(...users) {
        const normalizedValues = normalizeArray(users);
        optionsLengthValidator.parse(normalizedValues.length);
        this.data.default_values = normalizedValues.map((id) => ({
          id,
          type: import_v107.SelectMenuDefaultValueType.User
        }));
        return this;
      }
    }, "UserSelectMenuBuilder");
    var import_util = require_dist3();
    var import_v109 = require_v106();
    var import_fast_deep_equal = __toESM2(require_fast_deep_equal());
    var Assertions_exports3 = {};
    __export2(Assertions_exports3, {
      labelValidator: () => labelValidator,
      maxLengthValidator: () => maxLengthValidator,
      minLengthValidator: () => minLengthValidator,
      placeholderValidator: () => placeholderValidator2,
      requiredValidator: () => requiredValidator,
      textInputStyleValidator: () => textInputStyleValidator,
      validateRequiredParameters: () => validateRequiredParameters,
      valueValidator: () => valueValidator
    });
    var import_shapeshift3 = require_cjs();
    var import_v108 = require_v106();
    var textInputStyleValidator = import_shapeshift3.s.nativeEnum(import_v108.TextInputStyle);
    var minLengthValidator = import_shapeshift3.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);
    var maxLengthValidator = import_shapeshift3.s.number().int().greaterThanOrEqual(1).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);
    var requiredValidator = import_shapeshift3.s.boolean();
    var valueValidator = import_shapeshift3.s.string().lengthLessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);
    var placeholderValidator2 = import_shapeshift3.s.string().lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);
    var labelValidator = import_shapeshift3.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);
    function validateRequiredParameters(customId, style, label) {
      customIdValidator.parse(customId);
      textInputStyleValidator.parse(style);
      labelValidator.parse(label);
    }
    __name(validateRequiredParameters, "validateRequiredParameters");
    __name2(validateRequiredParameters, "validateRequiredParameters");
    var TextInputBuilder = /* @__PURE__ */ __name(class extends ComponentBuilder {
      static {
        __name2(this, "TextInputBuilder");
      }
      /**
       * Creates a new text input from API data.
       *
       * @param data - The API data to create this text input with
       * @example
       * Creating a text input from an API data object:
       * ```ts
       * const textInput = new TextInputBuilder({
       * 	custom_id: 'a cool text input',
       * 	label: 'Type something',
       * 	style: TextInputStyle.Short,
       * });
       * ```
       * @example
       * Creating a text input using setters and API data:
       * ```ts
       * const textInput = new TextInputBuilder({
       * 	label: 'Type something else',
       * })
       * 	.setCustomId('woah')
       * 	.setStyle(TextInputStyle.Paragraph);
       * ```
       */
      constructor(data) {
        super({ type: import_v109.ComponentType.TextInput, ...data });
      }
      /**
       * Sets the custom id for this text input.
       *
       * @param customId - The custom id to use
       */
      setCustomId(customId) {
        this.data.custom_id = customIdValidator.parse(customId);
        return this;
      }
      /**
       * Sets the label for this text input.
       *
       * @param label - The label to use
       */
      setLabel(label) {
        this.data.label = labelValidator.parse(label);
        return this;
      }
      /**
       * Sets the style for this text input.
       *
       * @param style - The style to use
       */
      setStyle(style) {
        this.data.style = textInputStyleValidator.parse(style);
        return this;
      }
      /**
       * Sets the minimum length of text for this text input.
       *
       * @param minLength - The minimum length of text for this text input
       */
      setMinLength(minLength) {
        this.data.min_length = minLengthValidator.parse(minLength);
        return this;
      }
      /**
       * Sets the maximum length of text for this text input.
       *
       * @param maxLength - The maximum length of text for this text input
       */
      setMaxLength(maxLength) {
        this.data.max_length = maxLengthValidator.parse(maxLength);
        return this;
      }
      /**
       * Sets the placeholder for this text input.
       *
       * @param placeholder - The placeholder to use
       */
      setPlaceholder(placeholder) {
        this.data.placeholder = placeholderValidator2.parse(placeholder);
        return this;
      }
      /**
       * Sets the value for this text input.
       *
       * @param value - The value to use
       */
      setValue(value) {
        this.data.value = valueValidator.parse(value);
        return this;
      }
      /**
       * Sets whether this text input is required.
       *
       * @param required - Whether this text input is required
       */
      setRequired(required = true) {
        this.data.required = requiredValidator.parse(required);
        return this;
      }
      /**
       * {@inheritDoc ComponentBuilder.toJSON}
       */
      toJSON() {
        validateRequiredParameters(this.data.custom_id, this.data.style, this.data.label);
        return {
          ...this.data
        };
      }
      /**
       * Whether this is equal to another structure.
       */
      equals(other) {
        if ((0, import_util.isJSONEncodable)(other)) {
          return (0, import_fast_deep_equal.default)(other.toJSON(), this.data);
        }
        return (0, import_fast_deep_equal.default)(other, this.data);
      }
    }, "TextInputBuilder");
    function createComponentBuilder(data) {
      if (data instanceof ComponentBuilder) {
        return data;
      }
      switch (data.type) {
        case import_v1010.ComponentType.ActionRow:
          return new ActionRowBuilder(data);
        case import_v1010.ComponentType.Button:
          return new ButtonBuilder(data);
        case import_v1010.ComponentType.StringSelect:
          return new StringSelectMenuBuilder(data);
        case import_v1010.ComponentType.TextInput:
          return new TextInputBuilder(data);
        case import_v1010.ComponentType.UserSelect:
          return new UserSelectMenuBuilder(data);
        case import_v1010.ComponentType.RoleSelect:
          return new RoleSelectMenuBuilder(data);
        case import_v1010.ComponentType.MentionableSelect:
          return new MentionableSelectMenuBuilder(data);
        case import_v1010.ComponentType.ChannelSelect:
          return new ChannelSelectMenuBuilder(data);
        default:
          throw new Error(`Cannot properly serialize component type: ${data.type}`);
      }
    }
    __name(createComponentBuilder, "createComponentBuilder");
    __name2(createComponentBuilder, "createComponentBuilder");
    var ActionRowBuilder = /* @__PURE__ */ __name(class extends ComponentBuilder {
      static {
        __name2(this, "ActionRowBuilder");
      }
      /**
       * The components within this action row.
       */
      components;
      /**
       * Creates a new action row from API data.
       *
       * @param data - The API data to create this action row with
       * @example
       * Creating an action row from an API data object:
       * ```ts
       * const actionRow = new ActionRowBuilder({
       * 	components: [
       * 		{
       * 			custom_id: "custom id",
       * 			label: "Type something",
       * 			style: TextInputStyle.Short,
       * 			type: ComponentType.TextInput,
       * 		},
       * 	],
       * });
       * ```
       * @example
       * Creating an action row using setters and API data:
       * ```ts
       * const actionRow = new ActionRowBuilder({
       * 	components: [
       * 		{
       * 			custom_id: "custom id",
       * 			label: "Click me",
       * 			style: ButtonStyle.Primary,
       * 			type: ComponentType.Button,
       * 		},
       * 	],
       * })
       * 	.addComponents(button2, button3);
       * ```
       */
      constructor({ components, ...data } = {}) {
        super({ type: import_v1011.ComponentType.ActionRow, ...data });
        this.components = components?.map((component) => createComponentBuilder(component)) ?? [];
      }
      /**
       * Adds components to this action row.
       *
       * @param components - The components to add
       */
      addComponents(...components) {
        this.components.push(...normalizeArray(components));
        return this;
      }
      /**
       * Sets components for this action row.
       *
       * @param components - The components to set
       */
      setComponents(...components) {
        this.components.splice(0, this.components.length, ...normalizeArray(components));
        return this;
      }
      /**
       * {@inheritDoc ComponentBuilder.toJSON}
       */
      toJSON() {
        return {
          ...this.data,
          components: this.components.map((component) => component.toJSON())
        };
      }
    }, "ActionRowBuilder");
    var Assertions_exports4 = {};
    __export2(Assertions_exports4, {
      componentsValidator: () => componentsValidator,
      titleValidator: () => titleValidator,
      validateRequiredParameters: () => validateRequiredParameters2
    });
    var import_shapeshift4 = require_cjs();
    var titleValidator = import_shapeshift4.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);
    var componentsValidator = import_shapeshift4.s.instance(ActionRowBuilder).array().lengthGreaterThanOrEqual(1).setValidationEnabled(isValidationEnabled);
    function validateRequiredParameters2(customId, title, components) {
      customIdValidator.parse(customId);
      titleValidator.parse(title);
      componentsValidator.parse(components);
    }
    __name(validateRequiredParameters2, "validateRequiredParameters2");
    __name2(validateRequiredParameters2, "validateRequiredParameters");
    var ModalBuilder = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "ModalBuilder");
      }
      /**
       * The API data associated with this modal.
       */
      data;
      /**
       * The components within this modal.
       */
      components = [];
      /**
       * Creates a new modal from API data.
       *
       * @param data - The API data to create this modal with
       */
      constructor({ components, ...data } = {}) {
        this.data = { ...data };
        this.components = components?.map((component) => createComponentBuilder(component)) ?? [];
      }
      /**
       * Sets the title of this modal.
       *
       * @param title - The title to use
       */
      setTitle(title) {
        this.data.title = titleValidator.parse(title);
        return this;
      }
      /**
       * Sets the custom id of this modal.
       *
       * @param customId - The custom id to use
       */
      setCustomId(customId) {
        this.data.custom_id = customIdValidator.parse(customId);
        return this;
      }
      /**
       * Adds components to this modal.
       *
       * @param components - The components to add
       */
      addComponents(...components) {
        this.components.push(
          ...normalizeArray(components).map(
            (component) => component instanceof ActionRowBuilder ? component : new ActionRowBuilder(component)
          )
        );
        return this;
      }
      /**
       * Sets components for this modal.
       *
       * @param components - The components to set
       */
      setComponents(...components) {
        this.components.splice(0, this.components.length, ...normalizeArray(components));
        return this;
      }
      /**
       * {@inheritDoc ComponentBuilder.toJSON}
       */
      toJSON() {
        validateRequiredParameters2(this.data.custom_id, this.data.title, this.components);
        return {
          ...this.data,
          components: this.components.map((component) => component.toJSON())
        };
      }
    }, "ModalBuilder");
    var Assertions_exports5 = {};
    __export2(Assertions_exports5, {
      assertReturnOfBuilder: () => assertReturnOfBuilder,
      contextsPredicate: () => contextsPredicate,
      integrationTypesPredicate: () => integrationTypesPredicate,
      localizationMapPredicate: () => localizationMapPredicate,
      validateChoicesLength: () => validateChoicesLength,
      validateDMPermission: () => validateDMPermission,
      validateDefaultMemberPermissions: () => validateDefaultMemberPermissions,
      validateDefaultPermission: () => validateDefaultPermission,
      validateDescription: () => validateDescription,
      validateLocale: () => validateLocale,
      validateLocalizationMap: () => validateLocalizationMap,
      validateMaxOptionsLength: () => validateMaxOptionsLength,
      validateNSFW: () => validateNSFW,
      validateName: () => validateName,
      validateRequired: () => validateRequired,
      validateRequiredParameters: () => validateRequiredParameters3
    });
    var import_shapeshift5 = require_cjs();
    var import_v1012 = require_v106();
    var namePredicate = import_shapeshift5.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^[\p{Ll}\p{Lm}\p{Lo}\p{N}\p{sc=Devanagari}\p{sc=Thai}_-]+$/u).setValidationEnabled(isValidationEnabled);
    function validateName(name) {
      namePredicate.parse(name);
    }
    __name(validateName, "validateName");
    __name2(validateName, "validateName");
    var descriptionPredicate2 = import_shapeshift5.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);
    var localePredicate = import_shapeshift5.s.nativeEnum(import_v1012.Locale);
    function validateDescription(description) {
      descriptionPredicate2.parse(description);
    }
    __name(validateDescription, "validateDescription");
    __name2(validateDescription, "validateDescription");
    var maxArrayLengthPredicate = import_shapeshift5.s.unknown().array().lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
    function validateLocale(locale) {
      return localePredicate.parse(locale);
    }
    __name(validateLocale, "validateLocale");
    __name2(validateLocale, "validateLocale");
    function validateMaxOptionsLength(options) {
      maxArrayLengthPredicate.parse(options);
    }
    __name(validateMaxOptionsLength, "validateMaxOptionsLength");
    __name2(validateMaxOptionsLength, "validateMaxOptionsLength");
    function validateRequiredParameters3(name, description, options) {
      validateName(name);
      validateDescription(description);
      validateMaxOptionsLength(options);
    }
    __name(validateRequiredParameters3, "validateRequiredParameters3");
    __name2(validateRequiredParameters3, "validateRequiredParameters");
    var booleanPredicate = import_shapeshift5.s.boolean();
    function validateDefaultPermission(value) {
      booleanPredicate.parse(value);
    }
    __name(validateDefaultPermission, "validateDefaultPermission");
    __name2(validateDefaultPermission, "validateDefaultPermission");
    function validateRequired(required) {
      booleanPredicate.parse(required);
    }
    __name(validateRequired, "validateRequired");
    __name2(validateRequired, "validateRequired");
    var choicesLengthPredicate = import_shapeshift5.s.number().lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);
    function validateChoicesLength(amountAdding, choices) {
      choicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);
    }
    __name(validateChoicesLength, "validateChoicesLength");
    __name2(validateChoicesLength, "validateChoicesLength");
    function assertReturnOfBuilder(input, ExpectedInstanceOf) {
      import_shapeshift5.s.instance(ExpectedInstanceOf).parse(input);
    }
    __name(assertReturnOfBuilder, "assertReturnOfBuilder");
    __name2(assertReturnOfBuilder, "assertReturnOfBuilder");
    var localizationMapPredicate = import_shapeshift5.s.object(Object.fromEntries(Object.values(import_v1012.Locale).map((locale) => [locale, import_shapeshift5.s.string().nullish()]))).strict().nullish().setValidationEnabled(isValidationEnabled);
    function validateLocalizationMap(value) {
      localizationMapPredicate.parse(value);
    }
    __name(validateLocalizationMap, "validateLocalizationMap");
    __name2(validateLocalizationMap, "validateLocalizationMap");
    var dmPermissionPredicate = import_shapeshift5.s.boolean().nullish();
    function validateDMPermission(value) {
      dmPermissionPredicate.parse(value);
    }
    __name(validateDMPermission, "validateDMPermission");
    __name2(validateDMPermission, "validateDMPermission");
    var memberPermissionPredicate = import_shapeshift5.s.union([
      import_shapeshift5.s.bigint().transform((value) => value.toString()),
      import_shapeshift5.s.number().safeInt().transform((value) => value.toString()),
      import_shapeshift5.s.string().regex(/^\d+$/)
    ]).nullish();
    function validateDefaultMemberPermissions(permissions) {
      return memberPermissionPredicate.parse(permissions);
    }
    __name(validateDefaultMemberPermissions, "validateDefaultMemberPermissions");
    __name2(validateDefaultMemberPermissions, "validateDefaultMemberPermissions");
    function validateNSFW(value) {
      booleanPredicate.parse(value);
    }
    __name(validateNSFW, "validateNSFW");
    __name2(validateNSFW, "validateNSFW");
    var contextsPredicate = import_shapeshift5.s.array(
      import_shapeshift5.s.nativeEnum(import_v1012.InteractionContextType).setValidationEnabled(isValidationEnabled)
    );
    var integrationTypesPredicate = import_shapeshift5.s.array(
      import_shapeshift5.s.nativeEnum(import_v1012.ApplicationIntegrationType).setValidationEnabled(isValidationEnabled)
    );
    var import_ts_mixer6 = (init_esm(), __toCommonJS(esm_exports));
    var SharedNameAndDescription = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "SharedNameAndDescription");
      }
      /**
       * The name of this command.
       */
      name;
      /**
       * The name localizations of this command.
       */
      name_localizations;
      /**
       * The description of this command.
       */
      description;
      /**
       * The description localizations of this command.
       */
      description_localizations;
      /**
       * Sets the name of this command.
       *
       * @param name - The name to use
       */
      setName(name) {
        validateName(name);
        Reflect.set(this, "name", name);
        return this;
      }
      /**
       * Sets the description of this command.
       *
       * @param description - The description to use
       */
      setDescription(description) {
        validateDescription(description);
        Reflect.set(this, "description", description);
        return this;
      }
      /**
       * Sets a name localization for this command.
       *
       * @param locale - The locale to set
       * @param localizedName - The localized name for the given `locale`
       */
      setNameLocalization(locale, localizedName) {
        if (!this.name_localizations) {
          Reflect.set(this, "name_localizations", {});
        }
        const parsedLocale = validateLocale(locale);
        if (localizedName === null) {
          this.name_localizations[parsedLocale] = null;
          return this;
        }
        validateName(localizedName);
        this.name_localizations[parsedLocale] = localizedName;
        return this;
      }
      /**
       * Sets the name localizations for this command.
       *
       * @param localizedNames - The object of localized names to set
       */
      setNameLocalizations(localizedNames) {
        if (localizedNames === null) {
          Reflect.set(this, "name_localizations", null);
          return this;
        }
        Reflect.set(this, "name_localizations", {});
        for (const args of Object.entries(localizedNames)) {
          this.setNameLocalization(...args);
        }
        return this;
      }
      /**
       * Sets a description localization for this command.
       *
       * @param locale - The locale to set
       * @param localizedDescription - The localized description for the given locale
       */
      setDescriptionLocalization(locale, localizedDescription) {
        if (!this.description_localizations) {
          Reflect.set(this, "description_localizations", {});
        }
        const parsedLocale = validateLocale(locale);
        if (localizedDescription === null) {
          this.description_localizations[parsedLocale] = null;
          return this;
        }
        validateDescription(localizedDescription);
        this.description_localizations[parsedLocale] = localizedDescription;
        return this;
      }
      /**
       * Sets the description localizations for this command.
       *
       * @param localizedDescriptions - The object of localized descriptions to set
       */
      setDescriptionLocalizations(localizedDescriptions) {
        if (localizedDescriptions === null) {
          Reflect.set(this, "description_localizations", null);
          return this;
        }
        Reflect.set(this, "description_localizations", {});
        for (const args of Object.entries(localizedDescriptions)) {
          this.setDescriptionLocalization(...args);
        }
        return this;
      }
    }, "SharedNameAndDescription");
    var import_v1013 = require_v106();
    var SharedSlashCommand = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "SharedSlashCommand");
      }
      name = void 0;
      name_localizations;
      description = void 0;
      description_localizations;
      options = [];
      contexts;
      /**
       * @deprecated Use {@link SharedSlashCommand.setDefaultMemberPermissions} or {@link SharedSlashCommand.setDMPermission} instead.
       */
      default_permission = void 0;
      default_member_permissions = void 0;
      /**
       * @deprecated Use {@link SharedSlashCommand.contexts} instead.
       */
      dm_permission = void 0;
      integration_types;
      nsfw = void 0;
      /**
       * Sets the contexts of this command.
       *
       * @param contexts - The contexts
       */
      setContexts(...contexts) {
        Reflect.set(this, "contexts", contextsPredicate.parse(normalizeArray(contexts)));
        return this;
      }
      /**
       * Sets the integration types of this command.
       *
       * @param integrationTypes - The integration types
       */
      setIntegrationTypes(...integrationTypes) {
        Reflect.set(this, "integration_types", integrationTypesPredicate.parse(normalizeArray(integrationTypes)));
        return this;
      }
      /**
       * Sets whether the command is enabled by default when the application is added to a guild.
       *
       * @remarks
       * If set to `false`, you will have to later `PUT` the permissions for this command.
       * @param value - Whether or not to enable this command by default
       * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
       * @deprecated Use {@link SharedSlashCommand.setDefaultMemberPermissions} or {@link SharedSlashCommand.setDMPermission} instead.
       */
      setDefaultPermission(value) {
        validateDefaultPermission(value);
        Reflect.set(this, "default_permission", value);
        return this;
      }
      /**
       * Sets the default permissions a member should have in order to run the command.
       *
       * @remarks
       * You can set this to `'0'` to disable the command by default.
       * @param permissions - The permissions bit field to set
       * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
       */
      setDefaultMemberPermissions(permissions) {
        const permissionValue = validateDefaultMemberPermissions(permissions);
        Reflect.set(this, "default_member_permissions", permissionValue);
        return this;
      }
      /**
       * Sets if the command is available in direct messages with the application.
       *
       * @remarks
       * By default, commands are visible. This method is only for global commands.
       * @param enabled - Whether the command should be enabled in direct messages
       * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
       * @deprecated
       * Use {@link SharedSlashCommand.setContexts} instead.
       */
      setDMPermission(enabled) {
        validateDMPermission(enabled);
        Reflect.set(this, "dm_permission", enabled);
        return this;
      }
      /**
       * Sets whether this command is NSFW.
       *
       * @param nsfw - Whether this command is NSFW
       */
      setNSFW(nsfw = true) {
        validateNSFW(nsfw);
        Reflect.set(this, "nsfw", nsfw);
        return this;
      }
      /**
       * Serializes this builder to API-compatible JSON data.
       *
       * @remarks
       * This method runs validations on the data before serializing it.
       * As such, it may throw an error if the data is invalid.
       */
      toJSON() {
        validateRequiredParameters3(this.name, this.description, this.options);
        validateLocalizationMap(this.name_localizations);
        validateLocalizationMap(this.description_localizations);
        return {
          ...this,
          type: import_v1013.ApplicationCommandType.ChatInput,
          options: this.options.map((option) => option.toJSON())
        };
      }
    }, "SharedSlashCommand");
    var import_v1014 = require_v106();
    var ApplicationCommandOptionBase = /* @__PURE__ */ __name(class extends SharedNameAndDescription {
      static {
        __name2(this, "ApplicationCommandOptionBase");
      }
      /**
       * Whether this option is required.
       *
       * @defaultValue `false`
       */
      required = false;
      /**
       * Sets whether this option is required.
       *
       * @param required - Whether this option should be required
       */
      setRequired(required) {
        validateRequired(required);
        Reflect.set(this, "required", required);
        return this;
      }
      /**
       * This method runs required validators on this builder.
       */
      runRequiredValidations() {
        validateRequiredParameters3(this.name, this.description, []);
        validateLocalizationMap(this.name_localizations);
        validateLocalizationMap(this.description_localizations);
        validateRequired(this.required);
      }
    }, "ApplicationCommandOptionBase");
    var SlashCommandAttachmentOption = /* @__PURE__ */ __name(class extends ApplicationCommandOptionBase {
      static {
        __name2(this, "SlashCommandAttachmentOption");
      }
      /**
       * The type of this option.
       */
      type = import_v1014.ApplicationCommandOptionType.Attachment;
      /**
       * {@inheritDoc ApplicationCommandOptionBase.toJSON}
       */
      toJSON() {
        this.runRequiredValidations();
        return { ...this };
      }
    }, "SlashCommandAttachmentOption");
    var import_v1015 = require_v106();
    var SlashCommandBooleanOption = /* @__PURE__ */ __name(class extends ApplicationCommandOptionBase {
      static {
        __name2(this, "SlashCommandBooleanOption");
      }
      /**
       * The type of this option.
       */
      type = import_v1015.ApplicationCommandOptionType.Boolean;
      /**
       * {@inheritDoc ApplicationCommandOptionBase.toJSON}
       */
      toJSON() {
        this.runRequiredValidations();
        return { ...this };
      }
    }, "SlashCommandBooleanOption");
    var import_v1017 = require_v106();
    var import_ts_mixer = (init_esm(), __toCommonJS(esm_exports));
    var import_shapeshift6 = require_cjs();
    var import_v1016 = require_v106();
    var allowedChannelTypes = [
      import_v1016.ChannelType.GuildText,
      import_v1016.ChannelType.GuildVoice,
      import_v1016.ChannelType.GuildCategory,
      import_v1016.ChannelType.GuildAnnouncement,
      import_v1016.ChannelType.AnnouncementThread,
      import_v1016.ChannelType.PublicThread,
      import_v1016.ChannelType.PrivateThread,
      import_v1016.ChannelType.GuildStageVoice,
      import_v1016.ChannelType.GuildForum,
      import_v1016.ChannelType.GuildMedia
    ];
    var channelTypesPredicate = import_shapeshift6.s.array(import_shapeshift6.s.union(allowedChannelTypes.map((type) => import_shapeshift6.s.literal(type))));
    var ApplicationCommandOptionChannelTypesMixin = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "ApplicationCommandOptionChannelTypesMixin");
      }
      /**
       * The channel types of this option.
       */
      channel_types;
      /**
       * Adds channel types to this option.
       *
       * @param channelTypes - The channel types
       */
      addChannelTypes(...channelTypes) {
        if (this.channel_types === void 0) {
          Reflect.set(this, "channel_types", []);
        }
        this.channel_types.push(...channelTypesPredicate.parse(normalizeArray(channelTypes)));
        return this;
      }
    }, "ApplicationCommandOptionChannelTypesMixin");
    var SlashCommandChannelOption = /* @__PURE__ */ __name(class extends ApplicationCommandOptionBase {
      /**
       * The type of this option.
       */
      type = import_v1017.ApplicationCommandOptionType.Channel;
      /**
       * {@inheritDoc ApplicationCommandOptionBase.toJSON}
       */
      toJSON() {
        this.runRequiredValidations();
        return { ...this };
      }
    }, "SlashCommandChannelOption");
    __name2(SlashCommandChannelOption, "SlashCommandChannelOption");
    SlashCommandChannelOption = __decorateClass([
      (0, import_ts_mixer.mix)(ApplicationCommandOptionChannelTypesMixin)
    ], SlashCommandChannelOption);
    var import_shapeshift9 = require_cjs();
    var import_v1019 = require_v106();
    var import_ts_mixer2 = (init_esm(), __toCommonJS(esm_exports));
    var ApplicationCommandNumericOptionMinMaxValueMixin = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "ApplicationCommandNumericOptionMinMaxValueMixin");
      }
      /**
       * The maximum value of this option.
       */
      max_value;
      /**
       * The minimum value of this option.
       */
      min_value;
    }, "ApplicationCommandNumericOptionMinMaxValueMixin");
    var import_shapeshift7 = require_cjs();
    var booleanPredicate2 = import_shapeshift7.s.boolean();
    var ApplicationCommandOptionWithAutocompleteMixin = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "ApplicationCommandOptionWithAutocompleteMixin");
      }
      /**
       * Whether this option utilizes autocomplete.
       */
      autocomplete;
      /**
       * The type of this option.
       *
       * @privateRemarks Since this is present and this is a mixin, this is needed.
       */
      type;
      /**
       * Whether this option uses autocomplete.
       *
       * @param autocomplete - Whether this option should use autocomplete
       */
      setAutocomplete(autocomplete) {
        booleanPredicate2.parse(autocomplete);
        if (autocomplete && "choices" in this && Array.isArray(this.choices) && this.choices.length > 0) {
          throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
        }
        Reflect.set(this, "autocomplete", autocomplete);
        return this;
      }
    }, "ApplicationCommandOptionWithAutocompleteMixin");
    var import_shapeshift8 = require_cjs();
    var import_v1018 = require_v106();
    var stringPredicate = import_shapeshift8.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);
    var numberPredicate = import_shapeshift8.s.number().greaterThan(Number.NEGATIVE_INFINITY).lessThan(Number.POSITIVE_INFINITY);
    var choicesPredicate = import_shapeshift8.s.object({
      name: stringPredicate,
      name_localizations: localizationMapPredicate,
      value: import_shapeshift8.s.union([stringPredicate, numberPredicate])
    }).array();
    var ApplicationCommandOptionWithChoicesMixin = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "ApplicationCommandOptionWithChoicesMixin");
      }
      /**
       * The choices of this option.
       */
      choices;
      /**
       * The type of this option.
       *
       * @privateRemarks Since this is present and this is a mixin, this is needed.
       */
      type;
      /**
       * Adds multiple choices to this option.
       *
       * @param choices - The choices to add
       */
      addChoices(...choices) {
        const normalizedChoices = normalizeArray(choices);
        if (normalizedChoices.length > 0 && "autocomplete" in this && this.autocomplete) {
          throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
        }
        choicesPredicate.parse(normalizedChoices);
        if (this.choices === void 0) {
          Reflect.set(this, "choices", []);
        }
        validateChoicesLength(normalizedChoices.length, this.choices);
        for (const { name, name_localizations, value } of normalizedChoices) {
          if (this.type === import_v1018.ApplicationCommandOptionType.String) {
            stringPredicate.parse(value);
          } else {
            numberPredicate.parse(value);
          }
          this.choices.push({ name, name_localizations, value });
        }
        return this;
      }
      /**
       * Sets multiple choices for this option.
       *
       * @param choices - The choices to set
       */
      setChoices(...choices) {
        const normalizedChoices = normalizeArray(choices);
        if (normalizedChoices.length > 0 && "autocomplete" in this && this.autocomplete) {
          throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
        }
        choicesPredicate.parse(normalizedChoices);
        Reflect.set(this, "choices", []);
        this.addChoices(normalizedChoices);
        return this;
      }
    }, "ApplicationCommandOptionWithChoicesMixin");
    var numberValidator = import_shapeshift9.s.number().int();
    var SlashCommandIntegerOption = /* @__PURE__ */ __name(class extends ApplicationCommandOptionBase {
      /**
       * The type of this option.
       */
      type = import_v1019.ApplicationCommandOptionType.Integer;
      /**
       * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}
       */
      setMaxValue(max) {
        numberValidator.parse(max);
        Reflect.set(this, "max_value", max);
        return this;
      }
      /**
       * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}
       */
      setMinValue(min) {
        numberValidator.parse(min);
        Reflect.set(this, "min_value", min);
        return this;
      }
      /**
       * {@inheritDoc ApplicationCommandOptionBase.toJSON}
       */
      toJSON() {
        this.runRequiredValidations();
        if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {
          throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
        }
        return { ...this };
      }
    }, "SlashCommandIntegerOption");
    __name2(SlashCommandIntegerOption, "SlashCommandIntegerOption");
    SlashCommandIntegerOption = __decorateClass([
      (0, import_ts_mixer2.mix)(
        ApplicationCommandNumericOptionMinMaxValueMixin,
        ApplicationCommandOptionWithAutocompleteMixin,
        ApplicationCommandOptionWithChoicesMixin
      )
    ], SlashCommandIntegerOption);
    var import_v1020 = require_v106();
    var SlashCommandMentionableOption = /* @__PURE__ */ __name(class extends ApplicationCommandOptionBase {
      static {
        __name2(this, "SlashCommandMentionableOption");
      }
      /**
       * The type of this option.
       */
      type = import_v1020.ApplicationCommandOptionType.Mentionable;
      /**
       * {@inheritDoc ApplicationCommandOptionBase.toJSON}
       */
      toJSON() {
        this.runRequiredValidations();
        return { ...this };
      }
    }, "SlashCommandMentionableOption");
    var import_shapeshift10 = require_cjs();
    var import_v1021 = require_v106();
    var import_ts_mixer3 = (init_esm(), __toCommonJS(esm_exports));
    var numberValidator2 = import_shapeshift10.s.number();
    var SlashCommandNumberOption = /* @__PURE__ */ __name(class extends ApplicationCommandOptionBase {
      /**
       * The type of this option.
       */
      type = import_v1021.ApplicationCommandOptionType.Number;
      /**
       * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}
       */
      setMaxValue(max) {
        numberValidator2.parse(max);
        Reflect.set(this, "max_value", max);
        return this;
      }
      /**
       * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}
       */
      setMinValue(min) {
        numberValidator2.parse(min);
        Reflect.set(this, "min_value", min);
        return this;
      }
      /**
       * {@inheritDoc ApplicationCommandOptionBase.toJSON}
       */
      toJSON() {
        this.runRequiredValidations();
        if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {
          throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
        }
        return { ...this };
      }
    }, "SlashCommandNumberOption");
    __name2(SlashCommandNumberOption, "SlashCommandNumberOption");
    SlashCommandNumberOption = __decorateClass([
      (0, import_ts_mixer3.mix)(
        ApplicationCommandNumericOptionMinMaxValueMixin,
        ApplicationCommandOptionWithAutocompleteMixin,
        ApplicationCommandOptionWithChoicesMixin
      )
    ], SlashCommandNumberOption);
    var import_v1022 = require_v106();
    var SlashCommandRoleOption = /* @__PURE__ */ __name(class extends ApplicationCommandOptionBase {
      static {
        __name2(this, "SlashCommandRoleOption");
      }
      /**
       * The type of this option.
       */
      type = import_v1022.ApplicationCommandOptionType.Role;
      /**
       * {@inheritDoc ApplicationCommandOptionBase.toJSON}
       */
      toJSON() {
        this.runRequiredValidations();
        return { ...this };
      }
    }, "SlashCommandRoleOption");
    var import_shapeshift11 = require_cjs();
    var import_v1023 = require_v106();
    var import_ts_mixer4 = (init_esm(), __toCommonJS(esm_exports));
    var minLengthValidator2 = import_shapeshift11.s.number().greaterThanOrEqual(0).lessThanOrEqual(6e3);
    var maxLengthValidator2 = import_shapeshift11.s.number().greaterThanOrEqual(1).lessThanOrEqual(6e3);
    var SlashCommandStringOption = /* @__PURE__ */ __name(class extends ApplicationCommandOptionBase {
      /**
       * The type of this option.
       */
      type = import_v1023.ApplicationCommandOptionType.String;
      /**
       * The maximum length of this option.
       */
      max_length;
      /**
       * The minimum length of this option.
       */
      min_length;
      /**
       * Sets the maximum length of this string option.
       *
       * @param max - The maximum length this option can be
       */
      setMaxLength(max) {
        maxLengthValidator2.parse(max);
        Reflect.set(this, "max_length", max);
        return this;
      }
      /**
       * Sets the minimum length of this string option.
       *
       * @param min - The minimum length this option can be
       */
      setMinLength(min) {
        minLengthValidator2.parse(min);
        Reflect.set(this, "min_length", min);
        return this;
      }
      /**
       * {@inheritDoc ApplicationCommandOptionBase.toJSON}
       */
      toJSON() {
        this.runRequiredValidations();
        if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {
          throw new RangeError("Autocomplete and choices are mutually exclusive to each other.");
        }
        return { ...this };
      }
    }, "SlashCommandStringOption");
    __name2(SlashCommandStringOption, "SlashCommandStringOption");
    SlashCommandStringOption = __decorateClass([
      (0, import_ts_mixer4.mix)(ApplicationCommandOptionWithAutocompleteMixin, ApplicationCommandOptionWithChoicesMixin)
    ], SlashCommandStringOption);
    var import_v1024 = require_v106();
    var SlashCommandUserOption = /* @__PURE__ */ __name(class extends ApplicationCommandOptionBase {
      static {
        __name2(this, "SlashCommandUserOption");
      }
      /**
       * The type of this option.
       */
      type = import_v1024.ApplicationCommandOptionType.User;
      /**
       * {@inheritDoc ApplicationCommandOptionBase.toJSON}
       */
      toJSON() {
        this.runRequiredValidations();
        return { ...this };
      }
    }, "SlashCommandUserOption");
    var SharedSlashCommandOptions = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "SharedSlashCommandOptions");
      }
      options;
      /**
       * Adds a boolean option.
       *
       * @param input - A function that returns an option builder or an already built builder
       */
      addBooleanOption(input) {
        return this._sharedAddOptionMethod(input, SlashCommandBooleanOption);
      }
      /**
       * Adds a user option.
       *
       * @param input - A function that returns an option builder or an already built builder
       */
      addUserOption(input) {
        return this._sharedAddOptionMethod(input, SlashCommandUserOption);
      }
      /**
       * Adds a channel option.
       *
       * @param input - A function that returns an option builder or an already built builder
       */
      addChannelOption(input) {
        return this._sharedAddOptionMethod(input, SlashCommandChannelOption);
      }
      /**
       * Adds a role option.
       *
       * @param input - A function that returns an option builder or an already built builder
       */
      addRoleOption(input) {
        return this._sharedAddOptionMethod(input, SlashCommandRoleOption);
      }
      /**
       * Adds an attachment option.
       *
       * @param input - A function that returns an option builder or an already built builder
       */
      addAttachmentOption(input) {
        return this._sharedAddOptionMethod(input, SlashCommandAttachmentOption);
      }
      /**
       * Adds a mentionable option.
       *
       * @param input - A function that returns an option builder or an already built builder
       */
      addMentionableOption(input) {
        return this._sharedAddOptionMethod(input, SlashCommandMentionableOption);
      }
      /**
       * Adds a string option.
       *
       * @param input - A function that returns an option builder or an already built builder
       */
      addStringOption(input) {
        return this._sharedAddOptionMethod(input, SlashCommandStringOption);
      }
      /**
       * Adds an integer option.
       *
       * @param input - A function that returns an option builder or an already built builder
       */
      addIntegerOption(input) {
        return this._sharedAddOptionMethod(input, SlashCommandIntegerOption);
      }
      /**
       * Adds a number option.
       *
       * @param input - A function that returns an option builder or an already built builder
       */
      addNumberOption(input) {
        return this._sharedAddOptionMethod(input, SlashCommandNumberOption);
      }
      /**
       * Where the actual adding magic happens. ✨
       *
       * @param input - The input. What else?
       * @param Instance - The instance of whatever is being added
       * @internal
       */
      _sharedAddOptionMethod(input, Instance) {
        const { options } = this;
        validateMaxOptionsLength(options);
        const result = typeof input === "function" ? input(new Instance()) : input;
        assertReturnOfBuilder(result, Instance);
        options.push(result);
        return this;
      }
    }, "SharedSlashCommandOptions");
    var import_v1025 = require_v106();
    var import_ts_mixer5 = (init_esm(), __toCommonJS(esm_exports));
    var SlashCommandSubcommandGroupBuilder = /* @__PURE__ */ __name(class {
      /**
       * The name of this subcommand group.
       */
      name = void 0;
      /**
       * The description of this subcommand group.
       */
      description = void 0;
      /**
       * The subcommands within this subcommand group.
       */
      options = [];
      /**
       * Adds a new subcommand to this group.
       *
       * @param input - A function that returns a subcommand builder or an already built builder
       */
      addSubcommand(input) {
        const { options } = this;
        validateMaxOptionsLength(options);
        const result = typeof input === "function" ? input(new SlashCommandSubcommandBuilder()) : input;
        assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);
        options.push(result);
        return this;
      }
      /**
       * Serializes this builder to API-compatible JSON data.
       *
       * @remarks
       * This method runs validations on the data before serializing it.
       * As such, it may throw an error if the data is invalid.
       */
      toJSON() {
        validateRequiredParameters3(this.name, this.description, this.options);
        return {
          type: import_v1025.ApplicationCommandOptionType.SubcommandGroup,
          name: this.name,
          name_localizations: this.name_localizations,
          description: this.description,
          description_localizations: this.description_localizations,
          options: this.options.map((option) => option.toJSON())
        };
      }
    }, "SlashCommandSubcommandGroupBuilder");
    __name2(SlashCommandSubcommandGroupBuilder, "SlashCommandSubcommandGroupBuilder");
    SlashCommandSubcommandGroupBuilder = __decorateClass([
      (0, import_ts_mixer5.mix)(SharedNameAndDescription)
    ], SlashCommandSubcommandGroupBuilder);
    var SlashCommandSubcommandBuilder = /* @__PURE__ */ __name(class {
      /**
       * The name of this subcommand.
       */
      name = void 0;
      /**
       * The description of this subcommand.
       */
      description = void 0;
      /**
       * The options within this subcommand.
       */
      options = [];
      /**
       * Serializes this builder to API-compatible JSON data.
       *
       * @remarks
       * This method runs validations on the data before serializing it.
       * As such, it may throw an error if the data is invalid.
       */
      toJSON() {
        validateRequiredParameters3(this.name, this.description, this.options);
        return {
          type: import_v1025.ApplicationCommandOptionType.Subcommand,
          name: this.name,
          name_localizations: this.name_localizations,
          description: this.description,
          description_localizations: this.description_localizations,
          options: this.options.map((option) => option.toJSON())
        };
      }
    }, "SlashCommandSubcommandBuilder");
    __name2(SlashCommandSubcommandBuilder, "SlashCommandSubcommandBuilder");
    SlashCommandSubcommandBuilder = __decorateClass([
      (0, import_ts_mixer5.mix)(SharedNameAndDescription, SharedSlashCommandOptions)
    ], SlashCommandSubcommandBuilder);
    var SharedSlashCommandSubcommands = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "SharedSlashCommandSubcommands");
      }
      options = [];
      /**
       * Adds a new subcommand group to this command.
       *
       * @param input - A function that returns a subcommand group builder or an already built builder
       */
      addSubcommandGroup(input) {
        const { options } = this;
        validateMaxOptionsLength(options);
        const result = typeof input === "function" ? input(new SlashCommandSubcommandGroupBuilder()) : input;
        assertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);
        options.push(result);
        return this;
      }
      /**
       * Adds a new subcommand to this command.
       *
       * @param input - A function that returns a subcommand builder or an already built builder
       */
      addSubcommand(input) {
        const { options } = this;
        validateMaxOptionsLength(options);
        const result = typeof input === "function" ? input(new SlashCommandSubcommandBuilder()) : input;
        assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);
        options.push(result);
        return this;
      }
    }, "SharedSlashCommandSubcommands");
    var SlashCommandBuilder = /* @__PURE__ */ __name(class {
      /**
       * The name of this command.
       */
      name = void 0;
      /**
       * The name localizations of this command.
       */
      name_localizations;
      /**
       * The description of this command.
       */
      description = void 0;
      /**
       * The description localizations of this command.
       */
      description_localizations;
      /**
       * The options of this command.
       */
      options = [];
      /**
       * The contexts for this command.
       */
      contexts;
      /**
       * Whether this command is enabled by default when the application is added to a guild.
       *
       * @deprecated Use {@link SharedSlashCommand.setDefaultMemberPermissions} or {@link SharedSlashCommand.setDMPermission} instead.
       */
      default_permission = void 0;
      /**
       * The set of permissions represented as a bit set for the command.
       */
      default_member_permissions = void 0;
      /**
       * Indicates whether the command is available in direct messages with the application.
       *
       * @remarks
       * By default, commands are visible. This property is only for global commands.
       * @deprecated
       * Use {@link SlashCommandBuilder.contexts} instead.
       */
      dm_permission = void 0;
      /**
       * The integration types for this command.
       */
      integration_types;
      /**
       * Whether this command is NSFW.
       */
      nsfw = void 0;
    }, "SlashCommandBuilder");
    __name2(SlashCommandBuilder, "SlashCommandBuilder");
    SlashCommandBuilder = __decorateClass([
      (0, import_ts_mixer6.mix)(SharedSlashCommandOptions, SharedNameAndDescription, SharedSlashCommandSubcommands, SharedSlashCommand)
    ], SlashCommandBuilder);
    var Assertions_exports6 = {};
    __export2(Assertions_exports6, {
      contextsPredicate: () => contextsPredicate2,
      integrationTypesPredicate: () => integrationTypesPredicate2,
      validateDMPermission: () => validateDMPermission2,
      validateDefaultMemberPermissions: () => validateDefaultMemberPermissions2,
      validateDefaultPermission: () => validateDefaultPermission2,
      validateName: () => validateName2,
      validateRequiredParameters: () => validateRequiredParameters4,
      validateType: () => validateType
    });
    var import_shapeshift12 = require_cjs();
    var import_v1026 = require_v106();
    var namePredicate2 = import_shapeshift12.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^( *[\p{P}\p{L}\p{N}\p{sc=Devanagari}\p{sc=Thai}]+ *)+$/u).setValidationEnabled(isValidationEnabled);
    var typePredicate = import_shapeshift12.s.union([import_shapeshift12.s.literal(import_v1026.ApplicationCommandType.User), import_shapeshift12.s.literal(import_v1026.ApplicationCommandType.Message)]).setValidationEnabled(isValidationEnabled);
    var booleanPredicate3 = import_shapeshift12.s.boolean();
    function validateDefaultPermission2(value) {
      booleanPredicate3.parse(value);
    }
    __name(validateDefaultPermission2, "validateDefaultPermission2");
    __name2(validateDefaultPermission2, "validateDefaultPermission");
    function validateName2(name) {
      namePredicate2.parse(name);
    }
    __name(validateName2, "validateName2");
    __name2(validateName2, "validateName");
    function validateType(type) {
      typePredicate.parse(type);
    }
    __name(validateType, "validateType");
    __name2(validateType, "validateType");
    function validateRequiredParameters4(name, type) {
      validateName2(name);
      validateType(type);
    }
    __name(validateRequiredParameters4, "validateRequiredParameters4");
    __name2(validateRequiredParameters4, "validateRequiredParameters");
    var dmPermissionPredicate2 = import_shapeshift12.s.boolean().nullish();
    function validateDMPermission2(value) {
      dmPermissionPredicate2.parse(value);
    }
    __name(validateDMPermission2, "validateDMPermission2");
    __name2(validateDMPermission2, "validateDMPermission");
    var memberPermissionPredicate2 = import_shapeshift12.s.union([
      import_shapeshift12.s.bigint().transform((value) => value.toString()),
      import_shapeshift12.s.number().safeInt().transform((value) => value.toString()),
      import_shapeshift12.s.string().regex(/^\d+$/)
    ]).nullish();
    function validateDefaultMemberPermissions2(permissions) {
      return memberPermissionPredicate2.parse(permissions);
    }
    __name(validateDefaultMemberPermissions2, "validateDefaultMemberPermissions2");
    __name2(validateDefaultMemberPermissions2, "validateDefaultMemberPermissions");
    var contextsPredicate2 = import_shapeshift12.s.array(
      import_shapeshift12.s.nativeEnum(import_v1026.InteractionContextType).setValidationEnabled(isValidationEnabled)
    );
    var integrationTypesPredicate2 = import_shapeshift12.s.array(
      import_shapeshift12.s.nativeEnum(import_v1026.ApplicationIntegrationType).setValidationEnabled(isValidationEnabled)
    );
    var ContextMenuCommandBuilder = /* @__PURE__ */ __name(class {
      static {
        __name2(this, "ContextMenuCommandBuilder");
      }
      /**
       * The name of this command.
       */
      name = void 0;
      /**
       * The name localizations of this command.
       */
      name_localizations;
      /**
       * The type of this command.
       */
      type = void 0;
      /**
       * The contexts for this command.
       */
      contexts;
      /**
       * Whether this command is enabled by default when the application is added to a guild.
       *
       * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.
       */
      default_permission = void 0;
      /**
       * The set of permissions represented as a bit set for the command.
       */
      default_member_permissions = void 0;
      /**
       * Indicates whether the command is available in direct messages with the application.
       *
       * @remarks
       * By default, commands are visible. This property is only for global commands.
       * @deprecated
       * Use {@link ContextMenuCommandBuilder.contexts} instead.
       */
      dm_permission = void 0;
      /**
       * The integration types for this command.
       */
      integration_types;
      /**
       * Sets the contexts of this command.
       *
       * @param contexts - The contexts
       */
      setContexts(...contexts) {
        Reflect.set(this, "contexts", contextsPredicate2.parse(normalizeArray(contexts)));
        return this;
      }
      /**
       * Sets integration types of this command.
       *
       * @param integrationTypes - The integration types
       */
      setIntegrationTypes(...integrationTypes) {
        Reflect.set(this, "integration_types", integrationTypesPredicate2.parse(normalizeArray(integrationTypes)));
        return this;
      }
      /**
       * Sets the name of this command.
       *
       * @param name - The name to use
       */
      setName(name) {
        validateName2(name);
        Reflect.set(this, "name", name);
        return this;
      }
      /**
       * Sets the type of this command.
       *
       * @param type - The type to use
       */
      setType(type) {
        validateType(type);
        Reflect.set(this, "type", type);
        return this;
      }
      /**
       * Sets whether the command is enabled by default when the application is added to a guild.
       *
       * @remarks
       * If set to `false`, you will have to later `PUT` the permissions for this command.
       * @param value - Whether to enable this command by default
       * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
       * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.
       */
      setDefaultPermission(value) {
        validateDefaultPermission2(value);
        Reflect.set(this, "default_permission", value);
        return this;
      }
      /**
       * Sets the default permissions a member should have in order to run this command.
       *
       * @remarks
       * You can set this to `'0'` to disable the command by default.
       * @param permissions - The permissions bit field to set
       * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
       */
      setDefaultMemberPermissions(permissions) {
        const permissionValue = validateDefaultMemberPermissions2(permissions);
        Reflect.set(this, "default_member_permissions", permissionValue);
        return this;
      }
      /**
       * Sets if the command is available in direct messages with the application.
       *
       * @remarks
       * By default, commands are visible. This method is only for global commands.
       * @param enabled - Whether the command should be enabled in direct messages
       * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}
       * @deprecated Use {@link ContextMenuCommandBuilder.setContexts} instead.
       */
      setDMPermission(enabled) {
        validateDMPermission2(enabled);
        Reflect.set(this, "dm_permission", enabled);
        return this;
      }
      /**
       * Sets a name localization for this command.
       *
       * @param locale - The locale to set
       * @param localizedName - The localized name for the given `locale`
       */
      setNameLocalization(locale, localizedName) {
        if (!this.name_localizations) {
          Reflect.set(this, "name_localizations", {});
        }
        const parsedLocale = validateLocale(locale);
        if (localizedName === null) {
          this.name_localizations[parsedLocale] = null;
          return this;
        }
        validateName2(localizedName);
        this.name_localizations[parsedLocale] = localizedName;
        return this;
      }
      /**
       * Sets the name localizations for this command.
       *
       * @param localizedNames - The object of localized names to set
       */
      setNameLocalizations(localizedNames) {
        if (localizedNames === null) {
          Reflect.set(this, "name_localizations", null);
          return this;
        }
        Reflect.set(this, "name_localizations", {});
        for (const args of Object.entries(localizedNames))
          this.setNameLocalization(...args);
        return this;
      }
      /**
       * Serializes this builder to API-compatible JSON data.
       *
       * @remarks
       * This method runs validations on the data before serializing it.
       * As such, it may throw an error if the data is invalid.
       */
      toJSON() {
        validateRequiredParameters4(this.name, this.type);
        validateLocalizationMap(this.name_localizations);
        return { ...this };
      }
    }, "ContextMenuCommandBuilder");
    function embedLength(data) {
      return (data.title?.length ?? 0) + (data.description?.length ?? 0) + (data.fields?.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) ?? 0) + (data.footer?.text.length ?? 0) + (data.author?.name.length ?? 0);
    }
    __name(embedLength, "embedLength");
    __name2(embedLength, "embedLength");
    var version = "1.10.1";
  }
});

// node_modules/@firebase/util/dist/index.cjs.js
var require_index_cjs = __commonJS({
  "node_modules/@firebase/util/dist/index.cjs.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    var CONSTANTS = {
      /**
       * @define {boolean} Whether this is the client Node.js SDK.
       */
      NODE_CLIENT: false,
      /**
       * @define {boolean} Whether this is the Admin Node.js SDK.
       */
      NODE_ADMIN: false,
      /**
       * Firebase SDK Version
       */
      SDK_VERSION: "${JSCORE_VERSION}"
    };
    var assert = /* @__PURE__ */ __name(function(assertion, message) {
      if (!assertion) {
        throw assertionError(message);
      }
    }, "assert");
    var assertionError = /* @__PURE__ */ __name(function(message) {
      return new Error("Firebase Database (" + CONSTANTS.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message);
    }, "assertionError");
    var stringToByteArray$1 = /* @__PURE__ */ __name(function(str) {
      const out = [];
      let p2 = 0;
      for (let i = 0; i < str.length; i++) {
        let c2 = str.charCodeAt(i);
        if (c2 < 128) {
          out[p2++] = c2;
        } else if (c2 < 2048) {
          out[p2++] = c2 >> 6 | 192;
          out[p2++] = c2 & 63 | 128;
        } else if ((c2 & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
          c2 = 65536 + ((c2 & 1023) << 10) + (str.charCodeAt(++i) & 1023);
          out[p2++] = c2 >> 18 | 240;
          out[p2++] = c2 >> 12 & 63 | 128;
          out[p2++] = c2 >> 6 & 63 | 128;
          out[p2++] = c2 & 63 | 128;
        } else {
          out[p2++] = c2 >> 12 | 224;
          out[p2++] = c2 >> 6 & 63 | 128;
          out[p2++] = c2 & 63 | 128;
        }
      }
      return out;
    }, "stringToByteArray$1");
    var byteArrayToString = /* @__PURE__ */ __name(function(bytes) {
      const out = [];
      let pos = 0, c2 = 0;
      while (pos < bytes.length) {
        const c1 = bytes[pos++];
        if (c1 < 128) {
          out[c2++] = String.fromCharCode(c1);
        } else if (c1 > 191 && c1 < 224) {
          const c22 = bytes[pos++];
          out[c2++] = String.fromCharCode((c1 & 31) << 6 | c22 & 63);
        } else if (c1 > 239 && c1 < 365) {
          const c22 = bytes[pos++];
          const c3 = bytes[pos++];
          const c4 = bytes[pos++];
          const u2 = ((c1 & 7) << 18 | (c22 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
          out[c2++] = String.fromCharCode(55296 + (u2 >> 10));
          out[c2++] = String.fromCharCode(56320 + (u2 & 1023));
        } else {
          const c22 = bytes[pos++];
          const c3 = bytes[pos++];
          out[c2++] = String.fromCharCode((c1 & 15) << 12 | (c22 & 63) << 6 | c3 & 63);
        }
      }
      return out.join("");
    }, "byteArrayToString");
    var base64 = {
      /**
       * Maps bytes to characters.
       */
      byteToCharMap_: null,
      /**
       * Maps characters to bytes.
       */
      charToByteMap_: null,
      /**
       * Maps bytes to websafe characters.
       * @private
       */
      byteToCharMapWebSafe_: null,
      /**
       * Maps websafe characters to bytes.
       * @private
       */
      charToByteMapWebSafe_: null,
      /**
       * Our default alphabet, shared between
       * ENCODED_VALS and ENCODED_VALS_WEBSAFE
       */
      ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      /**
       * Our default alphabet. Value 64 (=) is special; it means "nothing."
       */
      get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + "+/=";
      },
      /**
       * Our websafe alphabet.
       */
      get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + "-_.";
      },
      /**
       * Whether this browser supports the atob and btoa functions. This extension
       * started at Mozilla but is now implemented by many browsers. We use the
       * ASSUME_* variables to avoid pulling in the full useragent detection library
       * but still allowing the standard per-browser compilations.
       *
       */
      HAS_NATIVE_SUPPORT: typeof atob === "function",
      /**
       * Base64-encode an array of bytes.
       *
       * @param input An array of bytes (numbers with
       *     value in [0, 255]) to encode.
       * @param webSafe Boolean indicating we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeByteArray(input, webSafe) {
        if (!Array.isArray(input)) {
          throw Error("encodeByteArray takes an array as a parameter");
        }
        this.init_();
        const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        const output = [];
        for (let i = 0; i < input.length; i += 3) {
          const byte1 = input[i];
          const haveByte2 = i + 1 < input.length;
          const byte2 = haveByte2 ? input[i + 1] : 0;
          const haveByte3 = i + 2 < input.length;
          const byte3 = haveByte3 ? input[i + 2] : 0;
          const outByte1 = byte1 >> 2;
          const outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
          let outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
          let outByte4 = byte3 & 63;
          if (!haveByte3) {
            outByte4 = 64;
            if (!haveByte2) {
              outByte3 = 64;
            }
          }
          output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join("");
      },
      /**
       * Base64-encode a string.
       *
       * @param input A string to encode.
       * @param webSafe If true, we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeString(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
      },
      /**
       * Base64-decode a string.
       *
       * @param input to decode.
       * @param webSafe True if we should use the
       *     alternative alphabet.
       * @return string representing the decoded value.
       */
      decodeString(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
      },
      /**
       * Base64-decode a string.
       *
       * In base-64 decoding, groups of four characters are converted into three
       * bytes.  If the encoder did not apply padding, the input length may not
       * be a multiple of 4.
       *
       * In this case, the last group will have fewer than 4 characters, and
       * padding will be inferred.  If the group has one or two characters, it decodes
       * to one byte.  If the group has three characters, it decodes to two bytes.
       *
       * @param input Input to decode.
       * @param webSafe True if we should use the web-safe alphabet.
       * @return bytes representing the decoded value.
       */
      decodeStringToByteArray(input, webSafe) {
        this.init_();
        const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        const output = [];
        for (let i = 0; i < input.length; ) {
          const byte1 = charToByteMap[input.charAt(i++)];
          const haveByte2 = i < input.length;
          const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
          ++i;
          const haveByte3 = i < input.length;
          const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          const haveByte4 = i < input.length;
          const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
            throw new DecodeBase64StringError();
          }
          const outByte1 = byte1 << 2 | byte2 >> 4;
          output.push(outByte1);
          if (byte3 !== 64) {
            const outByte2 = byte2 << 4 & 240 | byte3 >> 2;
            output.push(outByte2);
            if (byte4 !== 64) {
              const outByte3 = byte3 << 6 & 192 | byte4;
              output.push(outByte3);
            }
          }
        }
        return output;
      },
      /**
       * Lazy static initialization function. Called before
       * accessing any of the static map variables.
       * @private
       */
      init_() {
        if (!this.byteToCharMap_) {
          this.byteToCharMap_ = {};
          this.charToByteMap_ = {};
          this.byteToCharMapWebSafe_ = {};
          this.charToByteMapWebSafe_ = {};
          for (let i = 0; i < this.ENCODED_VALS.length; i++) {
            this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
            this.charToByteMap_[this.byteToCharMap_[i]] = i;
            this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
            this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
            if (i >= this.ENCODED_VALS_BASE.length) {
              this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
              this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
            }
          }
        }
      }
    };
    var DecodeBase64StringError = class extends Error {
      constructor() {
        super(...arguments);
        this.name = "DecodeBase64StringError";
      }
    };
    __name(DecodeBase64StringError, "DecodeBase64StringError");
    var base64Encode = /* @__PURE__ */ __name(function(str) {
      const utf8Bytes = stringToByteArray$1(str);
      return base64.encodeByteArray(utf8Bytes, true);
    }, "base64Encode");
    var base64urlEncodeWithoutPadding = /* @__PURE__ */ __name(function(str) {
      return base64Encode(str).replace(/\./g, "");
    }, "base64urlEncodeWithoutPadding");
    var base64Decode = /* @__PURE__ */ __name(function(str) {
      try {
        return base64.decodeString(str, true);
      } catch (e) {
        console.error("base64Decode failed: ", e);
      }
      return null;
    }, "base64Decode");
    function deepCopy(value) {
      return deepExtend(void 0, value);
    }
    __name(deepCopy, "deepCopy");
    function deepExtend(target, source) {
      if (!(source instanceof Object)) {
        return source;
      }
      switch (source.constructor) {
        case Date:
          const dateValue = source;
          return new Date(dateValue.getTime());
        case Object:
          if (target === void 0) {
            target = {};
          }
          break;
        case Array:
          target = [];
          break;
        default:
          return source;
      }
      for (const prop in source) {
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
          continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
      }
      return target;
    }
    __name(deepExtend, "deepExtend");
    function isValidKey(key) {
      return key !== "__proto__";
    }
    __name(isValidKey, "isValidKey");
    function getGlobal() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("Unable to locate global object.");
    }
    __name(getGlobal, "getGlobal");
    var getDefaultsFromGlobal = /* @__PURE__ */ __name(() => getGlobal().__FIREBASE_DEFAULTS__, "getDefaultsFromGlobal");
    var getDefaultsFromEnvVariable = /* @__PURE__ */ __name(() => {
      if (typeof process === "undefined" || typeof process.env === "undefined") {
        return;
      }
      const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
      if (defaultsJsonString) {
        return JSON.parse(defaultsJsonString);
      }
    }, "getDefaultsFromEnvVariable");
    var getDefaultsFromCookie = /* @__PURE__ */ __name(() => {
      if (typeof document === "undefined") {
        return;
      }
      let match;
      try {
        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
      } catch (e) {
        return;
      }
      const decoded = match && base64Decode(match[1]);
      return decoded && JSON.parse(decoded);
    }, "getDefaultsFromCookie");
    var getDefaults = /* @__PURE__ */ __name(() => {
      try {
        return getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();
      } catch (e) {
        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
        return;
      }
    }, "getDefaults");
    var getDefaultEmulatorHost = /* @__PURE__ */ __name((productName) => {
      var _a, _b;
      return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName];
    }, "getDefaultEmulatorHost");
    var getDefaultEmulatorHostnameAndPort = /* @__PURE__ */ __name((productName) => {
      const host = getDefaultEmulatorHost(productName);
      if (!host) {
        return void 0;
      }
      const separatorIndex = host.lastIndexOf(":");
      if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
        throw new Error(`Invalid host ${host} with no separate hostname and port!`);
      }
      const port = parseInt(host.substring(separatorIndex + 1), 10);
      if (host[0] === "[") {
        return [host.substring(1, separatorIndex - 1), port];
      } else {
        return [host.substring(0, separatorIndex), port];
      }
    }, "getDefaultEmulatorHostnameAndPort");
    var getDefaultAppConfig = /* @__PURE__ */ __name(() => {
      var _a;
      return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config;
    }, "getDefaultAppConfig");
    var getExperimentalSetting = /* @__PURE__ */ __name((name) => {
      var _a;
      return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`];
    }, "getExperimentalSetting");
    var Deferred = class {
      constructor() {
        this.reject = () => {
        };
        this.resolve = () => {
        };
        this.promise = new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
      }
      /**
       * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around
       * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
       * and returns a node-style callback which will resolve or reject the Deferred's promise.
       */
      wrapCallback(callback) {
        return (error, value) => {
          if (error) {
            this.reject(error);
          } else {
            this.resolve(value);
          }
          if (typeof callback === "function") {
            this.promise.catch(() => {
            });
            if (callback.length === 1) {
              callback(error);
            } else {
              callback(error, value);
            }
          }
        };
      }
    };
    __name(Deferred, "Deferred");
    function createMockUserToken(token, projectId) {
      if (token.uid) {
        throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
      }
      const header = {
        alg: "none",
        type: "JWT"
      };
      const project = projectId || "demo-project";
      const iat = token.iat || 0;
      const sub = token.sub || token.user_id;
      if (!sub) {
        throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
      }
      const payload = Object.assign({
        // Set all required fields to decent defaults
        iss: `https://securetoken.google.com/${project}`,
        aud: project,
        iat,
        exp: iat + 3600,
        auth_time: iat,
        sub,
        user_id: sub,
        firebase: {
          sign_in_provider: "custom",
          identities: {}
        }
      }, token);
      const signature = "";
      return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
      ].join(".");
    }
    __name(createMockUserToken, "createMockUserToken");
    function getUA() {
      if (typeof navigator !== "undefined" && true) {
        return "Cloudflare-Workers";
      } else {
        return "";
      }
    }
    __name(getUA, "getUA");
    function isMobileCordova() {
      return typeof window !== "undefined" && // @ts-ignore Setting up an broadly applicable index signature for Window
      // just to deal with this case would probably be a bad idea.
      !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
    }
    __name(isMobileCordova, "isMobileCordova");
    function isNode() {
      var _a;
      const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;
      if (forceEnvironment === "node") {
        return true;
      } else if (forceEnvironment === "browser") {
        return false;
      }
      try {
        return Object.prototype.toString.call(global.process) === "[object process]";
      } catch (e) {
        return false;
      }
    }
    __name(isNode, "isNode");
    function isBrowser() {
      return typeof window !== "undefined" || isWebWorker();
    }
    __name(isBrowser, "isBrowser");
    function isWebWorker() {
      return typeof WorkerGlobalScope !== "undefined" && typeof self !== "undefined" && self instanceof WorkerGlobalScope;
    }
    __name(isWebWorker, "isWebWorker");
    function isCloudflareWorker() {
      return typeof navigator !== "undefined" && true;
    }
    __name(isCloudflareWorker, "isCloudflareWorker");
    function isBrowserExtension() {
      const runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
      return typeof runtime === "object" && runtime.id !== void 0;
    }
    __name(isBrowserExtension, "isBrowserExtension");
    function isReactNative() {
      return typeof navigator === "object" && navigator["product"] === "ReactNative";
    }
    __name(isReactNative, "isReactNative");
    function isElectron() {
      return getUA().indexOf("Electron/") >= 0;
    }
    __name(isElectron, "isElectron");
    function isIE() {
      const ua = getUA();
      return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
    }
    __name(isIE, "isIE");
    function isUWP() {
      return getUA().indexOf("MSAppHost/") >= 0;
    }
    __name(isUWP, "isUWP");
    function isNodeSdk() {
      return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
    }
    __name(isNodeSdk, "isNodeSdk");
    function isSafari() {
      return !isNode() && true && "Cloudflare-Workers".includes("Safari") && !"Cloudflare-Workers".includes("Chrome");
    }
    __name(isSafari, "isSafari");
    function isIndexedDBAvailable() {
      try {
        return typeof indexedDB === "object";
      } catch (e) {
        return false;
      }
    }
    __name(isIndexedDBAvailable, "isIndexedDBAvailable");
    function validateIndexedDBOpenable() {
      return new Promise((resolve, reject) => {
        try {
          let preExist = true;
          const DB_CHECK_NAME = "validate-browser-context-for-indexeddb-analytics-module";
          const request = self.indexedDB.open(DB_CHECK_NAME);
          request.onsuccess = () => {
            request.result.close();
            if (!preExist) {
              self.indexedDB.deleteDatabase(DB_CHECK_NAME);
            }
            resolve(true);
          };
          request.onupgradeneeded = () => {
            preExist = false;
          };
          request.onerror = () => {
            var _a;
            reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || "");
          };
        } catch (error) {
          reject(error);
        }
      });
    }
    __name(validateIndexedDBOpenable, "validateIndexedDBOpenable");
    function areCookiesEnabled() {
      if (typeof navigator === "undefined" || !navigator.cookieEnabled) {
        return false;
      }
      return true;
    }
    __name(areCookiesEnabled, "areCookiesEnabled");
    var ERROR_NAME = "FirebaseError";
    var FirebaseError = class extends Error {
      constructor(code, message, customData) {
        super(message);
        this.code = code;
        this.customData = customData;
        this.name = ERROR_NAME;
        Object.setPrototypeOf(this, FirebaseError.prototype);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, ErrorFactory.prototype.create);
        }
      }
    };
    __name(FirebaseError, "FirebaseError");
    var ErrorFactory = class {
      constructor(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
      }
      create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? replaceTemplate(template, customData) : "Error";
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error = new FirebaseError(fullCode, fullMessage, customData);
        return error;
      }
    };
    __name(ErrorFactory, "ErrorFactory");
    function replaceTemplate(template, data) {
      return template.replace(PATTERN, (_, key) => {
        const value = data[key];
        return value != null ? String(value) : `<${key}?>`;
      });
    }
    __name(replaceTemplate, "replaceTemplate");
    var PATTERN = /\{\$([^}]+)}/g;
    function jsonEval(str) {
      return JSON.parse(str);
    }
    __name(jsonEval, "jsonEval");
    function stringify(data) {
      return JSON.stringify(data);
    }
    __name(stringify, "stringify");
    var decode2 = /* @__PURE__ */ __name(function(token) {
      let header = {}, claims = {}, data = {}, signature = "";
      try {
        const parts = token.split(".");
        header = jsonEval(base64Decode(parts[0]) || "");
        claims = jsonEval(base64Decode(parts[1]) || "");
        signature = parts[2];
        data = claims["d"] || {};
        delete claims["d"];
      } catch (e) {
      }
      return {
        header,
        claims,
        data,
        signature
      };
    }, "decode");
    var isValidTimestamp = /* @__PURE__ */ __name(function(token) {
      const claims = decode2(token).claims;
      const now = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
      let validSince = 0, validUntil = 0;
      if (typeof claims === "object") {
        if (claims.hasOwnProperty("nbf")) {
          validSince = claims["nbf"];
        } else if (claims.hasOwnProperty("iat")) {
          validSince = claims["iat"];
        }
        if (claims.hasOwnProperty("exp")) {
          validUntil = claims["exp"];
        } else {
          validUntil = validSince + 86400;
        }
      }
      return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
    }, "isValidTimestamp");
    var issuedAtTime = /* @__PURE__ */ __name(function(token) {
      const claims = decode2(token).claims;
      if (typeof claims === "object" && claims.hasOwnProperty("iat")) {
        return claims["iat"];
      }
      return null;
    }, "issuedAtTime");
    var isValidFormat = /* @__PURE__ */ __name(function(token) {
      const decoded = decode2(token), claims = decoded.claims;
      return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
    }, "isValidFormat");
    var isAdmin = /* @__PURE__ */ __name(function(token) {
      const claims = decode2(token).claims;
      return typeof claims === "object" && claims["admin"] === true;
    }, "isAdmin");
    function contains(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    __name(contains, "contains");
    function safeGet(obj, key) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return obj[key];
      } else {
        return void 0;
      }
    }
    __name(safeGet, "safeGet");
    function isEmpty(obj) {
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return false;
        }
      }
      return true;
    }
    __name(isEmpty, "isEmpty");
    function map(obj, fn, contextObj) {
      const res = {};
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          res[key] = fn.call(contextObj, obj[key], key, obj);
        }
      }
      return res;
    }
    __name(map, "map");
    function deepEqual(a2, b) {
      if (a2 === b) {
        return true;
      }
      const aKeys = Object.keys(a2);
      const bKeys = Object.keys(b);
      for (const k of aKeys) {
        if (!bKeys.includes(k)) {
          return false;
        }
        const aProp = a2[k];
        const bProp = b[k];
        if (isObject(aProp) && isObject(bProp)) {
          if (!deepEqual(aProp, bProp)) {
            return false;
          }
        } else if (aProp !== bProp) {
          return false;
        }
      }
      for (const k of bKeys) {
        if (!aKeys.includes(k)) {
          return false;
        }
      }
      return true;
    }
    __name(deepEqual, "deepEqual");
    function isObject(thing) {
      return thing !== null && typeof thing === "object";
    }
    __name(isObject, "isObject");
    function promiseWithTimeout(promise, timeInMS = 2e3) {
      const deferredPromise = new Deferred();
      setTimeout(() => deferredPromise.reject("timeout!"), timeInMS);
      promise.then(deferredPromise.resolve, deferredPromise.reject);
      return deferredPromise.promise;
    }
    __name(promiseWithTimeout, "promiseWithTimeout");
    function querystring(querystringParams) {
      const params = [];
      for (const [key, value] of Object.entries(querystringParams)) {
        if (Array.isArray(value)) {
          value.forEach((arrayVal) => {
            params.push(encodeURIComponent(key) + "=" + encodeURIComponent(arrayVal));
          });
        } else {
          params.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
        }
      }
      return params.length ? "&" + params.join("&") : "";
    }
    __name(querystring, "querystring");
    function querystringDecode(querystring2) {
      const obj = {};
      const tokens = querystring2.replace(/^\?/, "").split("&");
      tokens.forEach((token) => {
        if (token) {
          const [key, value] = token.split("=");
          obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
      });
      return obj;
    }
    __name(querystringDecode, "querystringDecode");
    function extractQuerystring(url) {
      const queryStart = url.indexOf("?");
      if (!queryStart) {
        return "";
      }
      const fragmentStart = url.indexOf("#", queryStart);
      return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : void 0);
    }
    __name(extractQuerystring, "extractQuerystring");
    var Sha1 = class {
      constructor() {
        this.chain_ = [];
        this.buf_ = [];
        this.W_ = [];
        this.pad_ = [];
        this.inbuf_ = 0;
        this.total_ = 0;
        this.blockSize = 512 / 8;
        this.pad_[0] = 128;
        for (let i = 1; i < this.blockSize; ++i) {
          this.pad_[i] = 0;
        }
        this.reset();
      }
      reset() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
      }
      /**
       * Internal compress helper function.
       * @param buf Block to compress.
       * @param offset Offset of the block in the buffer.
       * @private
       */
      compress_(buf, offset) {
        if (!offset) {
          offset = 0;
        }
        const W = this.W_;
        if (typeof buf === "string") {
          for (let i = 0; i < 16; i++) {
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
          }
        } else {
          for (let i = 0; i < 16; i++) {
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
          }
        }
        for (let i = 16; i < 80; i++) {
          const t2 = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
          W[i] = (t2 << 1 | t2 >>> 31) & 4294967295;
        }
        let a2 = this.chain_[0];
        let b = this.chain_[1];
        let c2 = this.chain_[2];
        let d = this.chain_[3];
        let e = this.chain_[4];
        let f2, k;
        for (let i = 0; i < 80; i++) {
          if (i < 40) {
            if (i < 20) {
              f2 = d ^ b & (c2 ^ d);
              k = 1518500249;
            } else {
              f2 = b ^ c2 ^ d;
              k = 1859775393;
            }
          } else {
            if (i < 60) {
              f2 = b & c2 | d & (b | c2);
              k = 2400959708;
            } else {
              f2 = b ^ c2 ^ d;
              k = 3395469782;
            }
          }
          const t2 = (a2 << 5 | a2 >>> 27) + f2 + e + k + W[i] & 4294967295;
          e = d;
          d = c2;
          c2 = (b << 30 | b >>> 2) & 4294967295;
          b = a2;
          a2 = t2;
        }
        this.chain_[0] = this.chain_[0] + a2 & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c2 & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
      }
      update(bytes, length) {
        if (bytes == null) {
          return;
        }
        if (length === void 0) {
          length = bytes.length;
        }
        const lengthMinusBlock = length - this.blockSize;
        let n2 = 0;
        const buf = this.buf_;
        let inbuf = this.inbuf_;
        while (n2 < length) {
          if (inbuf === 0) {
            while (n2 <= lengthMinusBlock) {
              this.compress_(bytes, n2);
              n2 += this.blockSize;
            }
          }
          if (typeof bytes === "string") {
            while (n2 < length) {
              buf[inbuf] = bytes.charCodeAt(n2);
              ++inbuf;
              ++n2;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          } else {
            while (n2 < length) {
              buf[inbuf] = bytes[n2];
              ++inbuf;
              ++n2;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
      }
      /** @override */
      digest() {
        const digest = [];
        let totalBits = this.total_ * 8;
        if (this.inbuf_ < 56) {
          this.update(this.pad_, 56 - this.inbuf_);
        } else {
          this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        for (let i = this.blockSize - 1; i >= 56; i--) {
          this.buf_[i] = totalBits & 255;
          totalBits /= 256;
        }
        this.compress_(this.buf_);
        let n2 = 0;
        for (let i = 0; i < 5; i++) {
          for (let j = 24; j >= 0; j -= 8) {
            digest[n2] = this.chain_[i] >> j & 255;
            ++n2;
          }
        }
        return digest;
      }
    };
    __name(Sha1, "Sha1");
    function createSubscribe(executor, onNoObservers) {
      const proxy = new ObserverProxy(executor, onNoObservers);
      return proxy.subscribe.bind(proxy);
    }
    __name(createSubscribe, "createSubscribe");
    var ObserverProxy = class {
      /**
       * @param executor Function which can make calls to a single Observer
       *     as a proxy.
       * @param onNoObservers Callback when count of Observers goes to zero.
       */
      constructor(executor, onNoObservers) {
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        this.task.then(() => {
          executor(this);
        }).catch((e) => {
          this.error(e);
        });
      }
      next(value) {
        this.forEachObserver((observer) => {
          observer.next(value);
        });
      }
      error(error) {
        this.forEachObserver((observer) => {
          observer.error(error);
        });
        this.close(error);
      }
      complete() {
        this.forEachObserver((observer) => {
          observer.complete();
        });
        this.close();
      }
      /**
       * Subscribe function that can be used to add an Observer to the fan-out list.
       *
       * - We require that no event is sent to a subscriber synchronously to their
       *   call to subscribe().
       */
      subscribe(nextOrObserver, error, complete) {
        let observer;
        if (nextOrObserver === void 0 && error === void 0 && complete === void 0) {
          throw new Error("Missing Observer.");
        }
        if (implementsAnyMethods(nextOrObserver, [
          "next",
          "error",
          "complete"
        ])) {
          observer = nextOrObserver;
        } else {
          observer = {
            next: nextOrObserver,
            error,
            complete
          };
        }
        if (observer.next === void 0) {
          observer.next = noop;
        }
        if (observer.error === void 0) {
          observer.error = noop;
        }
        if (observer.complete === void 0) {
          observer.complete = noop;
        }
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        if (this.finalized) {
          this.task.then(() => {
            try {
              if (this.finalError) {
                observer.error(this.finalError);
              } else {
                observer.complete();
              }
            } catch (e) {
            }
            return;
          });
        }
        this.observers.push(observer);
        return unsub;
      }
      // Unsubscribe is synchronous - we guarantee that no events are sent to
      // any unsubscribed Observer.
      unsubscribeOne(i) {
        if (this.observers === void 0 || this.observers[i] === void 0) {
          return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== void 0) {
          this.onNoObservers(this);
        }
      }
      forEachObserver(fn) {
        if (this.finalized) {
          return;
        }
        for (let i = 0; i < this.observers.length; i++) {
          this.sendOne(i, fn);
        }
      }
      // Call the Observer via one of it's callback function. We are careful to
      // confirm that the observe has not been unsubscribed since this asynchronous
      // function had been queued.
      sendOne(i, fn) {
        this.task.then(() => {
          if (this.observers !== void 0 && this.observers[i] !== void 0) {
            try {
              fn(this.observers[i]);
            } catch (e) {
              if (typeof console !== "undefined" && console.error) {
                console.error(e);
              }
            }
          }
        });
      }
      close(err) {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        if (err !== void 0) {
          this.finalError = err;
        }
        this.task.then(() => {
          this.observers = void 0;
          this.onNoObservers = void 0;
        });
      }
    };
    __name(ObserverProxy, "ObserverProxy");
    function async(fn, onError) {
      return (...args) => {
        Promise.resolve(true).then(() => {
          fn(...args);
        }).catch((error) => {
          if (onError) {
            onError(error);
          }
        });
      };
    }
    __name(async, "async");
    function implementsAnyMethods(obj, methods) {
      if (typeof obj !== "object" || obj === null) {
        return false;
      }
      for (const method of methods) {
        if (method in obj && typeof obj[method] === "function") {
          return true;
        }
      }
      return false;
    }
    __name(implementsAnyMethods, "implementsAnyMethods");
    function noop() {
    }
    __name(noop, "noop");
    var validateArgCount = /* @__PURE__ */ __name(function(fnName, minCount, maxCount, argCount) {
      let argError;
      if (argCount < minCount) {
        argError = "at least " + minCount;
      } else if (argCount > maxCount) {
        argError = maxCount === 0 ? "none" : "no more than " + maxCount;
      }
      if (argError) {
        const error = fnName + " failed: Was called with " + argCount + (argCount === 1 ? " argument." : " arguments.") + " Expects " + argError + ".";
        throw new Error(error);
      }
    }, "validateArgCount");
    function errorPrefix(fnName, argName) {
      return `${fnName} failed: ${argName} argument `;
    }
    __name(errorPrefix, "errorPrefix");
    function validateNamespace(fnName, namespace, optional) {
      if (optional && !namespace) {
        return;
      }
      if (typeof namespace !== "string") {
        throw new Error(errorPrefix(fnName, "namespace") + "must be a valid firebase namespace.");
      }
    }
    __name(validateNamespace, "validateNamespace");
    function validateCallback(fnName, argumentName, callback, optional) {
      if (optional && !callback) {
        return;
      }
      if (typeof callback !== "function") {
        throw new Error(errorPrefix(fnName, argumentName) + "must be a valid function.");
      }
    }
    __name(validateCallback, "validateCallback");
    function validateContextObject(fnName, argumentName, context, optional) {
      if (optional && !context) {
        return;
      }
      if (typeof context !== "object" || context === null) {
        throw new Error(errorPrefix(fnName, argumentName) + "must be a valid context object.");
      }
    }
    __name(validateContextObject, "validateContextObject");
    var stringToByteArray = /* @__PURE__ */ __name(function(str) {
      const out = [];
      let p2 = 0;
      for (let i = 0; i < str.length; i++) {
        let c2 = str.charCodeAt(i);
        if (c2 >= 55296 && c2 <= 56319) {
          const high = c2 - 55296;
          i++;
          assert(i < str.length, "Surrogate pair missing trail surrogate.");
          const low = str.charCodeAt(i) - 56320;
          c2 = 65536 + (high << 10) + low;
        }
        if (c2 < 128) {
          out[p2++] = c2;
        } else if (c2 < 2048) {
          out[p2++] = c2 >> 6 | 192;
          out[p2++] = c2 & 63 | 128;
        } else if (c2 < 65536) {
          out[p2++] = c2 >> 12 | 224;
          out[p2++] = c2 >> 6 & 63 | 128;
          out[p2++] = c2 & 63 | 128;
        } else {
          out[p2++] = c2 >> 18 | 240;
          out[p2++] = c2 >> 12 & 63 | 128;
          out[p2++] = c2 >> 6 & 63 | 128;
          out[p2++] = c2 & 63 | 128;
        }
      }
      return out;
    }, "stringToByteArray");
    var stringLength = /* @__PURE__ */ __name(function(str) {
      let p2 = 0;
      for (let i = 0; i < str.length; i++) {
        const c2 = str.charCodeAt(i);
        if (c2 < 128) {
          p2++;
        } else if (c2 < 2048) {
          p2 += 2;
        } else if (c2 >= 55296 && c2 <= 56319) {
          p2 += 4;
          i++;
        } else {
          p2 += 3;
        }
      }
      return p2;
    }, "stringLength");
    var DEFAULT_INTERVAL_MILLIS = 1e3;
    var DEFAULT_BACKOFF_FACTOR = 2;
    var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;
    var RANDOM_FACTOR = 0.5;
    function calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {
      const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
      const randomWait = Math.round(
        // A fraction of the backoff value to add/subtract.
        // Deviation: changes multiplication order to improve readability.
        RANDOM_FACTOR * currBaseValue * // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
        // if we add or subtract.
        (Math.random() - 0.5) * 2
      );
      return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
    }
    __name(calculateBackoffMillis, "calculateBackoffMillis");
    function ordinal(i) {
      if (!Number.isFinite(i)) {
        return `${i}`;
      }
      return i + indicator(i);
    }
    __name(ordinal, "ordinal");
    function indicator(i) {
      i = Math.abs(i);
      const cent = i % 100;
      if (cent >= 10 && cent <= 20) {
        return "th";
      }
      const dec = i % 10;
      if (dec === 1) {
        return "st";
      }
      if (dec === 2) {
        return "nd";
      }
      if (dec === 3) {
        return "rd";
      }
      return "th";
    }
    __name(indicator, "indicator");
    function getModularInstance(service) {
      if (service && service._delegate) {
        return service._delegate;
      } else {
        return service;
      }
    }
    __name(getModularInstance, "getModularInstance");
    exports.CONSTANTS = CONSTANTS;
    exports.DecodeBase64StringError = DecodeBase64StringError;
    exports.Deferred = Deferred;
    exports.ErrorFactory = ErrorFactory;
    exports.FirebaseError = FirebaseError;
    exports.MAX_VALUE_MILLIS = MAX_VALUE_MILLIS;
    exports.RANDOM_FACTOR = RANDOM_FACTOR;
    exports.Sha1 = Sha1;
    exports.areCookiesEnabled = areCookiesEnabled;
    exports.assert = assert;
    exports.assertionError = assertionError;
    exports.async = async;
    exports.base64 = base64;
    exports.base64Decode = base64Decode;
    exports.base64Encode = base64Encode;
    exports.base64urlEncodeWithoutPadding = base64urlEncodeWithoutPadding;
    exports.calculateBackoffMillis = calculateBackoffMillis;
    exports.contains = contains;
    exports.createMockUserToken = createMockUserToken;
    exports.createSubscribe = createSubscribe;
    exports.decode = decode2;
    exports.deepCopy = deepCopy;
    exports.deepEqual = deepEqual;
    exports.deepExtend = deepExtend;
    exports.errorPrefix = errorPrefix;
    exports.extractQuerystring = extractQuerystring;
    exports.getDefaultAppConfig = getDefaultAppConfig;
    exports.getDefaultEmulatorHost = getDefaultEmulatorHost;
    exports.getDefaultEmulatorHostnameAndPort = getDefaultEmulatorHostnameAndPort;
    exports.getDefaults = getDefaults;
    exports.getExperimentalSetting = getExperimentalSetting;
    exports.getGlobal = getGlobal;
    exports.getModularInstance = getModularInstance;
    exports.getUA = getUA;
    exports.isAdmin = isAdmin;
    exports.isBrowser = isBrowser;
    exports.isBrowserExtension = isBrowserExtension;
    exports.isCloudflareWorker = isCloudflareWorker;
    exports.isElectron = isElectron;
    exports.isEmpty = isEmpty;
    exports.isIE = isIE;
    exports.isIndexedDBAvailable = isIndexedDBAvailable;
    exports.isMobileCordova = isMobileCordova;
    exports.isNode = isNode;
    exports.isNodeSdk = isNodeSdk;
    exports.isReactNative = isReactNative;
    exports.isSafari = isSafari;
    exports.isUWP = isUWP;
    exports.isValidFormat = isValidFormat;
    exports.isValidTimestamp = isValidTimestamp;
    exports.isWebWorker = isWebWorker;
    exports.issuedAtTime = issuedAtTime;
    exports.jsonEval = jsonEval;
    exports.map = map;
    exports.ordinal = ordinal;
    exports.promiseWithTimeout = promiseWithTimeout;
    exports.querystring = querystring;
    exports.querystringDecode = querystringDecode;
    exports.safeGet = safeGet;
    exports.stringLength = stringLength;
    exports.stringToByteArray = stringToByteArray;
    exports.stringify = stringify;
    exports.validateArgCount = validateArgCount;
    exports.validateCallback = validateCallback;
    exports.validateContextObject = validateContextObject;
    exports.validateIndexedDBOpenable = validateIndexedDBOpenable;
    exports.validateNamespace = validateNamespace;
  }
});

// node_modules/@firebase/component/dist/index.cjs.js
var require_index_cjs2 = __commonJS({
  "node_modules/@firebase/component/dist/index.cjs.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    var util = require_index_cjs();
    var Component = class {
      /**
       *
       * @param name The public service name, e.g. app, auth, firestore, database
       * @param instanceFactory Service factory responsible for creating the public interface
       * @param type whether the service provided by the component is public or private
       */
      constructor(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        this.serviceProps = {};
        this.instantiationMode = "LAZY";
        this.onInstanceCreated = null;
      }
      setInstantiationMode(mode) {
        this.instantiationMode = mode;
        return this;
      }
      setMultipleInstances(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
      }
      setServiceProps(props) {
        this.serviceProps = props;
        return this;
      }
      setInstanceCreatedCallback(callback) {
        this.onInstanceCreated = callback;
        return this;
      }
    };
    __name(Component, "Component");
    var DEFAULT_ENTRY_NAME = "[DEFAULT]";
    var Provider = class {
      constructor(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = /* @__PURE__ */ new Map();
        this.instancesDeferred = /* @__PURE__ */ new Map();
        this.instancesOptions = /* @__PURE__ */ new Map();
        this.onInitCallbacks = /* @__PURE__ */ new Map();
      }
      /**
       * @param identifier A provider can provide multiple instances of a service
       * if this.component.multipleInstances is true.
       */
      get(identifier) {
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
          const deferred = new util.Deferred();
          this.instancesDeferred.set(normalizedIdentifier, deferred);
          if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
            try {
              const instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
              if (instance) {
                deferred.resolve(instance);
              }
            } catch (e) {
            }
          }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
      }
      getImmediate(options) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
          try {
            return this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
          } catch (e) {
            if (optional) {
              return null;
            } else {
              throw e;
            }
          }
        } else {
          if (optional) {
            return null;
          } else {
            throw Error(`Service ${this.name} is not available`);
          }
        }
      }
      getComponent() {
        return this.component;
      }
      setComponent(component) {
        if (component.name !== this.name) {
          throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
        }
        if (this.component) {
          throw Error(`Component for ${this.name} has already been provided`);
        }
        this.component = component;
        if (!this.shouldAutoInitialize()) {
          return;
        }
        if (isComponentEager(component)) {
          try {
            this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });
          } catch (e) {
          }
        }
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
          const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
          try {
            const instance = this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
            instanceDeferred.resolve(instance);
          } catch (e) {
          }
        }
      }
      clearInstance(identifier = DEFAULT_ENTRY_NAME) {
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
      }
      // app.delete() will call this method on every provider to delete the services
      // TODO: should we mark the provider as deleted?
      async delete() {
        const services = Array.from(this.instances.values());
        await Promise.all([
          ...services.filter((service) => "INTERNAL" in service).map((service) => service.INTERNAL.delete()),
          ...services.filter((service) => "_delete" in service).map((service) => service._delete())
        ]);
      }
      isComponentSet() {
        return this.component != null;
      }
      isInitialized(identifier = DEFAULT_ENTRY_NAME) {
        return this.instances.has(identifier);
      }
      getOptions(identifier = DEFAULT_ENTRY_NAME) {
        return this.instancesOptions.get(identifier) || {};
      }
      initialize(opts = {}) {
        const { options = {} } = opts;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) {
          throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
        }
        if (!this.isComponentSet()) {
          throw Error(`Component ${this.name} has not been registered yet`);
        }
        const instance = this.getOrInitializeService({
          instanceIdentifier: normalizedIdentifier,
          options
        });
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
          const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
          if (normalizedIdentifier === normalizedDeferredIdentifier) {
            instanceDeferred.resolve(instance);
          }
        }
        return instance;
      }
      /**
       *
       * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
       * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
       *
       * @param identifier An optional instance identifier
       * @returns a function to unregister the callback
       */
      onInit(callback, identifier) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : /* @__PURE__ */ new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        const existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) {
          callback(existingInstance, normalizedIdentifier);
        }
        return () => {
          existingCallbacks.delete(callback);
        };
      }
      /**
       * Invoke onInit callbacks synchronously
       * @param instance the service instance`
       */
      invokeOnInitCallbacks(instance, identifier) {
        const callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) {
          return;
        }
        for (const callback of callbacks) {
          try {
            callback(instance, identifier);
          } catch (_a) {
          }
        }
      }
      getOrInitializeService({ instanceIdentifier, options = {} }) {
        let instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
          instance = this.component.instanceFactory(this.container, {
            instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
            options
          });
          this.instances.set(instanceIdentifier, instance);
          this.instancesOptions.set(instanceIdentifier, options);
          this.invokeOnInitCallbacks(instance, instanceIdentifier);
          if (this.component.onInstanceCreated) {
            try {
              this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_a) {
            }
          }
        }
        return instance || null;
      }
      normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
        if (this.component) {
          return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        } else {
          return identifier;
        }
      }
      shouldAutoInitialize() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT";
      }
    };
    __name(Provider, "Provider");
    function normalizeIdentifierForFactory(identifier) {
      return identifier === DEFAULT_ENTRY_NAME ? void 0 : identifier;
    }
    __name(normalizeIdentifierForFactory, "normalizeIdentifierForFactory");
    function isComponentEager(component) {
      return component.instantiationMode === "EAGER";
    }
    __name(isComponentEager, "isComponentEager");
    var ComponentContainer = class {
      constructor(name) {
        this.name = name;
        this.providers = /* @__PURE__ */ new Map();
      }
      /**
       *
       * @param component Component being added
       * @param overwrite When a component with the same name has already been registered,
       * if overwrite is true: overwrite the existing component with the new component and create a new
       * provider with the new component. It can be useful in tests where you want to use different mocks
       * for different tests.
       * if overwrite is false: throw an exception
       */
      addComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
          throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
        }
        provider.setComponent(component);
      }
      addOrOverwriteComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
          this.providers.delete(component.name);
        }
        this.addComponent(component);
      }
      /**
       * getProvider provides a type safe interface where it can only be called with a field name
       * present in NameServiceMapping interface.
       *
       * Firebase SDKs providing services should extend NameServiceMapping interface to register
       * themselves.
       */
      getProvider(name) {
        if (this.providers.has(name)) {
          return this.providers.get(name);
        }
        const provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
      }
      getProviders() {
        return Array.from(this.providers.values());
      }
    };
    __name(ComponentContainer, "ComponentContainer");
    exports.Component = Component;
    exports.ComponentContainer = ComponentContainer;
    exports.Provider = Provider;
  }
});

// node_modules/@firebase/logger/dist/index.cjs.js
var require_index_cjs3 = __commonJS({
  "node_modules/@firebase/logger/dist/index.cjs.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    var instances = [];
    exports.LogLevel = void 0;
    (function(LogLevel) {
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARN"] = 3] = "WARN";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
      LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(exports.LogLevel || (exports.LogLevel = {}));
    var levelStringToEnum = {
      "debug": exports.LogLevel.DEBUG,
      "verbose": exports.LogLevel.VERBOSE,
      "info": exports.LogLevel.INFO,
      "warn": exports.LogLevel.WARN,
      "error": exports.LogLevel.ERROR,
      "silent": exports.LogLevel.SILENT
    };
    var defaultLogLevel = exports.LogLevel.INFO;
    var ConsoleMethod = {
      [exports.LogLevel.DEBUG]: "log",
      [exports.LogLevel.VERBOSE]: "log",
      [exports.LogLevel.INFO]: "info",
      [exports.LogLevel.WARN]: "warn",
      [exports.LogLevel.ERROR]: "error"
    };
    var defaultLogHandler = /* @__PURE__ */ __name((instance, logType, ...args) => {
      if (logType < instance.logLevel) {
        return;
      }
      const now = (/* @__PURE__ */ new Date()).toISOString();
      const method = ConsoleMethod[logType];
      if (method) {
        console[method](`[${now}]  ${instance.name}:`, ...args);
      } else {
        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
      }
    }, "defaultLogHandler");
    var Logger = class {
      /**
       * Gives you an instance of a Logger to capture messages according to
       * Firebase's logging scheme.
       *
       * @param name The name that the logs will be associated with
       */
      constructor(name) {
        this.name = name;
        this._logLevel = defaultLogLevel;
        this._logHandler = defaultLogHandler;
        this._userLogHandler = null;
        instances.push(this);
      }
      get logLevel() {
        return this._logLevel;
      }
      set logLevel(val) {
        if (!(val in exports.LogLevel)) {
          throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
        }
        this._logLevel = val;
      }
      // Workaround for setter/getter having to be the same type.
      setLogLevel(val) {
        this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
      }
      get logHandler() {
        return this._logHandler;
      }
      set logHandler(val) {
        if (typeof val !== "function") {
          throw new TypeError("Value assigned to `logHandler` must be a function");
        }
        this._logHandler = val;
      }
      get userLogHandler() {
        return this._userLogHandler;
      }
      set userLogHandler(val) {
        this._userLogHandler = val;
      }
      /**
       * The functions below are all based on the `console` interface
       */
      debug(...args) {
        this._userLogHandler && this._userLogHandler(this, exports.LogLevel.DEBUG, ...args);
        this._logHandler(this, exports.LogLevel.DEBUG, ...args);
      }
      log(...args) {
        this._userLogHandler && this._userLogHandler(this, exports.LogLevel.VERBOSE, ...args);
        this._logHandler(this, exports.LogLevel.VERBOSE, ...args);
      }
      info(...args) {
        this._userLogHandler && this._userLogHandler(this, exports.LogLevel.INFO, ...args);
        this._logHandler(this, exports.LogLevel.INFO, ...args);
      }
      warn(...args) {
        this._userLogHandler && this._userLogHandler(this, exports.LogLevel.WARN, ...args);
        this._logHandler(this, exports.LogLevel.WARN, ...args);
      }
      error(...args) {
        this._userLogHandler && this._userLogHandler(this, exports.LogLevel.ERROR, ...args);
        this._logHandler(this, exports.LogLevel.ERROR, ...args);
      }
    };
    __name(Logger, "Logger");
    function setLogLevel(level) {
      instances.forEach((inst) => {
        inst.setLogLevel(level);
      });
    }
    __name(setLogLevel, "setLogLevel");
    function setUserLogHandler(logCallback, options) {
      for (const instance of instances) {
        let customLogLevel = null;
        if (options && options.level) {
          customLogLevel = levelStringToEnum[options.level];
        }
        if (logCallback === null) {
          instance.userLogHandler = null;
        } else {
          instance.userLogHandler = (instance2, level, ...args) => {
            const message = args.map((arg) => {
              if (arg == null) {
                return null;
              } else if (typeof arg === "string") {
                return arg;
              } else if (typeof arg === "number" || typeof arg === "boolean") {
                return arg.toString();
              } else if (arg instanceof Error) {
                return arg.message;
              } else {
                try {
                  return JSON.stringify(arg);
                } catch (ignored) {
                  return null;
                }
              }
            }).filter((arg) => arg).join(" ");
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance2.logLevel)) {
              logCallback({
                level: exports.LogLevel[level].toLowerCase(),
                message,
                args,
                type: instance2.name
              });
            }
          };
        }
      }
    }
    __name(setUserLogHandler, "setUserLogHandler");
    exports.Logger = Logger;
    exports.setLogLevel = setLogLevel;
    exports.setUserLogHandler = setUserLogHandler;
  }
});

// node_modules/idb/build/wrap-idb-value.cjs
var require_wrap_idb_value = __commonJS({
  "node_modules/idb/build/wrap-idb-value.cjs"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    var instanceOfAny = /* @__PURE__ */ __name((object, constructors) => constructors.some((c2) => object instanceof c2), "instanceOfAny");
    var idbProxyableTypes;
    var cursorAdvanceMethods;
    function getIdbProxyableTypes() {
      return idbProxyableTypes || (idbProxyableTypes = [
        IDBDatabase,
        IDBObjectStore,
        IDBIndex,
        IDBCursor,
        IDBTransaction
      ]);
    }
    __name(getIdbProxyableTypes, "getIdbProxyableTypes");
    function getCursorAdvanceMethods() {
      return cursorAdvanceMethods || (cursorAdvanceMethods = [
        IDBCursor.prototype.advance,
        IDBCursor.prototype.continue,
        IDBCursor.prototype.continuePrimaryKey
      ]);
    }
    __name(getCursorAdvanceMethods, "getCursorAdvanceMethods");
    var cursorRequestMap = /* @__PURE__ */ new WeakMap();
    var transactionDoneMap = /* @__PURE__ */ new WeakMap();
    var transactionStoreNamesMap = /* @__PURE__ */ new WeakMap();
    var transformCache = /* @__PURE__ */ new WeakMap();
    var reverseTransformCache = /* @__PURE__ */ new WeakMap();
    function promisifyRequest(request) {
      const promise = new Promise((resolve, reject) => {
        const unlisten = /* @__PURE__ */ __name(() => {
          request.removeEventListener("success", success);
          request.removeEventListener("error", error);
        }, "unlisten");
        const success = /* @__PURE__ */ __name(() => {
          resolve(wrap(request.result));
          unlisten();
        }, "success");
        const error = /* @__PURE__ */ __name(() => {
          reject(request.error);
          unlisten();
        }, "error");
        request.addEventListener("success", success);
        request.addEventListener("error", error);
      });
      promise.then((value) => {
        if (value instanceof IDBCursor) {
          cursorRequestMap.set(value, request);
        }
      }).catch(() => {
      });
      reverseTransformCache.set(promise, request);
      return promise;
    }
    __name(promisifyRequest, "promisifyRequest");
    function cacheDonePromiseForTransaction(tx) {
      if (transactionDoneMap.has(tx))
        return;
      const done = new Promise((resolve, reject) => {
        const unlisten = /* @__PURE__ */ __name(() => {
          tx.removeEventListener("complete", complete);
          tx.removeEventListener("error", error);
          tx.removeEventListener("abort", error);
        }, "unlisten");
        const complete = /* @__PURE__ */ __name(() => {
          resolve();
          unlisten();
        }, "complete");
        const error = /* @__PURE__ */ __name(() => {
          reject(tx.error || new DOMException("AbortError", "AbortError"));
          unlisten();
        }, "error");
        tx.addEventListener("complete", complete);
        tx.addEventListener("error", error);
        tx.addEventListener("abort", error);
      });
      transactionDoneMap.set(tx, done);
    }
    __name(cacheDonePromiseForTransaction, "cacheDonePromiseForTransaction");
    var idbProxyTraps = {
      get(target, prop, receiver) {
        if (target instanceof IDBTransaction) {
          if (prop === "done")
            return transactionDoneMap.get(target);
          if (prop === "objectStoreNames") {
            return target.objectStoreNames || transactionStoreNamesMap.get(target);
          }
          if (prop === "store") {
            return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
          }
        }
        return wrap(target[prop]);
      },
      set(target, prop, value) {
        target[prop] = value;
        return true;
      },
      has(target, prop) {
        if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) {
          return true;
        }
        return prop in target;
      }
    };
    function replaceTraps(callback) {
      idbProxyTraps = callback(idbProxyTraps);
    }
    __name(replaceTraps, "replaceTraps");
    function wrapFunction(func) {
      if (func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype)) {
        return function(storeNames, ...args) {
          const tx = func.call(unwrap(this), storeNames, ...args);
          transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
          return wrap(tx);
        };
      }
      if (getCursorAdvanceMethods().includes(func)) {
        return function(...args) {
          func.apply(unwrap(this), args);
          return wrap(cursorRequestMap.get(this));
        };
      }
      return function(...args) {
        return wrap(func.apply(unwrap(this), args));
      };
    }
    __name(wrapFunction, "wrapFunction");
    function transformCachableValue(value) {
      if (typeof value === "function")
        return wrapFunction(value);
      if (value instanceof IDBTransaction)
        cacheDonePromiseForTransaction(value);
      if (instanceOfAny(value, getIdbProxyableTypes()))
        return new Proxy(value, idbProxyTraps);
      return value;
    }
    __name(transformCachableValue, "transformCachableValue");
    function wrap(value) {
      if (value instanceof IDBRequest)
        return promisifyRequest(value);
      if (transformCache.has(value))
        return transformCache.get(value);
      const newValue = transformCachableValue(value);
      if (newValue !== value) {
        transformCache.set(value, newValue);
        reverseTransformCache.set(newValue, value);
      }
      return newValue;
    }
    __name(wrap, "wrap");
    var unwrap = /* @__PURE__ */ __name((value) => reverseTransformCache.get(value), "unwrap");
    exports.instanceOfAny = instanceOfAny;
    exports.replaceTraps = replaceTraps;
    exports.reverseTransformCache = reverseTransformCache;
    exports.unwrap = unwrap;
    exports.wrap = wrap;
  }
});

// node_modules/idb/build/index.cjs
var require_build = __commonJS({
  "node_modules/idb/build/index.cjs"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    var wrapIdbValue = require_wrap_idb_value();
    function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
      const request = indexedDB.open(name, version);
      const openPromise = wrapIdbValue.wrap(request);
      if (upgrade) {
        request.addEventListener("upgradeneeded", (event) => {
          upgrade(wrapIdbValue.wrap(request.result), event.oldVersion, event.newVersion, wrapIdbValue.wrap(request.transaction), event);
        });
      }
      if (blocked) {
        request.addEventListener("blocked", (event) => blocked(
          // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
          event.oldVersion,
          event.newVersion,
          event
        ));
      }
      openPromise.then((db) => {
        if (terminated)
          db.addEventListener("close", () => terminated());
        if (blocking) {
          db.addEventListener("versionchange", (event) => blocking(event.oldVersion, event.newVersion, event));
        }
      }).catch(() => {
      });
      return openPromise;
    }
    __name(openDB, "openDB");
    function deleteDB(name, { blocked } = {}) {
      const request = indexedDB.deleteDatabase(name);
      if (blocked) {
        request.addEventListener("blocked", (event) => blocked(
          // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
          event.oldVersion,
          event
        ));
      }
      return wrapIdbValue.wrap(request).then(() => void 0);
    }
    __name(deleteDB, "deleteDB");
    var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
    var writeMethods = ["put", "add", "delete", "clear"];
    var cachedMethods = /* @__PURE__ */ new Map();
    function getMethod(target, prop) {
      if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === "string")) {
        return;
      }
      if (cachedMethods.get(prop))
        return cachedMethods.get(prop);
      const targetFuncName = prop.replace(/FromIndex$/, "");
      const useIndex = prop !== targetFuncName;
      const isWrite = writeMethods.includes(targetFuncName);
      if (
        // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
        !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))
      ) {
        return;
      }
      const method = /* @__PURE__ */ __name(async function(storeName, ...args) {
        const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
        let target2 = tx.store;
        if (useIndex)
          target2 = target2.index(args.shift());
        return (await Promise.all([
          target2[targetFuncName](...args),
          isWrite && tx.done
        ]))[0];
      }, "method");
      cachedMethods.set(prop, method);
      return method;
    }
    __name(getMethod, "getMethod");
    wrapIdbValue.replaceTraps((oldTraps) => ({
      ...oldTraps,
      get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
      has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
    }));
    exports.unwrap = wrapIdbValue.unwrap;
    exports.wrap = wrapIdbValue.wrap;
    exports.deleteDB = deleteDB;
    exports.openDB = openDB;
  }
});

// node_modules/@firebase/app/dist/index.cjs.js
var require_index_cjs4 = __commonJS({
  "node_modules/@firebase/app/dist/index.cjs.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    var component = require_index_cjs2();
    var logger$1 = require_index_cjs3();
    var util = require_index_cjs();
    var idb = require_build();
    var PlatformLoggerServiceImpl = class {
      constructor(container) {
        this.container = container;
      }
      // In initial implementation, this will be called by installations on
      // auth token refresh, and installations will send this string.
      getPlatformInfoString() {
        const providers = this.container.getProviders();
        return providers.map((provider) => {
          if (isVersionServiceProvider(provider)) {
            const service = provider.getImmediate();
            return `${service.library}/${service.version}`;
          } else {
            return null;
          }
        }).filter((logString) => logString).join(" ");
      }
    };
    __name(PlatformLoggerServiceImpl, "PlatformLoggerServiceImpl");
    function isVersionServiceProvider(provider) {
      const component2 = provider.getComponent();
      return (component2 === null || component2 === void 0 ? void 0 : component2.type) === "VERSION";
    }
    __name(isVersionServiceProvider, "isVersionServiceProvider");
    var name$q = "@firebase/app";
    var version$1 = "0.11.1";
    var logger = new logger$1.Logger("@firebase/app");
    var name$p = "@firebase/app-compat";
    var name$o = "@firebase/analytics-compat";
    var name$n = "@firebase/analytics";
    var name$m = "@firebase/app-check-compat";
    var name$l = "@firebase/app-check";
    var name$k = "@firebase/auth";
    var name$j = "@firebase/auth-compat";
    var name$i = "@firebase/database";
    var name$h = "@firebase/data-connect";
    var name$g = "@firebase/database-compat";
    var name$f = "@firebase/functions";
    var name$e = "@firebase/functions-compat";
    var name$d = "@firebase/installations";
    var name$c = "@firebase/installations-compat";
    var name$b = "@firebase/messaging";
    var name$a = "@firebase/messaging-compat";
    var name$9 = "@firebase/performance";
    var name$8 = "@firebase/performance-compat";
    var name$7 = "@firebase/remote-config";
    var name$6 = "@firebase/remote-config-compat";
    var name$5 = "@firebase/storage";
    var name$4 = "@firebase/storage-compat";
    var name$3 = "@firebase/firestore";
    var name$2 = "@firebase/vertexai";
    var name$1 = "@firebase/firestore-compat";
    var name = "firebase";
    var version = "11.3.1";
    var DEFAULT_ENTRY_NAME = "[DEFAULT]";
    var PLATFORM_LOG_STRING = {
      [name$q]: "fire-core",
      [name$p]: "fire-core-compat",
      [name$n]: "fire-analytics",
      [name$o]: "fire-analytics-compat",
      [name$l]: "fire-app-check",
      [name$m]: "fire-app-check-compat",
      [name$k]: "fire-auth",
      [name$j]: "fire-auth-compat",
      [name$i]: "fire-rtdb",
      [name$h]: "fire-data-connect",
      [name$g]: "fire-rtdb-compat",
      [name$f]: "fire-fn",
      [name$e]: "fire-fn-compat",
      [name$d]: "fire-iid",
      [name$c]: "fire-iid-compat",
      [name$b]: "fire-fcm",
      [name$a]: "fire-fcm-compat",
      [name$9]: "fire-perf",
      [name$8]: "fire-perf-compat",
      [name$7]: "fire-rc",
      [name$6]: "fire-rc-compat",
      [name$5]: "fire-gcs",
      [name$4]: "fire-gcs-compat",
      [name$3]: "fire-fst",
      [name$1]: "fire-fst-compat",
      [name$2]: "fire-vertex",
      "fire-js": "fire-js",
      // Platform identifier for JS SDK.
      [name]: "fire-js-all"
    };
    var _apps = /* @__PURE__ */ new Map();
    var _serverApps = /* @__PURE__ */ new Map();
    var _components = /* @__PURE__ */ new Map();
    function _addComponent(app, component2) {
      try {
        app.container.addComponent(component2);
      } catch (e) {
        logger.debug(`Component ${component2.name} failed to register with FirebaseApp ${app.name}`, e);
      }
    }
    __name(_addComponent, "_addComponent");
    function _addOrOverwriteComponent(app, component2) {
      app.container.addOrOverwriteComponent(component2);
    }
    __name(_addOrOverwriteComponent, "_addOrOverwriteComponent");
    function _registerComponent(component2) {
      const componentName = component2.name;
      if (_components.has(componentName)) {
        logger.debug(`There were multiple attempts to register component ${componentName}.`);
        return false;
      }
      _components.set(componentName, component2);
      for (const app of _apps.values()) {
        _addComponent(app, component2);
      }
      for (const serverApp of _serverApps.values()) {
        _addComponent(serverApp, component2);
      }
      return true;
    }
    __name(_registerComponent, "_registerComponent");
    function _getProvider(app, name2) {
      const heartbeatController = app.container.getProvider("heartbeat").getImmediate({ optional: true });
      if (heartbeatController) {
        void heartbeatController.triggerHeartbeat();
      }
      return app.container.getProvider(name2);
    }
    __name(_getProvider, "_getProvider");
    function _removeServiceInstance(app, name2, instanceIdentifier = DEFAULT_ENTRY_NAME) {
      _getProvider(app, name2).clearInstance(instanceIdentifier);
    }
    __name(_removeServiceInstance, "_removeServiceInstance");
    function _isFirebaseApp(obj) {
      return obj.options !== void 0;
    }
    __name(_isFirebaseApp, "_isFirebaseApp");
    function _isFirebaseServerApp(obj) {
      if (obj === null || obj === void 0) {
        return false;
      }
      return obj.settings !== void 0;
    }
    __name(_isFirebaseServerApp, "_isFirebaseServerApp");
    function _clearComponents() {
      _components.clear();
    }
    __name(_clearComponents, "_clearComponents");
    var ERRORS = {
      [
        "no-app"
        /* AppError.NO_APP */
      ]: "No Firebase App '{$appName}' has been created - call initializeApp() first",
      [
        "bad-app-name"
        /* AppError.BAD_APP_NAME */
      ]: "Illegal App name: '{$appName}'",
      [
        "duplicate-app"
        /* AppError.DUPLICATE_APP */
      ]: "Firebase App named '{$appName}' already exists with different options or config",
      [
        "app-deleted"
        /* AppError.APP_DELETED */
      ]: "Firebase App named '{$appName}' already deleted",
      [
        "server-app-deleted"
        /* AppError.SERVER_APP_DELETED */
      ]: "Firebase Server App has been deleted",
      [
        "no-options"
        /* AppError.NO_OPTIONS */
      ]: "Need to provide options, when not being deployed to hosting via source.",
      [
        "invalid-app-argument"
        /* AppError.INVALID_APP_ARGUMENT */
      ]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
      [
        "invalid-log-argument"
        /* AppError.INVALID_LOG_ARGUMENT */
      ]: "First argument to `onLog` must be null or a function.",
      [
        "idb-open"
        /* AppError.IDB_OPEN */
      ]: "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "idb-get"
        /* AppError.IDB_GET */
      ]: "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "idb-set"
        /* AppError.IDB_WRITE */
      ]: "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "idb-delete"
        /* AppError.IDB_DELETE */
      ]: "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",
      [
        "finalization-registry-not-supported"
        /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */
      ]: "FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.",
      [
        "invalid-server-app-environment"
        /* AppError.INVALID_SERVER_APP_ENVIRONMENT */
      ]: "FirebaseServerApp is not for use in browser environments."
    };
    var ERROR_FACTORY = new util.ErrorFactory("app", "Firebase", ERRORS);
    var FirebaseAppImpl = class {
      constructor(options, config, container) {
        this._isDeleted = false;
        this._options = Object.assign({}, options);
        this._config = Object.assign({}, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new component.Component(
          "app",
          () => this,
          "PUBLIC"
          /* ComponentType.PUBLIC */
        ));
      }
      get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
      }
      set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
      }
      get name() {
        this.checkDestroyed();
        return this._name;
      }
      get options() {
        this.checkDestroyed();
        return this._options;
      }
      get config() {
        this.checkDestroyed();
        return this._config;
      }
      get container() {
        return this._container;
      }
      get isDeleted() {
        return this._isDeleted;
      }
      set isDeleted(val) {
        this._isDeleted = val;
      }
      /**
       * This function will throw an Error if the App has already been deleted -
       * use before performing API actions on the App.
       */
      checkDestroyed() {
        if (this.isDeleted) {
          throw ERROR_FACTORY.create("app-deleted", { appName: this._name });
        }
      }
    };
    __name(FirebaseAppImpl, "FirebaseAppImpl");
    function validateTokenTTL(base64Token, tokenName) {
      const secondPart = util.base64Decode(base64Token.split(".")[1]);
      if (secondPart === null) {
        console.error(`FirebaseServerApp ${tokenName} is invalid: second part could not be parsed.`);
        return;
      }
      const expClaim = JSON.parse(secondPart).exp;
      if (expClaim === void 0) {
        console.error(`FirebaseServerApp ${tokenName} is invalid: expiration claim could not be parsed`);
        return;
      }
      const exp = JSON.parse(secondPart).exp * 1e3;
      const now = (/* @__PURE__ */ new Date()).getTime();
      const diff = exp - now;
      if (diff <= 0) {
        console.error(`FirebaseServerApp ${tokenName} is invalid: the token has expired.`);
      }
    }
    __name(validateTokenTTL, "validateTokenTTL");
    var FirebaseServerAppImpl = class extends FirebaseAppImpl {
      constructor(options, serverConfig, name2, container) {
        const automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== void 0 ? serverConfig.automaticDataCollectionEnabled : false;
        const config = {
          name: name2,
          automaticDataCollectionEnabled
        };
        if (options.apiKey !== void 0) {
          super(options, config, container);
        } else {
          const appImpl = options;
          super(appImpl.options, config, container);
        }
        this._serverConfig = Object.assign({ automaticDataCollectionEnabled }, serverConfig);
        if (this._serverConfig.authIdToken) {
          validateTokenTTL(this._serverConfig.authIdToken, "authIdToken");
        }
        if (this._serverConfig.appCheckToken) {
          validateTokenTTL(this._serverConfig.appCheckToken, "appCheckToken");
        }
        this._finalizationRegistry = null;
        if (typeof FinalizationRegistry !== "undefined") {
          this._finalizationRegistry = new FinalizationRegistry(() => {
            this.automaticCleanup();
          });
        }
        this._refCount = 0;
        this.incRefCount(this._serverConfig.releaseOnDeref);
        this._serverConfig.releaseOnDeref = void 0;
        serverConfig.releaseOnDeref = void 0;
        registerVersion(name$q, version$1, "serverapp");
      }
      toJSON() {
        return void 0;
      }
      get refCount() {
        return this._refCount;
      }
      // Increment the reference count of this server app. If an object is provided, register it
      // with the finalization registry.
      incRefCount(obj) {
        if (this.isDeleted) {
          return;
        }
        this._refCount++;
        if (obj !== void 0 && this._finalizationRegistry !== null) {
          this._finalizationRegistry.register(obj, this);
        }
      }
      // Decrement the reference count.
      decRefCount() {
        if (this.isDeleted) {
          return 0;
        }
        return --this._refCount;
      }
      // Invoked by the FinalizationRegistry callback to note that this app should go through its
      // reference counts and delete itself if no reference count remain. The coordinating logic that
      // handles this is in deleteApp(...).
      automaticCleanup() {
        void deleteApp(this);
      }
      get settings() {
        this.checkDestroyed();
        return this._serverConfig;
      }
      /**
       * This function will throw an Error if the App has already been deleted -
       * use before performing API actions on the App.
       */
      checkDestroyed() {
        if (this.isDeleted) {
          throw ERROR_FACTORY.create(
            "server-app-deleted"
            /* AppError.SERVER_APP_DELETED */
          );
        }
      }
    };
    __name(FirebaseServerAppImpl, "FirebaseServerAppImpl");
    var SDK_VERSION = version;
    function initializeApp(_options, rawConfig = {}) {
      let options = _options;
      if (typeof rawConfig !== "object") {
        const name3 = rawConfig;
        rawConfig = { name: name3 };
      }
      const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
      const name2 = config.name;
      if (typeof name2 !== "string" || !name2) {
        throw ERROR_FACTORY.create("bad-app-name", {
          appName: String(name2)
        });
      }
      options || (options = util.getDefaultAppConfig());
      if (!options) {
        throw ERROR_FACTORY.create(
          "no-options"
          /* AppError.NO_OPTIONS */
        );
      }
      const existingApp = _apps.get(name2);
      if (existingApp) {
        if (util.deepEqual(options, existingApp.options) && util.deepEqual(config, existingApp.config)) {
          return existingApp;
        } else {
          throw ERROR_FACTORY.create("duplicate-app", { appName: name2 });
        }
      }
      const container = new component.ComponentContainer(name2);
      for (const component2 of _components.values()) {
        container.addComponent(component2);
      }
      const newApp = new FirebaseAppImpl(options, config, container);
      _apps.set(name2, newApp);
      return newApp;
    }
    __name(initializeApp, "initializeApp");
    function initializeServerApp(_options, _serverAppConfig) {
      if (util.isBrowser() && !util.isWebWorker()) {
        throw ERROR_FACTORY.create(
          "invalid-server-app-environment"
          /* AppError.INVALID_SERVER_APP_ENVIRONMENT */
        );
      }
      if (_serverAppConfig.automaticDataCollectionEnabled === void 0) {
        _serverAppConfig.automaticDataCollectionEnabled = false;
      }
      let appOptions;
      if (_isFirebaseApp(_options)) {
        appOptions = _options.options;
      } else {
        appOptions = _options;
      }
      const nameObj = Object.assign(Object.assign({}, _serverAppConfig), appOptions);
      if (nameObj.releaseOnDeref !== void 0) {
        delete nameObj.releaseOnDeref;
      }
      const hashCode = /* @__PURE__ */ __name((s2) => {
        return [...s2].reduce((hash, c2) => Math.imul(31, hash) + c2.charCodeAt(0) | 0, 0);
      }, "hashCode");
      if (_serverAppConfig.releaseOnDeref !== void 0) {
        if (typeof FinalizationRegistry === "undefined") {
          throw ERROR_FACTORY.create("finalization-registry-not-supported", {});
        }
      }
      const nameString = "" + hashCode(JSON.stringify(nameObj));
      const existingApp = _serverApps.get(nameString);
      if (existingApp) {
        existingApp.incRefCount(_serverAppConfig.releaseOnDeref);
        return existingApp;
      }
      const container = new component.ComponentContainer(nameString);
      for (const component2 of _components.values()) {
        container.addComponent(component2);
      }
      const newApp = new FirebaseServerAppImpl(appOptions, _serverAppConfig, nameString, container);
      _serverApps.set(nameString, newApp);
      return newApp;
    }
    __name(initializeServerApp, "initializeServerApp");
    function getApp(name2 = DEFAULT_ENTRY_NAME) {
      const app = _apps.get(name2);
      if (!app && name2 === DEFAULT_ENTRY_NAME && util.getDefaultAppConfig()) {
        return initializeApp();
      }
      if (!app) {
        throw ERROR_FACTORY.create("no-app", { appName: name2 });
      }
      return app;
    }
    __name(getApp, "getApp");
    function getApps() {
      return Array.from(_apps.values());
    }
    __name(getApps, "getApps");
    async function deleteApp(app) {
      let cleanupProviders = false;
      const name2 = app.name;
      if (_apps.has(name2)) {
        cleanupProviders = true;
        _apps.delete(name2);
      } else if (_serverApps.has(name2)) {
        const firebaseServerApp = app;
        if (firebaseServerApp.decRefCount() <= 0) {
          _serverApps.delete(name2);
          cleanupProviders = true;
        }
      }
      if (cleanupProviders) {
        await Promise.all(app.container.getProviders().map((provider) => provider.delete()));
        app.isDeleted = true;
      }
    }
    __name(deleteApp, "deleteApp");
    function registerVersion(libraryKeyOrName, version2, variant) {
      var _a;
      let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
      if (variant) {
        library += `-${variant}`;
      }
      const libraryMismatch = library.match(/\s|\//);
      const versionMismatch = version2.match(/\s|\//);
      if (libraryMismatch || versionMismatch) {
        const warning = [
          `Unable to register library "${library}" with version "${version2}":`
        ];
        if (libraryMismatch) {
          warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
        }
        if (libraryMismatch && versionMismatch) {
          warning.push("and");
        }
        if (versionMismatch) {
          warning.push(`version name "${version2}" contains illegal characters (whitespace or "/")`);
        }
        logger.warn(warning.join(" "));
        return;
      }
      _registerComponent(new component.Component(
        `${library}-version`,
        () => ({ library, version: version2 }),
        "VERSION"
        /* ComponentType.VERSION */
      ));
    }
    __name(registerVersion, "registerVersion");
    function onLog(logCallback, options) {
      if (logCallback !== null && typeof logCallback !== "function") {
        throw ERROR_FACTORY.create(
          "invalid-log-argument"
          /* AppError.INVALID_LOG_ARGUMENT */
        );
      }
      logger$1.setUserLogHandler(logCallback, options);
    }
    __name(onLog, "onLog");
    function setLogLevel(logLevel) {
      logger$1.setLogLevel(logLevel);
    }
    __name(setLogLevel, "setLogLevel");
    var DB_NAME = "firebase-heartbeat-database";
    var DB_VERSION = 1;
    var STORE_NAME = "firebase-heartbeat-store";
    var dbPromise = null;
    function getDbPromise() {
      if (!dbPromise) {
        dbPromise = idb.openDB(DB_NAME, DB_VERSION, {
          upgrade: (db, oldVersion) => {
            switch (oldVersion) {
              case 0:
                try {
                  db.createObjectStore(STORE_NAME);
                } catch (e) {
                  console.warn(e);
                }
            }
          }
        }).catch((e) => {
          throw ERROR_FACTORY.create("idb-open", {
            originalErrorMessage: e.message
          });
        });
      }
      return dbPromise;
    }
    __name(getDbPromise, "getDbPromise");
    async function readHeartbeatsFromIndexedDB(app) {
      try {
        const db = await getDbPromise();
        const tx = db.transaction(STORE_NAME);
        const result = await tx.objectStore(STORE_NAME).get(computeKey(app));
        await tx.done;
        return result;
      } catch (e) {
        if (e instanceof util.FirebaseError) {
          logger.warn(e.message);
        } else {
          const idbGetError = ERROR_FACTORY.create("idb-get", {
            originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
          });
          logger.warn(idbGetError.message);
        }
      }
    }
    __name(readHeartbeatsFromIndexedDB, "readHeartbeatsFromIndexedDB");
    async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
      try {
        const db = await getDbPromise();
        const tx = db.transaction(STORE_NAME, "readwrite");
        const objectStore = tx.objectStore(STORE_NAME);
        await objectStore.put(heartbeatObject, computeKey(app));
        await tx.done;
      } catch (e) {
        if (e instanceof util.FirebaseError) {
          logger.warn(e.message);
        } else {
          const idbGetError = ERROR_FACTORY.create("idb-set", {
            originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
          });
          logger.warn(idbGetError.message);
        }
      }
    }
    __name(writeHeartbeatsToIndexedDB, "writeHeartbeatsToIndexedDB");
    function computeKey(app) {
      return `${app.name}!${app.options.appId}`;
    }
    __name(computeKey, "computeKey");
    var MAX_HEADER_BYTES = 1024;
    var MAX_NUM_STORED_HEARTBEATS = 30;
    var HeartbeatServiceImpl = class {
      constructor(container) {
        this.container = container;
        this._heartbeatsCache = null;
        const app = this.container.getProvider("app").getImmediate();
        this._storage = new HeartbeatStorageImpl(app);
        this._heartbeatsCachePromise = this._storage.read().then((result) => {
          this._heartbeatsCache = result;
          return result;
        });
      }
      /**
       * Called to report a heartbeat. The function will generate
       * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
       * to IndexedDB.
       * Note that we only store one heartbeat per day. So if a heartbeat for today is
       * already logged, subsequent calls to this function in the same day will be ignored.
       */
      async triggerHeartbeat() {
        var _a, _b;
        try {
          const platformLogger = this.container.getProvider("platform-logger").getImmediate();
          const agent = platformLogger.getPlatformInfoString();
          const date = getUTCDateString();
          if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {
            this._heartbeatsCache = await this._heartbeatsCachePromise;
            if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {
              return;
            }
          }
          if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some((singleDateHeartbeat) => singleDateHeartbeat.date === date)) {
            return;
          } else {
            this._heartbeatsCache.heartbeats.push({ date, agent });
            if (this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS) {
              const earliestHeartbeatIdx = getEarliestHeartbeatIdx(this._heartbeatsCache.heartbeats);
              this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);
            }
          }
          return this._storage.overwrite(this._heartbeatsCache);
        } catch (e) {
          logger.warn(e);
        }
      }
      /**
       * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
       * It also clears all heartbeats from memory as well as in IndexedDB.
       *
       * NOTE: Consuming product SDKs should not send the header if this method
       * returns an empty string.
       */
      async getHeartbeatsHeader() {
        var _a;
        try {
          if (this._heartbeatsCache === null) {
            await this._heartbeatsCachePromise;
          }
          if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0) {
            return "";
          }
          const date = getUTCDateString();
          const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
          const headerString = util.base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
          this._heartbeatsCache.lastSentHeartbeatDate = date;
          if (unsentEntries.length > 0) {
            this._heartbeatsCache.heartbeats = unsentEntries;
            await this._storage.overwrite(this._heartbeatsCache);
          } else {
            this._heartbeatsCache.heartbeats = [];
            void this._storage.overwrite(this._heartbeatsCache);
          }
          return headerString;
        } catch (e) {
          logger.warn(e);
          return "";
        }
      }
    };
    __name(HeartbeatServiceImpl, "HeartbeatServiceImpl");
    function getUTCDateString() {
      const today = /* @__PURE__ */ new Date();
      return today.toISOString().substring(0, 10);
    }
    __name(getUTCDateString, "getUTCDateString");
    function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
      const heartbeatsToSend = [];
      let unsentEntries = heartbeatsCache.slice();
      for (const singleDateHeartbeat of heartbeatsCache) {
        const heartbeatEntry = heartbeatsToSend.find((hb) => hb.agent === singleDateHeartbeat.agent);
        if (!heartbeatEntry) {
          heartbeatsToSend.push({
            agent: singleDateHeartbeat.agent,
            dates: [singleDateHeartbeat.date]
          });
          if (countBytes(heartbeatsToSend) > maxSize) {
            heartbeatsToSend.pop();
            break;
          }
        } else {
          heartbeatEntry.dates.push(singleDateHeartbeat.date);
          if (countBytes(heartbeatsToSend) > maxSize) {
            heartbeatEntry.dates.pop();
            break;
          }
        }
        unsentEntries = unsentEntries.slice(1);
      }
      return {
        heartbeatsToSend,
        unsentEntries
      };
    }
    __name(extractHeartbeatsForHeader, "extractHeartbeatsForHeader");
    var HeartbeatStorageImpl = class {
      constructor(app) {
        this.app = app;
        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
      }
      async runIndexedDBEnvironmentCheck() {
        if (!util.isIndexedDBAvailable()) {
          return false;
        } else {
          return util.validateIndexedDBOpenable().then(() => true).catch(() => false);
        }
      }
      /**
       * Read all heartbeats.
       */
      async read() {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
          return { heartbeats: [] };
        } else {
          const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
          if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {
            return idbHeartbeatObject;
          } else {
            return { heartbeats: [] };
          }
        }
      }
      // overwrite the storage with the provided heartbeats
      async overwrite(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
          return;
        } else {
          const existingHeartbeatsObject = await this.read();
          return writeHeartbeatsToIndexedDB(this.app, {
            lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
            heartbeats: heartbeatsObject.heartbeats
          });
        }
      }
      // add heartbeats
      async add(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
          return;
        } else {
          const existingHeartbeatsObject = await this.read();
          return writeHeartbeatsToIndexedDB(this.app, {
            lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
            heartbeats: [
              ...existingHeartbeatsObject.heartbeats,
              ...heartbeatsObject.heartbeats
            ]
          });
        }
      }
    };
    __name(HeartbeatStorageImpl, "HeartbeatStorageImpl");
    function countBytes(heartbeatsCache) {
      return util.base64urlEncodeWithoutPadding(
        // heartbeatsCache wrapper properties
        JSON.stringify({ version: 2, heartbeats: heartbeatsCache })
      ).length;
    }
    __name(countBytes, "countBytes");
    function getEarliestHeartbeatIdx(heartbeats) {
      if (heartbeats.length === 0) {
        return -1;
      }
      let earliestHeartbeatIdx = 0;
      let earliestHeartbeatDate = heartbeats[0].date;
      for (let i = 1; i < heartbeats.length; i++) {
        if (heartbeats[i].date < earliestHeartbeatDate) {
          earliestHeartbeatDate = heartbeats[i].date;
          earliestHeartbeatIdx = i;
        }
      }
      return earliestHeartbeatIdx;
    }
    __name(getEarliestHeartbeatIdx, "getEarliestHeartbeatIdx");
    function registerCoreComponents(variant) {
      _registerComponent(new component.Component(
        "platform-logger",
        (container) => new PlatformLoggerServiceImpl(container),
        "PRIVATE"
        /* ComponentType.PRIVATE */
      ));
      _registerComponent(new component.Component(
        "heartbeat",
        (container) => new HeartbeatServiceImpl(container),
        "PRIVATE"
        /* ComponentType.PRIVATE */
      ));
      registerVersion(name$q, version$1, variant);
      registerVersion(name$q, version$1, "cjs2017");
      registerVersion("fire-js", "");
    }
    __name(registerCoreComponents, "registerCoreComponents");
    registerCoreComponents("node");
    Object.defineProperty(exports, "FirebaseError", {
      enumerable: true,
      get: function() {
        return util.FirebaseError;
      }
    });
    exports.SDK_VERSION = SDK_VERSION;
    exports._DEFAULT_ENTRY_NAME = DEFAULT_ENTRY_NAME;
    exports._addComponent = _addComponent;
    exports._addOrOverwriteComponent = _addOrOverwriteComponent;
    exports._apps = _apps;
    exports._clearComponents = _clearComponents;
    exports._components = _components;
    exports._getProvider = _getProvider;
    exports._isFirebaseApp = _isFirebaseApp;
    exports._isFirebaseServerApp = _isFirebaseServerApp;
    exports._registerComponent = _registerComponent;
    exports._removeServiceInstance = _removeServiceInstance;
    exports._serverApps = _serverApps;
    exports.deleteApp = deleteApp;
    exports.getApp = getApp;
    exports.getApps = getApps;
    exports.initializeApp = initializeApp;
    exports.initializeServerApp = initializeServerApp;
    exports.onLog = onLog;
    exports.registerVersion = registerVersion;
    exports.setLogLevel = setLogLevel;
  }
});

// node_modules/@firebase/webchannel-wrapper/dist/bloom-blob/bloom_blob_es2018.js
var require_bloom_blob_es2018 = __commonJS({
  "node_modules/@firebase/webchannel-wrapper/dist/bloom-blob/bloom_blob_es2018.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    (function() {
      "use strict";
      var h2;
      function k(f2, a2) {
        function c2() {
        }
        __name(c2, "c");
        c2.prototype = a2.prototype;
        f2.D = a2.prototype;
        f2.prototype = new c2();
        f2.prototype.constructor = f2;
        f2.C = function(d, e, g2) {
          for (var b = Array(arguments.length - 2), r2 = 2; r2 < arguments.length; r2++)
            b[r2 - 2] = arguments[r2];
          return a2.prototype[e].apply(d, b);
        };
      }
      __name(k, "k");
      ;
      function l() {
        this.blockSize = -1;
      }
      __name(l, "l");
      ;
      function m() {
        this.blockSize = -1;
        this.blockSize = 64;
        this.g = Array(4);
        this.B = Array(this.blockSize);
        this.o = this.h = 0;
        this.s();
      }
      __name(m, "m");
      k(m, l);
      m.prototype.s = function() {
        this.g[0] = 1732584193;
        this.g[1] = 4023233417;
        this.g[2] = 2562383102;
        this.g[3] = 271733878;
        this.o = this.h = 0;
      };
      function n2(f2, a2, c2) {
        c2 || (c2 = 0);
        var d = Array(16);
        if ("string" === typeof a2)
          for (var e = 0; 16 > e; ++e)
            d[e] = a2.charCodeAt(c2++) | a2.charCodeAt(c2++) << 8 | a2.charCodeAt(c2++) << 16 | a2.charCodeAt(c2++) << 24;
        else
          for (e = 0; 16 > e; ++e)
            d[e] = a2[c2++] | a2[c2++] << 8 | a2[c2++] << 16 | a2[c2++] << 24;
        a2 = f2.g[0];
        c2 = f2.g[1];
        e = f2.g[2];
        var g2 = f2.g[3];
        var b = a2 + (g2 ^ c2 & (e ^ g2)) + d[0] + 3614090360 & 4294967295;
        a2 = c2 + (b << 7 & 4294967295 | b >>> 25);
        b = g2 + (e ^ a2 & (c2 ^ e)) + d[1] + 3905402710 & 4294967295;
        g2 = a2 + (b << 12 & 4294967295 | b >>> 20);
        b = e + (c2 ^ g2 & (a2 ^ c2)) + d[2] + 606105819 & 4294967295;
        e = g2 + (b << 17 & 4294967295 | b >>> 15);
        b = c2 + (a2 ^ e & (g2 ^ a2)) + d[3] + 3250441966 & 4294967295;
        c2 = e + (b << 22 & 4294967295 | b >>> 10);
        b = a2 + (g2 ^ c2 & (e ^ g2)) + d[4] + 4118548399 & 4294967295;
        a2 = c2 + (b << 7 & 4294967295 | b >>> 25);
        b = g2 + (e ^ a2 & (c2 ^ e)) + d[5] + 1200080426 & 4294967295;
        g2 = a2 + (b << 12 & 4294967295 | b >>> 20);
        b = e + (c2 ^ g2 & (a2 ^ c2)) + d[6] + 2821735955 & 4294967295;
        e = g2 + (b << 17 & 4294967295 | b >>> 15);
        b = c2 + (a2 ^ e & (g2 ^ a2)) + d[7] + 4249261313 & 4294967295;
        c2 = e + (b << 22 & 4294967295 | b >>> 10);
        b = a2 + (g2 ^ c2 & (e ^ g2)) + d[8] + 1770035416 & 4294967295;
        a2 = c2 + (b << 7 & 4294967295 | b >>> 25);
        b = g2 + (e ^ a2 & (c2 ^ e)) + d[9] + 2336552879 & 4294967295;
        g2 = a2 + (b << 12 & 4294967295 | b >>> 20);
        b = e + (c2 ^ g2 & (a2 ^ c2)) + d[10] + 4294925233 & 4294967295;
        e = g2 + (b << 17 & 4294967295 | b >>> 15);
        b = c2 + (a2 ^ e & (g2 ^ a2)) + d[11] + 2304563134 & 4294967295;
        c2 = e + (b << 22 & 4294967295 | b >>> 10);
        b = a2 + (g2 ^ c2 & (e ^ g2)) + d[12] + 1804603682 & 4294967295;
        a2 = c2 + (b << 7 & 4294967295 | b >>> 25);
        b = g2 + (e ^ a2 & (c2 ^ e)) + d[13] + 4254626195 & 4294967295;
        g2 = a2 + (b << 12 & 4294967295 | b >>> 20);
        b = e + (c2 ^ g2 & (a2 ^ c2)) + d[14] + 2792965006 & 4294967295;
        e = g2 + (b << 17 & 4294967295 | b >>> 15);
        b = c2 + (a2 ^ e & (g2 ^ a2)) + d[15] + 1236535329 & 4294967295;
        c2 = e + (b << 22 & 4294967295 | b >>> 10);
        b = a2 + (e ^ g2 & (c2 ^ e)) + d[1] + 4129170786 & 4294967295;
        a2 = c2 + (b << 5 & 4294967295 | b >>> 27);
        b = g2 + (c2 ^ e & (a2 ^ c2)) + d[6] + 3225465664 & 4294967295;
        g2 = a2 + (b << 9 & 4294967295 | b >>> 23);
        b = e + (a2 ^ c2 & (g2 ^ a2)) + d[11] + 643717713 & 4294967295;
        e = g2 + (b << 14 & 4294967295 | b >>> 18);
        b = c2 + (g2 ^ a2 & (e ^ g2)) + d[0] + 3921069994 & 4294967295;
        c2 = e + (b << 20 & 4294967295 | b >>> 12);
        b = a2 + (e ^ g2 & (c2 ^ e)) + d[5] + 3593408605 & 4294967295;
        a2 = c2 + (b << 5 & 4294967295 | b >>> 27);
        b = g2 + (c2 ^ e & (a2 ^ c2)) + d[10] + 38016083 & 4294967295;
        g2 = a2 + (b << 9 & 4294967295 | b >>> 23);
        b = e + (a2 ^ c2 & (g2 ^ a2)) + d[15] + 3634488961 & 4294967295;
        e = g2 + (b << 14 & 4294967295 | b >>> 18);
        b = c2 + (g2 ^ a2 & (e ^ g2)) + d[4] + 3889429448 & 4294967295;
        c2 = e + (b << 20 & 4294967295 | b >>> 12);
        b = a2 + (e ^ g2 & (c2 ^ e)) + d[9] + 568446438 & 4294967295;
        a2 = c2 + (b << 5 & 4294967295 | b >>> 27);
        b = g2 + (c2 ^ e & (a2 ^ c2)) + d[14] + 3275163606 & 4294967295;
        g2 = a2 + (b << 9 & 4294967295 | b >>> 23);
        b = e + (a2 ^ c2 & (g2 ^ a2)) + d[3] + 4107603335 & 4294967295;
        e = g2 + (b << 14 & 4294967295 | b >>> 18);
        b = c2 + (g2 ^ a2 & (e ^ g2)) + d[8] + 1163531501 & 4294967295;
        c2 = e + (b << 20 & 4294967295 | b >>> 12);
        b = a2 + (e ^ g2 & (c2 ^ e)) + d[13] + 2850285829 & 4294967295;
        a2 = c2 + (b << 5 & 4294967295 | b >>> 27);
        b = g2 + (c2 ^ e & (a2 ^ c2)) + d[2] + 4243563512 & 4294967295;
        g2 = a2 + (b << 9 & 4294967295 | b >>> 23);
        b = e + (a2 ^ c2 & (g2 ^ a2)) + d[7] + 1735328473 & 4294967295;
        e = g2 + (b << 14 & 4294967295 | b >>> 18);
        b = c2 + (g2 ^ a2 & (e ^ g2)) + d[12] + 2368359562 & 4294967295;
        c2 = e + (b << 20 & 4294967295 | b >>> 12);
        b = a2 + (c2 ^ e ^ g2) + d[5] + 4294588738 & 4294967295;
        a2 = c2 + (b << 4 & 4294967295 | b >>> 28);
        b = g2 + (a2 ^ c2 ^ e) + d[8] + 2272392833 & 4294967295;
        g2 = a2 + (b << 11 & 4294967295 | b >>> 21);
        b = e + (g2 ^ a2 ^ c2) + d[11] + 1839030562 & 4294967295;
        e = g2 + (b << 16 & 4294967295 | b >>> 16);
        b = c2 + (e ^ g2 ^ a2) + d[14] + 4259657740 & 4294967295;
        c2 = e + (b << 23 & 4294967295 | b >>> 9);
        b = a2 + (c2 ^ e ^ g2) + d[1] + 2763975236 & 4294967295;
        a2 = c2 + (b << 4 & 4294967295 | b >>> 28);
        b = g2 + (a2 ^ c2 ^ e) + d[4] + 1272893353 & 4294967295;
        g2 = a2 + (b << 11 & 4294967295 | b >>> 21);
        b = e + (g2 ^ a2 ^ c2) + d[7] + 4139469664 & 4294967295;
        e = g2 + (b << 16 & 4294967295 | b >>> 16);
        b = c2 + (e ^ g2 ^ a2) + d[10] + 3200236656 & 4294967295;
        c2 = e + (b << 23 & 4294967295 | b >>> 9);
        b = a2 + (c2 ^ e ^ g2) + d[13] + 681279174 & 4294967295;
        a2 = c2 + (b << 4 & 4294967295 | b >>> 28);
        b = g2 + (a2 ^ c2 ^ e) + d[0] + 3936430074 & 4294967295;
        g2 = a2 + (b << 11 & 4294967295 | b >>> 21);
        b = e + (g2 ^ a2 ^ c2) + d[3] + 3572445317 & 4294967295;
        e = g2 + (b << 16 & 4294967295 | b >>> 16);
        b = c2 + (e ^ g2 ^ a2) + d[6] + 76029189 & 4294967295;
        c2 = e + (b << 23 & 4294967295 | b >>> 9);
        b = a2 + (c2 ^ e ^ g2) + d[9] + 3654602809 & 4294967295;
        a2 = c2 + (b << 4 & 4294967295 | b >>> 28);
        b = g2 + (a2 ^ c2 ^ e) + d[12] + 3873151461 & 4294967295;
        g2 = a2 + (b << 11 & 4294967295 | b >>> 21);
        b = e + (g2 ^ a2 ^ c2) + d[15] + 530742520 & 4294967295;
        e = g2 + (b << 16 & 4294967295 | b >>> 16);
        b = c2 + (e ^ g2 ^ a2) + d[2] + 3299628645 & 4294967295;
        c2 = e + (b << 23 & 4294967295 | b >>> 9);
        b = a2 + (e ^ (c2 | ~g2)) + d[0] + 4096336452 & 4294967295;
        a2 = c2 + (b << 6 & 4294967295 | b >>> 26);
        b = g2 + (c2 ^ (a2 | ~e)) + d[7] + 1126891415 & 4294967295;
        g2 = a2 + (b << 10 & 4294967295 | b >>> 22);
        b = e + (a2 ^ (g2 | ~c2)) + d[14] + 2878612391 & 4294967295;
        e = g2 + (b << 15 & 4294967295 | b >>> 17);
        b = c2 + (g2 ^ (e | ~a2)) + d[5] + 4237533241 & 4294967295;
        c2 = e + (b << 21 & 4294967295 | b >>> 11);
        b = a2 + (e ^ (c2 | ~g2)) + d[12] + 1700485571 & 4294967295;
        a2 = c2 + (b << 6 & 4294967295 | b >>> 26);
        b = g2 + (c2 ^ (a2 | ~e)) + d[3] + 2399980690 & 4294967295;
        g2 = a2 + (b << 10 & 4294967295 | b >>> 22);
        b = e + (a2 ^ (g2 | ~c2)) + d[10] + 4293915773 & 4294967295;
        e = g2 + (b << 15 & 4294967295 | b >>> 17);
        b = c2 + (g2 ^ (e | ~a2)) + d[1] + 2240044497 & 4294967295;
        c2 = e + (b << 21 & 4294967295 | b >>> 11);
        b = a2 + (e ^ (c2 | ~g2)) + d[8] + 1873313359 & 4294967295;
        a2 = c2 + (b << 6 & 4294967295 | b >>> 26);
        b = g2 + (c2 ^ (a2 | ~e)) + d[15] + 4264355552 & 4294967295;
        g2 = a2 + (b << 10 & 4294967295 | b >>> 22);
        b = e + (a2 ^ (g2 | ~c2)) + d[6] + 2734768916 & 4294967295;
        e = g2 + (b << 15 & 4294967295 | b >>> 17);
        b = c2 + (g2 ^ (e | ~a2)) + d[13] + 1309151649 & 4294967295;
        c2 = e + (b << 21 & 4294967295 | b >>> 11);
        b = a2 + (e ^ (c2 | ~g2)) + d[4] + 4149444226 & 4294967295;
        a2 = c2 + (b << 6 & 4294967295 | b >>> 26);
        b = g2 + (c2 ^ (a2 | ~e)) + d[11] + 3174756917 & 4294967295;
        g2 = a2 + (b << 10 & 4294967295 | b >>> 22);
        b = e + (a2 ^ (g2 | ~c2)) + d[2] + 718787259 & 4294967295;
        e = g2 + (b << 15 & 4294967295 | b >>> 17);
        b = c2 + (g2 ^ (e | ~a2)) + d[9] + 3951481745 & 4294967295;
        f2.g[0] = f2.g[0] + a2 & 4294967295;
        f2.g[1] = f2.g[1] + (e + (b << 21 & 4294967295 | b >>> 11)) & 4294967295;
        f2.g[2] = f2.g[2] + e & 4294967295;
        f2.g[3] = f2.g[3] + g2 & 4294967295;
      }
      __name(n2, "n");
      m.prototype.u = function(f2, a2) {
        void 0 === a2 && (a2 = f2.length);
        for (var c2 = a2 - this.blockSize, d = this.B, e = this.h, g2 = 0; g2 < a2; ) {
          if (0 == e)
            for (; g2 <= c2; )
              n2(this, f2, g2), g2 += this.blockSize;
          if ("string" === typeof f2)
            for (; g2 < a2; ) {
              if (d[e++] = f2.charCodeAt(g2++), e == this.blockSize) {
                n2(this, d);
                e = 0;
                break;
              }
            }
          else
            for (; g2 < a2; )
              if (d[e++] = f2[g2++], e == this.blockSize) {
                n2(this, d);
                e = 0;
                break;
              }
        }
        this.h = e;
        this.o += a2;
      };
      m.prototype.v = function() {
        var f2 = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);
        f2[0] = 128;
        for (var a2 = 1; a2 < f2.length - 8; ++a2)
          f2[a2] = 0;
        var c2 = 8 * this.o;
        for (a2 = f2.length - 8; a2 < f2.length; ++a2)
          f2[a2] = c2 & 255, c2 /= 256;
        this.u(f2);
        f2 = Array(16);
        for (a2 = c2 = 0; 4 > a2; ++a2)
          for (var d = 0; 32 > d; d += 8)
            f2[c2++] = this.g[a2] >>> d & 255;
        return f2;
      };
      function p2(f2, a2) {
        var c2 = q;
        return Object.prototype.hasOwnProperty.call(c2, f2) ? c2[f2] : c2[f2] = a2(f2);
      }
      __name(p2, "p");
      ;
      function t2(f2, a2) {
        this.h = a2;
        for (var c2 = [], d = true, e = f2.length - 1; 0 <= e; e--) {
          var g2 = f2[e] | 0;
          d && g2 == a2 || (c2[e] = g2, d = false);
        }
        this.g = c2;
      }
      __name(t2, "t");
      var q = {};
      function u2(f2) {
        return -128 <= f2 && 128 > f2 ? p2(f2, function(a2) {
          return new t2([a2 | 0], 0 > a2 ? -1 : 0);
        }) : new t2([f2 | 0], 0 > f2 ? -1 : 0);
      }
      __name(u2, "u");
      function v(f2) {
        if (isNaN(f2) || !isFinite(f2))
          return w;
        if (0 > f2)
          return x(v(-f2));
        for (var a2 = [], c2 = 1, d = 0; f2 >= c2; d++)
          a2[d] = f2 / c2 | 0, c2 *= 4294967296;
        return new t2(a2, 0);
      }
      __name(v, "v");
      function y(f2, a2) {
        if (0 == f2.length)
          throw Error("number format error: empty string");
        a2 = a2 || 10;
        if (2 > a2 || 36 < a2)
          throw Error("radix out of range: " + a2);
        if ("-" == f2.charAt(0))
          return x(y(f2.substring(1), a2));
        if (0 <= f2.indexOf("-"))
          throw Error('number format error: interior "-" character');
        for (var c2 = v(Math.pow(a2, 8)), d = w, e = 0; e < f2.length; e += 8) {
          var g2 = Math.min(8, f2.length - e), b = parseInt(f2.substring(e, e + g2), a2);
          8 > g2 ? (g2 = v(Math.pow(a2, g2)), d = d.j(g2).add(v(b))) : (d = d.j(c2), d = d.add(v(b)));
        }
        return d;
      }
      __name(y, "y");
      var w = u2(0), z = u2(1), A = u2(16777216);
      h2 = t2.prototype;
      h2.m = function() {
        if (B(this))
          return -x(this).m();
        for (var f2 = 0, a2 = 1, c2 = 0; c2 < this.g.length; c2++) {
          var d = this.i(c2);
          f2 += (0 <= d ? d : 4294967296 + d) * a2;
          a2 *= 4294967296;
        }
        return f2;
      };
      h2.toString = function(f2) {
        f2 = f2 || 10;
        if (2 > f2 || 36 < f2)
          throw Error("radix out of range: " + f2);
        if (C(this))
          return "0";
        if (B(this))
          return "-" + x(this).toString(f2);
        for (var a2 = v(Math.pow(f2, 6)), c2 = this, d = ""; ; ) {
          var e = D(c2, a2).g;
          c2 = F(c2, e.j(a2));
          var g2 = ((0 < c2.g.length ? c2.g[0] : c2.h) >>> 0).toString(f2);
          c2 = e;
          if (C(c2))
            return g2 + d;
          for (; 6 > g2.length; )
            g2 = "0" + g2;
          d = g2 + d;
        }
      };
      h2.i = function(f2) {
        return 0 > f2 ? 0 : f2 < this.g.length ? this.g[f2] : this.h;
      };
      function C(f2) {
        if (0 != f2.h)
          return false;
        for (var a2 = 0; a2 < f2.g.length; a2++)
          if (0 != f2.g[a2])
            return false;
        return true;
      }
      __name(C, "C");
      function B(f2) {
        return -1 == f2.h;
      }
      __name(B, "B");
      h2.l = function(f2) {
        f2 = F(this, f2);
        return B(f2) ? -1 : C(f2) ? 0 : 1;
      };
      function x(f2) {
        for (var a2 = f2.g.length, c2 = [], d = 0; d < a2; d++)
          c2[d] = ~f2.g[d];
        return new t2(c2, ~f2.h).add(z);
      }
      __name(x, "x");
      h2.abs = function() {
        return B(this) ? x(this) : this;
      };
      h2.add = function(f2) {
        for (var a2 = Math.max(this.g.length, f2.g.length), c2 = [], d = 0, e = 0; e <= a2; e++) {
          var g2 = d + (this.i(e) & 65535) + (f2.i(e) & 65535), b = (g2 >>> 16) + (this.i(e) >>> 16) + (f2.i(e) >>> 16);
          d = b >>> 16;
          g2 &= 65535;
          b &= 65535;
          c2[e] = b << 16 | g2;
        }
        return new t2(c2, c2[c2.length - 1] & -2147483648 ? -1 : 0);
      };
      function F(f2, a2) {
        return f2.add(x(a2));
      }
      __name(F, "F");
      h2.j = function(f2) {
        if (C(this) || C(f2))
          return w;
        if (B(this))
          return B(f2) ? x(this).j(x(f2)) : x(x(this).j(f2));
        if (B(f2))
          return x(this.j(x(f2)));
        if (0 > this.l(A) && 0 > f2.l(A))
          return v(this.m() * f2.m());
        for (var a2 = this.g.length + f2.g.length, c2 = [], d = 0; d < 2 * a2; d++)
          c2[d] = 0;
        for (d = 0; d < this.g.length; d++)
          for (var e = 0; e < f2.g.length; e++) {
            var g2 = this.i(d) >>> 16, b = this.i(d) & 65535, r2 = f2.i(e) >>> 16, E = f2.i(e) & 65535;
            c2[2 * d + 2 * e] += b * E;
            G(c2, 2 * d + 2 * e);
            c2[2 * d + 2 * e + 1] += g2 * E;
            G(c2, 2 * d + 2 * e + 1);
            c2[2 * d + 2 * e + 1] += b * r2;
            G(c2, 2 * d + 2 * e + 1);
            c2[2 * d + 2 * e + 2] += g2 * r2;
            G(c2, 2 * d + 2 * e + 2);
          }
        for (d = 0; d < a2; d++)
          c2[d] = c2[2 * d + 1] << 16 | c2[2 * d];
        for (d = a2; d < 2 * a2; d++)
          c2[d] = 0;
        return new t2(c2, 0);
      };
      function G(f2, a2) {
        for (; (f2[a2] & 65535) != f2[a2]; )
          f2[a2 + 1] += f2[a2] >>> 16, f2[a2] &= 65535, a2++;
      }
      __name(G, "G");
      function H(f2, a2) {
        this.g = f2;
        this.h = a2;
      }
      __name(H, "H");
      function D(f2, a2) {
        if (C(a2))
          throw Error("division by zero");
        if (C(f2))
          return new H(w, w);
        if (B(f2))
          return a2 = D(x(f2), a2), new H(x(a2.g), x(a2.h));
        if (B(a2))
          return a2 = D(f2, x(a2)), new H(x(a2.g), a2.h);
        if (30 < f2.g.length) {
          if (B(f2) || B(a2))
            throw Error("slowDivide_ only works with positive integers.");
          for (var c2 = z, d = a2; 0 >= d.l(f2); )
            c2 = I(c2), d = I(d);
          var e = J(c2, 1), g2 = J(d, 1);
          d = J(d, 2);
          for (c2 = J(c2, 2); !C(d); ) {
            var b = g2.add(d);
            0 >= b.l(f2) && (e = e.add(c2), g2 = b);
            d = J(d, 1);
            c2 = J(c2, 1);
          }
          a2 = F(f2, e.j(a2));
          return new H(e, a2);
        }
        for (e = w; 0 <= f2.l(a2); ) {
          c2 = Math.max(1, Math.floor(f2.m() / a2.m()));
          d = Math.ceil(Math.log(c2) / Math.LN2);
          d = 48 >= d ? 1 : Math.pow(2, d - 48);
          g2 = v(c2);
          for (b = g2.j(a2); B(b) || 0 < b.l(f2); )
            c2 -= d, g2 = v(c2), b = g2.j(a2);
          C(g2) && (g2 = z);
          e = e.add(g2);
          f2 = F(f2, b);
        }
        return new H(e, f2);
      }
      __name(D, "D");
      h2.A = function(f2) {
        return D(this, f2).h;
      };
      h2.and = function(f2) {
        for (var a2 = Math.max(this.g.length, f2.g.length), c2 = [], d = 0; d < a2; d++)
          c2[d] = this.i(d) & f2.i(d);
        return new t2(c2, this.h & f2.h);
      };
      h2.or = function(f2) {
        for (var a2 = Math.max(this.g.length, f2.g.length), c2 = [], d = 0; d < a2; d++)
          c2[d] = this.i(d) | f2.i(d);
        return new t2(c2, this.h | f2.h);
      };
      h2.xor = function(f2) {
        for (var a2 = Math.max(this.g.length, f2.g.length), c2 = [], d = 0; d < a2; d++)
          c2[d] = this.i(d) ^ f2.i(d);
        return new t2(c2, this.h ^ f2.h);
      };
      function I(f2) {
        for (var a2 = f2.g.length + 1, c2 = [], d = 0; d < a2; d++)
          c2[d] = f2.i(d) << 1 | f2.i(d - 1) >>> 31;
        return new t2(c2, f2.h);
      }
      __name(I, "I");
      function J(f2, a2) {
        var c2 = a2 >> 5;
        a2 %= 32;
        for (var d = f2.g.length - c2, e = [], g2 = 0; g2 < d; g2++)
          e[g2] = 0 < a2 ? f2.i(g2 + c2) >>> a2 | f2.i(g2 + c2 + 1) << 32 - a2 : f2.i(g2 + c2);
        return new t2(e, f2.h);
      }
      __name(J, "J");
      ;
      m.prototype.digest = m.prototype.v;
      m.prototype.reset = m.prototype.s;
      m.prototype.update = m.prototype.u;
      module.exports.Md5 = m;
      t2.prototype.add = t2.prototype.add;
      t2.prototype.multiply = t2.prototype.j;
      t2.prototype.modulo = t2.prototype.A;
      t2.prototype.compare = t2.prototype.l;
      t2.prototype.toNumber = t2.prototype.m;
      t2.prototype.toString = t2.prototype.toString;
      t2.prototype.getBits = t2.prototype.i;
      t2.fromNumber = v;
      t2.fromString = y;
      module.exports.Integer = t2;
    }).apply(typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }
});

// node_modules/@firebase/webchannel-wrapper/dist/webchannel-blob/webchannel_blob_es2018.js
var require_webchannel_blob_es2018 = __commonJS({
  "node_modules/@firebase/webchannel-wrapper/dist/webchannel-blob/webchannel_blob_es2018.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    (function() {
      "use strict";
      var h2, aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a2, b, c2) {
        if (a2 == Array.prototype || a2 == Object.prototype)
          return a2;
        a2[b] = c2.value;
        return a2;
      };
      function ba(a2) {
        a2 = ["object" == typeof globalThis && globalThis, a2, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global];
        for (var b = 0; b < a2.length; ++b) {
          var c2 = a2[b];
          if (c2 && c2.Math == Math)
            return c2;
        }
        throw Error("Cannot find global object");
      }
      __name(ba, "ba");
      var ca = ba(this);
      function da(a2, b) {
        if (b)
          a: {
            var c2 = ca;
            a2 = a2.split(".");
            for (var d = 0; d < a2.length - 1; d++) {
              var e = a2[d];
              if (!(e in c2))
                break a;
              c2 = c2[e];
            }
            a2 = a2[a2.length - 1];
            d = c2[a2];
            b = b(d);
            b != d && null != b && aa(c2, a2, { configurable: true, writable: true, value: b });
          }
      }
      __name(da, "da");
      function ea(a2, b) {
        a2 instanceof String && (a2 += "");
        var c2 = 0, d = false, e = { next: function() {
          if (!d && c2 < a2.length) {
            var f2 = c2++;
            return { value: b(f2, a2[f2]), done: false };
          }
          d = true;
          return { done: true, value: void 0 };
        } };
        e[Symbol.iterator] = function() {
          return e;
        };
        return e;
      }
      __name(ea, "ea");
      da("Array.prototype.values", function(a2) {
        return a2 ? a2 : function() {
          return ea(this, function(b, c2) {
            return c2;
          });
        };
      });
      var fa = fa || {}, k = this || self;
      function ha(a2) {
        var b = typeof a2;
        b = "object" != b ? b : a2 ? Array.isArray(a2) ? "array" : b : "null";
        return "array" == b || "object" == b && "number" == typeof a2.length;
      }
      __name(ha, "ha");
      function n2(a2) {
        var b = typeof a2;
        return "object" == b && null != a2 || "function" == b;
      }
      __name(n2, "n");
      function ia(a2, b, c2) {
        return a2.call.apply(a2.bind, arguments);
      }
      __name(ia, "ia");
      function ja(a2, b, c2) {
        if (!a2)
          throw Error();
        if (2 < arguments.length) {
          var d = Array.prototype.slice.call(arguments, 2);
          return function() {
            var e = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(e, d);
            return a2.apply(b, e);
          };
        }
        return function() {
          return a2.apply(b, arguments);
        };
      }
      __name(ja, "ja");
      function p2(a2, b, c2) {
        p2 = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ia : ja;
        return p2.apply(null, arguments);
      }
      __name(p2, "p");
      function ka(a2, b) {
        var c2 = Array.prototype.slice.call(arguments, 1);
        return function() {
          var d = c2.slice();
          d.push.apply(d, arguments);
          return a2.apply(this, d);
        };
      }
      __name(ka, "ka");
      function r2(a2, b) {
        function c2() {
        }
        __name(c2, "c");
        c2.prototype = b.prototype;
        a2.aa = b.prototype;
        a2.prototype = new c2();
        a2.prototype.constructor = a2;
        a2.Qb = function(d, e, f2) {
          for (var g2 = Array(arguments.length - 2), m = 2; m < arguments.length; m++)
            g2[m - 2] = arguments[m];
          return b.prototype[e].apply(d, g2);
        };
      }
      __name(r2, "r");
      ;
      function la(a2) {
        const b = a2.length;
        if (0 < b) {
          const c2 = Array(b);
          for (let d = 0; d < b; d++)
            c2[d] = a2[d];
          return c2;
        }
        return [];
      }
      __name(la, "la");
      function ma(a2, b) {
        for (let c2 = 1; c2 < arguments.length; c2++) {
          const d = arguments[c2];
          if (ha(d)) {
            const e = a2.length || 0, f2 = d.length || 0;
            a2.length = e + f2;
            for (let g2 = 0; g2 < f2; g2++)
              a2[e + g2] = d[g2];
          } else
            a2.push(d);
        }
      }
      __name(ma, "ma");
      ;
      class na {
        constructor(a2, b) {
          this.i = a2;
          this.j = b;
          this.h = 0;
          this.g = null;
        }
        get() {
          let a2;
          0 < this.h ? (this.h--, a2 = this.g, this.g = a2.next, a2.next = null) : a2 = this.i();
          return a2;
        }
      }
      __name(na, "na");
      ;
      function t2(a2) {
        return /^[\s\xa0]*$/.test(a2);
      }
      __name(t2, "t");
      ;
      function u2() {
        var a2 = k.navigator;
        return a2 && (a2 = a2.userAgent) ? a2 : "";
      }
      __name(u2, "u");
      ;
      function oa(a2) {
        oa[" "](a2);
        return a2;
      }
      __name(oa, "oa");
      oa[" "] = function() {
      };
      var pa = -1 != u2().indexOf("Gecko") && !(-1 != u2().toLowerCase().indexOf("webkit") && -1 == u2().indexOf("Edge")) && !(-1 != u2().indexOf("Trident") || -1 != u2().indexOf("MSIE")) && -1 == u2().indexOf("Edge");
      function qa(a2, b, c2) {
        for (const d in a2)
          b.call(c2, a2[d], d, a2);
      }
      __name(qa, "qa");
      function ra(a2, b) {
        for (const c2 in a2)
          b.call(void 0, a2[c2], c2, a2);
      }
      __name(ra, "ra");
      function sa(a2) {
        const b = {};
        for (const c2 in a2)
          b[c2] = a2[c2];
        return b;
      }
      __name(sa, "sa");
      const ta = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
      function ua(a2, b) {
        let c2, d;
        for (let e = 1; e < arguments.length; e++) {
          d = arguments[e];
          for (c2 in d)
            a2[c2] = d[c2];
          for (let f2 = 0; f2 < ta.length; f2++)
            c2 = ta[f2], Object.prototype.hasOwnProperty.call(d, c2) && (a2[c2] = d[c2]);
        }
      }
      __name(ua, "ua");
      ;
      function va(a2) {
        var b = 1;
        a2 = a2.split(":");
        const c2 = [];
        for (; 0 < b && a2.length; )
          c2.push(a2.shift()), b--;
        a2.length && c2.push(a2.join(":"));
        return c2;
      }
      __name(va, "va");
      ;
      function wa(a2) {
        k.setTimeout(() => {
          throw a2;
        }, 0);
      }
      __name(wa, "wa");
      ;
      function xa() {
        var a2 = za;
        let b = null;
        a2.g && (b = a2.g, a2.g = a2.g.next, a2.g || (a2.h = null), b.next = null);
        return b;
      }
      __name(xa, "xa");
      class Aa {
        constructor() {
          this.h = this.g = null;
        }
        add(a2, b) {
          const c2 = Ba.get();
          c2.set(a2, b);
          this.h ? this.h.next = c2 : this.g = c2;
          this.h = c2;
        }
      }
      __name(Aa, "Aa");
      var Ba = new na(() => new Ca(), (a2) => a2.reset());
      class Ca {
        constructor() {
          this.next = this.g = this.h = null;
        }
        set(a2, b) {
          this.h = a2;
          this.g = b;
          this.next = null;
        }
        reset() {
          this.next = this.g = this.h = null;
        }
      }
      __name(Ca, "Ca");
      ;
      let x, y = false, za = new Aa(), Ea = /* @__PURE__ */ __name(() => {
        const a2 = k.Promise.resolve(void 0);
        x = /* @__PURE__ */ __name(() => {
          a2.then(Da);
        }, "x");
      }, "Ea");
      var Da = /* @__PURE__ */ __name(() => {
        for (var a2; a2 = xa(); ) {
          try {
            a2.h.call(a2.g);
          } catch (c2) {
            wa(c2);
          }
          var b = Ba;
          b.j(a2);
          100 > b.h && (b.h++, a2.next = b.g, b.g = a2);
        }
        y = false;
      }, "Da");
      function z() {
        this.s = this.s;
        this.C = this.C;
      }
      __name(z, "z");
      z.prototype.s = false;
      z.prototype.ma = function() {
        this.s || (this.s = true, this.N());
      };
      z.prototype.N = function() {
        if (this.C)
          for (; this.C.length; )
            this.C.shift()();
      };
      function A(a2, b) {
        this.type = a2;
        this.g = this.target = b;
        this.defaultPrevented = false;
      }
      __name(A, "A");
      A.prototype.h = function() {
        this.defaultPrevented = true;
      };
      var Fa = function() {
        if (!k.addEventListener || !Object.defineProperty)
          return false;
        var a2 = false, b = Object.defineProperty({}, "passive", { get: function() {
          a2 = true;
        } });
        try {
          const c2 = /* @__PURE__ */ __name(() => {
          }, "c");
          k.addEventListener("test", c2, b);
          k.removeEventListener("test", c2, b);
        } catch (c2) {
        }
        return a2;
      }();
      function C(a2, b) {
        A.call(this, a2 ? a2.type : "");
        this.relatedTarget = this.g = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
        this.state = null;
        this.pointerId = 0;
        this.pointerType = "";
        this.i = null;
        if (a2) {
          var c2 = this.type = a2.type, d = a2.changedTouches && a2.changedTouches.length ? a2.changedTouches[0] : null;
          this.target = a2.target || a2.srcElement;
          this.g = b;
          if (b = a2.relatedTarget) {
            if (pa) {
              a: {
                try {
                  oa(b.nodeName);
                  var e = true;
                  break a;
                } catch (f2) {
                }
                e = false;
              }
              e || (b = null);
            }
          } else
            "mouseover" == c2 ? b = a2.fromElement : "mouseout" == c2 && (b = a2.toElement);
          this.relatedTarget = b;
          d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a2.clientX ? a2.clientX : a2.pageX, this.clientY = void 0 !== a2.clientY ? a2.clientY : a2.pageY, this.screenX = a2.screenX || 0, this.screenY = a2.screenY || 0);
          this.button = a2.button;
          this.key = a2.key || "";
          this.ctrlKey = a2.ctrlKey;
          this.altKey = a2.altKey;
          this.shiftKey = a2.shiftKey;
          this.metaKey = a2.metaKey;
          this.pointerId = a2.pointerId || 0;
          this.pointerType = "string" === typeof a2.pointerType ? a2.pointerType : Ga[a2.pointerType] || "";
          this.state = a2.state;
          this.i = a2;
          a2.defaultPrevented && C.aa.h.call(this);
        }
      }
      __name(C, "C");
      r2(C, A);
      var Ga = { 2: "touch", 3: "pen", 4: "mouse" };
      C.prototype.h = function() {
        C.aa.h.call(this);
        var a2 = this.i;
        a2.preventDefault ? a2.preventDefault() : a2.returnValue = false;
      };
      var D = "closure_listenable_" + (1e6 * Math.random() | 0);
      var Ha = 0;
      function Ia(a2, b, c2, d, e) {
        this.listener = a2;
        this.proxy = null;
        this.src = b;
        this.type = c2;
        this.capture = !!d;
        this.ha = e;
        this.key = ++Ha;
        this.da = this.fa = false;
      }
      __name(Ia, "Ia");
      function Ja(a2) {
        a2.da = true;
        a2.listener = null;
        a2.proxy = null;
        a2.src = null;
        a2.ha = null;
      }
      __name(Ja, "Ja");
      ;
      function Ka(a2) {
        this.src = a2;
        this.g = {};
        this.h = 0;
      }
      __name(Ka, "Ka");
      Ka.prototype.add = function(a2, b, c2, d, e) {
        var f2 = a2.toString();
        a2 = this.g[f2];
        a2 || (a2 = this.g[f2] = [], this.h++);
        var g2 = La(a2, b, d, e);
        -1 < g2 ? (b = a2[g2], c2 || (b.fa = false)) : (b = new Ia(b, this.src, f2, !!d, e), b.fa = c2, a2.push(b));
        return b;
      };
      function Ma(a2, b) {
        var c2 = b.type;
        if (c2 in a2.g) {
          var d = a2.g[c2], e = Array.prototype.indexOf.call(d, b, void 0), f2;
          (f2 = 0 <= e) && Array.prototype.splice.call(d, e, 1);
          f2 && (Ja(b), 0 == a2.g[c2].length && (delete a2.g[c2], a2.h--));
        }
      }
      __name(Ma, "Ma");
      function La(a2, b, c2, d) {
        for (var e = 0; e < a2.length; ++e) {
          var f2 = a2[e];
          if (!f2.da && f2.listener == b && f2.capture == !!c2 && f2.ha == d)
            return e;
        }
        return -1;
      }
      __name(La, "La");
      ;
      var Na = "closure_lm_" + (1e6 * Math.random() | 0), Oa = {}, Pa = 0;
      function Qa(a2, b, c2, d, e) {
        if (d && d.once)
          return Ra(a2, b, c2, d, e);
        if (Array.isArray(b)) {
          for (var f2 = 0; f2 < b.length; f2++)
            Qa(a2, b[f2], c2, d, e);
          return null;
        }
        c2 = Sa(c2);
        return a2 && a2[D] ? a2.K(b, c2, n2(d) ? !!d.capture : !!d, e) : Ta(a2, b, c2, false, d, e);
      }
      __name(Qa, "Qa");
      function Ta(a2, b, c2, d, e, f2) {
        if (!b)
          throw Error("Invalid event type");
        var g2 = n2(e) ? !!e.capture : !!e, m = Ua(a2);
        m || (a2[Na] = m = new Ka(a2));
        c2 = m.add(b, c2, d, g2, f2);
        if (c2.proxy)
          return c2;
        d = Va();
        c2.proxy = d;
        d.src = a2;
        d.listener = c2;
        if (a2.addEventListener)
          Fa || (e = g2), void 0 === e && (e = false), a2.addEventListener(b.toString(), d, e);
        else if (a2.attachEvent)
          a2.attachEvent(Wa(b.toString()), d);
        else if (a2.addListener && a2.removeListener)
          a2.addListener(d);
        else
          throw Error("addEventListener and attachEvent are unavailable.");
        Pa++;
        return c2;
      }
      __name(Ta, "Ta");
      function Va() {
        function a2(c2) {
          return b.call(a2.src, a2.listener, c2);
        }
        __name(a2, "a");
        const b = Xa;
        return a2;
      }
      __name(Va, "Va");
      function Ra(a2, b, c2, d, e) {
        if (Array.isArray(b)) {
          for (var f2 = 0; f2 < b.length; f2++)
            Ra(a2, b[f2], c2, d, e);
          return null;
        }
        c2 = Sa(c2);
        return a2 && a2[D] ? a2.L(b, c2, n2(d) ? !!d.capture : !!d, e) : Ta(a2, b, c2, true, d, e);
      }
      __name(Ra, "Ra");
      function Ya(a2, b, c2, d, e) {
        if (Array.isArray(b))
          for (var f2 = 0; f2 < b.length; f2++)
            Ya(a2, b[f2], c2, d, e);
        else
          (d = n2(d) ? !!d.capture : !!d, c2 = Sa(c2), a2 && a2[D]) ? (a2 = a2.i, b = String(b).toString(), b in a2.g && (f2 = a2.g[b], c2 = La(f2, c2, d, e), -1 < c2 && (Ja(f2[c2]), Array.prototype.splice.call(f2, c2, 1), 0 == f2.length && (delete a2.g[b], a2.h--)))) : a2 && (a2 = Ua(a2)) && (b = a2.g[b.toString()], a2 = -1, b && (a2 = La(b, c2, d, e)), (c2 = -1 < a2 ? b[a2] : null) && Za(c2));
      }
      __name(Ya, "Ya");
      function Za(a2) {
        if ("number" !== typeof a2 && a2 && !a2.da) {
          var b = a2.src;
          if (b && b[D])
            Ma(b.i, a2);
          else {
            var c2 = a2.type, d = a2.proxy;
            b.removeEventListener ? b.removeEventListener(c2, d, a2.capture) : b.detachEvent ? b.detachEvent(Wa(c2), d) : b.addListener && b.removeListener && b.removeListener(d);
            Pa--;
            (c2 = Ua(b)) ? (Ma(c2, a2), 0 == c2.h && (c2.src = null, b[Na] = null)) : Ja(a2);
          }
        }
      }
      __name(Za, "Za");
      function Wa(a2) {
        return a2 in Oa ? Oa[a2] : Oa[a2] = "on" + a2;
      }
      __name(Wa, "Wa");
      function Xa(a2, b) {
        if (a2.da)
          a2 = true;
        else {
          b = new C(b, this);
          var c2 = a2.listener, d = a2.ha || a2.src;
          a2.fa && Za(a2);
          a2 = c2.call(d, b);
        }
        return a2;
      }
      __name(Xa, "Xa");
      function Ua(a2) {
        a2 = a2[Na];
        return a2 instanceof Ka ? a2 : null;
      }
      __name(Ua, "Ua");
      var $a = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
      function Sa(a2) {
        if ("function" === typeof a2)
          return a2;
        a2[$a] || (a2[$a] = function(b) {
          return a2.handleEvent(b);
        });
        return a2[$a];
      }
      __name(Sa, "Sa");
      ;
      function E() {
        z.call(this);
        this.i = new Ka(this);
        this.M = this;
        this.F = null;
      }
      __name(E, "E");
      r2(E, z);
      E.prototype[D] = true;
      E.prototype.removeEventListener = function(a2, b, c2, d) {
        Ya(this, a2, b, c2, d);
      };
      function F(a2, b) {
        var c2, d = a2.F;
        if (d)
          for (c2 = []; d; d = d.F)
            c2.push(d);
        a2 = a2.M;
        d = b.type || b;
        if ("string" === typeof b)
          b = new A(b, a2);
        else if (b instanceof A)
          b.target = b.target || a2;
        else {
          var e = b;
          b = new A(d, a2);
          ua(b, e);
        }
        e = true;
        if (c2)
          for (var f2 = c2.length - 1; 0 <= f2; f2--) {
            var g2 = b.g = c2[f2];
            e = ab(g2, d, true, b) && e;
          }
        g2 = b.g = a2;
        e = ab(g2, d, true, b) && e;
        e = ab(g2, d, false, b) && e;
        if (c2)
          for (f2 = 0; f2 < c2.length; f2++)
            g2 = b.g = c2[f2], e = ab(g2, d, false, b) && e;
      }
      __name(F, "F");
      E.prototype.N = function() {
        E.aa.N.call(this);
        if (this.i) {
          var a2 = this.i, b = 0, c2;
          for (c2 in a2.g) {
            for (var d = a2.g[c2], e = 0; e < d.length; e++)
              ++b, Ja(d[e]);
            delete a2.g[c2];
            a2.h--;
          }
        }
        this.F = null;
      };
      E.prototype.K = function(a2, b, c2, d) {
        return this.i.add(String(a2), b, false, c2, d);
      };
      E.prototype.L = function(a2, b, c2, d) {
        return this.i.add(String(a2), b, true, c2, d);
      };
      function ab(a2, b, c2, d) {
        b = a2.i.g[String(b)];
        if (!b)
          return true;
        b = b.concat();
        for (var e = true, f2 = 0; f2 < b.length; ++f2) {
          var g2 = b[f2];
          if (g2 && !g2.da && g2.capture == c2) {
            var m = g2.listener, q = g2.ha || g2.src;
            g2.fa && Ma(a2.i, g2);
            e = false !== m.call(q, d) && e;
          }
        }
        return e && !d.defaultPrevented;
      }
      __name(ab, "ab");
      ;
      function bb(a2, b, c2) {
        if ("function" === typeof a2)
          c2 && (a2 = p2(a2, c2));
        else if (a2 && "function" == typeof a2.handleEvent)
          a2 = p2(a2.handleEvent, a2);
        else
          throw Error("Invalid listener argument");
        return 2147483647 < Number(b) ? -1 : k.setTimeout(a2, b || 0);
      }
      __name(bb, "bb");
      ;
      function cb(a2) {
        a2.g = bb(() => {
          a2.g = null;
          a2.i && (a2.i = false, cb(a2));
        }, a2.l);
        const b = a2.h;
        a2.h = null;
        a2.m.apply(null, b);
      }
      __name(cb, "cb");
      class eb extends z {
        constructor(a2, b) {
          super();
          this.m = a2;
          this.l = b;
          this.h = null;
          this.i = false;
          this.g = null;
        }
        j(a2) {
          this.h = arguments;
          this.g ? this.i = true : cb(this);
        }
        N() {
          super.N();
          this.g && (k.clearTimeout(this.g), this.g = null, this.i = false, this.h = null);
        }
      }
      __name(eb, "eb");
      ;
      function G(a2) {
        z.call(this);
        this.h = a2;
        this.g = {};
      }
      __name(G, "G");
      r2(G, z);
      var fb = [];
      function gb(a2) {
        qa(a2.g, function(b, c2) {
          this.g.hasOwnProperty(c2) && Za(b);
        }, a2);
        a2.g = {};
      }
      __name(gb, "gb");
      G.prototype.N = function() {
        G.aa.N.call(this);
        gb(this);
      };
      G.prototype.handleEvent = function() {
        throw Error("EventHandler.handleEvent not implemented");
      };
      var hb = k.JSON.stringify;
      var ib = k.JSON.parse;
      var jb = /* @__PURE__ */ __name(class {
        stringify(a2) {
          return k.JSON.stringify(a2, void 0);
        }
        parse(a2) {
          return k.JSON.parse(a2, void 0);
        }
      }, "jb");
      function kb() {
      }
      __name(kb, "kb");
      kb.prototype.h = null;
      function lb(a2) {
        return a2.h || (a2.h = a2.i());
      }
      __name(lb, "lb");
      ;
      function mb() {
      }
      __name(mb, "mb");
      var H = { OPEN: "a", kb: "b", Ja: "c", wb: "d" };
      function nb() {
        A.call(this, "d");
      }
      __name(nb, "nb");
      r2(nb, A);
      function ob() {
        A.call(this, "c");
      }
      __name(ob, "ob");
      r2(ob, A);
      var I = {}, pb = null;
      function qb() {
        return pb = pb || new E();
      }
      __name(qb, "qb");
      I.La = "serverreachability";
      function rb(a2) {
        A.call(this, I.La, a2);
      }
      __name(rb, "rb");
      r2(rb, A);
      function J(a2) {
        const b = qb();
        F(b, new rb(b, a2));
      }
      __name(J, "J");
      I.STAT_EVENT = "statevent";
      function sb(a2, b) {
        A.call(this, I.STAT_EVENT, a2);
        this.stat = b;
      }
      __name(sb, "sb");
      r2(sb, A);
      function K(a2) {
        const b = qb();
        F(b, new sb(b, a2));
      }
      __name(K, "K");
      I.Ma = "timingevent";
      function tb(a2, b) {
        A.call(this, I.Ma, a2);
        this.size = b;
      }
      __name(tb, "tb");
      r2(tb, A);
      function ub(a2, b) {
        if ("function" !== typeof a2)
          throw Error("Fn must not be null and must be a function");
        return k.setTimeout(function() {
          a2();
        }, b);
      }
      __name(ub, "ub");
      ;
      function vb() {
        this.g = true;
      }
      __name(vb, "vb");
      vb.prototype.xa = function() {
        this.g = false;
      };
      function wb(a2, b, c2, d, e, f2) {
        a2.info(function() {
          if (a2.g)
            if (f2) {
              var g2 = "";
              for (var m = f2.split("&"), q = 0; q < m.length; q++) {
                var l = m[q].split("=");
                if (1 < l.length) {
                  var v = l[0];
                  l = l[1];
                  var w = v.split("_");
                  g2 = 2 <= w.length && "type" == w[1] ? g2 + (v + "=" + l + "&") : g2 + (v + "=redacted&");
                }
              }
            } else
              g2 = null;
          else
            g2 = f2;
          return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c2 + "\n" + g2;
        });
      }
      __name(wb, "wb");
      function xb(a2, b, c2, d, e, f2, g2) {
        a2.info(function() {
          return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c2 + "\n" + f2 + " " + g2;
        });
      }
      __name(xb, "xb");
      function L(a2, b, c2, d) {
        a2.info(function() {
          return "XMLHTTP TEXT (" + b + "): " + yb(a2, c2) + (d ? " " + d : "");
        });
      }
      __name(L, "L");
      function zb(a2, b) {
        a2.info(function() {
          return "TIMEOUT: " + b;
        });
      }
      __name(zb, "zb");
      vb.prototype.info = function() {
      };
      function yb(a2, b) {
        if (!a2.g)
          return b;
        if (!b)
          return null;
        try {
          var c2 = JSON.parse(b);
          if (c2) {
            for (a2 = 0; a2 < c2.length; a2++)
              if (Array.isArray(c2[a2])) {
                var d = c2[a2];
                if (!(2 > d.length)) {
                  var e = d[1];
                  if (Array.isArray(e) && !(1 > e.length)) {
                    var f2 = e[0];
                    if ("noop" != f2 && "stop" != f2 && "close" != f2)
                      for (var g2 = 1; g2 < e.length; g2++)
                        e[g2] = "";
                  }
                }
              }
          }
          return hb(c2);
        } catch (m) {
          return b;
        }
      }
      __name(yb, "yb");
      ;
      var Ab = { NO_ERROR: 0, gb: 1, tb: 2, sb: 3, nb: 4, rb: 5, ub: 6, Ia: 7, TIMEOUT: 8, xb: 9 };
      var Bb = { lb: "complete", Hb: "success", Ja: "error", Ia: "abort", zb: "ready", Ab: "readystatechange", TIMEOUT: "timeout", vb: "incrementaldata", yb: "progress", ob: "downloadprogress", Pb: "uploadprogress" };
      var Cb;
      function Db() {
      }
      __name(Db, "Db");
      r2(Db, kb);
      Db.prototype.g = function() {
        return new XMLHttpRequest();
      };
      Db.prototype.i = function() {
        return {};
      };
      Cb = new Db();
      function M(a2, b, c2, d) {
        this.j = a2;
        this.i = b;
        this.l = c2;
        this.R = d || 1;
        this.U = new G(this);
        this.I = 45e3;
        this.H = null;
        this.o = false;
        this.m = this.A = this.v = this.L = this.F = this.S = this.B = null;
        this.D = [];
        this.g = null;
        this.C = 0;
        this.s = this.u = null;
        this.X = -1;
        this.J = false;
        this.O = 0;
        this.M = null;
        this.W = this.K = this.T = this.P = false;
        this.h = new Eb();
      }
      __name(M, "M");
      function Eb() {
        this.i = null;
        this.g = "";
        this.h = false;
      }
      __name(Eb, "Eb");
      var Fb = {}, Gb = {};
      function Hb(a2, b, c2) {
        a2.L = 1;
        a2.v = Ib(N(b));
        a2.m = c2;
        a2.P = true;
        Jb(a2, null);
      }
      __name(Hb, "Hb");
      function Jb(a2, b) {
        a2.F = Date.now();
        Kb(a2);
        a2.A = N(a2.v);
        var c2 = a2.A, d = a2.R;
        Array.isArray(d) || (d = [String(d)]);
        Lb(c2.i, "t", d);
        a2.C = 0;
        c2 = a2.j.J;
        a2.h = new Eb();
        a2.g = Mb(a2.j, c2 ? b : null, !a2.m);
        0 < a2.O && (a2.M = new eb(p2(a2.Y, a2, a2.g), a2.O));
        b = a2.U;
        c2 = a2.g;
        d = a2.ca;
        var e = "readystatechange";
        Array.isArray(e) || (e && (fb[0] = e.toString()), e = fb);
        for (var f2 = 0; f2 < e.length; f2++) {
          var g2 = Qa(c2, e[f2], d || b.handleEvent, false, b.h || b);
          if (!g2)
            break;
          b.g[g2.key] = g2;
        }
        b = a2.H ? sa(a2.H) : {};
        a2.m ? (a2.u || (a2.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a2.g.ea(
          a2.A,
          a2.u,
          a2.m,
          b
        )) : (a2.u = "GET", a2.g.ea(a2.A, a2.u, null, b));
        J(1);
        wb(a2.i, a2.u, a2.A, a2.l, a2.R, a2.m);
      }
      __name(Jb, "Jb");
      M.prototype.ca = function(a2) {
        a2 = a2.target;
        const b = this.M;
        b && 3 == P(a2) ? b.j() : this.Y(a2);
      };
      M.prototype.Y = function(a2) {
        try {
          if (a2 == this.g)
            a: {
              const w = P(this.g);
              var b = this.g.Ba();
              const O = this.g.Z();
              if (!(3 > w) && (3 != w || this.g && (this.h.h || this.g.oa() || Nb(this.g)))) {
                this.J || 4 != w || 7 == b || (8 == b || 0 >= O ? J(3) : J(2));
                Ob(this);
                var c2 = this.g.Z();
                this.X = c2;
                b:
                  if (Pb(this)) {
                    var d = Nb(this.g);
                    a2 = "";
                    var e = d.length, f2 = 4 == P(this.g);
                    if (!this.h.i) {
                      if ("undefined" === typeof TextDecoder) {
                        Q(this);
                        Qb(this);
                        var g2 = "";
                        break b;
                      }
                      this.h.i = new k.TextDecoder();
                    }
                    for (b = 0; b < e; b++)
                      this.h.h = true, a2 += this.h.i.decode(d[b], { stream: !(f2 && b == e - 1) });
                    d.length = 0;
                    this.h.g += a2;
                    this.C = 0;
                    g2 = this.h.g;
                  } else
                    g2 = this.g.oa();
                this.o = 200 == c2;
                xb(this.i, this.u, this.A, this.l, this.R, w, c2);
                if (this.o) {
                  if (this.T && !this.K) {
                    b: {
                      if (this.g) {
                        var m, q = this.g;
                        if ((m = q.g ? q.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !t2(m)) {
                          var l = m;
                          break b;
                        }
                      }
                      l = null;
                    }
                    if (c2 = l)
                      L(this.i, this.l, c2, "Initial handshake response via X-HTTP-Initial-Response"), this.K = true, Rb(this, c2);
                    else {
                      this.o = false;
                      this.s = 3;
                      K(12);
                      Q(this);
                      Qb(this);
                      break a;
                    }
                  }
                  if (this.P) {
                    c2 = true;
                    let B;
                    for (; !this.J && this.C < g2.length; )
                      if (B = Sb(this, g2), B == Gb) {
                        4 == w && (this.s = 4, K(14), c2 = false);
                        L(this.i, this.l, null, "[Incomplete Response]");
                        break;
                      } else if (B == Fb) {
                        this.s = 4;
                        K(15);
                        L(this.i, this.l, g2, "[Invalid Chunk]");
                        c2 = false;
                        break;
                      } else
                        L(this.i, this.l, B, null), Rb(this, B);
                    Pb(this) && 0 != this.C && (this.h.g = this.h.g.slice(this.C), this.C = 0);
                    4 != w || 0 != g2.length || this.h.h || (this.s = 1, K(16), c2 = false);
                    this.o = this.o && c2;
                    if (!c2)
                      L(this.i, this.l, g2, "[Invalid Chunked Response]"), Q(this), Qb(this);
                    else if (0 < g2.length && !this.W) {
                      this.W = true;
                      var v = this.j;
                      v.g == this && v.ba && !v.M && (v.j.info("Great, no buffering proxy detected. Bytes received: " + g2.length), Tb(v), v.M = true, K(11));
                    }
                  } else
                    L(this.i, this.l, g2, null), Rb(this, g2);
                  4 == w && Q(this);
                  this.o && !this.J && (4 == w ? Ub(this.j, this) : (this.o = false, Kb(this)));
                } else
                  Vb(this.g), 400 == c2 && 0 < g2.indexOf("Unknown SID") ? (this.s = 3, K(12)) : (this.s = 0, K(13)), Q(this), Qb(this);
              }
            }
        } catch (w) {
        } finally {
        }
      };
      function Pb(a2) {
        return a2.g ? "GET" == a2.u && 2 != a2.L && a2.j.Ca : false;
      }
      __name(Pb, "Pb");
      function Sb(a2, b) {
        var c2 = a2.C, d = b.indexOf("\n", c2);
        if (-1 == d)
          return Gb;
        c2 = Number(b.substring(c2, d));
        if (isNaN(c2))
          return Fb;
        d += 1;
        if (d + c2 > b.length)
          return Gb;
        b = b.slice(d, d + c2);
        a2.C = d + c2;
        return b;
      }
      __name(Sb, "Sb");
      M.prototype.cancel = function() {
        this.J = true;
        Q(this);
      };
      function Kb(a2) {
        a2.S = Date.now() + a2.I;
        Wb(a2, a2.I);
      }
      __name(Kb, "Kb");
      function Wb(a2, b) {
        if (null != a2.B)
          throw Error("WatchDog timer not null");
        a2.B = ub(p2(a2.ba, a2), b);
      }
      __name(Wb, "Wb");
      function Ob(a2) {
        a2.B && (k.clearTimeout(a2.B), a2.B = null);
      }
      __name(Ob, "Ob");
      M.prototype.ba = function() {
        this.B = null;
        const a2 = Date.now();
        0 <= a2 - this.S ? (zb(this.i, this.A), 2 != this.L && (J(3), K(17)), Q(this), this.s = 2, Qb(this)) : Wb(this, this.S - a2);
      };
      function Qb(a2) {
        0 == a2.j.G || a2.J || Ub(a2.j, a2);
      }
      __name(Qb, "Qb");
      function Q(a2) {
        Ob(a2);
        var b = a2.M;
        b && "function" == typeof b.ma && b.ma();
        a2.M = null;
        gb(a2.U);
        a2.g && (b = a2.g, a2.g = null, b.abort(), b.ma());
      }
      __name(Q, "Q");
      function Rb(a2, b) {
        try {
          var c2 = a2.j;
          if (0 != c2.G && (c2.g == a2 || Xb(c2.h, a2))) {
            if (!a2.K && Xb(c2.h, a2) && 3 == c2.G) {
              try {
                var d = c2.Da.g.parse(b);
              } catch (l) {
                d = null;
              }
              if (Array.isArray(d) && 3 == d.length) {
                var e = d;
                if (0 == e[0])
                  a: {
                    if (!c2.u) {
                      if (c2.g)
                        if (c2.g.F + 3e3 < a2.F)
                          Yb(c2), Zb(c2);
                        else
                          break a;
                      $b(c2);
                      K(18);
                    }
                  }
                else
                  c2.za = e[1], 0 < c2.za - c2.T && 37500 > e[2] && c2.F && 0 == c2.v && !c2.C && (c2.C = ub(p2(c2.Za, c2), 6e3));
                if (1 >= ac(c2.h) && c2.ca) {
                  try {
                    c2.ca();
                  } catch (l) {
                  }
                  c2.ca = void 0;
                }
              } else
                R(c2, 11);
            } else if ((a2.K || c2.g == a2) && Yb(c2), !t2(b))
              for (e = c2.Da.g.parse(b), b = 0; b < e.length; b++) {
                let l = e[b];
                c2.T = l[0];
                l = l[1];
                if (2 == c2.G)
                  if ("c" == l[0]) {
                    c2.K = l[1];
                    c2.ia = l[2];
                    const v = l[3];
                    null != v && (c2.la = v, c2.j.info("VER=" + c2.la));
                    const w = l[4];
                    null != w && (c2.Aa = w, c2.j.info("SVER=" + c2.Aa));
                    const O = l[5];
                    null != O && "number" === typeof O && 0 < O && (d = 1.5 * O, c2.L = d, c2.j.info("backChannelRequestTimeoutMs_=" + d));
                    d = c2;
                    const B = a2.g;
                    if (B) {
                      const ya = B.g ? B.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                      if (ya) {
                        var f2 = d.h;
                        f2.g || -1 == ya.indexOf("spdy") && -1 == ya.indexOf("quic") && -1 == ya.indexOf("h2") || (f2.j = f2.l, f2.g = /* @__PURE__ */ new Set(), f2.h && (bc(f2, f2.h), f2.h = null));
                      }
                      if (d.D) {
                        const db = B.g ? B.g.getResponseHeader("X-HTTP-Session-Id") : null;
                        db && (d.ya = db, S(d.I, d.D, db));
                      }
                    }
                    c2.G = 3;
                    c2.l && c2.l.ua();
                    c2.ba && (c2.R = Date.now() - a2.F, c2.j.info("Handshake RTT: " + c2.R + "ms"));
                    d = c2;
                    var g2 = a2;
                    d.qa = cc(d, d.J ? d.ia : null, d.W);
                    if (g2.K) {
                      dc(d.h, g2);
                      var m = g2, q = d.L;
                      q && (m.I = q);
                      m.B && (Ob(m), Kb(m));
                      d.g = g2;
                    } else
                      ec(d);
                    0 < c2.i.length && fc(c2);
                  } else
                    "stop" != l[0] && "close" != l[0] || R(c2, 7);
                else
                  3 == c2.G && ("stop" == l[0] || "close" == l[0] ? "stop" == l[0] ? R(c2, 7) : gc(c2) : "noop" != l[0] && c2.l && c2.l.ta(l), c2.v = 0);
              }
          }
          J(4);
        } catch (l) {
        }
      }
      __name(Rb, "Rb");
      ;
      var hc = /* @__PURE__ */ __name(class {
        constructor(a2, b) {
          this.g = a2;
          this.map = b;
        }
      }, "hc");
      function ic(a2) {
        this.l = a2 || 10;
        k.PerformanceNavigationTiming ? (a2 = k.performance.getEntriesByType("navigation"), a2 = 0 < a2.length && ("hq" == a2[0].nextHopProtocol || "h2" == a2[0].nextHopProtocol)) : a2 = !!(k.chrome && k.chrome.loadTimes && k.chrome.loadTimes() && k.chrome.loadTimes().wasFetchedViaSpdy);
        this.j = a2 ? this.l : 1;
        this.g = null;
        1 < this.j && (this.g = /* @__PURE__ */ new Set());
        this.h = null;
        this.i = [];
      }
      __name(ic, "ic");
      function jc(a2) {
        return a2.h ? true : a2.g ? a2.g.size >= a2.j : false;
      }
      __name(jc, "jc");
      function ac(a2) {
        return a2.h ? 1 : a2.g ? a2.g.size : 0;
      }
      __name(ac, "ac");
      function Xb(a2, b) {
        return a2.h ? a2.h == b : a2.g ? a2.g.has(b) : false;
      }
      __name(Xb, "Xb");
      function bc(a2, b) {
        a2.g ? a2.g.add(b) : a2.h = b;
      }
      __name(bc, "bc");
      function dc(a2, b) {
        a2.h && a2.h == b ? a2.h = null : a2.g && a2.g.has(b) && a2.g.delete(b);
      }
      __name(dc, "dc");
      ic.prototype.cancel = function() {
        this.i = kc(this);
        if (this.h)
          this.h.cancel(), this.h = null;
        else if (this.g && 0 !== this.g.size) {
          for (const a2 of this.g.values())
            a2.cancel();
          this.g.clear();
        }
      };
      function kc(a2) {
        if (null != a2.h)
          return a2.i.concat(a2.h.D);
        if (null != a2.g && 0 !== a2.g.size) {
          let b = a2.i;
          for (const c2 of a2.g.values())
            b = b.concat(c2.D);
          return b;
        }
        return la(a2.i);
      }
      __name(kc, "kc");
      ;
      function lc(a2) {
        if (a2.V && "function" == typeof a2.V)
          return a2.V();
        if ("undefined" !== typeof Map && a2 instanceof Map || "undefined" !== typeof Set && a2 instanceof Set)
          return Array.from(a2.values());
        if ("string" === typeof a2)
          return a2.split("");
        if (ha(a2)) {
          for (var b = [], c2 = a2.length, d = 0; d < c2; d++)
            b.push(a2[d]);
          return b;
        }
        b = [];
        c2 = 0;
        for (d in a2)
          b[c2++] = a2[d];
        return b;
      }
      __name(lc, "lc");
      function mc(a2) {
        if (a2.na && "function" == typeof a2.na)
          return a2.na();
        if (!a2.V || "function" != typeof a2.V) {
          if ("undefined" !== typeof Map && a2 instanceof Map)
            return Array.from(a2.keys());
          if (!("undefined" !== typeof Set && a2 instanceof Set)) {
            if (ha(a2) || "string" === typeof a2) {
              var b = [];
              a2 = a2.length;
              for (var c2 = 0; c2 < a2; c2++)
                b.push(c2);
              return b;
            }
            b = [];
            c2 = 0;
            for (const d in a2)
              b[c2++] = d;
            return b;
          }
        }
      }
      __name(mc, "mc");
      function nc(a2, b) {
        if (a2.forEach && "function" == typeof a2.forEach)
          a2.forEach(b, void 0);
        else if (ha(a2) || "string" === typeof a2)
          Array.prototype.forEach.call(a2, b, void 0);
        else
          for (var c2 = mc(a2), d = lc(a2), e = d.length, f2 = 0; f2 < e; f2++)
            b.call(void 0, d[f2], c2 && c2[f2], a2);
      }
      __name(nc, "nc");
      ;
      var oc = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");
      function pc(a2, b) {
        if (a2) {
          a2 = a2.split("&");
          for (var c2 = 0; c2 < a2.length; c2++) {
            var d = a2[c2].indexOf("="), e = null;
            if (0 <= d) {
              var f2 = a2[c2].substring(0, d);
              e = a2[c2].substring(d + 1);
            } else
              f2 = a2[c2];
            b(f2, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
          }
        }
      }
      __name(pc, "pc");
      ;
      function T(a2) {
        this.g = this.o = this.j = "";
        this.s = null;
        this.m = this.l = "";
        this.h = false;
        if (a2 instanceof T) {
          this.h = a2.h;
          qc(this, a2.j);
          this.o = a2.o;
          this.g = a2.g;
          rc(this, a2.s);
          this.l = a2.l;
          var b = a2.i;
          var c2 = new sc();
          c2.i = b.i;
          b.g && (c2.g = new Map(b.g), c2.h = b.h);
          tc(this, c2);
          this.m = a2.m;
        } else
          a2 && (b = String(a2).match(oc)) ? (this.h = false, qc(this, b[1] || "", true), this.o = uc(b[2] || ""), this.g = uc(b[3] || "", true), rc(this, b[4]), this.l = uc(b[5] || "", true), tc(this, b[6] || "", true), this.m = uc(b[7] || "")) : (this.h = false, this.i = new sc(null, this.h));
      }
      __name(T, "T");
      T.prototype.toString = function() {
        var a2 = [], b = this.j;
        b && a2.push(vc(b, wc, true), ":");
        var c2 = this.g;
        if (c2 || "file" == b)
          a2.push("//"), (b = this.o) && a2.push(vc(b, wc, true), "@"), a2.push(encodeURIComponent(String(c2)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c2 = this.s, null != c2 && a2.push(":", String(c2));
        if (c2 = this.l)
          this.g && "/" != c2.charAt(0) && a2.push("/"), a2.push(vc(c2, "/" == c2.charAt(0) ? xc : yc, true));
        (c2 = this.i.toString()) && a2.push("?", c2);
        (c2 = this.m) && a2.push("#", vc(c2, zc));
        return a2.join("");
      };
      function N(a2) {
        return new T(a2);
      }
      __name(N, "N");
      function qc(a2, b, c2) {
        a2.j = c2 ? uc(b, true) : b;
        a2.j && (a2.j = a2.j.replace(/:$/, ""));
      }
      __name(qc, "qc");
      function rc(a2, b) {
        if (b) {
          b = Number(b);
          if (isNaN(b) || 0 > b)
            throw Error("Bad port number " + b);
          a2.s = b;
        } else
          a2.s = null;
      }
      __name(rc, "rc");
      function tc(a2, b, c2) {
        b instanceof sc ? (a2.i = b, Ac(a2.i, a2.h)) : (c2 || (b = vc(b, Bc)), a2.i = new sc(b, a2.h));
      }
      __name(tc, "tc");
      function S(a2, b, c2) {
        a2.i.set(b, c2);
      }
      __name(S, "S");
      function Ib(a2) {
        S(a2, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
        return a2;
      }
      __name(Ib, "Ib");
      function uc(a2, b) {
        return a2 ? b ? decodeURI(a2.replace(/%25/g, "%2525")) : decodeURIComponent(a2) : "";
      }
      __name(uc, "uc");
      function vc(a2, b, c2) {
        return "string" === typeof a2 ? (a2 = encodeURI(a2).replace(b, Cc), c2 && (a2 = a2.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a2) : null;
      }
      __name(vc, "vc");
      function Cc(a2) {
        a2 = a2.charCodeAt(0);
        return "%" + (a2 >> 4 & 15).toString(16) + (a2 & 15).toString(16);
      }
      __name(Cc, "Cc");
      var wc = /[#\/\?@]/g, yc = /[#\?:]/g, xc = /[#\?]/g, Bc = /[#\?@]/g, zc = /#/g;
      function sc(a2, b) {
        this.h = this.g = null;
        this.i = a2 || null;
        this.j = !!b;
      }
      __name(sc, "sc");
      function U(a2) {
        a2.g || (a2.g = /* @__PURE__ */ new Map(), a2.h = 0, a2.i && pc(a2.i, function(b, c2) {
          a2.add(decodeURIComponent(b.replace(/\+/g, " ")), c2);
        }));
      }
      __name(U, "U");
      h2 = sc.prototype;
      h2.add = function(a2, b) {
        U(this);
        this.i = null;
        a2 = V(this, a2);
        var c2 = this.g.get(a2);
        c2 || this.g.set(a2, c2 = []);
        c2.push(b);
        this.h += 1;
        return this;
      };
      function Dc(a2, b) {
        U(a2);
        b = V(a2, b);
        a2.g.has(b) && (a2.i = null, a2.h -= a2.g.get(b).length, a2.g.delete(b));
      }
      __name(Dc, "Dc");
      function Ec(a2, b) {
        U(a2);
        b = V(a2, b);
        return a2.g.has(b);
      }
      __name(Ec, "Ec");
      h2.forEach = function(a2, b) {
        U(this);
        this.g.forEach(function(c2, d) {
          c2.forEach(function(e) {
            a2.call(b, e, d, this);
          }, this);
        }, this);
      };
      h2.na = function() {
        U(this);
        const a2 = Array.from(this.g.values()), b = Array.from(this.g.keys()), c2 = [];
        for (let d = 0; d < b.length; d++) {
          const e = a2[d];
          for (let f2 = 0; f2 < e.length; f2++)
            c2.push(b[d]);
        }
        return c2;
      };
      h2.V = function(a2) {
        U(this);
        let b = [];
        if ("string" === typeof a2)
          Ec(this, a2) && (b = b.concat(this.g.get(V(this, a2))));
        else {
          a2 = Array.from(this.g.values());
          for (let c2 = 0; c2 < a2.length; c2++)
            b = b.concat(a2[c2]);
        }
        return b;
      };
      h2.set = function(a2, b) {
        U(this);
        this.i = null;
        a2 = V(this, a2);
        Ec(this, a2) && (this.h -= this.g.get(a2).length);
        this.g.set(a2, [b]);
        this.h += 1;
        return this;
      };
      h2.get = function(a2, b) {
        if (!a2)
          return b;
        a2 = this.V(a2);
        return 0 < a2.length ? String(a2[0]) : b;
      };
      function Lb(a2, b, c2) {
        Dc(a2, b);
        0 < c2.length && (a2.i = null, a2.g.set(V(a2, b), la(c2)), a2.h += c2.length);
      }
      __name(Lb, "Lb");
      h2.toString = function() {
        if (this.i)
          return this.i;
        if (!this.g)
          return "";
        const a2 = [], b = Array.from(this.g.keys());
        for (var c2 = 0; c2 < b.length; c2++) {
          var d = b[c2];
          const f2 = encodeURIComponent(String(d)), g2 = this.V(d);
          for (d = 0; d < g2.length; d++) {
            var e = f2;
            "" !== g2[d] && (e += "=" + encodeURIComponent(String(g2[d])));
            a2.push(e);
          }
        }
        return this.i = a2.join("&");
      };
      function V(a2, b) {
        b = String(b);
        a2.j && (b = b.toLowerCase());
        return b;
      }
      __name(V, "V");
      function Ac(a2, b) {
        b && !a2.j && (U(a2), a2.i = null, a2.g.forEach(function(c2, d) {
          var e = d.toLowerCase();
          d != e && (Dc(this, d), Lb(this, e, c2));
        }, a2));
        a2.j = b;
      }
      __name(Ac, "Ac");
      ;
      function Fc(a2, b) {
        const c2 = new vb();
        if (k.Image) {
          const d = new Image();
          d.onload = ka(W, c2, "TestLoadImage: loaded", true, b, d);
          d.onerror = ka(W, c2, "TestLoadImage: error", false, b, d);
          d.onabort = ka(W, c2, "TestLoadImage: abort", false, b, d);
          d.ontimeout = ka(W, c2, "TestLoadImage: timeout", false, b, d);
          k.setTimeout(function() {
            if (d.ontimeout)
              d.ontimeout();
          }, 1e4);
          d.src = a2;
        } else
          b(false);
      }
      __name(Fc, "Fc");
      function Gc(a2, b) {
        const c2 = new vb(), d = new AbortController(), e = setTimeout(() => {
          d.abort();
          W(c2, "TestPingServer: timeout", false, b);
        }, 1e4);
        fetch(a2, { signal: d.signal }).then((f2) => {
          clearTimeout(e);
          f2.ok ? W(c2, "TestPingServer: ok", true, b) : W(c2, "TestPingServer: server error", false, b);
        }).catch(() => {
          clearTimeout(e);
          W(c2, "TestPingServer: error", false, b);
        });
      }
      __name(Gc, "Gc");
      function W(a2, b, c2, d, e) {
        try {
          e && (e.onload = null, e.onerror = null, e.onabort = null, e.ontimeout = null), d(c2);
        } catch (f2) {
        }
      }
      __name(W, "W");
      ;
      function Hc() {
        this.g = new jb();
      }
      __name(Hc, "Hc");
      function Ic(a2, b, c2) {
        const d = c2 || "";
        try {
          nc(a2, function(e, f2) {
            let g2 = e;
            n2(e) && (g2 = hb(e));
            b.push(d + f2 + "=" + encodeURIComponent(g2));
          });
        } catch (e) {
          throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
        }
      }
      __name(Ic, "Ic");
      ;
      function Jc(a2) {
        this.l = a2.Ub || null;
        this.j = a2.eb || false;
      }
      __name(Jc, "Jc");
      r2(Jc, kb);
      Jc.prototype.g = function() {
        return new Kc(this.l, this.j);
      };
      Jc.prototype.i = function(a2) {
        return function() {
          return a2;
        };
      }({});
      function Kc(a2, b) {
        E.call(this);
        this.D = a2;
        this.o = b;
        this.m = void 0;
        this.status = this.readyState = 0;
        this.responseType = this.responseText = this.response = this.statusText = "";
        this.onreadystatechange = null;
        this.u = new Headers();
        this.h = null;
        this.B = "GET";
        this.A = "";
        this.g = false;
        this.v = this.j = this.l = null;
      }
      __name(Kc, "Kc");
      r2(Kc, E);
      h2 = Kc.prototype;
      h2.open = function(a2, b) {
        if (0 != this.readyState)
          throw this.abort(), Error("Error reopening a connection");
        this.B = a2;
        this.A = b;
        this.readyState = 1;
        Lc(this);
      };
      h2.send = function(a2) {
        if (1 != this.readyState)
          throw this.abort(), Error("need to call open() first. ");
        this.g = true;
        const b = { headers: this.u, method: this.B, credentials: this.m, cache: void 0 };
        a2 && (b.body = a2);
        (this.D || k).fetch(new Request(this.A, b)).then(this.Sa.bind(this), this.ga.bind(this));
      };
      h2.abort = function() {
        this.response = this.responseText = "";
        this.u = new Headers();
        this.status = 0;
        this.j && this.j.cancel("Request was aborted.").catch(() => {
        });
        1 <= this.readyState && this.g && 4 != this.readyState && (this.g = false, Mc(this));
        this.readyState = 0;
      };
      h2.Sa = function(a2) {
        if (this.g && (this.l = a2, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a2.headers, this.readyState = 2, Lc(this)), this.g && (this.readyState = 3, Lc(this), this.g)))
          if ("arraybuffer" === this.responseType)
            a2.arrayBuffer().then(this.Qa.bind(this), this.ga.bind(this));
          else if ("undefined" !== typeof k.ReadableStream && "body" in a2) {
            this.j = a2.body.getReader();
            if (this.o) {
              if (this.responseType)
                throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
              this.response = [];
            } else
              this.response = this.responseText = "", this.v = new TextDecoder();
            Nc(this);
          } else
            a2.text().then(this.Ra.bind(this), this.ga.bind(this));
      };
      function Nc(a2) {
        a2.j.read().then(a2.Pa.bind(a2)).catch(a2.ga.bind(a2));
      }
      __name(Nc, "Nc");
      h2.Pa = function(a2) {
        if (this.g) {
          if (this.o && a2.value)
            this.response.push(a2.value);
          else if (!this.o) {
            var b = a2.value ? a2.value : new Uint8Array(0);
            if (b = this.v.decode(b, { stream: !a2.done }))
              this.response = this.responseText += b;
          }
          a2.done ? Mc(this) : Lc(this);
          3 == this.readyState && Nc(this);
        }
      };
      h2.Ra = function(a2) {
        this.g && (this.response = this.responseText = a2, Mc(this));
      };
      h2.Qa = function(a2) {
        this.g && (this.response = a2, Mc(this));
      };
      h2.ga = function() {
        this.g && Mc(this);
      };
      function Mc(a2) {
        a2.readyState = 4;
        a2.l = null;
        a2.j = null;
        a2.v = null;
        Lc(a2);
      }
      __name(Mc, "Mc");
      h2.setRequestHeader = function(a2, b) {
        this.u.append(a2, b);
      };
      h2.getResponseHeader = function(a2) {
        return this.h ? this.h.get(a2.toLowerCase()) || "" : "";
      };
      h2.getAllResponseHeaders = function() {
        if (!this.h)
          return "";
        const a2 = [], b = this.h.entries();
        for (var c2 = b.next(); !c2.done; )
          c2 = c2.value, a2.push(c2[0] + ": " + c2[1]), c2 = b.next();
        return a2.join("\r\n");
      };
      function Lc(a2) {
        a2.onreadystatechange && a2.onreadystatechange.call(a2);
      }
      __name(Lc, "Lc");
      Object.defineProperty(Kc.prototype, "withCredentials", { get: function() {
        return "include" === this.m;
      }, set: function(a2) {
        this.m = a2 ? "include" : "same-origin";
      } });
      function Oc(a2) {
        let b = "";
        qa(a2, function(c2, d) {
          b += d;
          b += ":";
          b += c2;
          b += "\r\n";
        });
        return b;
      }
      __name(Oc, "Oc");
      function Pc(a2, b, c2) {
        a: {
          for (d in c2) {
            var d = false;
            break a;
          }
          d = true;
        }
        d || (c2 = Oc(c2), "string" === typeof a2 ? (encodeURIComponent(String(b)), null != c2 && encodeURIComponent(String(c2))) : S(a2, b, c2));
      }
      __name(Pc, "Pc");
      ;
      function X(a2) {
        E.call(this);
        this.headers = /* @__PURE__ */ new Map();
        this.o = a2 || null;
        this.h = false;
        this.v = this.g = null;
        this.D = "";
        this.m = 0;
        this.l = "";
        this.j = this.B = this.u = this.A = false;
        this.I = null;
        this.H = "";
        this.J = false;
      }
      __name(X, "X");
      r2(X, E);
      var Qc = /^https?$/i, Rc = ["POST", "PUT"];
      h2 = X.prototype;
      h2.Ha = function(a2) {
        this.J = a2;
      };
      h2.ea = function(a2, b, c2, d) {
        if (this.g)
          throw Error("[goog.net.XhrIo] Object is active with another request=" + this.D + "; newUri=" + a2);
        b = b ? b.toUpperCase() : "GET";
        this.D = a2;
        this.l = "";
        this.m = 0;
        this.A = false;
        this.h = true;
        this.g = this.o ? this.o.g() : Cb.g();
        this.v = this.o ? lb(this.o) : lb(Cb);
        this.g.onreadystatechange = p2(this.Ea, this);
        try {
          this.B = true, this.g.open(b, String(a2), true), this.B = false;
        } catch (f2) {
          Sc(this, f2);
          return;
        }
        a2 = c2 || "";
        c2 = new Map(this.headers);
        if (d)
          if (Object.getPrototypeOf(d) === Object.prototype)
            for (var e in d)
              c2.set(e, d[e]);
          else if ("function" === typeof d.keys && "function" === typeof d.get)
            for (const f2 of d.keys())
              c2.set(f2, d.get(f2));
          else
            throw Error("Unknown input type for opt_headers: " + String(d));
        d = Array.from(c2.keys()).find((f2) => "content-type" == f2.toLowerCase());
        e = k.FormData && a2 instanceof k.FormData;
        !(0 <= Array.prototype.indexOf.call(Rc, b, void 0)) || d || e || c2.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        for (const [f2, g2] of c2)
          this.g.setRequestHeader(f2, g2);
        this.H && (this.g.responseType = this.H);
        "withCredentials" in this.g && this.g.withCredentials !== this.J && (this.g.withCredentials = this.J);
        try {
          Tc(this), this.u = true, this.g.send(a2), this.u = false;
        } catch (f2) {
          Sc(this, f2);
        }
      };
      function Sc(a2, b) {
        a2.h = false;
        a2.g && (a2.j = true, a2.g.abort(), a2.j = false);
        a2.l = b;
        a2.m = 5;
        Uc(a2);
        Vc(a2);
      }
      __name(Sc, "Sc");
      function Uc(a2) {
        a2.A || (a2.A = true, F(a2, "complete"), F(a2, "error"));
      }
      __name(Uc, "Uc");
      h2.abort = function(a2) {
        this.g && this.h && (this.h = false, this.j = true, this.g.abort(), this.j = false, this.m = a2 || 7, F(this, "complete"), F(this, "abort"), Vc(this));
      };
      h2.N = function() {
        this.g && (this.h && (this.h = false, this.j = true, this.g.abort(), this.j = false), Vc(this, true));
        X.aa.N.call(this);
      };
      h2.Ea = function() {
        this.s || (this.B || this.u || this.j ? Wc(this) : this.bb());
      };
      h2.bb = function() {
        Wc(this);
      };
      function Wc(a2) {
        if (a2.h && "undefined" != typeof fa && (!a2.v[1] || 4 != P(a2) || 2 != a2.Z())) {
          if (a2.u && 4 == P(a2))
            bb(a2.Ea, 0, a2);
          else if (F(a2, "readystatechange"), 4 == P(a2)) {
            a2.h = false;
            try {
              const g2 = a2.Z();
              a:
                switch (g2) {
                  case 200:
                  case 201:
                  case 202:
                  case 204:
                  case 206:
                  case 304:
                  case 1223:
                    var b = true;
                    break a;
                  default:
                    b = false;
                }
              var c2;
              if (!(c2 = b)) {
                var d;
                if (d = 0 === g2) {
                  var e = String(a2.D).match(oc)[1] || null;
                  !e && k.self && k.self.location && (e = k.self.location.protocol.slice(0, -1));
                  d = !Qc.test(e ? e.toLowerCase() : "");
                }
                c2 = d;
              }
              if (c2)
                F(a2, "complete"), F(a2, "success");
              else {
                a2.m = 6;
                try {
                  var f2 = 2 < P(a2) ? a2.g.statusText : "";
                } catch (m) {
                  f2 = "";
                }
                a2.l = f2 + " [" + a2.Z() + "]";
                Uc(a2);
              }
            } finally {
              Vc(a2);
            }
          }
        }
      }
      __name(Wc, "Wc");
      function Vc(a2, b) {
        if (a2.g) {
          Tc(a2);
          const c2 = a2.g, d = a2.v[0] ? () => {
          } : null;
          a2.g = null;
          a2.v = null;
          b || F(a2, "ready");
          try {
            c2.onreadystatechange = d;
          } catch (e) {
          }
        }
      }
      __name(Vc, "Vc");
      function Tc(a2) {
        a2.I && (k.clearTimeout(a2.I), a2.I = null);
      }
      __name(Tc, "Tc");
      h2.isActive = function() {
        return !!this.g;
      };
      function P(a2) {
        return a2.g ? a2.g.readyState : 0;
      }
      __name(P, "P");
      h2.Z = function() {
        try {
          return 2 < P(this) ? this.g.status : -1;
        } catch (a2) {
          return -1;
        }
      };
      h2.oa = function() {
        try {
          return this.g ? this.g.responseText : "";
        } catch (a2) {
          return "";
        }
      };
      h2.Oa = function(a2) {
        if (this.g) {
          var b = this.g.responseText;
          a2 && 0 == b.indexOf(a2) && (b = b.substring(a2.length));
          return ib(b);
        }
      };
      function Nb(a2) {
        try {
          if (!a2.g)
            return null;
          if ("response" in a2.g)
            return a2.g.response;
          switch (a2.H) {
            case "":
            case "text":
              return a2.g.responseText;
            case "arraybuffer":
              if ("mozResponseArrayBuffer" in a2.g)
                return a2.g.mozResponseArrayBuffer;
          }
          return null;
        } catch (b) {
          return null;
        }
      }
      __name(Nb, "Nb");
      function Vb(a2) {
        const b = {};
        a2 = (a2.g && 2 <= P(a2) ? a2.g.getAllResponseHeaders() || "" : "").split("\r\n");
        for (let d = 0; d < a2.length; d++) {
          if (t2(a2[d]))
            continue;
          var c2 = va(a2[d]);
          const e = c2[0];
          c2 = c2[1];
          if ("string" !== typeof c2)
            continue;
          c2 = c2.trim();
          const f2 = b[e] || [];
          b[e] = f2;
          f2.push(c2);
        }
        ra(b, function(d) {
          return d.join(", ");
        });
      }
      __name(Vb, "Vb");
      h2.Ba = function() {
        return this.m;
      };
      h2.Ka = function() {
        return "string" === typeof this.l ? this.l : String(this.l);
      };
      function Xc(a2, b, c2) {
        return c2 && c2.internalChannelParams ? c2.internalChannelParams[a2] || b : b;
      }
      __name(Xc, "Xc");
      function Yc(a2) {
        this.Aa = 0;
        this.i = [];
        this.j = new vb();
        this.ia = this.qa = this.I = this.W = this.g = this.ya = this.D = this.H = this.m = this.S = this.o = null;
        this.Ya = this.U = 0;
        this.Va = Xc("failFast", false, a2);
        this.F = this.C = this.u = this.s = this.l = null;
        this.X = true;
        this.za = this.T = -1;
        this.Y = this.v = this.B = 0;
        this.Ta = Xc("baseRetryDelayMs", 5e3, a2);
        this.cb = Xc("retryDelaySeedMs", 1e4, a2);
        this.Wa = Xc("forwardChannelMaxRetries", 2, a2);
        this.wa = Xc("forwardChannelRequestTimeoutMs", 2e4, a2);
        this.pa = a2 && a2.xmlHttpFactory || void 0;
        this.Xa = a2 && a2.Tb || void 0;
        this.Ca = a2 && a2.useFetchStreams || false;
        this.L = void 0;
        this.J = a2 && a2.supportsCrossDomainXhr || false;
        this.K = "";
        this.h = new ic(a2 && a2.concurrentRequestLimit);
        this.Da = new Hc();
        this.P = a2 && a2.fastHandshake || false;
        this.O = a2 && a2.encodeInitMessageHeaders || false;
        this.P && this.O && (this.O = false);
        this.Ua = a2 && a2.Rb || false;
        a2 && a2.xa && this.j.xa();
        a2 && a2.forceLongPolling && (this.X = false);
        this.ba = !this.P && this.X && a2 && a2.detectBufferingProxy || false;
        this.ja = void 0;
        a2 && a2.longPollingTimeout && 0 < a2.longPollingTimeout && (this.ja = a2.longPollingTimeout);
        this.ca = void 0;
        this.R = 0;
        this.M = false;
        this.ka = this.A = null;
      }
      __name(Yc, "Yc");
      h2 = Yc.prototype;
      h2.la = 8;
      h2.G = 1;
      h2.connect = function(a2, b, c2, d) {
        K(0);
        this.W = a2;
        this.H = b || {};
        c2 && void 0 !== d && (this.H.OSID = c2, this.H.OAID = d);
        this.F = this.X;
        this.I = cc(this, null, this.W);
        fc(this);
      };
      function gc(a2) {
        Zc(a2);
        if (3 == a2.G) {
          var b = a2.U++, c2 = N(a2.I);
          S(c2, "SID", a2.K);
          S(c2, "RID", b);
          S(c2, "TYPE", "terminate");
          $c(a2, c2);
          b = new M(a2, a2.j, b);
          b.L = 2;
          b.v = Ib(N(c2));
          c2 = false;
          if (k.navigator && k.navigator.sendBeacon)
            try {
              c2 = k.navigator.sendBeacon(b.v.toString(), "");
            } catch (d) {
            }
          !c2 && k.Image && (new Image().src = b.v, c2 = true);
          c2 || (b.g = Mb(b.j, null), b.g.ea(b.v));
          b.F = Date.now();
          Kb(b);
        }
        ad(a2);
      }
      __name(gc, "gc");
      function Zb(a2) {
        a2.g && (Tb(a2), a2.g.cancel(), a2.g = null);
      }
      __name(Zb, "Zb");
      function Zc(a2) {
        Zb(a2);
        a2.u && (k.clearTimeout(a2.u), a2.u = null);
        Yb(a2);
        a2.h.cancel();
        a2.s && ("number" === typeof a2.s && k.clearTimeout(a2.s), a2.s = null);
      }
      __name(Zc, "Zc");
      function fc(a2) {
        if (!jc(a2.h) && !a2.s) {
          a2.s = true;
          var b = a2.Ga;
          x || Ea();
          y || (x(), y = true);
          za.add(b, a2);
          a2.B = 0;
        }
      }
      __name(fc, "fc");
      function bd(a2, b) {
        if (ac(a2.h) >= a2.h.j - (a2.s ? 1 : 0))
          return false;
        if (a2.s)
          return a2.i = b.D.concat(a2.i), true;
        if (1 == a2.G || 2 == a2.G || a2.B >= (a2.Va ? 0 : a2.Wa))
          return false;
        a2.s = ub(p2(a2.Ga, a2, b), cd(a2, a2.B));
        a2.B++;
        return true;
      }
      __name(bd, "bd");
      h2.Ga = function(a2) {
        if (this.s)
          if (this.s = null, 1 == this.G) {
            if (!a2) {
              this.U = Math.floor(1e5 * Math.random());
              a2 = this.U++;
              const e = new M(this, this.j, a2);
              let f2 = this.o;
              this.S && (f2 ? (f2 = sa(f2), ua(f2, this.S)) : f2 = this.S);
              null !== this.m || this.O || (e.H = f2, f2 = null);
              if (this.P)
                a: {
                  var b = 0;
                  for (var c2 = 0; c2 < this.i.length; c2++) {
                    b: {
                      var d = this.i[c2];
                      if ("__data__" in d.map && (d = d.map.__data__, "string" === typeof d)) {
                        d = d.length;
                        break b;
                      }
                      d = void 0;
                    }
                    if (void 0 === d)
                      break;
                    b += d;
                    if (4096 < b) {
                      b = c2;
                      break a;
                    }
                    if (4096 === b || c2 === this.i.length - 1) {
                      b = c2 + 1;
                      break a;
                    }
                  }
                  b = 1e3;
                }
              else
                b = 1e3;
              b = dd(this, e, b);
              c2 = N(this.I);
              S(c2, "RID", a2);
              S(c2, "CVER", 22);
              this.D && S(c2, "X-HTTP-Session-Id", this.D);
              $c(this, c2);
              f2 && (this.O ? b = "headers=" + encodeURIComponent(String(Oc(f2))) + "&" + b : this.m && Pc(c2, this.m, f2));
              bc(this.h, e);
              this.Ua && S(c2, "TYPE", "init");
              this.P ? (S(c2, "$req", b), S(c2, "SID", "null"), e.T = true, Hb(e, c2, null)) : Hb(e, c2, b);
              this.G = 2;
            }
          } else
            3 == this.G && (a2 ? ed(this, a2) : 0 == this.i.length || jc(this.h) || ed(this));
      };
      function ed(a2, b) {
        var c2;
        b ? c2 = b.l : c2 = a2.U++;
        const d = N(a2.I);
        S(d, "SID", a2.K);
        S(d, "RID", c2);
        S(d, "AID", a2.T);
        $c(a2, d);
        a2.m && a2.o && Pc(d, a2.m, a2.o);
        c2 = new M(a2, a2.j, c2, a2.B + 1);
        null === a2.m && (c2.H = a2.o);
        b && (a2.i = b.D.concat(a2.i));
        b = dd(a2, c2, 1e3);
        c2.I = Math.round(0.5 * a2.wa) + Math.round(0.5 * a2.wa * Math.random());
        bc(a2.h, c2);
        Hb(c2, d, b);
      }
      __name(ed, "ed");
      function $c(a2, b) {
        a2.H && qa(a2.H, function(c2, d) {
          S(b, d, c2);
        });
        a2.l && nc({}, function(c2, d) {
          S(b, d, c2);
        });
      }
      __name($c, "$c");
      function dd(a2, b, c2) {
        c2 = Math.min(a2.i.length, c2);
        var d = a2.l ? p2(a2.l.Na, a2.l, a2) : null;
        a: {
          var e = a2.i;
          let f2 = -1;
          for (; ; ) {
            const g2 = ["count=" + c2];
            -1 == f2 ? 0 < c2 ? (f2 = e[0].g, g2.push("ofs=" + f2)) : f2 = 0 : g2.push("ofs=" + f2);
            let m = true;
            for (let q = 0; q < c2; q++) {
              let l = e[q].g;
              const v = e[q].map;
              l -= f2;
              if (0 > l)
                f2 = Math.max(0, e[q].g - 100), m = false;
              else
                try {
                  Ic(v, g2, "req" + l + "_");
                } catch (w) {
                  d && d(v);
                }
            }
            if (m) {
              d = g2.join("&");
              break a;
            }
          }
        }
        a2 = a2.i.splice(0, c2);
        b.D = a2;
        return d;
      }
      __name(dd, "dd");
      function ec(a2) {
        if (!a2.g && !a2.u) {
          a2.Y = 1;
          var b = a2.Fa;
          x || Ea();
          y || (x(), y = true);
          za.add(b, a2);
          a2.v = 0;
        }
      }
      __name(ec, "ec");
      function $b(a2) {
        if (a2.g || a2.u || 3 <= a2.v)
          return false;
        a2.Y++;
        a2.u = ub(p2(a2.Fa, a2), cd(a2, a2.v));
        a2.v++;
        return true;
      }
      __name($b, "$b");
      h2.Fa = function() {
        this.u = null;
        fd(this);
        if (this.ba && !(this.M || null == this.g || 0 >= this.R)) {
          var a2 = 2 * this.R;
          this.j.info("BP detection timer enabled: " + a2);
          this.A = ub(p2(this.ab, this), a2);
        }
      };
      h2.ab = function() {
        this.A && (this.A = null, this.j.info("BP detection timeout reached."), this.j.info("Buffering proxy detected and switch to long-polling!"), this.F = false, this.M = true, K(10), Zb(this), fd(this));
      };
      function Tb(a2) {
        null != a2.A && (k.clearTimeout(a2.A), a2.A = null);
      }
      __name(Tb, "Tb");
      function fd(a2) {
        a2.g = new M(a2, a2.j, "rpc", a2.Y);
        null === a2.m && (a2.g.H = a2.o);
        a2.g.O = 0;
        var b = N(a2.qa);
        S(b, "RID", "rpc");
        S(b, "SID", a2.K);
        S(b, "AID", a2.T);
        S(b, "CI", a2.F ? "0" : "1");
        !a2.F && a2.ja && S(b, "TO", a2.ja);
        S(b, "TYPE", "xmlhttp");
        $c(a2, b);
        a2.m && a2.o && Pc(b, a2.m, a2.o);
        a2.L && (a2.g.I = a2.L);
        var c2 = a2.g;
        a2 = a2.ia;
        c2.L = 1;
        c2.v = Ib(N(b));
        c2.m = null;
        c2.P = true;
        Jb(c2, a2);
      }
      __name(fd, "fd");
      h2.Za = function() {
        null != this.C && (this.C = null, Zb(this), $b(this), K(19));
      };
      function Yb(a2) {
        null != a2.C && (k.clearTimeout(a2.C), a2.C = null);
      }
      __name(Yb, "Yb");
      function Ub(a2, b) {
        var c2 = null;
        if (a2.g == b) {
          Yb(a2);
          Tb(a2);
          a2.g = null;
          var d = 2;
        } else if (Xb(a2.h, b))
          c2 = b.D, dc(a2.h, b), d = 1;
        else
          return;
        if (0 != a2.G) {
          if (b.o)
            if (1 == d) {
              c2 = b.m ? b.m.length : 0;
              b = Date.now() - b.F;
              var e = a2.B;
              d = qb();
              F(d, new tb(d, c2, b, e));
              fc(a2);
            } else
              ec(a2);
          else if (e = b.s, 3 == e || 0 == e && 0 < b.X || !(1 == d && bd(a2, b) || 2 == d && $b(a2)))
            switch (c2 && 0 < c2.length && (b = a2.h, b.i = b.i.concat(c2)), e) {
              case 1:
                R(a2, 5);
                break;
              case 4:
                R(a2, 10);
                break;
              case 3:
                R(a2, 6);
                break;
              default:
                R(a2, 2);
            }
        }
      }
      __name(Ub, "Ub");
      function cd(a2, b) {
        let c2 = a2.Ta + Math.floor(Math.random() * a2.cb);
        a2.isActive() || (c2 *= 2);
        return c2 * b;
      }
      __name(cd, "cd");
      function R(a2, b) {
        a2.j.info("Error code " + b);
        if (2 == b) {
          var c2 = p2(a2.fb, a2), d = a2.Xa;
          const e = !d;
          d = new T(d || "//www.google.com/images/cleardot.gif");
          k.location && "http" == k.location.protocol || qc(d, "https");
          Ib(d);
          e ? Fc(d.toString(), c2) : Gc(d.toString(), c2);
        } else
          K(2);
        a2.G = 0;
        a2.l && a2.l.sa(b);
        ad(a2);
        Zc(a2);
      }
      __name(R, "R");
      h2.fb = function(a2) {
        a2 ? (this.j.info("Successfully pinged google.com"), K(2)) : (this.j.info("Failed to ping google.com"), K(1));
      };
      function ad(a2) {
        a2.G = 0;
        a2.ka = [];
        if (a2.l) {
          const b = kc(a2.h);
          if (0 != b.length || 0 != a2.i.length)
            ma(a2.ka, b), ma(a2.ka, a2.i), a2.h.i.length = 0, la(a2.i), a2.i.length = 0;
          a2.l.ra();
        }
      }
      __name(ad, "ad");
      function cc(a2, b, c2) {
        var d = c2 instanceof T ? N(c2) : new T(c2);
        if ("" != d.g)
          b && (d.g = b + "." + d.g), rc(d, d.s);
        else {
          var e = k.location;
          d = e.protocol;
          b = b ? b + "." + e.hostname : e.hostname;
          e = +e.port;
          var f2 = new T(null);
          d && qc(f2, d);
          b && (f2.g = b);
          e && rc(f2, e);
          c2 && (f2.l = c2);
          d = f2;
        }
        c2 = a2.D;
        b = a2.ya;
        c2 && b && S(d, c2, b);
        S(d, "VER", a2.la);
        $c(a2, d);
        return d;
      }
      __name(cc, "cc");
      function Mb(a2, b, c2) {
        if (b && !a2.J)
          throw Error("Can't create secondary domain capable XhrIo object.");
        b = a2.Ca && !a2.pa ? new X(new Jc({ eb: c2 })) : new X(a2.pa);
        b.Ha(a2.J);
        return b;
      }
      __name(Mb, "Mb");
      h2.isActive = function() {
        return !!this.l && this.l.isActive(this);
      };
      function gd() {
      }
      __name(gd, "gd");
      h2 = gd.prototype;
      h2.ua = function() {
      };
      h2.ta = function() {
      };
      h2.sa = function() {
      };
      h2.ra = function() {
      };
      h2.isActive = function() {
        return true;
      };
      h2.Na = function() {
      };
      function hd() {
      }
      __name(hd, "hd");
      hd.prototype.g = function(a2, b) {
        return new Y(a2, b);
      };
      function Y(a2, b) {
        E.call(this);
        this.g = new Yc(b);
        this.l = a2;
        this.h = b && b.messageUrlParams || null;
        a2 = b && b.messageHeaders || null;
        b && b.clientProtocolHeaderRequired && (a2 ? a2["X-Client-Protocol"] = "webchannel" : a2 = { "X-Client-Protocol": "webchannel" });
        this.g.o = a2;
        a2 = b && b.initMessageHeaders || null;
        b && b.messageContentType && (a2 ? a2["X-WebChannel-Content-Type"] = b.messageContentType : a2 = { "X-WebChannel-Content-Type": b.messageContentType });
        b && b.va && (a2 ? a2["X-WebChannel-Client-Profile"] = b.va : a2 = { "X-WebChannel-Client-Profile": b.va });
        this.g.S = a2;
        (a2 = b && b.Sb) && !t2(a2) && (this.g.m = a2);
        this.v = b && b.supportsCrossDomainXhr || false;
        this.u = b && b.sendRawJson || false;
        (b = b && b.httpSessionIdParam) && !t2(b) && (this.g.D = b, a2 = this.h, null !== a2 && b in a2 && (a2 = this.h, b in a2 && delete a2[b]));
        this.j = new Z(this);
      }
      __name(Y, "Y");
      r2(Y, E);
      Y.prototype.m = function() {
        this.g.l = this.j;
        this.v && (this.g.J = true);
        this.g.connect(this.l, this.h || void 0);
      };
      Y.prototype.close = function() {
        gc(this.g);
      };
      Y.prototype.o = function(a2) {
        var b = this.g;
        if ("string" === typeof a2) {
          var c2 = {};
          c2.__data__ = a2;
          a2 = c2;
        } else
          this.u && (c2 = {}, c2.__data__ = hb(a2), a2 = c2);
        b.i.push(new hc(b.Ya++, a2));
        3 == b.G && fc(b);
      };
      Y.prototype.N = function() {
        this.g.l = null;
        delete this.j;
        gc(this.g);
        delete this.g;
        Y.aa.N.call(this);
      };
      function id(a2) {
        nb.call(this);
        a2.__headers__ && (this.headers = a2.__headers__, this.statusCode = a2.__status__, delete a2.__headers__, delete a2.__status__);
        var b = a2.__sm__;
        if (b) {
          a: {
            for (const c2 in b) {
              a2 = c2;
              break a;
            }
            a2 = void 0;
          }
          if (this.i = a2)
            a2 = this.i, b = null !== b && a2 in b ? b[a2] : void 0;
          this.data = b;
        } else
          this.data = a2;
      }
      __name(id, "id");
      r2(id, nb);
      function jd() {
        ob.call(this);
        this.status = 1;
      }
      __name(jd, "jd");
      r2(jd, ob);
      function Z(a2) {
        this.g = a2;
      }
      __name(Z, "Z");
      r2(Z, gd);
      Z.prototype.ua = function() {
        F(this.g, "a");
      };
      Z.prototype.ta = function(a2) {
        F(this.g, new id(a2));
      };
      Z.prototype.sa = function(a2) {
        F(this.g, new jd(a2));
      };
      Z.prototype.ra = function() {
        F(this.g, "b");
      };
      hd.prototype.createWebChannel = hd.prototype.g;
      Y.prototype.send = Y.prototype.o;
      Y.prototype.open = Y.prototype.m;
      Y.prototype.close = Y.prototype.close;
      module.exports.createWebChannelTransport = function() {
        return new hd();
      };
      module.exports.getStatEventTarget = function() {
        return qb();
      };
      module.exports.Event = I;
      module.exports.Stat = { mb: 0, pb: 1, qb: 2, Jb: 3, Ob: 4, Lb: 5, Mb: 6, Kb: 7, Ib: 8, Nb: 9, PROXY: 10, NOPROXY: 11, Gb: 12, Cb: 13, Db: 14, Bb: 15, Eb: 16, Fb: 17, ib: 18, hb: 19, jb: 20 };
      Ab.NO_ERROR = 0;
      Ab.TIMEOUT = 8;
      Ab.HTTP_ERROR = 6;
      module.exports.ErrorCode = Ab;
      Bb.COMPLETE = "complete";
      module.exports.EventType = Bb;
      mb.EventType = H;
      H.OPEN = "a";
      H.CLOSE = "b";
      H.ERROR = "c";
      H.MESSAGE = "d";
      E.prototype.listen = E.prototype.K;
      module.exports.WebChannel = mb;
      module.exports.FetchXmlHttpFactory = Jc;
      X.prototype.listenOnce = X.prototype.L;
      X.prototype.getLastError = X.prototype.Ka;
      X.prototype.getLastErrorCode = X.prototype.Ba;
      X.prototype.getStatus = X.prototype.Z;
      X.prototype.getResponseJson = X.prototype.Oa;
      X.prototype.getResponseText = X.prototype.oa;
      X.prototype.send = X.prototype.ea;
      X.prototype.setWithCredentials = X.prototype.Ha;
      module.exports.XhrIo = X;
    }).apply(typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }
});

// node_modules/@firebase/firestore/dist/index.cjs.js
var require_index_cjs5 = __commonJS({
  "node_modules/@firebase/firestore/dist/index.cjs.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    var app = require_index_cjs4();
    var component = require_index_cjs2();
    var logger = require_index_cjs3();
    var util = require_index_cjs();
    var bloomBlob = require_bloom_blob_es2018();
    var webchannelBlob = require_webchannel_blob_es2018();
    var S = "@firebase/firestore";
    var b = "4.7.8";
    var User = class {
      constructor(e) {
        this.uid = e;
      }
      isAuthenticated() {
        return null != this.uid;
      }
      /**
       * Returns a key representing this user, suitable for inclusion in a
       * dictionary.
       */
      toKey() {
        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
      }
      isEqual(e) {
        return e.uid === this.uid;
      }
    };
    __name(User, "User");
    User.UNAUTHENTICATED = new User(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    User.GOOGLE_CREDENTIALS = new User("google-credentials-uid"), User.FIRST_PARTY = new User("first-party-uid"), User.MOCK_USER = new User("mock-user");
    var D = "11.3.1";
    var v = new logger.Logger("@firebase/firestore");
    function __PRIVATE_getLogLevel() {
      return v.logLevel;
    }
    __name(__PRIVATE_getLogLevel, "__PRIVATE_getLogLevel");
    function setLogLevel(e) {
      v.setLogLevel(e);
    }
    __name(setLogLevel, "setLogLevel");
    function __PRIVATE_logDebug(e, ...t2) {
      if (v.logLevel <= logger.LogLevel.DEBUG) {
        const n2 = t2.map(__PRIVATE_argToString);
        v.debug(`Firestore (${D}): ${e}`, ...n2);
      }
    }
    __name(__PRIVATE_logDebug, "__PRIVATE_logDebug");
    function __PRIVATE_logError(e, ...t2) {
      if (v.logLevel <= logger.LogLevel.ERROR) {
        const n2 = t2.map(__PRIVATE_argToString);
        v.error(`Firestore (${D}): ${e}`, ...n2);
      }
    }
    __name(__PRIVATE_logError, "__PRIVATE_logError");
    function __PRIVATE_logWarn(e, ...t2) {
      if (v.logLevel <= logger.LogLevel.WARN) {
        const n2 = t2.map(__PRIVATE_argToString);
        v.warn(`Firestore (${D}): ${e}`, ...n2);
      }
    }
    __name(__PRIVATE_logWarn, "__PRIVATE_logWarn");
    function __PRIVATE_argToString(e) {
      if ("string" == typeof e)
        return e;
      try {
        return (/* @__PURE__ */ __name(function __PRIVATE_formatJSON(e2) {
          return JSON.stringify(e2);
        }, "__PRIVATE_formatJSON"))(e);
      } catch (t2) {
        return e;
      }
    }
    __name(__PRIVATE_argToString, "__PRIVATE_argToString");
    function fail(e = "Unexpected state") {
      const t2 = `FIRESTORE (${D}) INTERNAL ASSERTION FAILED: ` + e;
      throw __PRIVATE_logError(t2), new Error(t2);
    }
    __name(fail, "fail");
    function __PRIVATE_hardAssert(e, t2) {
      e || fail();
    }
    __name(__PRIVATE_hardAssert, "__PRIVATE_hardAssert");
    function __PRIVATE_debugAssert(e, t2) {
      e || fail();
    }
    __name(__PRIVATE_debugAssert, "__PRIVATE_debugAssert");
    function __PRIVATE_debugCast(e, t2) {
      return e;
    }
    __name(__PRIVATE_debugCast, "__PRIVATE_debugCast");
    var C = {
      // Causes are copied from:
      // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
      /** Not an error; returned on success. */
      OK: "ok",
      /** The operation was cancelled (typically by the caller). */
      CANCELLED: "cancelled",
      /** Unknown error or an error from a different error domain. */
      UNKNOWN: "unknown",
      /**
       * Client specified an invalid argument. Note that this differs from
       * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
       * problematic regardless of the state of the system (e.g., a malformed file
       * name).
       */
      INVALID_ARGUMENT: "invalid-argument",
      /**
       * Deadline expired before operation could complete. For operations that
       * change the state of the system, this error may be returned even if the
       * operation has completed successfully. For example, a successful response
       * from a server could have been delayed long enough for the deadline to
       * expire.
       */
      DEADLINE_EXCEEDED: "deadline-exceeded",
      /** Some requested entity (e.g., file or directory) was not found. */
      NOT_FOUND: "not-found",
      /**
       * Some entity that we attempted to create (e.g., file or directory) already
       * exists.
       */
      ALREADY_EXISTS: "already-exists",
      /**
       * The caller does not have permission to execute the specified operation.
       * PERMISSION_DENIED must not be used for rejections caused by exhausting
       * some resource (use RESOURCE_EXHAUSTED instead for those errors).
       * PERMISSION_DENIED must not be used if the caller cannot be identified
       * (use UNAUTHENTICATED instead for those errors).
       */
      PERMISSION_DENIED: "permission-denied",
      /**
       * The request does not have valid authentication credentials for the
       * operation.
       */
      UNAUTHENTICATED: "unauthenticated",
      /**
       * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
       * entire file system is out of space.
       */
      RESOURCE_EXHAUSTED: "resource-exhausted",
      /**
       * Operation was rejected because the system is not in a state required for
       * the operation's execution. For example, directory to be deleted may be
       * non-empty, an rmdir operation is applied to a non-directory, etc.
       *
       * A litmus test that may help a service implementor in deciding
       * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
       *  (a) Use UNAVAILABLE if the client can retry just the failing call.
       *  (b) Use ABORTED if the client should retry at a higher-level
       *      (e.g., restarting a read-modify-write sequence).
       *  (c) Use FAILED_PRECONDITION if the client should not retry until
       *      the system state has been explicitly fixed. E.g., if an "rmdir"
       *      fails because the directory is non-empty, FAILED_PRECONDITION
       *      should be returned since the client should not retry unless
       *      they have first fixed up the directory by deleting files from it.
       *  (d) Use FAILED_PRECONDITION if the client performs conditional
       *      REST Get/Update/Delete on a resource and the resource on the
       *      server does not match the condition. E.g., conflicting
       *      read-modify-write on the same resource.
       */
      FAILED_PRECONDITION: "failed-precondition",
      /**
       * The operation was aborted, typically due to a concurrency issue like
       * sequencer check failures, transaction aborts, etc.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      ABORTED: "aborted",
      /**
       * Operation was attempted past the valid range. E.g., seeking or reading
       * past end of file.
       *
       * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
       * if the system state changes. For example, a 32-bit file system will
       * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
       * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
       * an offset past the current file size.
       *
       * There is a fair bit of overlap between FAILED_PRECONDITION and
       * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
       * when it applies so that callers who are iterating through a space can
       * easily look for an OUT_OF_RANGE error to detect when they are done.
       */
      OUT_OF_RANGE: "out-of-range",
      /** Operation is not implemented or not supported/enabled in this service. */
      UNIMPLEMENTED: "unimplemented",
      /**
       * Internal errors. Means some invariants expected by underlying System has
       * been broken. If you see one of these errors, Something is very broken.
       */
      INTERNAL: "internal",
      /**
       * The service is currently unavailable. This is a most likely a transient
       * condition and may be corrected by retrying with a backoff.
       *
       * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
       * and UNAVAILABLE.
       */
      UNAVAILABLE: "unavailable",
      /** Unrecoverable data loss or corruption. */
      DATA_LOSS: "data-loss"
    };
    var FirestoreError = class extends util.FirebaseError {
      /** @hideconstructor */
      constructor(e, t2) {
        super(e, t2), this.code = e, this.message = t2, // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
      }
    };
    __name(FirestoreError, "FirestoreError");
    var __PRIVATE_Deferred = class {
      constructor() {
        this.promise = new Promise((e, t2) => {
          this.resolve = e, this.reject = t2;
        });
      }
    };
    __name(__PRIVATE_Deferred, "__PRIVATE_Deferred");
    var __PRIVATE_OAuthToken = class {
      constructor(e, t2) {
        this.user = t2, this.type = "OAuth", this.headers = /* @__PURE__ */ new Map(), this.headers.set("Authorization", `Bearer ${e}`);
      }
    };
    __name(__PRIVATE_OAuthToken, "__PRIVATE_OAuthToken");
    var __PRIVATE_EmptyAuthCredentialsProvider = class {
      getToken() {
        return Promise.resolve(null);
      }
      invalidateToken() {
      }
      start(e, t2) {
        e.enqueueRetryable(() => t2(User.UNAUTHENTICATED));
      }
      shutdown() {
      }
    };
    __name(__PRIVATE_EmptyAuthCredentialsProvider, "__PRIVATE_EmptyAuthCredentialsProvider");
    var __PRIVATE_EmulatorAuthCredentialsProvider = class {
      constructor(e) {
        this.token = e, /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */
        this.changeListener = null;
      }
      getToken() {
        return Promise.resolve(this.token);
      }
      invalidateToken() {
      }
      start(e, t2) {
        this.changeListener = t2, // Fire with initial user.
        e.enqueueRetryable(() => t2(this.token.user));
      }
      shutdown() {
        this.changeListener = null;
      }
    };
    __name(__PRIVATE_EmulatorAuthCredentialsProvider, "__PRIVATE_EmulatorAuthCredentialsProvider");
    var __PRIVATE_FirebaseAuthCredentialsProvider = class {
      constructor(e) {
        this.t = e, /** Tracks the current User. */
        this.currentUser = User.UNAUTHENTICATED, /**
         * Counter used to detect if the token changed while a getToken request was
         * outstanding.
         */
        this.i = 0, this.forceRefresh = false, this.auth = null;
      }
      start(e, t2) {
        __PRIVATE_hardAssert(void 0 === this.o);
        let n2 = this.i;
        const __PRIVATE_guardedChangeListener = /* @__PURE__ */ __name((e2) => this.i !== n2 ? (n2 = this.i, t2(e2)) : Promise.resolve(), "__PRIVATE_guardedChangeListener");
        let r2 = new __PRIVATE_Deferred();
        this.o = () => {
          this.i++, this.currentUser = this.u(), r2.resolve(), r2 = new __PRIVATE_Deferred(), e.enqueueRetryable(() => __PRIVATE_guardedChangeListener(this.currentUser));
        };
        const __PRIVATE_awaitNextToken = /* @__PURE__ */ __name(() => {
          const t3 = r2;
          e.enqueueRetryable(async () => {
            await t3.promise, await __PRIVATE_guardedChangeListener(this.currentUser);
          });
        }, "__PRIVATE_awaitNextToken"), __PRIVATE_registerAuth = /* @__PURE__ */ __name((e2) => {
          __PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = e2, this.o && (this.auth.addAuthTokenListener(this.o), __PRIVATE_awaitNextToken());
        }, "__PRIVATE_registerAuth");
        this.t.onInit((e2) => __PRIVATE_registerAuth(e2)), // Our users can initialize Auth right after Firestore, so we give it
        // a chance to register itself with the component framework before we
        // determine whether to start up in unauthenticated mode.
        setTimeout(() => {
          if (!this.auth) {
            const e2 = this.t.getImmediate({
              optional: true
            });
            e2 ? __PRIVATE_registerAuth(e2) : (
              // If auth is still not available, proceed with `null` user
              (__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth not yet detected"), r2.resolve(), r2 = new __PRIVATE_Deferred())
            );
          }
        }, 0), __PRIVATE_awaitNextToken();
      }
      getToken() {
        const e = this.i, t2 = this.forceRefresh;
        return this.forceRefresh = false, this.auth ? this.auth.getToken(t2).then((t3) => (
          // Cancel the request since the token changed while the request was
          // outstanding so the response is potentially for a previous user (which
          // user, we can't be sure).
          this.i !== e ? (__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : t3 ? (__PRIVATE_hardAssert("string" == typeof t3.accessToken), new __PRIVATE_OAuthToken(t3.accessToken, this.currentUser)) : null
        )) : Promise.resolve(null);
      }
      invalidateToken() {
        this.forceRefresh = true;
      }
      shutdown() {
        this.auth && this.o && this.auth.removeAuthTokenListener(this.o), this.o = void 0;
      }
      // Auth.getUid() can return null even with a user logged in. It is because
      // getUid() is synchronous, but the auth code populating Uid is asynchronous.
      // This method should only be called in the AuthTokenListener callback
      // to guarantee to get the actual user.
      u() {
        const e = this.auth && this.auth.getUid();
        return __PRIVATE_hardAssert(null === e || "string" == typeof e), new User(e);
      }
    };
    __name(__PRIVATE_FirebaseAuthCredentialsProvider, "__PRIVATE_FirebaseAuthCredentialsProvider");
    var __PRIVATE_FirstPartyToken = class {
      constructor(e, t2, n2) {
        this.l = e, this.h = t2, this.P = n2, this.type = "FirstParty", this.user = User.FIRST_PARTY, this.T = /* @__PURE__ */ new Map();
      }
      /**
       * Gets an authorization token, using a provided factory function, or return
       * null.
       */
      I() {
        return this.P ? this.P() : null;
      }
      get headers() {
        this.T.set("X-Goog-AuthUser", this.l);
        const e = this.I();
        return e && this.T.set("Authorization", e), this.h && this.T.set("X-Goog-Iam-Authorization-Token", this.h), this.T;
      }
    };
    __name(__PRIVATE_FirstPartyToken, "__PRIVATE_FirstPartyToken");
    var __PRIVATE_FirstPartyAuthCredentialsProvider = class {
      constructor(e, t2, n2) {
        this.l = e, this.h = t2, this.P = n2;
      }
      getToken() {
        return Promise.resolve(new __PRIVATE_FirstPartyToken(this.l, this.h, this.P));
      }
      start(e, t2) {
        e.enqueueRetryable(() => t2(User.FIRST_PARTY));
      }
      shutdown() {
      }
      invalidateToken() {
      }
    };
    __name(__PRIVATE_FirstPartyAuthCredentialsProvider, "__PRIVATE_FirstPartyAuthCredentialsProvider");
    var AppCheckToken = class {
      constructor(e) {
        this.value = e, this.type = "AppCheck", this.headers = /* @__PURE__ */ new Map(), e && e.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
      }
    };
    __name(AppCheckToken, "AppCheckToken");
    var __PRIVATE_FirebaseAppCheckTokenProvider = class {
      constructor(t2, n2) {
        this.A = n2, this.forceRefresh = false, this.appCheck = null, this.R = null, this.V = null, app._isFirebaseServerApp(t2) && t2.settings.appCheckToken && (this.V = t2.settings.appCheckToken);
      }
      start(e, t2) {
        __PRIVATE_hardAssert(void 0 === this.o);
        const onTokenChanged = /* @__PURE__ */ __name((e2) => {
          null != e2.error && __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${e2.error.message}`);
          const n2 = e2.token !== this.R;
          return this.R = e2.token, __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Received ${n2 ? "new" : "existing"} token.`), n2 ? t2(e2.token) : Promise.resolve();
        }, "onTokenChanged");
        this.o = (t3) => {
          e.enqueueRetryable(() => onTokenChanged(t3));
        };
        const __PRIVATE_registerAppCheck = /* @__PURE__ */ __name((e2) => {
          __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = e2, this.o && this.appCheck.addTokenListener(this.o);
        }, "__PRIVATE_registerAppCheck");
        this.A.onInit((e2) => __PRIVATE_registerAppCheck(e2)), // Our users can initialize AppCheck after Firestore, so we give it
        // a chance to register itself with the component framework.
        setTimeout(() => {
          if (!this.appCheck) {
            const e2 = this.A.getImmediate({
              optional: true
            });
            e2 ? __PRIVATE_registerAppCheck(e2) : (
              // If AppCheck is still not available, proceed without it.
              __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck not yet detected")
            );
          }
        }, 0);
      }
      getToken() {
        if (this.V)
          return Promise.resolve(new AppCheckToken(this.V));
        const e = this.forceRefresh;
        return this.forceRefresh = false, this.appCheck ? this.appCheck.getToken(e).then((e2) => e2 ? (__PRIVATE_hardAssert("string" == typeof e2.token), this.R = e2.token, new AppCheckToken(e2.token)) : null) : Promise.resolve(null);
      }
      invalidateToken() {
        this.forceRefresh = true;
      }
      shutdown() {
        this.appCheck && this.o && this.appCheck.removeTokenListener(this.o), this.o = void 0;
      }
    };
    __name(__PRIVATE_FirebaseAppCheckTokenProvider, "__PRIVATE_FirebaseAppCheckTokenProvider");
    var __PRIVATE_EmptyAppCheckTokenProvider = class {
      getToken() {
        return Promise.resolve(new AppCheckToken(""));
      }
      invalidateToken() {
      }
      start(e, t2) {
      }
      shutdown() {
      }
    };
    __name(__PRIVATE_EmptyAppCheckTokenProvider, "__PRIVATE_EmptyAppCheckTokenProvider");
    function __PRIVATE_randomBytes(e) {
      const t2 = (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto)
      ), n2 = new Uint8Array(e);
      if (t2 && "function" == typeof t2.getRandomValues)
        t2.getRandomValues(n2);
      else
        for (let t3 = 0; t3 < e; t3++)
          n2[t3] = Math.floor(256 * Math.random());
      return n2;
    }
    __name(__PRIVATE_randomBytes, "__PRIVATE_randomBytes");
    var __PRIVATE_AutoId = class {
      static newId() {
        const e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", t2 = 62 * Math.floor(256 / 62);
        let n2 = "";
        for (; n2.length < 20; ) {
          const r2 = __PRIVATE_randomBytes(40);
          for (let i = 0; i < r2.length; ++i)
            n2.length < 20 && r2[i] < t2 && (n2 += e.charAt(r2[i] % 62));
        }
        return n2;
      }
    };
    __name(__PRIVATE_AutoId, "__PRIVATE_AutoId");
    function __PRIVATE_primitiveComparator(e, t2) {
      return e < t2 ? -1 : e > t2 ? 1 : 0;
    }
    __name(__PRIVATE_primitiveComparator, "__PRIVATE_primitiveComparator");
    function __PRIVATE_arrayEquals(e, t2, n2) {
      return e.length === t2.length && e.every((e2, r2) => n2(e2, t2[r2]));
    }
    __name(__PRIVATE_arrayEquals, "__PRIVATE_arrayEquals");
    function __PRIVATE_immediateSuccessor(e) {
      return e + "\0";
    }
    __name(__PRIVATE_immediateSuccessor, "__PRIVATE_immediateSuccessor");
    var F = -62135596800;
    var M = 1e6;
    var Timestamp = class {
      /**
       * Creates a new timestamp with the current date, with millisecond precision.
       *
       * @returns a new timestamp representing the current date.
       */
      static now() {
        return Timestamp.fromMillis(Date.now());
      }
      /**
       * Creates a new timestamp from the given date.
       *
       * @param date - The date to initialize the `Timestamp` from.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     date.
       */
      static fromDate(e) {
        return Timestamp.fromMillis(e.getTime());
      }
      /**
       * Creates a new timestamp from the given number of milliseconds.
       *
       * @param milliseconds - Number of milliseconds since Unix epoch
       *     1970-01-01T00:00:00Z.
       * @returns A new `Timestamp` representing the same point in time as the given
       *     number of milliseconds.
       */
      static fromMillis(e) {
        const t2 = Math.floor(e / 1e3), n2 = Math.floor((e - 1e3 * t2) * M);
        return new Timestamp(t2, n2);
      }
      /**
       * Creates a new timestamp.
       *
       * @param seconds - The number of seconds of UTC time since Unix epoch
       *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
       *     9999-12-31T23:59:59Z inclusive.
       * @param nanoseconds - The non-negative fractions of a second at nanosecond
       *     resolution. Negative second values with fractions must still have
       *     non-negative nanoseconds values that count forward in time. Must be
       *     from 0 to 999,999,999 inclusive.
       */
      constructor(e, t2) {
        if (this.seconds = e, this.nanoseconds = t2, t2 < 0)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t2);
        if (t2 >= 1e9)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t2);
        if (e < F)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
        if (e >= 253402300800)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
      }
      /**
       * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
       * causes a loss of precision since `Date` objects only support millisecond
       * precision.
       *
       * @returns JavaScript `Date` object representing the same point in time as
       *     this `Timestamp`, with millisecond precision.
       */
      toDate() {
        return new Date(this.toMillis());
      }
      /**
       * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
       * epoch). This operation causes a loss of precision.
       *
       * @returns The point in time corresponding to this timestamp, represented as
       *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
       */
      toMillis() {
        return 1e3 * this.seconds + this.nanoseconds / M;
      }
      _compareTo(e) {
        return this.seconds === e.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, e.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, e.seconds);
      }
      /**
       * Returns true if this `Timestamp` is equal to the provided one.
       *
       * @param other - The `Timestamp` to compare against.
       * @returns true if this `Timestamp` is equal to the provided one.
       */
      isEqual(e) {
        return e.seconds === this.seconds && e.nanoseconds === this.nanoseconds;
      }
      /** Returns a textual representation of this `Timestamp`. */
      toString() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
      }
      /** Returns a JSON-serializable representation of this `Timestamp`. */
      toJSON() {
        return {
          seconds: this.seconds,
          nanoseconds: this.nanoseconds
        };
      }
      /**
       * Converts this object to a primitive string, which allows `Timestamp` objects
       * to be compared using the `>`, `<=`, `>=` and `>` operators.
       */
      valueOf() {
        const e = this.seconds - F;
        return String(e).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
      }
    };
    __name(Timestamp, "Timestamp");
    var SnapshotVersion = class {
      static fromTimestamp(e) {
        return new SnapshotVersion(e);
      }
      static min() {
        return new SnapshotVersion(new Timestamp(0, 0));
      }
      static max() {
        return new SnapshotVersion(new Timestamp(253402300799, 999999999));
      }
      constructor(e) {
        this.timestamp = e;
      }
      compareTo(e) {
        return this.timestamp._compareTo(e.timestamp);
      }
      isEqual(e) {
        return this.timestamp.isEqual(e.timestamp);
      }
      /** Returns a number representation of the version for use in spec tests. */
      toMicroseconds() {
        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
      }
      toString() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
      }
      toTimestamp() {
        return this.timestamp;
      }
    };
    __name(SnapshotVersion, "SnapshotVersion");
    var x = "__name__";
    var BasePath = class {
      constructor(e, t2, n2) {
        void 0 === t2 ? t2 = 0 : t2 > e.length && fail(), void 0 === n2 ? n2 = e.length - t2 : n2 > e.length - t2 && fail(), this.segments = e, this.offset = t2, this.len = n2;
      }
      get length() {
        return this.len;
      }
      isEqual(e) {
        return 0 === BasePath.comparator(this, e);
      }
      child(e) {
        const t2 = this.segments.slice(this.offset, this.limit());
        return e instanceof BasePath ? e.forEach((e2) => {
          t2.push(e2);
        }) : t2.push(e), this.construct(t2);
      }
      /** The index of one past the last segment of the path. */
      limit() {
        return this.offset + this.length;
      }
      popFirst(e) {
        return e = void 0 === e ? 1 : e, this.construct(this.segments, this.offset + e, this.length - e);
      }
      popLast() {
        return this.construct(this.segments, this.offset, this.length - 1);
      }
      firstSegment() {
        return this.segments[this.offset];
      }
      lastSegment() {
        return this.get(this.length - 1);
      }
      get(e) {
        return this.segments[this.offset + e];
      }
      isEmpty() {
        return 0 === this.length;
      }
      isPrefixOf(e) {
        if (e.length < this.length)
          return false;
        for (let t2 = 0; t2 < this.length; t2++)
          if (this.get(t2) !== e.get(t2))
            return false;
        return true;
      }
      isImmediateParentOf(e) {
        if (this.length + 1 !== e.length)
          return false;
        for (let t2 = 0; t2 < this.length; t2++)
          if (this.get(t2) !== e.get(t2))
            return false;
        return true;
      }
      forEach(e) {
        for (let t2 = this.offset, n2 = this.limit(); t2 < n2; t2++)
          e(this.segments[t2]);
      }
      toArray() {
        return this.segments.slice(this.offset, this.limit());
      }
      /**
       * Compare 2 paths segment by segment, prioritizing numeric IDs
       * (e.g., "__id123__") in numeric ascending order, followed by string
       * segments in lexicographical order.
       */
      static comparator(e, t2) {
        const n2 = Math.min(e.length, t2.length);
        for (let r2 = 0; r2 < n2; r2++) {
          const n3 = BasePath.compareSegments(e.get(r2), t2.get(r2));
          if (0 !== n3)
            return n3;
        }
        return Math.sign(e.length - t2.length);
      }
      static compareSegments(e, t2) {
        const n2 = BasePath.isNumericId(e), r2 = BasePath.isNumericId(t2);
        return n2 && !r2 ? -1 : !n2 && r2 ? 1 : n2 && r2 ? BasePath.extractNumericId(e).compare(BasePath.extractNumericId(t2)) : (
          // both non-numeric
          e < t2 ? -1 : e > t2 ? 1 : 0
        );
      }
      // Checks if a segment is a numeric ID (starts with "__id" and ends with "__").
      static isNumericId(e) {
        return e.startsWith("__id") && e.endsWith("__");
      }
      static extractNumericId(e) {
        return bloomBlob.Integer.fromString(e.substring(4, e.length - 2));
      }
    };
    __name(BasePath, "BasePath");
    var ResourcePath = class extends BasePath {
      construct(e, t2, n2) {
        return new ResourcePath(e, t2, n2);
      }
      canonicalString() {
        return this.toArray().join("/");
      }
      toString() {
        return this.canonicalString();
      }
      /**
       * Returns a string representation of this path
       * where each path segment has been encoded with
       * `encodeURIComponent`.
       */
      toUriEncodedString() {
        return this.toArray().map(encodeURIComponent).join("/");
      }
      /**
       * Creates a resource path from the given slash-delimited string. If multiple
       * arguments are provided, all components are combined. Leading and trailing
       * slashes from all components are ignored.
       */
      static fromString(...e) {
        const t2 = [];
        for (const n2 of e) {
          if (n2.indexOf("//") >= 0)
            throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid segment (${n2}). Paths must not contain // in them.`);
          t2.push(...n2.split("/").filter((e2) => e2.length > 0));
        }
        return new ResourcePath(t2);
      }
      static emptyPath() {
        return new ResourcePath([]);
      }
    };
    __name(ResourcePath, "ResourcePath");
    var O = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
    var FieldPath$1 = class extends BasePath {
      construct(e, t2, n2) {
        return new FieldPath$1(e, t2, n2);
      }
      /**
       * Returns true if the string could be used as a segment in a field path
       * without escaping.
       */
      static isValidIdentifier(e) {
        return O.test(e);
      }
      canonicalString() {
        return this.toArray().map((e) => (e = e.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), FieldPath$1.isValidIdentifier(e) || (e = "`" + e + "`"), e)).join(".");
      }
      toString() {
        return this.canonicalString();
      }
      /**
       * Returns true if this field references the key of a document.
       */
      isKeyField() {
        return 1 === this.length && this.get(0) === x;
      }
      /**
       * The field designating the key of a document.
       */
      static keyField() {
        return new FieldPath$1([x]);
      }
      /**
       * Parses a field string from the given server-formatted string.
       *
       * - Splitting the empty string is not allowed (for now at least).
       * - Empty segments within the string (e.g. if there are two consecutive
       *   separators) are not allowed.
       *
       * TODO(b/37244157): we should make this more strict. Right now, it allows
       * non-identifier path components, even if they aren't escaped.
       */
      static fromServerFormat(e) {
        const t2 = [];
        let n2 = "", r2 = 0;
        const __PRIVATE_addCurrentSegment = /* @__PURE__ */ __name(() => {
          if (0 === n2.length)
            throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
          t2.push(n2), n2 = "";
        }, "__PRIVATE_addCurrentSegment");
        let i = false;
        for (; r2 < e.length; ) {
          const t3 = e[r2];
          if ("\\" === t3) {
            if (r2 + 1 === e.length)
              throw new FirestoreError(C.INVALID_ARGUMENT, "Path has trailing escape character: " + e);
            const t4 = e[r2 + 1];
            if ("\\" !== t4 && "." !== t4 && "`" !== t4)
              throw new FirestoreError(C.INVALID_ARGUMENT, "Path has invalid escape sequence: " + e);
            n2 += t4, r2 += 2;
          } else
            "`" === t3 ? (i = !i, r2++) : "." !== t3 || i ? (n2 += t3, r2++) : (__PRIVATE_addCurrentSegment(), r2++);
        }
        if (__PRIVATE_addCurrentSegment(), i)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Unterminated ` in path: " + e);
        return new FieldPath$1(t2);
      }
      static emptyPath() {
        return new FieldPath$1([]);
      }
    };
    __name(FieldPath$1, "FieldPath$1");
    var DocumentKey = class {
      constructor(e) {
        this.path = e;
      }
      static fromPath(e) {
        return new DocumentKey(ResourcePath.fromString(e));
      }
      static fromName(e) {
        return new DocumentKey(ResourcePath.fromString(e).popFirst(5));
      }
      static empty() {
        return new DocumentKey(ResourcePath.emptyPath());
      }
      get collectionGroup() {
        return this.path.popLast().lastSegment();
      }
      /** Returns true if the document is in the specified collectionId. */
      hasCollectionId(e) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === e;
      }
      /** Returns the collection group (i.e. the name of the parent collection) for this key. */
      getCollectionGroup() {
        return this.path.get(this.path.length - 2);
      }
      /** Returns the fully qualified path to the parent collection. */
      getCollectionPath() {
        return this.path.popLast();
      }
      isEqual(e) {
        return null !== e && 0 === ResourcePath.comparator(this.path, e.path);
      }
      toString() {
        return this.path.toString();
      }
      static comparator(e, t2) {
        return ResourcePath.comparator(e.path, t2.path);
      }
      static isDocumentKey(e) {
        return e.length % 2 == 0;
      }
      /**
       * Creates and returns a new document key with the given segments.
       *
       * @param segments - The segments of the path to the document
       * @returns A new instance of DocumentKey
       */
      static fromSegments(e) {
        return new DocumentKey(new ResourcePath(e.slice()));
      }
    };
    __name(DocumentKey, "DocumentKey");
    var N = -1;
    var FieldIndex = class {
      constructor(e, t2, n2, r2) {
        this.indexId = e, this.collectionGroup = t2, this.fields = n2, this.indexState = r2;
      }
    };
    __name(FieldIndex, "FieldIndex");
    function __PRIVATE_fieldIndexGetArraySegment(e) {
      return e.fields.find((e2) => 2 === e2.kind);
    }
    __name(__PRIVATE_fieldIndexGetArraySegment, "__PRIVATE_fieldIndexGetArraySegment");
    function __PRIVATE_fieldIndexGetDirectionalSegments(e) {
      return e.fields.filter((e2) => 2 !== e2.kind);
    }
    __name(__PRIVATE_fieldIndexGetDirectionalSegments, "__PRIVATE_fieldIndexGetDirectionalSegments");
    function __PRIVATE_fieldIndexSemanticComparator(e, t2) {
      let n2 = __PRIVATE_primitiveComparator(e.collectionGroup, t2.collectionGroup);
      if (0 !== n2)
        return n2;
      for (let r2 = 0; r2 < Math.min(e.fields.length, t2.fields.length); ++r2)
        if (n2 = __PRIVATE_indexSegmentComparator(e.fields[r2], t2.fields[r2]), 0 !== n2)
          return n2;
      return __PRIVATE_primitiveComparator(e.fields.length, t2.fields.length);
    }
    __name(__PRIVATE_fieldIndexSemanticComparator, "__PRIVATE_fieldIndexSemanticComparator");
    FieldIndex.UNKNOWN_ID = -1;
    var IndexSegment = class {
      constructor(e, t2) {
        this.fieldPath = e, this.kind = t2;
      }
    };
    __name(IndexSegment, "IndexSegment");
    function __PRIVATE_indexSegmentComparator(e, t2) {
      const n2 = FieldPath$1.comparator(e.fieldPath, t2.fieldPath);
      return 0 !== n2 ? n2 : __PRIVATE_primitiveComparator(e.kind, t2.kind);
    }
    __name(__PRIVATE_indexSegmentComparator, "__PRIVATE_indexSegmentComparator");
    var IndexState = class {
      constructor(e, t2) {
        this.sequenceNumber = e, this.offset = t2;
      }
      /** The state of an index that has not yet been backfilled. */
      static empty() {
        return new IndexState(0, IndexOffset.min());
      }
    };
    __name(IndexState, "IndexState");
    function __PRIVATE_newIndexOffsetSuccessorFromReadTime(e, t2) {
      const n2 = e.toTimestamp().seconds, r2 = e.toTimestamp().nanoseconds + 1, i = SnapshotVersion.fromTimestamp(1e9 === r2 ? new Timestamp(n2 + 1, 0) : new Timestamp(n2, r2));
      return new IndexOffset(i, DocumentKey.empty(), t2);
    }
    __name(__PRIVATE_newIndexOffsetSuccessorFromReadTime, "__PRIVATE_newIndexOffsetSuccessorFromReadTime");
    function __PRIVATE_newIndexOffsetFromDocument(e) {
      return new IndexOffset(e.readTime, e.key, N);
    }
    __name(__PRIVATE_newIndexOffsetFromDocument, "__PRIVATE_newIndexOffsetFromDocument");
    var IndexOffset = class {
      constructor(e, t2, n2) {
        this.readTime = e, this.documentKey = t2, this.largestBatchId = n2;
      }
      /** Returns an offset that sorts before all regular offsets. */
      static min() {
        return new IndexOffset(SnapshotVersion.min(), DocumentKey.empty(), N);
      }
      /** Returns an offset that sorts after all regular offsets. */
      static max() {
        return new IndexOffset(SnapshotVersion.max(), DocumentKey.empty(), N);
      }
    };
    __name(IndexOffset, "IndexOffset");
    function __PRIVATE_indexOffsetComparator(e, t2) {
      let n2 = e.readTime.compareTo(t2.readTime);
      return 0 !== n2 ? n2 : (n2 = DocumentKey.comparator(e.documentKey, t2.documentKey), 0 !== n2 ? n2 : __PRIVATE_primitiveComparator(e.largestBatchId, t2.largestBatchId));
    }
    __name(__PRIVATE_indexOffsetComparator, "__PRIVATE_indexOffsetComparator");
    var B = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
    var PersistenceTransaction = class {
      constructor() {
        this.onCommittedListeners = [];
      }
      addOnCommittedListener(e) {
        this.onCommittedListeners.push(e);
      }
      raiseOnCommittedEvent() {
        this.onCommittedListeners.forEach((e) => e());
      }
    };
    __name(PersistenceTransaction, "PersistenceTransaction");
    async function __PRIVATE_ignoreIfPrimaryLeaseLoss(e) {
      if (e.code !== C.FAILED_PRECONDITION || e.message !== B)
        throw e;
      __PRIVATE_logDebug("LocalStore", "Unexpectedly lost primary lease");
    }
    __name(__PRIVATE_ignoreIfPrimaryLeaseLoss, "__PRIVATE_ignoreIfPrimaryLeaseLoss");
    var PersistencePromise = class {
      constructor(e) {
        this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
        this.result = void 0, this.error = void 0, this.isDone = false, // Set to true when .then() or .catch() are called and prevents additional
        // chaining.
        this.callbackAttached = false, e((e2) => {
          this.isDone = true, this.result = e2, this.nextCallback && // value should be defined unless T is Void, but we can't express
          // that in the type system.
          this.nextCallback(e2);
        }, (e2) => {
          this.isDone = true, this.error = e2, this.catchCallback && this.catchCallback(e2);
        });
      }
      catch(e) {
        return this.next(void 0, e);
      }
      next(e, t2) {
        return this.callbackAttached && fail(), this.callbackAttached = true, this.isDone ? this.error ? this.wrapFailure(t2, this.error) : this.wrapSuccess(e, this.result) : new PersistencePromise((n2, r2) => {
          this.nextCallback = (t3) => {
            this.wrapSuccess(e, t3).next(n2, r2);
          }, this.catchCallback = (e2) => {
            this.wrapFailure(t2, e2).next(n2, r2);
          };
        });
      }
      toPromise() {
        return new Promise((e, t2) => {
          this.next(e, t2);
        });
      }
      wrapUserFunction(e) {
        try {
          const t2 = e();
          return t2 instanceof PersistencePromise ? t2 : PersistencePromise.resolve(t2);
        } catch (e2) {
          return PersistencePromise.reject(e2);
        }
      }
      wrapSuccess(e, t2) {
        return e ? this.wrapUserFunction(() => e(t2)) : PersistencePromise.resolve(t2);
      }
      wrapFailure(e, t2) {
        return e ? this.wrapUserFunction(() => e(t2)) : PersistencePromise.reject(t2);
      }
      static resolve(e) {
        return new PersistencePromise((t2, n2) => {
          t2(e);
        });
      }
      static reject(e) {
        return new PersistencePromise((t2, n2) => {
          n2(e);
        });
      }
      static waitFor(e) {
        return new PersistencePromise((t2, n2) => {
          let r2 = 0, i = 0, s2 = false;
          e.forEach((e2) => {
            ++r2, e2.next(() => {
              ++i, s2 && i === r2 && t2();
            }, (e3) => n2(e3));
          }), s2 = true, i === r2 && t2();
        });
      }
      /**
       * Given an array of predicate functions that asynchronously evaluate to a
       * boolean, implements a short-circuiting `or` between the results. Predicates
       * will be evaluated until one of them returns `true`, then stop. The final
       * result will be whether any of them returned `true`.
       */
      static or(e) {
        let t2 = PersistencePromise.resolve(false);
        for (const n2 of e)
          t2 = t2.next((e2) => e2 ? PersistencePromise.resolve(e2) : n2());
        return t2;
      }
      static forEach(e, t2) {
        const n2 = [];
        return e.forEach((e2, r2) => {
          n2.push(t2.call(this, e2, r2));
        }), this.waitFor(n2);
      }
      /**
       * Concurrently map all array elements through asynchronous function.
       */
      static mapArray(e, t2) {
        return new PersistencePromise((n2, r2) => {
          const i = e.length, s2 = new Array(i);
          let o2 = 0;
          for (let _ = 0; _ < i; _++) {
            const a2 = _;
            t2(e[a2]).next((e2) => {
              s2[a2] = e2, ++o2, o2 === i && n2(s2);
            }, (e2) => r2(e2));
          }
        });
      }
      /**
       * An alternative to recursive PersistencePromise calls, that avoids
       * potential memory problems from unbounded chains of promises.
       *
       * The `action` will be called repeatedly while `condition` is true.
       */
      static doWhile(e, t2) {
        return new PersistencePromise((n2, r2) => {
          const process2 = /* @__PURE__ */ __name(() => {
            true === e() ? t2().next(() => {
              process2();
            }, r2) : n2();
          }, "process");
          process2();
        });
      }
    };
    __name(PersistencePromise, "PersistencePromise");
    var L = "SimpleDb";
    var __PRIVATE_SimpleDbTransaction = class {
      static open(e, t2, n2, r2) {
        try {
          return new __PRIVATE_SimpleDbTransaction(t2, e.transaction(r2, n2));
        } catch (e2) {
          throw new __PRIVATE_IndexedDbTransactionError(t2, e2);
        }
      }
      constructor(e, t2) {
        this.action = e, this.transaction = t2, this.aborted = false, /**
         * A `Promise` that resolves with the result of the IndexedDb transaction.
         */
        this.m = new __PRIVATE_Deferred(), this.transaction.oncomplete = () => {
          this.m.resolve();
        }, this.transaction.onabort = () => {
          t2.error ? this.m.reject(new __PRIVATE_IndexedDbTransactionError(e, t2.error)) : this.m.resolve();
        }, this.transaction.onerror = (t3) => {
          const n2 = __PRIVATE_checkForAndReportiOSError(t3.target.error);
          this.m.reject(new __PRIVATE_IndexedDbTransactionError(e, n2));
        };
      }
      get p() {
        return this.m.promise;
      }
      abort(e) {
        e && this.m.reject(e), this.aborted || (__PRIVATE_logDebug(L, "Aborting transaction:", e ? e.message : "Client-initiated abort"), this.aborted = true, this.transaction.abort());
      }
      S() {
        const e = this.transaction;
        this.aborted || "function" != typeof e.commit || e.commit();
      }
      /**
       * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
       * operations performed on the SimpleDbStore happen within the context of this
       * transaction and it cannot be used anymore once the transaction is
       * completed.
       *
       * Note that we can't actually enforce that the KeyType and ValueType are
       * correct, but they allow type safety through the rest of the consuming code.
       */
      store(e) {
        const t2 = this.transaction.objectStore(e);
        return new __PRIVATE_SimpleDbStore(t2);
      }
    };
    __name(__PRIVATE_SimpleDbTransaction, "__PRIVATE_SimpleDbTransaction");
    var __PRIVATE_SimpleDb = class {
      /** Deletes the specified database. */
      static delete(e) {
        return __PRIVATE_logDebug(L, "Removing database:", e), __PRIVATE_wrapRequest(window.indexedDB.deleteDatabase(e)).toPromise();
      }
      /** Returns true if IndexedDB is available in the current environment. */
      static D() {
        if (!util.isIndexedDBAvailable())
          return false;
        if (__PRIVATE_SimpleDb.v())
          return true;
        const e = util.getUA(), t2 = __PRIVATE_SimpleDb.C(e), n2 = 0 < t2 && t2 < 10, r2 = __PRIVATE_getAndroidVersion(e), i = 0 < r2 && r2 < 4.5;
        return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || n2 || i);
      }
      /**
       * Returns true if the backing IndexedDB store is the Node IndexedDBShim
       * (see https://github.com/axemclion/IndexedDBShim).
       */
      static v() {
        var e;
        return "undefined" != typeof process && "YES" === (null === (e = process.__PRIVATE_env) || void 0 === e ? void 0 : e.F);
      }
      /** Helper to get a typed SimpleDbStore from a transaction. */
      static M(e, t2) {
        return e.store(t2);
      }
      // visible for testing
      /** Parse User Agent to determine iOS version. Returns -1 if not found. */
      static C(e) {
        const t2 = e.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n2 = t2 ? t2[1].split("_").slice(0, 2).join(".") : "-1";
        return Number(n2);
      }
      /*
       * Creates a new SimpleDb wrapper for IndexedDb database `name`.
       *
       * Note that `version` must not be a downgrade. IndexedDB does not support
       * downgrading the schema version. We currently do not support any way to do
       * versioning outside of IndexedDB's versioning mechanism, as only
       * version-upgrade transactions are allowed to do things like create
       * objectstores.
       */
      constructor(e, t2, n2) {
        this.name = e, this.version = t2, this.O = n2;
        12.2 === __PRIVATE_SimpleDb.C(util.getUA()) && __PRIVATE_logError("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
      }
      /**
       * Opens the specified database, creating or upgrading it if necessary.
       */
      async N(e) {
        return this.db || (__PRIVATE_logDebug(L, "Opening database:", this.name), this.db = await new Promise((t2, n2) => {
          const r2 = indexedDB.open(this.name, this.version);
          r2.onsuccess = (e2) => {
            const n3 = e2.target.result;
            t2(n3);
          }, r2.onblocked = () => {
            n2(new __PRIVATE_IndexedDbTransactionError(e, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
          }, r2.onerror = (t3) => {
            const r3 = t3.target.error;
            "VersionError" === r3.name ? n2(new FirestoreError(C.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : "InvalidStateError" === r3.name ? n2(new FirestoreError(C.FAILED_PRECONDITION, "Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: " + r3)) : n2(new __PRIVATE_IndexedDbTransactionError(e, r3));
          }, r2.onupgradeneeded = (e2) => {
            __PRIVATE_logDebug(L, 'Database "' + this.name + '" requires upgrade from version:', e2.oldVersion);
            const t3 = e2.target.result;
            this.O.B(t3, r2.transaction, e2.oldVersion, this.version).next(() => {
              __PRIVATE_logDebug(L, "Database upgrade to version " + this.version + " complete");
            });
          };
        })), this.L && (this.db.onversionchange = (e2) => this.L(e2)), this.db;
      }
      k(e) {
        this.L = e, this.db && (this.db.onversionchange = (t2) => e(t2));
      }
      async runTransaction(e, t2, n2, r2) {
        const i = "readonly" === t2;
        let s2 = 0;
        for (; ; ) {
          ++s2;
          try {
            this.db = await this.N(e);
            const t3 = __PRIVATE_SimpleDbTransaction.open(this.db, e, i ? "readonly" : "readwrite", n2), s3 = r2(t3).next((e2) => (t3.S(), e2)).catch((e2) => (
              // Abort the transaction if there was an error.
              (t3.abort(e2), PersistencePromise.reject(e2))
            )).toPromise();
            return s3.catch(() => {
            }), // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
            // fire), but still return the original transactionFnResult back to the
            // caller.
            await t3.p, s3;
          } catch (e2) {
            const t3 = e2, n3 = "FirebaseError" !== t3.name && s2 < 3;
            if (__PRIVATE_logDebug(L, "Transaction failed with error:", t3.message, "Retrying:", n3), this.close(), !n3)
              return Promise.reject(t3);
          }
        }
      }
      close() {
        this.db && this.db.close(), this.db = void 0;
      }
    };
    __name(__PRIVATE_SimpleDb, "__PRIVATE_SimpleDb");
    function __PRIVATE_getAndroidVersion(e) {
      const t2 = e.match(/Android ([\d.]+)/i), n2 = t2 ? t2[1].split(".").slice(0, 2).join(".") : "-1";
      return Number(n2);
    }
    __name(__PRIVATE_getAndroidVersion, "__PRIVATE_getAndroidVersion");
    var __PRIVATE_IterationController = class {
      constructor(e) {
        this.q = e, this.$ = false, this.K = null;
      }
      get isDone() {
        return this.$;
      }
      get U() {
        return this.K;
      }
      set cursor(e) {
        this.q = e;
      }
      /**
       * This function can be called to stop iteration at any point.
       */
      done() {
        this.$ = true;
      }
      /**
       * This function can be called to skip to that next key, which could be
       * an index or a primary key.
       */
      W(e) {
        this.K = e;
      }
      /**
       * Delete the current cursor value from the object store.
       *
       * NOTE: You CANNOT do this with a keysOnly query.
       */
      delete() {
        return __PRIVATE_wrapRequest(this.q.delete());
      }
    };
    __name(__PRIVATE_IterationController, "__PRIVATE_IterationController");
    var __PRIVATE_IndexedDbTransactionError = class extends FirestoreError {
      constructor(e, t2) {
        super(C.UNAVAILABLE, `IndexedDB transaction '${e}' failed: ${t2}`), this.name = "IndexedDbTransactionError";
      }
    };
    __name(__PRIVATE_IndexedDbTransactionError, "__PRIVATE_IndexedDbTransactionError");
    function __PRIVATE_isIndexedDbTransactionError(e) {
      return "IndexedDbTransactionError" === e.name;
    }
    __name(__PRIVATE_isIndexedDbTransactionError, "__PRIVATE_isIndexedDbTransactionError");
    var __PRIVATE_SimpleDbStore = class {
      constructor(e) {
        this.store = e;
      }
      put(e, t2) {
        let n2;
        return void 0 !== t2 ? (__PRIVATE_logDebug(L, "PUT", this.store.name, e, t2), n2 = this.store.put(t2, e)) : (__PRIVATE_logDebug(L, "PUT", this.store.name, "<auto-key>", e), n2 = this.store.put(e)), __PRIVATE_wrapRequest(n2);
      }
      /**
       * Adds a new value into an Object Store and returns the new key. Similar to
       * IndexedDb's `add()`, this method will fail on primary key collisions.
       *
       * @param value - The object to write.
       * @returns The key of the value to add.
       */
      add(e) {
        __PRIVATE_logDebug(L, "ADD", this.store.name, e, e);
        return __PRIVATE_wrapRequest(this.store.add(e));
      }
      /**
       * Gets the object with the specified key from the specified store, or null
       * if no object exists with the specified key.
       *
       * @key The key of the object to get.
       * @returns The object with the specified key or null if no object exists.
       */
      get(e) {
        return __PRIVATE_wrapRequest(this.store.get(e)).next((t2) => (
          // Normalize nonexistence to null.
          (void 0 === t2 && (t2 = null), __PRIVATE_logDebug(L, "GET", this.store.name, e, t2), t2)
        ));
      }
      delete(e) {
        __PRIVATE_logDebug(L, "DELETE", this.store.name, e);
        return __PRIVATE_wrapRequest(this.store.delete(e));
      }
      /**
       * If we ever need more of the count variants, we can add overloads. For now,
       * all we need is to count everything in a store.
       *
       * Returns the number of rows in the store.
       */
      count() {
        __PRIVATE_logDebug(L, "COUNT", this.store.name);
        return __PRIVATE_wrapRequest(this.store.count());
      }
      G(e, t2) {
        const n2 = this.options(e, t2), r2 = n2.index ? this.store.index(n2.index) : this.store;
        if ("function" == typeof r2.getAll) {
          const e2 = r2.getAll(n2.range);
          return new PersistencePromise((t3, n3) => {
            e2.onerror = (e3) => {
              n3(e3.target.error);
            }, e2.onsuccess = (e3) => {
              t3(e3.target.result);
            };
          });
        }
        {
          const e2 = this.cursor(n2), t3 = [];
          return this.j(e2, (e3, n3) => {
            t3.push(n3);
          }).next(() => t3);
        }
      }
      /**
       * Loads the first `count` elements from the provided index range. Loads all
       * elements if no limit is provided.
       */
      H(e, t2) {
        const n2 = this.store.getAll(e, null === t2 ? void 0 : t2);
        return new PersistencePromise((e2, t3) => {
          n2.onerror = (e3) => {
            t3(e3.target.error);
          }, n2.onsuccess = (t4) => {
            e2(t4.target.result);
          };
        });
      }
      J(e, t2) {
        __PRIVATE_logDebug(L, "DELETE ALL", this.store.name);
        const n2 = this.options(e, t2);
        n2.Y = false;
        const r2 = this.cursor(n2);
        return this.j(r2, (e2, t3, n3) => n3.delete());
      }
      Z(e, t2) {
        let n2;
        t2 ? n2 = e : (n2 = {}, t2 = e);
        const r2 = this.cursor(n2);
        return this.j(r2, t2);
      }
      /**
       * Iterates over a store, but waits for the given callback to complete for
       * each entry before iterating the next entry. This allows the callback to do
       * asynchronous work to determine if this iteration should continue.
       *
       * The provided callback should return `true` to continue iteration, and
       * `false` otherwise.
       */
      X(e) {
        const t2 = this.cursor({});
        return new PersistencePromise((n2, r2) => {
          t2.onerror = (e2) => {
            const t3 = __PRIVATE_checkForAndReportiOSError(e2.target.error);
            r2(t3);
          }, t2.onsuccess = (t3) => {
            const r3 = t3.target.result;
            r3 ? e(r3.primaryKey, r3.value).next((e2) => {
              e2 ? r3.continue() : n2();
            }) : n2();
          };
        });
      }
      j(e, t2) {
        const n2 = [];
        return new PersistencePromise((r2, i) => {
          e.onerror = (e2) => {
            i(e2.target.error);
          }, e.onsuccess = (e2) => {
            const i2 = e2.target.result;
            if (!i2)
              return void r2();
            const s2 = new __PRIVATE_IterationController(i2), o2 = t2(i2.primaryKey, i2.value, s2);
            if (o2 instanceof PersistencePromise) {
              const e3 = o2.catch((e4) => (s2.done(), PersistencePromise.reject(e4)));
              n2.push(e3);
            }
            s2.isDone ? r2() : null === s2.U ? i2.continue() : i2.continue(s2.U);
          };
        }).next(() => PersistencePromise.waitFor(n2));
      }
      options(e, t2) {
        let n2;
        return void 0 !== e && ("string" == typeof e ? n2 = e : t2 = e), {
          index: n2,
          range: t2
        };
      }
      cursor(e) {
        let t2 = "next";
        if (e.reverse && (t2 = "prev"), e.index) {
          const n2 = this.store.index(e.index);
          return e.Y ? n2.openKeyCursor(e.range, t2) : n2.openCursor(e.range, t2);
        }
        return this.store.openCursor(e.range, t2);
      }
    };
    __name(__PRIVATE_SimpleDbStore, "__PRIVATE_SimpleDbStore");
    function __PRIVATE_wrapRequest(e) {
      return new PersistencePromise((t2, n2) => {
        e.onsuccess = (e2) => {
          const n3 = e2.target.result;
          t2(n3);
        }, e.onerror = (e2) => {
          const t3 = __PRIVATE_checkForAndReportiOSError(e2.target.error);
          n2(t3);
        };
      });
    }
    __name(__PRIVATE_wrapRequest, "__PRIVATE_wrapRequest");
    var k = false;
    function __PRIVATE_checkForAndReportiOSError(e) {
      const t2 = __PRIVATE_SimpleDb.C(util.getUA());
      if (t2 >= 12.2 && t2 < 13) {
        const t3 = "An internal error was encountered in the Indexed Database server";
        if (e.message.indexOf(t3) >= 0) {
          const e2 = new FirestoreError("internal", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${t3}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);
          return k || (k = true, // Throw a global exception outside of this promise chain, for the user to
          // potentially catch.
          setTimeout(() => {
            throw e2;
          }, 0)), e2;
        }
      }
      return e;
    }
    __name(__PRIVATE_checkForAndReportiOSError, "__PRIVATE_checkForAndReportiOSError");
    var q = "IndexBackfiller";
    var __PRIVATE_IndexBackfillerScheduler = class {
      constructor(e, t2) {
        this.asyncQueue = e, this.ee = t2, this.task = null;
      }
      start() {
        this.te(15e3);
      }
      stop() {
        this.task && (this.task.cancel(), this.task = null);
      }
      get started() {
        return null !== this.task;
      }
      te(e) {
        __PRIVATE_logDebug(q, `Scheduled in ${e}ms`), this.task = this.asyncQueue.enqueueAfterDelay("index_backfill", e, async () => {
          this.task = null;
          try {
            const e2 = await this.ee.ne();
            __PRIVATE_logDebug(q, `Documents written: ${e2}`);
          } catch (e2) {
            __PRIVATE_isIndexedDbTransactionError(e2) ? __PRIVATE_logDebug(q, "Ignoring IndexedDB error during index backfill: ", e2) : await __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);
          }
          await this.te(6e4);
        });
      }
    };
    __name(__PRIVATE_IndexBackfillerScheduler, "__PRIVATE_IndexBackfillerScheduler");
    var __PRIVATE_IndexBackfiller = class {
      constructor(e, t2) {
        this.localStore = e, this.persistence = t2;
      }
      async ne(e = 50) {
        return this.persistence.runTransaction("Backfill Indexes", "readwrite-primary", (t2) => this.re(t2, e));
      }
      /** Writes index entries until the cap is reached. Returns the number of documents processed. */
      re(e, t2) {
        const n2 = /* @__PURE__ */ new Set();
        let r2 = t2, i = true;
        return PersistencePromise.doWhile(() => true === i && r2 > 0, () => this.localStore.indexManager.getNextCollectionGroupToUpdate(e).next((t3) => {
          if (null !== t3 && !n2.has(t3))
            return __PRIVATE_logDebug(q, `Processing collection: ${t3}`), this.ie(e, t3, r2).next((e2) => {
              r2 -= e2, n2.add(t3);
            });
          i = false;
        })).next(() => t2 - r2);
      }
      /**
       * Writes entries for the provided collection group. Returns the number of documents processed.
       */
      ie(e, t2, n2) {
        return this.localStore.indexManager.getMinOffsetFromCollectionGroup(e, t2).next((r2) => this.localStore.localDocuments.getNextDocuments(e, t2, r2, n2).next((n3) => {
          const i = n3.changes;
          return this.localStore.indexManager.updateIndexEntries(e, i).next(() => this.se(r2, n3)).next((n4) => (__PRIVATE_logDebug(q, `Updating offset: ${n4}`), this.localStore.indexManager.updateCollectionGroup(e, t2, n4))).next(() => i.size);
        }));
      }
      /** Returns the next offset based on the provided documents. */
      se(e, t2) {
        let n2 = e;
        return t2.changes.forEach((e2, t3) => {
          const r2 = __PRIVATE_newIndexOffsetFromDocument(t3);
          __PRIVATE_indexOffsetComparator(r2, n2) > 0 && (n2 = r2);
        }), new IndexOffset(n2.readTime, n2.documentKey, Math.max(t2.batchId, e.largestBatchId));
      }
    };
    __name(__PRIVATE_IndexBackfiller, "__PRIVATE_IndexBackfiller");
    var __PRIVATE_ListenSequence = class {
      constructor(e, t2) {
        this.previousValue = e, t2 && (t2.sequenceNumberHandler = (e2) => this.oe(e2), this._e = (e2) => t2.writeSequenceNumber(e2));
      }
      oe(e) {
        return this.previousValue = Math.max(e, this.previousValue), this.previousValue;
      }
      next() {
        const e = ++this.previousValue;
        return this._e && this._e(e), e;
      }
    };
    __name(__PRIVATE_ListenSequence, "__PRIVATE_ListenSequence");
    __PRIVATE_ListenSequence.ae = -1;
    var Q = -1;
    function __PRIVATE_isNullOrUndefined(e) {
      return null == e;
    }
    __name(__PRIVATE_isNullOrUndefined, "__PRIVATE_isNullOrUndefined");
    function __PRIVATE_isNegativeZero(e) {
      return 0 === e && 1 / e == -1 / 0;
    }
    __name(__PRIVATE_isNegativeZero, "__PRIVATE_isNegativeZero");
    function isSafeInteger(e) {
      return "number" == typeof e && Number.isInteger(e) && !__PRIVATE_isNegativeZero(e) && e <= Number.MAX_SAFE_INTEGER && e >= Number.MIN_SAFE_INTEGER;
    }
    __name(isSafeInteger, "isSafeInteger");
    var $ = "";
    function __PRIVATE_encodeResourcePath(e) {
      let t2 = "";
      for (let n2 = 0; n2 < e.length; n2++)
        t2.length > 0 && (t2 = __PRIVATE_encodeSeparator(t2)), t2 = __PRIVATE_encodeSegment(e.get(n2), t2);
      return __PRIVATE_encodeSeparator(t2);
    }
    __name(__PRIVATE_encodeResourcePath, "__PRIVATE_encodeResourcePath");
    function __PRIVATE_encodeSegment(e, t2) {
      let n2 = t2;
      const r2 = e.length;
      for (let t3 = 0; t3 < r2; t3++) {
        const r3 = e.charAt(t3);
        switch (r3) {
          case "\0":
            n2 += "";
            break;
          case $:
            n2 += "";
            break;
          default:
            n2 += r3;
        }
      }
      return n2;
    }
    __name(__PRIVATE_encodeSegment, "__PRIVATE_encodeSegment");
    function __PRIVATE_encodeSeparator(e) {
      return e + $ + "";
    }
    __name(__PRIVATE_encodeSeparator, "__PRIVATE_encodeSeparator");
    function __PRIVATE_decodeResourcePath(e) {
      const t2 = e.length;
      if (__PRIVATE_hardAssert(t2 >= 2), 2 === t2)
        return __PRIVATE_hardAssert(e.charAt(0) === $ && "" === e.charAt(1)), ResourcePath.emptyPath();
      const __PRIVATE_lastReasonableEscapeIndex = t2 - 2, n2 = [];
      let r2 = "";
      for (let i = 0; i < t2; ) {
        const t3 = e.indexOf($, i);
        (t3 < 0 || t3 > __PRIVATE_lastReasonableEscapeIndex) && fail();
        switch (e.charAt(t3 + 1)) {
          case "":
            const s2 = e.substring(i, t3);
            let o2;
            0 === r2.length ? (
              // Avoid copying for the common case of a segment that excludes \0
              // and \001
              o2 = s2
            ) : (r2 += s2, o2 = r2, r2 = ""), n2.push(o2);
            break;
          case "":
            r2 += e.substring(i, t3), r2 += "\0";
            break;
          case "":
            r2 += e.substring(i, t3 + 1);
            break;
          default:
            fail();
        }
        i = t3 + 2;
      }
      return new ResourcePath(n2);
    }
    __name(__PRIVATE_decodeResourcePath, "__PRIVATE_decodeResourcePath");
    var K = "remoteDocuments";
    var U = "owner";
    var W = "owner";
    var G = "mutationQueues";
    var z = "userId";
    var j = "mutations";
    var H = "batchId";
    var J = "userMutationsIndex";
    var Y = ["userId", "batchId"];
    function __PRIVATE_newDbDocumentMutationPrefixForPath(e, t2) {
      return [e, __PRIVATE_encodeResourcePath(t2)];
    }
    __name(__PRIVATE_newDbDocumentMutationPrefixForPath, "__PRIVATE_newDbDocumentMutationPrefixForPath");
    function __PRIVATE_newDbDocumentMutationKey(e, t2, n2) {
      return [e, __PRIVATE_encodeResourcePath(t2), n2];
    }
    __name(__PRIVATE_newDbDocumentMutationKey, "__PRIVATE_newDbDocumentMutationKey");
    var Z = {};
    var X = "documentMutations";
    var ee = "remoteDocumentsV14";
    var te = ["prefixPath", "collectionGroup", "readTime", "documentId"];
    var ne = "documentKeyIndex";
    var re = ["prefixPath", "collectionGroup", "documentId"];
    var ie = "collectionGroupIndex";
    var se = ["collectionGroup", "readTime", "prefixPath", "documentId"];
    var oe = "remoteDocumentGlobal";
    var _e = "remoteDocumentGlobalKey";
    var ae = "targets";
    var ue = "queryTargetsIndex";
    var ce = ["canonicalId", "targetId"];
    var le = "targetDocuments";
    var he = ["targetId", "path"];
    var Pe = "documentTargetsIndex";
    var Te = ["path", "targetId"];
    var Ie = "targetGlobalKey";
    var Ee = "targetGlobal";
    var de = "collectionParents";
    var Ae = ["collectionId", "parent"];
    var Re = "clientMetadata";
    var Ve = "clientId";
    var me = "bundles";
    var fe = "bundleId";
    var ge = "namedQueries";
    var pe = "name";
    var ye = "indexConfiguration";
    var we = "indexId";
    var Se = "collectionGroupIndex";
    var be = "collectionGroup";
    var De = "indexState";
    var ve = ["indexId", "uid"];
    var Ce = "sequenceNumberIndex";
    var Fe = ["uid", "sequenceNumber"];
    var Me = "indexEntries";
    var xe = ["indexId", "uid", "arrayValue", "directionalValue", "orderedDocumentKey", "documentKey"];
    var Oe = "documentKeyIndex";
    var Ne = ["indexId", "uid", "orderedDocumentKey"];
    var Be = "documentOverlays";
    var Le = ["userId", "collectionPath", "documentId"];
    var ke = "collectionPathOverlayIndex";
    var qe = ["userId", "collectionPath", "largestBatchId"];
    var Qe = "collectionGroupOverlayIndex";
    var $e = ["userId", "collectionGroup", "largestBatchId"];
    var Ke = "globals";
    var Ue = "name";
    var We = [...[...[...[...[G, j, X, K, ae, U, Ee, le], Re], oe], de], me, ge];
    var Ge = [...We, Be];
    var ze = [G, j, X, ee, ae, U, Ee, le, Re, oe, de, me, ge, Be];
    var je = ze;
    var He = [...je, ye, De, Me];
    var Je = He;
    var Ye = [...He, Ke];
    var __PRIVATE_IndexedDbTransaction = class extends PersistenceTransaction {
      constructor(e, t2) {
        super(), this.ue = e, this.currentSequenceNumber = t2;
      }
    };
    __name(__PRIVATE_IndexedDbTransaction, "__PRIVATE_IndexedDbTransaction");
    function __PRIVATE_getStore(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      return __PRIVATE_SimpleDb.M(n2.ue, t2);
    }
    __name(__PRIVATE_getStore, "__PRIVATE_getStore");
    function __PRIVATE_objectSize(e) {
      let t2 = 0;
      for (const n2 in e)
        Object.prototype.hasOwnProperty.call(e, n2) && t2++;
      return t2;
    }
    __name(__PRIVATE_objectSize, "__PRIVATE_objectSize");
    function forEach(e, t2) {
      for (const n2 in e)
        Object.prototype.hasOwnProperty.call(e, n2) && t2(n2, e[n2]);
    }
    __name(forEach, "forEach");
    function __PRIVATE_mapToArray(e, t2) {
      const n2 = [];
      for (const r2 in e)
        Object.prototype.hasOwnProperty.call(e, r2) && n2.push(t2(e[r2], r2, e));
      return n2;
    }
    __name(__PRIVATE_mapToArray, "__PRIVATE_mapToArray");
    function isEmpty(e) {
      for (const t2 in e)
        if (Object.prototype.hasOwnProperty.call(e, t2))
          return false;
      return true;
    }
    __name(isEmpty, "isEmpty");
    var SortedMap = class {
      constructor(e, t2) {
        this.comparator = e, this.root = t2 || LLRBNode.EMPTY;
      }
      // Returns a copy of the map, with the specified key/value added or replaced.
      insert(e, t2) {
        return new SortedMap(this.comparator, this.root.insert(e, t2, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
      }
      // Returns a copy of the map, with the specified key removed.
      remove(e) {
        return new SortedMap(this.comparator, this.root.remove(e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
      }
      // Returns the value of the node with the given key, or null.
      get(e) {
        let t2 = this.root;
        for (; !t2.isEmpty(); ) {
          const n2 = this.comparator(e, t2.key);
          if (0 === n2)
            return t2.value;
          n2 < 0 ? t2 = t2.left : n2 > 0 && (t2 = t2.right);
        }
        return null;
      }
      // Returns the index of the element in this sorted map, or -1 if it doesn't
      // exist.
      indexOf(e) {
        let t2 = 0, n2 = this.root;
        for (; !n2.isEmpty(); ) {
          const r2 = this.comparator(e, n2.key);
          if (0 === r2)
            return t2 + n2.left.size;
          r2 < 0 ? n2 = n2.left : (
            // Count all nodes left of the node plus the node itself
            (t2 += n2.left.size + 1, n2 = n2.right)
          );
        }
        return -1;
      }
      isEmpty() {
        return this.root.isEmpty();
      }
      // Returns the total number of nodes in the map.
      get size() {
        return this.root.size;
      }
      // Returns the minimum key in the map.
      minKey() {
        return this.root.minKey();
      }
      // Returns the maximum key in the map.
      maxKey() {
        return this.root.maxKey();
      }
      // Traverses the map in key order and calls the specified action function
      // for each key/value pair. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      inorderTraversal(e) {
        return this.root.inorderTraversal(e);
      }
      forEach(e) {
        this.inorderTraversal((t2, n2) => (e(t2, n2), false));
      }
      toString() {
        const e = [];
        return this.inorderTraversal((t2, n2) => (e.push(`${t2}:${n2}`), false)), `{${e.join(", ")}}`;
      }
      // Traverses the map in reverse key order and calls the specified action
      // function for each key/value pair. If action returns true, traversal is
      // aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      reverseTraversal(e) {
        return this.root.reverseTraversal(e);
      }
      // Returns an iterator over the SortedMap.
      getIterator() {
        return new SortedMapIterator(this.root, null, this.comparator, false);
      }
      getIteratorFrom(e) {
        return new SortedMapIterator(this.root, e, this.comparator, false);
      }
      getReverseIterator() {
        return new SortedMapIterator(this.root, null, this.comparator, true);
      }
      getReverseIteratorFrom(e) {
        return new SortedMapIterator(this.root, e, this.comparator, true);
      }
    };
    __name(SortedMap, "SortedMap");
    var SortedMapIterator = class {
      constructor(e, t2, n2, r2) {
        this.isReverse = r2, this.nodeStack = [];
        let i = 1;
        for (; !e.isEmpty(); )
          if (i = t2 ? n2(e.key, t2) : 1, // flip the comparison if we're going in reverse
          t2 && r2 && (i *= -1), i < 0)
            e = this.isReverse ? e.left : e.right;
          else {
            if (0 === i) {
              this.nodeStack.push(e);
              break;
            }
            this.nodeStack.push(e), e = this.isReverse ? e.right : e.left;
          }
      }
      getNext() {
        let e = this.nodeStack.pop();
        const t2 = {
          key: e.key,
          value: e.value
        };
        if (this.isReverse)
          for (e = e.left; !e.isEmpty(); )
            this.nodeStack.push(e), e = e.right;
        else
          for (e = e.right; !e.isEmpty(); )
            this.nodeStack.push(e), e = e.left;
        return t2;
      }
      hasNext() {
        return this.nodeStack.length > 0;
      }
      peek() {
        if (0 === this.nodeStack.length)
          return null;
        const e = this.nodeStack[this.nodeStack.length - 1];
        return {
          key: e.key,
          value: e.value
        };
      }
    };
    __name(SortedMapIterator, "SortedMapIterator");
    var LLRBNode = class {
      constructor(e, t2, n2, r2, i) {
        this.key = e, this.value = t2, this.color = null != n2 ? n2 : LLRBNode.RED, this.left = null != r2 ? r2 : LLRBNode.EMPTY, this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;
      }
      // Returns a copy of the current node, optionally replacing pieces of it.
      copy(e, t2, n2, r2, i) {
        return new LLRBNode(null != e ? e : this.key, null != t2 ? t2 : this.value, null != n2 ? n2 : this.color, null != r2 ? r2 : this.left, null != i ? i : this.right);
      }
      isEmpty() {
        return false;
      }
      // Traverses the tree in key order and calls the specified action function
      // for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      inorderTraversal(e) {
        return this.left.inorderTraversal(e) || e(this.key, this.value) || this.right.inorderTraversal(e);
      }
      // Traverses the tree in reverse key order and calls the specified action
      // function for each node. If action returns true, traversal is aborted.
      // Returns the first truthy value returned by action, or the last falsey
      // value returned by action.
      reverseTraversal(e) {
        return this.right.reverseTraversal(e) || e(this.key, this.value) || this.left.reverseTraversal(e);
      }
      // Returns the minimum node in the tree.
      min() {
        return this.left.isEmpty() ? this : this.left.min();
      }
      // Returns the maximum key in the tree.
      minKey() {
        return this.min().key;
      }
      // Returns the maximum key in the tree.
      maxKey() {
        return this.right.isEmpty() ? this.key : this.right.maxKey();
      }
      // Returns new tree, with the key/value added.
      insert(e, t2, n2) {
        let r2 = this;
        const i = n2(e, r2.key);
        return r2 = i < 0 ? r2.copy(null, null, null, r2.left.insert(e, t2, n2), null) : 0 === i ? r2.copy(null, t2, null, null, null) : r2.copy(null, null, null, null, r2.right.insert(e, t2, n2)), r2.fixUp();
      }
      removeMin() {
        if (this.left.isEmpty())
          return LLRBNode.EMPTY;
        let e = this;
        return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), e = e.copy(null, null, null, e.left.removeMin(), null), e.fixUp();
      }
      // Returns new tree, with the specified item removed.
      remove(e, t2) {
        let n2, r2 = this;
        if (t2(e, r2.key) < 0)
          r2.left.isEmpty() || r2.left.isRed() || r2.left.left.isRed() || (r2 = r2.moveRedLeft()), r2 = r2.copy(null, null, null, r2.left.remove(e, t2), null);
        else {
          if (r2.left.isRed() && (r2 = r2.rotateRight()), r2.right.isEmpty() || r2.right.isRed() || r2.right.left.isRed() || (r2 = r2.moveRedRight()), 0 === t2(e, r2.key)) {
            if (r2.right.isEmpty())
              return LLRBNode.EMPTY;
            n2 = r2.right.min(), r2 = r2.copy(n2.key, n2.value, null, null, r2.right.removeMin());
          }
          r2 = r2.copy(null, null, null, null, r2.right.remove(e, t2));
        }
        return r2.fixUp();
      }
      isRed() {
        return this.color;
      }
      // Returns new tree after performing any needed rotations.
      fixUp() {
        let e = this;
        return e.right.isRed() && !e.left.isRed() && (e = e.rotateLeft()), e.left.isRed() && e.left.left.isRed() && (e = e.rotateRight()), e.left.isRed() && e.right.isRed() && (e = e.colorFlip()), e;
      }
      moveRedLeft() {
        let e = this.colorFlip();
        return e.right.left.isRed() && (e = e.copy(null, null, null, null, e.right.rotateRight()), e = e.rotateLeft(), e = e.colorFlip()), e;
      }
      moveRedRight() {
        let e = this.colorFlip();
        return e.left.left.isRed() && (e = e.rotateRight(), e = e.colorFlip()), e;
      }
      rotateLeft() {
        const e = this.copy(null, null, LLRBNode.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, e, null);
      }
      rotateRight() {
        const e = this.copy(null, null, LLRBNode.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, e);
      }
      colorFlip() {
        const e = this.left.copy(null, null, !this.left.color, null, null), t2 = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, e, t2);
      }
      // For testing.
      checkMaxDepth() {
        const e = this.check();
        return Math.pow(2, e) <= this.size + 1;
      }
      // In a balanced RB tree, the black-depth (number of black nodes) from root to
      // leaves is equal on both sides.  This function verifies that or asserts.
      check() {
        if (this.isRed() && this.left.isRed())
          throw fail();
        if (this.right.isRed())
          throw fail();
        const e = this.left.check();
        if (e !== this.right.check())
          throw fail();
        return e + (this.isRed() ? 0 : 1);
      }
    };
    __name(LLRBNode, "LLRBNode");
    LLRBNode.EMPTY = null, LLRBNode.RED = true, LLRBNode.BLACK = false;
    LLRBNode.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).
    (/* @__PURE__ */ __name(class LLRBEmptyNode {
      constructor() {
        this.size = 0;
      }
      get key() {
        throw fail();
      }
      get value() {
        throw fail();
      }
      get color() {
        throw fail();
      }
      get left() {
        throw fail();
      }
      get right() {
        throw fail();
      }
      // Returns a copy of the current node.
      copy(e, t2, n2, r2, i) {
        return this;
      }
      // Returns a copy of the tree, with the specified key/value added.
      insert(e, t2, n2) {
        return new LLRBNode(e, t2);
      }
      // Returns a copy of the tree, with the specified key removed.
      remove(e, t2) {
        return this;
      }
      isEmpty() {
        return true;
      }
      inorderTraversal(e) {
        return false;
      }
      reverseTraversal(e) {
        return false;
      }
      minKey() {
        return null;
      }
      maxKey() {
        return null;
      }
      isRed() {
        return false;
      }
      // For testing.
      checkMaxDepth() {
        return true;
      }
      check() {
        return 0;
      }
    }, "LLRBEmptyNode"))();
    var SortedSet = class {
      constructor(e) {
        this.comparator = e, this.data = new SortedMap(this.comparator);
      }
      has(e) {
        return null !== this.data.get(e);
      }
      first() {
        return this.data.minKey();
      }
      last() {
        return this.data.maxKey();
      }
      get size() {
        return this.data.size;
      }
      indexOf(e) {
        return this.data.indexOf(e);
      }
      /** Iterates elements in order defined by "comparator" */
      forEach(e) {
        this.data.inorderTraversal((t2, n2) => (e(t2), false));
      }
      /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */
      forEachInRange(e, t2) {
        const n2 = this.data.getIteratorFrom(e[0]);
        for (; n2.hasNext(); ) {
          const r2 = n2.getNext();
          if (this.comparator(r2.key, e[1]) >= 0)
            return;
          t2(r2.key);
        }
      }
      /**
       * Iterates over `elem`s such that: start &lt;= elem until false is returned.
       */
      forEachWhile(e, t2) {
        let n2;
        for (n2 = void 0 !== t2 ? this.data.getIteratorFrom(t2) : this.data.getIterator(); n2.hasNext(); ) {
          if (!e(n2.getNext().key))
            return;
        }
      }
      /** Finds the least element greater than or equal to `elem`. */
      firstAfterOrEqual(e) {
        const t2 = this.data.getIteratorFrom(e);
        return t2.hasNext() ? t2.getNext().key : null;
      }
      getIterator() {
        return new SortedSetIterator(this.data.getIterator());
      }
      getIteratorFrom(e) {
        return new SortedSetIterator(this.data.getIteratorFrom(e));
      }
      /** Inserts or updates an element */
      add(e) {
        return this.copy(this.data.remove(e).insert(e, true));
      }
      /** Deletes an element */
      delete(e) {
        return this.has(e) ? this.copy(this.data.remove(e)) : this;
      }
      isEmpty() {
        return this.data.isEmpty();
      }
      unionWith(e) {
        let t2 = this;
        return t2.size < e.size && (t2 = e, e = this), e.forEach((e2) => {
          t2 = t2.add(e2);
        }), t2;
      }
      isEqual(e) {
        if (!(e instanceof SortedSet))
          return false;
        if (this.size !== e.size)
          return false;
        const t2 = this.data.getIterator(), n2 = e.data.getIterator();
        for (; t2.hasNext(); ) {
          const e2 = t2.getNext().key, r2 = n2.getNext().key;
          if (0 !== this.comparator(e2, r2))
            return false;
        }
        return true;
      }
      toArray() {
        const e = [];
        return this.forEach((t2) => {
          e.push(t2);
        }), e;
      }
      toString() {
        const e = [];
        return this.forEach((t2) => e.push(t2)), "SortedSet(" + e.toString() + ")";
      }
      copy(e) {
        const t2 = new SortedSet(this.comparator);
        return t2.data = e, t2;
      }
    };
    __name(SortedSet, "SortedSet");
    var SortedSetIterator = class {
      constructor(e) {
        this.iter = e;
      }
      getNext() {
        return this.iter.getNext().key;
      }
      hasNext() {
        return this.iter.hasNext();
      }
    };
    __name(SortedSetIterator, "SortedSetIterator");
    function __PRIVATE_advanceIterator(e) {
      return e.hasNext() ? e.getNext() : void 0;
    }
    __name(__PRIVATE_advanceIterator, "__PRIVATE_advanceIterator");
    var FieldMask = class {
      constructor(e) {
        this.fields = e, // TODO(dimond): validation of FieldMask
        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
        e.sort(FieldPath$1.comparator);
      }
      static empty() {
        return new FieldMask([]);
      }
      /**
       * Returns a new FieldMask object that is the result of adding all the given
       * fields paths to this field mask.
       */
      unionWith(e) {
        let t2 = new SortedSet(FieldPath$1.comparator);
        for (const e2 of this.fields)
          t2 = t2.add(e2);
        for (const n2 of e)
          t2 = t2.add(n2);
        return new FieldMask(t2.toArray());
      }
      /**
       * Verifies that `fieldPath` is included by at least one field in this field
       * mask.
       *
       * This is an O(n) operation, where `n` is the size of the field mask.
       */
      covers(e) {
        for (const t2 of this.fields)
          if (t2.isPrefixOf(e))
            return true;
        return false;
      }
      isEqual(e) {
        return __PRIVATE_arrayEquals(this.fields, e.fields, (e2, t2) => e2.isEqual(t2));
      }
    };
    __name(FieldMask, "FieldMask");
    var __PRIVATE_Base64DecodeError = class extends Error {
      constructor() {
        super(...arguments), this.name = "Base64DecodeError";
      }
    };
    __name(__PRIVATE_Base64DecodeError, "__PRIVATE_Base64DecodeError");
    function __PRIVATE_isBase64Available() {
      return "undefined" != typeof atob;
    }
    __name(__PRIVATE_isBase64Available, "__PRIVATE_isBase64Available");
    var ByteString = class {
      constructor(e) {
        this.binaryString = e;
      }
      static fromBase64String(e) {
        const t2 = (/* @__PURE__ */ __name(function __PRIVATE_decodeBase64(e2) {
          try {
            return atob(e2);
          } catch (e3) {
            throw "undefined" != typeof DOMException && e3 instanceof DOMException ? new __PRIVATE_Base64DecodeError("Invalid base64 string: " + e3) : e3;
          }
        }, "__PRIVATE_decodeBase64"))(e);
        return new ByteString(t2);
      }
      static fromUint8Array(e) {
        const t2 = (
          /**
          * Helper function to convert an Uint8array to a binary string.
          */
          (/* @__PURE__ */ __name(function __PRIVATE_binaryStringFromUint8Array(e2) {
            let t3 = "";
            for (let n2 = 0; n2 < e2.length; ++n2)
              t3 += String.fromCharCode(e2[n2]);
            return t3;
          }, "__PRIVATE_binaryStringFromUint8Array"))(e)
        );
        return new ByteString(t2);
      }
      [Symbol.iterator]() {
        let e = 0;
        return {
          next: () => e < this.binaryString.length ? {
            value: this.binaryString.charCodeAt(e++),
            done: false
          } : {
            value: void 0,
            done: true
          }
        };
      }
      toBase64() {
        return (/* @__PURE__ */ __name(function __PRIVATE_encodeBase64(e) {
          return btoa(e);
        }, "__PRIVATE_encodeBase64"))(this.binaryString);
      }
      toUint8Array() {
        return (/* @__PURE__ */ __name(function __PRIVATE_uint8ArrayFromBinaryString(e) {
          const t2 = new Uint8Array(e.length);
          for (let n2 = 0; n2 < e.length; n2++)
            t2[n2] = e.charCodeAt(n2);
          return t2;
        }, "__PRIVATE_uint8ArrayFromBinaryString"))(this.binaryString);
      }
      approximateByteSize() {
        return 2 * this.binaryString.length;
      }
      compareTo(e) {
        return __PRIVATE_primitiveComparator(this.binaryString, e.binaryString);
      }
      isEqual(e) {
        return this.binaryString === e.binaryString;
      }
    };
    __name(ByteString, "ByteString");
    ByteString.EMPTY_BYTE_STRING = new ByteString("");
    var Ze = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
    function __PRIVATE_normalizeTimestamp(e) {
      if (__PRIVATE_hardAssert(!!e), "string" == typeof e) {
        let t2 = 0;
        const n2 = Ze.exec(e);
        if (__PRIVATE_hardAssert(!!n2), n2[1]) {
          let e2 = n2[1];
          e2 = (e2 + "000000000").substr(0, 9), t2 = Number(e2);
        }
        const r2 = new Date(e);
        return {
          seconds: Math.floor(r2.getTime() / 1e3),
          nanos: t2
        };
      }
      return {
        seconds: __PRIVATE_normalizeNumber(e.seconds),
        nanos: __PRIVATE_normalizeNumber(e.nanos)
      };
    }
    __name(__PRIVATE_normalizeTimestamp, "__PRIVATE_normalizeTimestamp");
    function __PRIVATE_normalizeNumber(e) {
      return "number" == typeof e ? e : "string" == typeof e ? Number(e) : 0;
    }
    __name(__PRIVATE_normalizeNumber, "__PRIVATE_normalizeNumber");
    function __PRIVATE_normalizeByteString(e) {
      return "string" == typeof e ? ByteString.fromBase64String(e) : ByteString.fromUint8Array(e);
    }
    __name(__PRIVATE_normalizeByteString, "__PRIVATE_normalizeByteString");
    var Xe = "server_timestamp";
    var et = "__type__";
    var tt = "__previous_value__";
    var nt = "__local_write_time__";
    function __PRIVATE_isServerTimestamp(e) {
      var t2, n2;
      return (null === (n2 = ((null === (t2 = null == e ? void 0 : e.mapValue) || void 0 === t2 ? void 0 : t2.fields) || {})[et]) || void 0 === n2 ? void 0 : n2.stringValue) === Xe;
    }
    __name(__PRIVATE_isServerTimestamp, "__PRIVATE_isServerTimestamp");
    function __PRIVATE_getPreviousValue(e) {
      const t2 = e.mapValue.fields[tt];
      return __PRIVATE_isServerTimestamp(t2) ? __PRIVATE_getPreviousValue(t2) : t2;
    }
    __name(__PRIVATE_getPreviousValue, "__PRIVATE_getPreviousValue");
    function __PRIVATE_getLocalWriteTime(e) {
      const t2 = __PRIVATE_normalizeTimestamp(e.mapValue.fields[nt].timestampValue);
      return new Timestamp(t2.seconds, t2.nanos);
    }
    __name(__PRIVATE_getLocalWriteTime, "__PRIVATE_getLocalWriteTime");
    var DatabaseInfo = class {
      /**
       * Constructs a DatabaseInfo using the provided host, databaseId and
       * persistenceKey.
       *
       * @param databaseId - The database to use.
       * @param appId - The Firebase App Id.
       * @param persistenceKey - A unique identifier for this Firestore's local
       * storage (used in conjunction with the databaseId).
       * @param host - The Firestore backend host to connect to.
       * @param ssl - Whether to use SSL when connecting.
       * @param forceLongPolling - Whether to use the forceLongPolling option
       * when using WebChannel as the network transport.
       * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
       * option when using WebChannel as the network transport.
       * @param longPollingOptions Options that configure long-polling.
       * @param useFetchStreams Whether to use the Fetch API instead of
       * XMLHTTPRequest
       */
      constructor(e, t2, n2, r2, i, s2, o2, _, a2) {
        this.databaseId = e, this.appId = t2, this.persistenceKey = n2, this.host = r2, this.ssl = i, this.forceLongPolling = s2, this.autoDetectLongPolling = o2, this.longPollingOptions = _, this.useFetchStreams = a2;
      }
    };
    __name(DatabaseInfo, "DatabaseInfo");
    var rt = "(default)";
    var DatabaseId = class {
      constructor(e, t2) {
        this.projectId = e, this.database = t2 || rt;
      }
      static empty() {
        return new DatabaseId("", "");
      }
      get isDefaultDatabase() {
        return this.database === rt;
      }
      isEqual(e) {
        return e instanceof DatabaseId && e.projectId === this.projectId && e.database === this.database;
      }
    };
    __name(DatabaseId, "DatabaseId");
    var it = "__type__";
    var st = "__max__";
    var ot = {
      mapValue: {
        fields: {
          __type__: {
            stringValue: st
          }
        }
      }
    };
    var _t = "__vector__";
    var at = "value";
    var ut = {
      nullValue: "NULL_VALUE"
    };
    function __PRIVATE_typeOrder(e) {
      return "nullValue" in e ? 0 : "booleanValue" in e ? 1 : "integerValue" in e || "doubleValue" in e ? 2 : "timestampValue" in e ? 3 : "stringValue" in e ? 5 : "bytesValue" in e ? 6 : "referenceValue" in e ? 7 : "geoPointValue" in e ? 8 : "arrayValue" in e ? 9 : "mapValue" in e ? __PRIVATE_isServerTimestamp(e) ? 4 : __PRIVATE_isMaxValue(e) ? 9007199254740991 : __PRIVATE_isVectorValue(e) ? 10 : 11 : fail();
    }
    __name(__PRIVATE_typeOrder, "__PRIVATE_typeOrder");
    function __PRIVATE_valueEquals(e, t2) {
      if (e === t2)
        return true;
      const n2 = __PRIVATE_typeOrder(e);
      if (n2 !== __PRIVATE_typeOrder(t2))
        return false;
      switch (n2) {
        case 0:
        case 9007199254740991:
          return true;
        case 1:
          return e.booleanValue === t2.booleanValue;
        case 4:
          return __PRIVATE_getLocalWriteTime(e).isEqual(__PRIVATE_getLocalWriteTime(t2));
        case 3:
          return (/* @__PURE__ */ __name(function __PRIVATE_timestampEquals(e2, t3) {
            if ("string" == typeof e2.timestampValue && "string" == typeof t3.timestampValue && e2.timestampValue.length === t3.timestampValue.length)
              return e2.timestampValue === t3.timestampValue;
            const n3 = __PRIVATE_normalizeTimestamp(e2.timestampValue), r2 = __PRIVATE_normalizeTimestamp(t3.timestampValue);
            return n3.seconds === r2.seconds && n3.nanos === r2.nanos;
          }, "__PRIVATE_timestampEquals"))(e, t2);
        case 5:
          return e.stringValue === t2.stringValue;
        case 6:
          return (/* @__PURE__ */ __name(function __PRIVATE_blobEquals(e2, t3) {
            return __PRIVATE_normalizeByteString(e2.bytesValue).isEqual(__PRIVATE_normalizeByteString(t3.bytesValue));
          }, "__PRIVATE_blobEquals"))(e, t2);
        case 7:
          return e.referenceValue === t2.referenceValue;
        case 8:
          return (/* @__PURE__ */ __name(function __PRIVATE_geoPointEquals(e2, t3) {
            return __PRIVATE_normalizeNumber(e2.geoPointValue.latitude) === __PRIVATE_normalizeNumber(t3.geoPointValue.latitude) && __PRIVATE_normalizeNumber(e2.geoPointValue.longitude) === __PRIVATE_normalizeNumber(t3.geoPointValue.longitude);
          }, "__PRIVATE_geoPointEquals"))(e, t2);
        case 2:
          return (/* @__PURE__ */ __name(function __PRIVATE_numberEquals(e2, t3) {
            if ("integerValue" in e2 && "integerValue" in t3)
              return __PRIVATE_normalizeNumber(e2.integerValue) === __PRIVATE_normalizeNumber(t3.integerValue);
            if ("doubleValue" in e2 && "doubleValue" in t3) {
              const n3 = __PRIVATE_normalizeNumber(e2.doubleValue), r2 = __PRIVATE_normalizeNumber(t3.doubleValue);
              return n3 === r2 ? __PRIVATE_isNegativeZero(n3) === __PRIVATE_isNegativeZero(r2) : isNaN(n3) && isNaN(r2);
            }
            return false;
          }, "__PRIVATE_numberEquals"))(e, t2);
        case 9:
          return __PRIVATE_arrayEquals(e.arrayValue.values || [], t2.arrayValue.values || [], __PRIVATE_valueEquals);
        case 10:
        case 11:
          return (/* @__PURE__ */ __name(function __PRIVATE_objectEquals(e2, t3) {
            const n3 = e2.mapValue.fields || {}, r2 = t3.mapValue.fields || {};
            if (__PRIVATE_objectSize(n3) !== __PRIVATE_objectSize(r2))
              return false;
            for (const e3 in n3)
              if (n3.hasOwnProperty(e3) && (void 0 === r2[e3] || !__PRIVATE_valueEquals(n3[e3], r2[e3])))
                return false;
            return true;
          }, "__PRIVATE_objectEquals"))(e, t2);
        default:
          return fail();
      }
    }
    __name(__PRIVATE_valueEquals, "__PRIVATE_valueEquals");
    function __PRIVATE_arrayValueContains(e, t2) {
      return void 0 !== (e.values || []).find((e2) => __PRIVATE_valueEquals(e2, t2));
    }
    __name(__PRIVATE_arrayValueContains, "__PRIVATE_arrayValueContains");
    function __PRIVATE_valueCompare(e, t2) {
      if (e === t2)
        return 0;
      const n2 = __PRIVATE_typeOrder(e), r2 = __PRIVATE_typeOrder(t2);
      if (n2 !== r2)
        return __PRIVATE_primitiveComparator(n2, r2);
      switch (n2) {
        case 0:
        case 9007199254740991:
          return 0;
        case 1:
          return __PRIVATE_primitiveComparator(e.booleanValue, t2.booleanValue);
        case 2:
          return (/* @__PURE__ */ __name(function __PRIVATE_compareNumbers(e2, t3) {
            const n3 = __PRIVATE_normalizeNumber(e2.integerValue || e2.doubleValue), r3 = __PRIVATE_normalizeNumber(t3.integerValue || t3.doubleValue);
            return n3 < r3 ? -1 : n3 > r3 ? 1 : n3 === r3 ? 0 : (
              // one or both are NaN.
              isNaN(n3) ? isNaN(r3) ? 0 : -1 : 1
            );
          }, "__PRIVATE_compareNumbers"))(e, t2);
        case 3:
          return __PRIVATE_compareTimestamps(e.timestampValue, t2.timestampValue);
        case 4:
          return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(e), __PRIVATE_getLocalWriteTime(t2));
        case 5:
          return __PRIVATE_primitiveComparator(e.stringValue, t2.stringValue);
        case 6:
          return (/* @__PURE__ */ __name(function __PRIVATE_compareBlobs(e2, t3) {
            const n3 = __PRIVATE_normalizeByteString(e2), r3 = __PRIVATE_normalizeByteString(t3);
            return n3.compareTo(r3);
          }, "__PRIVATE_compareBlobs"))(e.bytesValue, t2.bytesValue);
        case 7:
          return (/* @__PURE__ */ __name(function __PRIVATE_compareReferences(e2, t3) {
            const n3 = e2.split("/"), r3 = t3.split("/");
            for (let e3 = 0; e3 < n3.length && e3 < r3.length; e3++) {
              const t4 = __PRIVATE_primitiveComparator(n3[e3], r3[e3]);
              if (0 !== t4)
                return t4;
            }
            return __PRIVATE_primitiveComparator(n3.length, r3.length);
          }, "__PRIVATE_compareReferences"))(e.referenceValue, t2.referenceValue);
        case 8:
          return (/* @__PURE__ */ __name(function __PRIVATE_compareGeoPoints(e2, t3) {
            const n3 = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e2.latitude), __PRIVATE_normalizeNumber(t3.latitude));
            if (0 !== n3)
              return n3;
            return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e2.longitude), __PRIVATE_normalizeNumber(t3.longitude));
          }, "__PRIVATE_compareGeoPoints"))(e.geoPointValue, t2.geoPointValue);
        case 9:
          return __PRIVATE_compareArrays(e.arrayValue, t2.arrayValue);
        case 10:
          return (/* @__PURE__ */ __name(function __PRIVATE_compareVectors(e2, t3) {
            var n3, r3, i, s2;
            const o2 = e2.fields || {}, _ = t3.fields || {}, a2 = null === (n3 = o2[at]) || void 0 === n3 ? void 0 : n3.arrayValue, u2 = null === (r3 = _[at]) || void 0 === r3 ? void 0 : r3.arrayValue, c2 = __PRIVATE_primitiveComparator((null === (i = null == a2 ? void 0 : a2.values) || void 0 === i ? void 0 : i.length) || 0, (null === (s2 = null == u2 ? void 0 : u2.values) || void 0 === s2 ? void 0 : s2.length) || 0);
            if (0 !== c2)
              return c2;
            return __PRIVATE_compareArrays(a2, u2);
          }, "__PRIVATE_compareVectors"))(e.mapValue, t2.mapValue);
        case 11:
          return (/* @__PURE__ */ __name(function __PRIVATE_compareMaps(e2, t3) {
            if (e2 === ot.mapValue && t3 === ot.mapValue)
              return 0;
            if (e2 === ot.mapValue)
              return 1;
            if (t3 === ot.mapValue)
              return -1;
            const n3 = e2.fields || {}, r3 = Object.keys(n3), i = t3.fields || {}, s2 = Object.keys(i);
            r3.sort(), s2.sort();
            for (let e3 = 0; e3 < r3.length && e3 < s2.length; ++e3) {
              const t4 = __PRIVATE_primitiveComparator(r3[e3], s2[e3]);
              if (0 !== t4)
                return t4;
              const o2 = __PRIVATE_valueCompare(n3[r3[e3]], i[s2[e3]]);
              if (0 !== o2)
                return o2;
            }
            return __PRIVATE_primitiveComparator(r3.length, s2.length);
          }, "__PRIVATE_compareMaps"))(e.mapValue, t2.mapValue);
        default:
          throw fail();
      }
    }
    __name(__PRIVATE_valueCompare, "__PRIVATE_valueCompare");
    function __PRIVATE_compareTimestamps(e, t2) {
      if ("string" == typeof e && "string" == typeof t2 && e.length === t2.length)
        return __PRIVATE_primitiveComparator(e, t2);
      const n2 = __PRIVATE_normalizeTimestamp(e), r2 = __PRIVATE_normalizeTimestamp(t2), i = __PRIVATE_primitiveComparator(n2.seconds, r2.seconds);
      return 0 !== i ? i : __PRIVATE_primitiveComparator(n2.nanos, r2.nanos);
    }
    __name(__PRIVATE_compareTimestamps, "__PRIVATE_compareTimestamps");
    function __PRIVATE_compareArrays(e, t2) {
      const n2 = e.values || [], r2 = t2.values || [];
      for (let e2 = 0; e2 < n2.length && e2 < r2.length; ++e2) {
        const t3 = __PRIVATE_valueCompare(n2[e2], r2[e2]);
        if (t3)
          return t3;
      }
      return __PRIVATE_primitiveComparator(n2.length, r2.length);
    }
    __name(__PRIVATE_compareArrays, "__PRIVATE_compareArrays");
    function canonicalId(e) {
      return __PRIVATE_canonifyValue(e);
    }
    __name(canonicalId, "canonicalId");
    function __PRIVATE_canonifyValue(e) {
      return "nullValue" in e ? "null" : "booleanValue" in e ? "" + e.booleanValue : "integerValue" in e ? "" + e.integerValue : "doubleValue" in e ? "" + e.doubleValue : "timestampValue" in e ? (/* @__PURE__ */ __name(function __PRIVATE_canonifyTimestamp(e2) {
        const t2 = __PRIVATE_normalizeTimestamp(e2);
        return `time(${t2.seconds},${t2.nanos})`;
      }, "__PRIVATE_canonifyTimestamp"))(e.timestampValue) : "stringValue" in e ? e.stringValue : "bytesValue" in e ? (/* @__PURE__ */ __name(function __PRIVATE_canonifyByteString(e2) {
        return __PRIVATE_normalizeByteString(e2).toBase64();
      }, "__PRIVATE_canonifyByteString"))(e.bytesValue) : "referenceValue" in e ? (/* @__PURE__ */ __name(function __PRIVATE_canonifyReference(e2) {
        return DocumentKey.fromName(e2).toString();
      }, "__PRIVATE_canonifyReference"))(e.referenceValue) : "geoPointValue" in e ? (/* @__PURE__ */ __name(function __PRIVATE_canonifyGeoPoint(e2) {
        return `geo(${e2.latitude},${e2.longitude})`;
      }, "__PRIVATE_canonifyGeoPoint"))(e.geoPointValue) : "arrayValue" in e ? (/* @__PURE__ */ __name(function __PRIVATE_canonifyArray(e2) {
        let t2 = "[", n2 = true;
        for (const r2 of e2.values || [])
          n2 ? n2 = false : t2 += ",", t2 += __PRIVATE_canonifyValue(r2);
        return t2 + "]";
      }, "__PRIVATE_canonifyArray"))(e.arrayValue) : "mapValue" in e ? (/* @__PURE__ */ __name(function __PRIVATE_canonifyMap(e2) {
        const t2 = Object.keys(e2.fields || {}).sort();
        let n2 = "{", r2 = true;
        for (const i of t2)
          r2 ? r2 = false : n2 += ",", n2 += `${i}:${__PRIVATE_canonifyValue(e2.fields[i])}`;
        return n2 + "}";
      }, "__PRIVATE_canonifyMap"))(e.mapValue) : fail();
    }
    __name(__PRIVATE_canonifyValue, "__PRIVATE_canonifyValue");
    function __PRIVATE_estimateByteSize(e) {
      switch (__PRIVATE_typeOrder(e)) {
        case 0:
        case 1:
          return 4;
        case 2:
          return 8;
        case 3:
        case 8:
          return 16;
        case 4:
          const t2 = __PRIVATE_getPreviousValue(e);
          return t2 ? 16 + __PRIVATE_estimateByteSize(t2) : 16;
        case 5:
          return 2 * e.stringValue.length;
        case 6:
          return __PRIVATE_normalizeByteString(e.bytesValue).approximateByteSize();
        case 7:
          return e.referenceValue.length;
        case 9:
          return (/* @__PURE__ */ __name(function __PRIVATE_estimateArrayByteSize(e2) {
            return (e2.values || []).reduce((e3, t3) => e3 + __PRIVATE_estimateByteSize(t3), 0);
          }, "__PRIVATE_estimateArrayByteSize"))(e.arrayValue);
        case 10:
        case 11:
          return (/* @__PURE__ */ __name(function __PRIVATE_estimateMapByteSize(e2) {
            let t3 = 0;
            return forEach(e2.fields, (e3, n2) => {
              t3 += e3.length + __PRIVATE_estimateByteSize(n2);
            }), t3;
          }, "__PRIVATE_estimateMapByteSize"))(e.mapValue);
        default:
          throw fail();
      }
    }
    __name(__PRIVATE_estimateByteSize, "__PRIVATE_estimateByteSize");
    function __PRIVATE_refValue(e, t2) {
      return {
        referenceValue: `projects/${e.projectId}/databases/${e.database}/documents/${t2.path.canonicalString()}`
      };
    }
    __name(__PRIVATE_refValue, "__PRIVATE_refValue");
    function isInteger(e) {
      return !!e && "integerValue" in e;
    }
    __name(isInteger, "isInteger");
    function isArray(e) {
      return !!e && "arrayValue" in e;
    }
    __name(isArray, "isArray");
    function __PRIVATE_isNullValue(e) {
      return !!e && "nullValue" in e;
    }
    __name(__PRIVATE_isNullValue, "__PRIVATE_isNullValue");
    function __PRIVATE_isNanValue(e) {
      return !!e && "doubleValue" in e && isNaN(Number(e.doubleValue));
    }
    __name(__PRIVATE_isNanValue, "__PRIVATE_isNanValue");
    function __PRIVATE_isMapValue(e) {
      return !!e && "mapValue" in e;
    }
    __name(__PRIVATE_isMapValue, "__PRIVATE_isMapValue");
    function __PRIVATE_isVectorValue(e) {
      var t2, n2;
      return (null === (n2 = ((null === (t2 = null == e ? void 0 : e.mapValue) || void 0 === t2 ? void 0 : t2.fields) || {})[it]) || void 0 === n2 ? void 0 : n2.stringValue) === _t;
    }
    __name(__PRIVATE_isVectorValue, "__PRIVATE_isVectorValue");
    function __PRIVATE_deepClone(e) {
      if (e.geoPointValue)
        return {
          geoPointValue: Object.assign({}, e.geoPointValue)
        };
      if (e.timestampValue && "object" == typeof e.timestampValue)
        return {
          timestampValue: Object.assign({}, e.timestampValue)
        };
      if (e.mapValue) {
        const t2 = {
          mapValue: {
            fields: {}
          }
        };
        return forEach(e.mapValue.fields, (e2, n2) => t2.mapValue.fields[e2] = __PRIVATE_deepClone(n2)), t2;
      }
      if (e.arrayValue) {
        const t2 = {
          arrayValue: {
            values: []
          }
        };
        for (let n2 = 0; n2 < (e.arrayValue.values || []).length; ++n2)
          t2.arrayValue.values[n2] = __PRIVATE_deepClone(e.arrayValue.values[n2]);
        return t2;
      }
      return Object.assign({}, e);
    }
    __name(__PRIVATE_deepClone, "__PRIVATE_deepClone");
    function __PRIVATE_isMaxValue(e) {
      return (((e.mapValue || {}).fields || {}).__type__ || {}).stringValue === st;
    }
    __name(__PRIVATE_isMaxValue, "__PRIVATE_isMaxValue");
    var ct = {
      mapValue: {
        fields: {
          [it]: {
            stringValue: _t
          },
          [at]: {
            arrayValue: {}
          }
        }
      }
    };
    function __PRIVATE_valuesGetLowerBound(e) {
      return "nullValue" in e ? ut : "booleanValue" in e ? {
        booleanValue: false
      } : "integerValue" in e || "doubleValue" in e ? {
        doubleValue: NaN
      } : "timestampValue" in e ? {
        timestampValue: {
          seconds: Number.MIN_SAFE_INTEGER
        }
      } : "stringValue" in e ? {
        stringValue: ""
      } : "bytesValue" in e ? {
        bytesValue: ""
      } : "referenceValue" in e ? __PRIVATE_refValue(DatabaseId.empty(), DocumentKey.empty()) : "geoPointValue" in e ? {
        geoPointValue: {
          latitude: -90,
          longitude: -180
        }
      } : "arrayValue" in e ? {
        arrayValue: {}
      } : "mapValue" in e ? __PRIVATE_isVectorValue(e) ? ct : {
        mapValue: {}
      } : fail();
    }
    __name(__PRIVATE_valuesGetLowerBound, "__PRIVATE_valuesGetLowerBound");
    function __PRIVATE_valuesGetUpperBound(e) {
      return "nullValue" in e ? {
        booleanValue: false
      } : "booleanValue" in e ? {
        doubleValue: NaN
      } : "integerValue" in e || "doubleValue" in e ? {
        timestampValue: {
          seconds: Number.MIN_SAFE_INTEGER
        }
      } : "timestampValue" in e ? {
        stringValue: ""
      } : "stringValue" in e ? {
        bytesValue: ""
      } : "bytesValue" in e ? __PRIVATE_refValue(DatabaseId.empty(), DocumentKey.empty()) : "referenceValue" in e ? {
        geoPointValue: {
          latitude: -90,
          longitude: -180
        }
      } : "geoPointValue" in e ? {
        arrayValue: {}
      } : "arrayValue" in e ? ct : "mapValue" in e ? __PRIVATE_isVectorValue(e) ? {
        mapValue: {}
      } : ot : fail();
    }
    __name(__PRIVATE_valuesGetUpperBound, "__PRIVATE_valuesGetUpperBound");
    function __PRIVATE_lowerBoundCompare(e, t2) {
      const n2 = __PRIVATE_valueCompare(e.value, t2.value);
      return 0 !== n2 ? n2 : e.inclusive && !t2.inclusive ? -1 : !e.inclusive && t2.inclusive ? 1 : 0;
    }
    __name(__PRIVATE_lowerBoundCompare, "__PRIVATE_lowerBoundCompare");
    function __PRIVATE_upperBoundCompare(e, t2) {
      const n2 = __PRIVATE_valueCompare(e.value, t2.value);
      return 0 !== n2 ? n2 : e.inclusive && !t2.inclusive ? 1 : !e.inclusive && t2.inclusive ? -1 : 0;
    }
    __name(__PRIVATE_upperBoundCompare, "__PRIVATE_upperBoundCompare");
    var ObjectValue = class {
      constructor(e) {
        this.value = e;
      }
      static empty() {
        return new ObjectValue({
          mapValue: {}
        });
      }
      /**
       * Returns the value at the given path or null.
       *
       * @param path - the path to search
       * @returns The value at the path or null if the path is not set.
       */
      field(e) {
        if (e.isEmpty())
          return this.value;
        {
          let t2 = this.value;
          for (let n2 = 0; n2 < e.length - 1; ++n2)
            if (t2 = (t2.mapValue.fields || {})[e.get(n2)], !__PRIVATE_isMapValue(t2))
              return null;
          return t2 = (t2.mapValue.fields || {})[e.lastSegment()], t2 || null;
        }
      }
      /**
       * Sets the field to the provided value.
       *
       * @param path - The field path to set.
       * @param value - The value to set.
       */
      set(e, t2) {
        this.getFieldsMap(e.popLast())[e.lastSegment()] = __PRIVATE_deepClone(t2);
      }
      /**
       * Sets the provided fields to the provided values.
       *
       * @param data - A map of fields to values (or null for deletes).
       */
      setAll(e) {
        let t2 = FieldPath$1.emptyPath(), n2 = {}, r2 = [];
        e.forEach((e2, i2) => {
          if (!t2.isImmediateParentOf(i2)) {
            const e3 = this.getFieldsMap(t2);
            this.applyChanges(e3, n2, r2), n2 = {}, r2 = [], t2 = i2.popLast();
          }
          e2 ? n2[i2.lastSegment()] = __PRIVATE_deepClone(e2) : r2.push(i2.lastSegment());
        });
        const i = this.getFieldsMap(t2);
        this.applyChanges(i, n2, r2);
      }
      /**
       * Removes the field at the specified path. If there is no field at the
       * specified path, nothing is changed.
       *
       * @param path - The field path to remove.
       */
      delete(e) {
        const t2 = this.field(e.popLast());
        __PRIVATE_isMapValue(t2) && t2.mapValue.fields && delete t2.mapValue.fields[e.lastSegment()];
      }
      isEqual(e) {
        return __PRIVATE_valueEquals(this.value, e.value);
      }
      /**
       * Returns the map that contains the leaf element of `path`. If the parent
       * entry does not yet exist, or if it is not a map, a new map will be created.
       */
      getFieldsMap(e) {
        let t2 = this.value;
        t2.mapValue.fields || (t2.mapValue = {
          fields: {}
        });
        for (let n2 = 0; n2 < e.length; ++n2) {
          let r2 = t2.mapValue.fields[e.get(n2)];
          __PRIVATE_isMapValue(r2) && r2.mapValue.fields || (r2 = {
            mapValue: {
              fields: {}
            }
          }, t2.mapValue.fields[e.get(n2)] = r2), t2 = r2;
        }
        return t2.mapValue.fields;
      }
      /**
       * Modifies `fieldsMap` by adding, replacing or deleting the specified
       * entries.
       */
      applyChanges(e, t2, n2) {
        forEach(t2, (t3, n3) => e[t3] = n3);
        for (const t3 of n2)
          delete e[t3];
      }
      clone() {
        return new ObjectValue(__PRIVATE_deepClone(this.value));
      }
    };
    __name(ObjectValue, "ObjectValue");
    function __PRIVATE_extractFieldMask(e) {
      const t2 = [];
      return forEach(e.fields, (e2, n2) => {
        const r2 = new FieldPath$1([e2]);
        if (__PRIVATE_isMapValue(n2)) {
          const e3 = __PRIVATE_extractFieldMask(n2.mapValue).fields;
          if (0 === e3.length)
            t2.push(r2);
          else
            for (const n3 of e3)
              t2.push(r2.child(n3));
        } else
          t2.push(r2);
      }), new FieldMask(t2);
    }
    __name(__PRIVATE_extractFieldMask, "__PRIVATE_extractFieldMask");
    var MutableDocument = class {
      constructor(e, t2, n2, r2, i, s2, o2) {
        this.key = e, this.documentType = t2, this.version = n2, this.readTime = r2, this.createTime = i, this.data = s2, this.documentState = o2;
      }
      /**
       * Creates a document with no known version or data, but which can serve as
       * base document for mutations.
       */
      static newInvalidDocument(e) {
        return new MutableDocument(
          e,
          0,
          /* version */
          SnapshotVersion.min(),
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          SnapshotVersion.min(),
          ObjectValue.empty(),
          0
          /* DocumentState.SYNCED */
        );
      }
      /**
       * Creates a new document that is known to exist with the given data at the
       * given version.
       */
      static newFoundDocument(e, t2, n2, r2) {
        return new MutableDocument(
          e,
          1,
          /* version */
          t2,
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          n2,
          r2,
          0
          /* DocumentState.SYNCED */
        );
      }
      /** Creates a new document that is known to not exist at the given version. */
      static newNoDocument(e, t2) {
        return new MutableDocument(
          e,
          2,
          /* version */
          t2,
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          SnapshotVersion.min(),
          ObjectValue.empty(),
          0
          /* DocumentState.SYNCED */
        );
      }
      /**
       * Creates a new document that is known to exist at the given version but
       * whose data is not known (e.g. a document that was updated without a known
       * base document).
       */
      static newUnknownDocument(e, t2) {
        return new MutableDocument(
          e,
          3,
          /* version */
          t2,
          /* readTime */
          SnapshotVersion.min(),
          /* createTime */
          SnapshotVersion.min(),
          ObjectValue.empty(),
          2
          /* DocumentState.HAS_COMMITTED_MUTATIONS */
        );
      }
      /**
       * Changes the document type to indicate that it exists and that its version
       * and data are known.
       */
      convertToFoundDocument(e, t2) {
        return !this.createTime.isEqual(SnapshotVersion.min()) || 2 !== this.documentType && 0 !== this.documentType || (this.createTime = e), this.version = e, this.documentType = 1, this.data = t2, this.documentState = 0, this;
      }
      /**
       * Changes the document type to indicate that it doesn't exist at the given
       * version.
       */
      convertToNoDocument(e) {
        return this.version = e, this.documentType = 2, this.data = ObjectValue.empty(), this.documentState = 0, this;
      }
      /**
       * Changes the document type to indicate that it exists at a given version but
       * that its data is not known (e.g. a document that was updated without a known
       * base document).
       */
      convertToUnknownDocument(e) {
        return this.version = e, this.documentType = 3, this.data = ObjectValue.empty(), this.documentState = 2, this;
      }
      setHasCommittedMutations() {
        return this.documentState = 2, this;
      }
      setHasLocalMutations() {
        return this.documentState = 1, this.version = SnapshotVersion.min(), this;
      }
      setReadTime(e) {
        return this.readTime = e, this;
      }
      get hasLocalMutations() {
        return 1 === this.documentState;
      }
      get hasCommittedMutations() {
        return 2 === this.documentState;
      }
      get hasPendingWrites() {
        return this.hasLocalMutations || this.hasCommittedMutations;
      }
      isValidDocument() {
        return 0 !== this.documentType;
      }
      isFoundDocument() {
        return 1 === this.documentType;
      }
      isNoDocument() {
        return 2 === this.documentType;
      }
      isUnknownDocument() {
        return 3 === this.documentType;
      }
      isEqual(e) {
        return e instanceof MutableDocument && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
      }
      mutableCopy() {
        return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
      }
      toString() {
        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
      }
    };
    __name(MutableDocument, "MutableDocument");
    var Bound = class {
      constructor(e, t2) {
        this.position = e, this.inclusive = t2;
      }
    };
    __name(Bound, "Bound");
    function __PRIVATE_boundCompareToDocument(e, t2, n2) {
      let r2 = 0;
      for (let i = 0; i < e.position.length; i++) {
        const s2 = t2[i], o2 = e.position[i];
        if (s2.field.isKeyField())
          r2 = DocumentKey.comparator(DocumentKey.fromName(o2.referenceValue), n2.key);
        else {
          r2 = __PRIVATE_valueCompare(o2, n2.data.field(s2.field));
        }
        if ("desc" === s2.dir && (r2 *= -1), 0 !== r2)
          break;
      }
      return r2;
    }
    __name(__PRIVATE_boundCompareToDocument, "__PRIVATE_boundCompareToDocument");
    function __PRIVATE_boundEquals(e, t2) {
      if (null === e)
        return null === t2;
      if (null === t2)
        return false;
      if (e.inclusive !== t2.inclusive || e.position.length !== t2.position.length)
        return false;
      for (let n2 = 0; n2 < e.position.length; n2++) {
        if (!__PRIVATE_valueEquals(e.position[n2], t2.position[n2]))
          return false;
      }
      return true;
    }
    __name(__PRIVATE_boundEquals, "__PRIVATE_boundEquals");
    var OrderBy = class {
      constructor(e, t2 = "asc") {
        this.field = e, this.dir = t2;
      }
    };
    __name(OrderBy, "OrderBy");
    function __PRIVATE_orderByEquals(e, t2) {
      return e.dir === t2.dir && e.field.isEqual(t2.field);
    }
    __name(__PRIVATE_orderByEquals, "__PRIVATE_orderByEquals");
    var Filter = class {
    };
    __name(Filter, "Filter");
    var FieldFilter = class extends Filter {
      constructor(e, t2, n2) {
        super(), this.field = e, this.op = t2, this.value = n2;
      }
      /**
       * Creates a filter based on the provided arguments.
       */
      static create(e, t2, n2) {
        return e.isKeyField() ? "in" === t2 || "not-in" === t2 ? this.createKeyFieldInFilter(e, t2, n2) : new __PRIVATE_KeyFieldFilter(e, t2, n2) : "array-contains" === t2 ? new __PRIVATE_ArrayContainsFilter(e, n2) : "in" === t2 ? new __PRIVATE_InFilter(e, n2) : "not-in" === t2 ? new __PRIVATE_NotInFilter(e, n2) : "array-contains-any" === t2 ? new __PRIVATE_ArrayContainsAnyFilter(e, n2) : new FieldFilter(e, t2, n2);
      }
      static createKeyFieldInFilter(e, t2, n2) {
        return "in" === t2 ? new __PRIVATE_KeyFieldInFilter(e, n2) : new __PRIVATE_KeyFieldNotInFilter(e, n2);
      }
      matches(e) {
        const t2 = e.data.field(this.field);
        return "!=" === this.op ? null !== t2 && this.matchesComparison(__PRIVATE_valueCompare(t2, this.value)) : null !== t2 && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(t2) && this.matchesComparison(__PRIVATE_valueCompare(t2, this.value));
      }
      matchesComparison(e) {
        switch (this.op) {
          case "<":
            return e < 0;
          case "<=":
            return e <= 0;
          case "==":
            return 0 === e;
          case "!=":
            return 0 !== e;
          case ">":
            return e > 0;
          case ">=":
            return e >= 0;
          default:
            return fail();
        }
      }
      isInequality() {
        return [
          "<",
          "<=",
          ">",
          ">=",
          "!=",
          "not-in"
          /* Operator.NOT_IN */
        ].indexOf(this.op) >= 0;
      }
      getFlattenedFilters() {
        return [this];
      }
      getFilters() {
        return [this];
      }
    };
    __name(FieldFilter, "FieldFilter");
    var CompositeFilter = class extends Filter {
      constructor(e, t2) {
        super(), this.filters = e, this.op = t2, this.ce = null;
      }
      /**
       * Creates a filter based on the provided arguments.
       */
      static create(e, t2) {
        return new CompositeFilter(e, t2);
      }
      matches(e) {
        return __PRIVATE_compositeFilterIsConjunction(this) ? void 0 === this.filters.find((t2) => !t2.matches(e)) : void 0 !== this.filters.find((t2) => t2.matches(e));
      }
      getFlattenedFilters() {
        return null !== this.ce || (this.ce = this.filters.reduce((e, t2) => e.concat(t2.getFlattenedFilters()), [])), this.ce;
      }
      // Returns a mutable copy of `this.filters`
      getFilters() {
        return Object.assign([], this.filters);
      }
    };
    __name(CompositeFilter, "CompositeFilter");
    function __PRIVATE_compositeFilterIsConjunction(e) {
      return "and" === e.op;
    }
    __name(__PRIVATE_compositeFilterIsConjunction, "__PRIVATE_compositeFilterIsConjunction");
    function __PRIVATE_compositeFilterIsDisjunction(e) {
      return "or" === e.op;
    }
    __name(__PRIVATE_compositeFilterIsDisjunction, "__PRIVATE_compositeFilterIsDisjunction");
    function __PRIVATE_compositeFilterIsFlatConjunction(e) {
      return __PRIVATE_compositeFilterIsFlat(e) && __PRIVATE_compositeFilterIsConjunction(e);
    }
    __name(__PRIVATE_compositeFilterIsFlatConjunction, "__PRIVATE_compositeFilterIsFlatConjunction");
    function __PRIVATE_compositeFilterIsFlat(e) {
      for (const t2 of e.filters)
        if (t2 instanceof CompositeFilter)
          return false;
      return true;
    }
    __name(__PRIVATE_compositeFilterIsFlat, "__PRIVATE_compositeFilterIsFlat");
    function __PRIVATE_canonifyFilter(e) {
      if (e instanceof FieldFilter)
        return e.field.canonicalString() + e.op.toString() + canonicalId(e.value);
      if (__PRIVATE_compositeFilterIsFlatConjunction(e))
        return e.filters.map((e2) => __PRIVATE_canonifyFilter(e2)).join(",");
      {
        const t2 = e.filters.map((e2) => __PRIVATE_canonifyFilter(e2)).join(",");
        return `${e.op}(${t2})`;
      }
    }
    __name(__PRIVATE_canonifyFilter, "__PRIVATE_canonifyFilter");
    function __PRIVATE_filterEquals(e, t2) {
      return e instanceof FieldFilter ? (/* @__PURE__ */ __name(function __PRIVATE_fieldFilterEquals(e2, t3) {
        return t3 instanceof FieldFilter && e2.op === t3.op && e2.field.isEqual(t3.field) && __PRIVATE_valueEquals(e2.value, t3.value);
      }, "__PRIVATE_fieldFilterEquals"))(e, t2) : e instanceof CompositeFilter ? (/* @__PURE__ */ __name(function __PRIVATE_compositeFilterEquals(e2, t3) {
        if (t3 instanceof CompositeFilter && e2.op === t3.op && e2.filters.length === t3.filters.length) {
          return e2.filters.reduce((e3, n2, r2) => e3 && __PRIVATE_filterEquals(n2, t3.filters[r2]), true);
        }
        return false;
      }, "__PRIVATE_compositeFilterEquals"))(e, t2) : void fail();
    }
    __name(__PRIVATE_filterEquals, "__PRIVATE_filterEquals");
    function __PRIVATE_compositeFilterWithAddedFilters(e, t2) {
      const n2 = e.filters.concat(t2);
      return CompositeFilter.create(n2, e.op);
    }
    __name(__PRIVATE_compositeFilterWithAddedFilters, "__PRIVATE_compositeFilterWithAddedFilters");
    function __PRIVATE_stringifyFilter(e) {
      return e instanceof FieldFilter ? (/* @__PURE__ */ __name(function __PRIVATE_stringifyFieldFilter(e2) {
        return `${e2.field.canonicalString()} ${e2.op} ${canonicalId(e2.value)}`;
      }, "__PRIVATE_stringifyFieldFilter"))(e) : e instanceof CompositeFilter ? (/* @__PURE__ */ __name(function __PRIVATE_stringifyCompositeFilter(e2) {
        return e2.op.toString() + " {" + e2.getFilters().map(__PRIVATE_stringifyFilter).join(" ,") + "}";
      }, "__PRIVATE_stringifyCompositeFilter"))(e) : "Filter";
    }
    __name(__PRIVATE_stringifyFilter, "__PRIVATE_stringifyFilter");
    var __PRIVATE_KeyFieldFilter = class extends FieldFilter {
      constructor(e, t2, n2) {
        super(e, t2, n2), this.key = DocumentKey.fromName(n2.referenceValue);
      }
      matches(e) {
        const t2 = DocumentKey.comparator(e.key, this.key);
        return this.matchesComparison(t2);
      }
    };
    __name(__PRIVATE_KeyFieldFilter, "__PRIVATE_KeyFieldFilter");
    var __PRIVATE_KeyFieldInFilter = class extends FieldFilter {
      constructor(e, t2) {
        super(e, "in", t2), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("in", t2);
      }
      matches(e) {
        return this.keys.some((t2) => t2.isEqual(e.key));
      }
    };
    __name(__PRIVATE_KeyFieldInFilter, "__PRIVATE_KeyFieldInFilter");
    var __PRIVATE_KeyFieldNotInFilter = class extends FieldFilter {
      constructor(e, t2) {
        super(e, "not-in", t2), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("not-in", t2);
      }
      matches(e) {
        return !this.keys.some((t2) => t2.isEqual(e.key));
      }
    };
    __name(__PRIVATE_KeyFieldNotInFilter, "__PRIVATE_KeyFieldNotInFilter");
    function __PRIVATE_extractDocumentKeysFromArrayValue(e, t2) {
      var n2;
      return ((null === (n2 = t2.arrayValue) || void 0 === n2 ? void 0 : n2.values) || []).map((e2) => DocumentKey.fromName(e2.referenceValue));
    }
    __name(__PRIVATE_extractDocumentKeysFromArrayValue, "__PRIVATE_extractDocumentKeysFromArrayValue");
    var __PRIVATE_ArrayContainsFilter = class extends FieldFilter {
      constructor(e, t2) {
        super(e, "array-contains", t2);
      }
      matches(e) {
        const t2 = e.data.field(this.field);
        return isArray(t2) && __PRIVATE_arrayValueContains(t2.arrayValue, this.value);
      }
    };
    __name(__PRIVATE_ArrayContainsFilter, "__PRIVATE_ArrayContainsFilter");
    var __PRIVATE_InFilter = class extends FieldFilter {
      constructor(e, t2) {
        super(e, "in", t2);
      }
      matches(e) {
        const t2 = e.data.field(this.field);
        return null !== t2 && __PRIVATE_arrayValueContains(this.value.arrayValue, t2);
      }
    };
    __name(__PRIVATE_InFilter, "__PRIVATE_InFilter");
    var __PRIVATE_NotInFilter = class extends FieldFilter {
      constructor(e, t2) {
        super(e, "not-in", t2);
      }
      matches(e) {
        if (__PRIVATE_arrayValueContains(this.value.arrayValue, {
          nullValue: "NULL_VALUE"
        }))
          return false;
        const t2 = e.data.field(this.field);
        return null !== t2 && !__PRIVATE_arrayValueContains(this.value.arrayValue, t2);
      }
    };
    __name(__PRIVATE_NotInFilter, "__PRIVATE_NotInFilter");
    var __PRIVATE_ArrayContainsAnyFilter = class extends FieldFilter {
      constructor(e, t2) {
        super(e, "array-contains-any", t2);
      }
      matches(e) {
        const t2 = e.data.field(this.field);
        return !(!isArray(t2) || !t2.arrayValue.values) && t2.arrayValue.values.some((e2) => __PRIVATE_arrayValueContains(this.value.arrayValue, e2));
      }
    };
    __name(__PRIVATE_ArrayContainsAnyFilter, "__PRIVATE_ArrayContainsAnyFilter");
    var __PRIVATE_TargetImpl = class {
      constructor(e, t2 = null, n2 = [], r2 = [], i = null, s2 = null, o2 = null) {
        this.path = e, this.collectionGroup = t2, this.orderBy = n2, this.filters = r2, this.limit = i, this.startAt = s2, this.endAt = o2, this.le = null;
      }
    };
    __name(__PRIVATE_TargetImpl, "__PRIVATE_TargetImpl");
    function __PRIVATE_newTarget(e, t2 = null, n2 = [], r2 = [], i = null, s2 = null, o2 = null) {
      return new __PRIVATE_TargetImpl(e, t2, n2, r2, i, s2, o2);
    }
    __name(__PRIVATE_newTarget, "__PRIVATE_newTarget");
    function __PRIVATE_canonifyTarget(e) {
      const t2 = __PRIVATE_debugCast(e);
      if (null === t2.le) {
        let e2 = t2.path.canonicalString();
        null !== t2.collectionGroup && (e2 += "|cg:" + t2.collectionGroup), e2 += "|f:", e2 += t2.filters.map((e3) => __PRIVATE_canonifyFilter(e3)).join(","), e2 += "|ob:", e2 += t2.orderBy.map((e3) => (/* @__PURE__ */ __name(function __PRIVATE_canonifyOrderBy(e4) {
          return e4.field.canonicalString() + e4.dir;
        }, "__PRIVATE_canonifyOrderBy"))(e3)).join(","), __PRIVATE_isNullOrUndefined(t2.limit) || (e2 += "|l:", e2 += t2.limit), t2.startAt && (e2 += "|lb:", e2 += t2.startAt.inclusive ? "b:" : "a:", e2 += t2.startAt.position.map((e3) => canonicalId(e3)).join(",")), t2.endAt && (e2 += "|ub:", e2 += t2.endAt.inclusive ? "a:" : "b:", e2 += t2.endAt.position.map((e3) => canonicalId(e3)).join(",")), t2.le = e2;
      }
      return t2.le;
    }
    __name(__PRIVATE_canonifyTarget, "__PRIVATE_canonifyTarget");
    function __PRIVATE_targetEquals(e, t2) {
      if (e.limit !== t2.limit)
        return false;
      if (e.orderBy.length !== t2.orderBy.length)
        return false;
      for (let n2 = 0; n2 < e.orderBy.length; n2++)
        if (!__PRIVATE_orderByEquals(e.orderBy[n2], t2.orderBy[n2]))
          return false;
      if (e.filters.length !== t2.filters.length)
        return false;
      for (let n2 = 0; n2 < e.filters.length; n2++)
        if (!__PRIVATE_filterEquals(e.filters[n2], t2.filters[n2]))
          return false;
      return e.collectionGroup === t2.collectionGroup && (!!e.path.isEqual(t2.path) && (!!__PRIVATE_boundEquals(e.startAt, t2.startAt) && __PRIVATE_boundEquals(e.endAt, t2.endAt)));
    }
    __name(__PRIVATE_targetEquals, "__PRIVATE_targetEquals");
    function __PRIVATE_targetIsDocumentTarget(e) {
      return DocumentKey.isDocumentKey(e.path) && null === e.collectionGroup && 0 === e.filters.length;
    }
    __name(__PRIVATE_targetIsDocumentTarget, "__PRIVATE_targetIsDocumentTarget");
    function __PRIVATE_targetGetFieldFiltersForPath(e, t2) {
      return e.filters.filter((e2) => e2 instanceof FieldFilter && e2.field.isEqual(t2));
    }
    __name(__PRIVATE_targetGetFieldFiltersForPath, "__PRIVATE_targetGetFieldFiltersForPath");
    function __PRIVATE_targetGetAscendingBound(e, t2, n2) {
      let r2 = ut, i = true;
      for (const n3 of __PRIVATE_targetGetFieldFiltersForPath(e, t2)) {
        let e2 = ut, t3 = true;
        switch (n3.op) {
          case "<":
          case "<=":
            e2 = __PRIVATE_valuesGetLowerBound(n3.value);
            break;
          case "==":
          case "in":
          case ">=":
            e2 = n3.value;
            break;
          case ">":
            e2 = n3.value, t3 = false;
            break;
          case "!=":
          case "not-in":
            e2 = ut;
        }
        __PRIVATE_lowerBoundCompare({
          value: r2,
          inclusive: i
        }, {
          value: e2,
          inclusive: t3
        }) < 0 && (r2 = e2, i = t3);
      }
      if (null !== n2)
        for (let s2 = 0; s2 < e.orderBy.length; ++s2) {
          if (e.orderBy[s2].field.isEqual(t2)) {
            const e2 = n2.position[s2];
            __PRIVATE_lowerBoundCompare({
              value: r2,
              inclusive: i
            }, {
              value: e2,
              inclusive: n2.inclusive
            }) < 0 && (r2 = e2, i = n2.inclusive);
            break;
          }
        }
      return {
        value: r2,
        inclusive: i
      };
    }
    __name(__PRIVATE_targetGetAscendingBound, "__PRIVATE_targetGetAscendingBound");
    function __PRIVATE_targetGetDescendingBound(e, t2, n2) {
      let r2 = ot, i = true;
      for (const n3 of __PRIVATE_targetGetFieldFiltersForPath(e, t2)) {
        let e2 = ot, t3 = true;
        switch (n3.op) {
          case ">=":
          case ">":
            e2 = __PRIVATE_valuesGetUpperBound(n3.value), t3 = false;
            break;
          case "==":
          case "in":
          case "<=":
            e2 = n3.value;
            break;
          case "<":
            e2 = n3.value, t3 = false;
            break;
          case "!=":
          case "not-in":
            e2 = ot;
        }
        __PRIVATE_upperBoundCompare({
          value: r2,
          inclusive: i
        }, {
          value: e2,
          inclusive: t3
        }) > 0 && (r2 = e2, i = t3);
      }
      if (null !== n2)
        for (let s2 = 0; s2 < e.orderBy.length; ++s2) {
          if (e.orderBy[s2].field.isEqual(t2)) {
            const e2 = n2.position[s2];
            __PRIVATE_upperBoundCompare({
              value: r2,
              inclusive: i
            }, {
              value: e2,
              inclusive: n2.inclusive
            }) > 0 && (r2 = e2, i = n2.inclusive);
            break;
          }
        }
      return {
        value: r2,
        inclusive: i
      };
    }
    __name(__PRIVATE_targetGetDescendingBound, "__PRIVATE_targetGetDescendingBound");
    var __PRIVATE_QueryImpl = class {
      /**
       * Initializes a Query with a path and optional additional query constraints.
       * Path must currently be empty if this is a collection group query.
       */
      constructor(e, t2 = null, n2 = [], r2 = [], i = null, s2 = "F", o2 = null, _ = null) {
        this.path = e, this.collectionGroup = t2, this.explicitOrderBy = n2, this.filters = r2, this.limit = i, this.limitType = s2, this.startAt = o2, this.endAt = _, this.he = null, // The corresponding `Target` of this `Query` instance, for use with
        // non-aggregate queries.
        this.Pe = null, // The corresponding `Target` of this `Query` instance, for use with
        // aggregate queries. Unlike targets for non-aggregate queries,
        // aggregate query targets do not contain normalized order-bys, they only
        // contain explicit order-bys.
        this.Te = null, this.startAt, this.endAt;
      }
    };
    __name(__PRIVATE_QueryImpl, "__PRIVATE_QueryImpl");
    function __PRIVATE_newQuery(e, t2, n2, r2, i, s2, o2, _) {
      return new __PRIVATE_QueryImpl(e, t2, n2, r2, i, s2, o2, _);
    }
    __name(__PRIVATE_newQuery, "__PRIVATE_newQuery");
    function __PRIVATE_newQueryForPath(e) {
      return new __PRIVATE_QueryImpl(e);
    }
    __name(__PRIVATE_newQueryForPath, "__PRIVATE_newQueryForPath");
    function __PRIVATE_queryMatchesAllDocuments(e) {
      return 0 === e.filters.length && null === e.limit && null == e.startAt && null == e.endAt && (0 === e.explicitOrderBy.length || 1 === e.explicitOrderBy.length && e.explicitOrderBy[0].field.isKeyField());
    }
    __name(__PRIVATE_queryMatchesAllDocuments, "__PRIVATE_queryMatchesAllDocuments");
    function __PRIVATE_isCollectionGroupQuery(e) {
      return null !== e.collectionGroup;
    }
    __name(__PRIVATE_isCollectionGroupQuery, "__PRIVATE_isCollectionGroupQuery");
    function __PRIVATE_queryNormalizedOrderBy(e) {
      const t2 = __PRIVATE_debugCast(e);
      if (null === t2.he) {
        t2.he = [];
        const e2 = /* @__PURE__ */ new Set();
        for (const n3 of t2.explicitOrderBy)
          t2.he.push(n3), e2.add(n3.field.canonicalString());
        const n2 = t2.explicitOrderBy.length > 0 ? t2.explicitOrderBy[t2.explicitOrderBy.length - 1].dir : "asc", r2 = (/* @__PURE__ */ __name(function __PRIVATE_getInequalityFilterFields(e3) {
          let t3 = new SortedSet(FieldPath$1.comparator);
          return e3.filters.forEach((e4) => {
            e4.getFlattenedFilters().forEach((e5) => {
              e5.isInequality() && (t3 = t3.add(e5.field));
            });
          }), t3;
        }, "__PRIVATE_getInequalityFilterFields"))(t2);
        r2.forEach((r3) => {
          e2.has(r3.canonicalString()) || r3.isKeyField() || t2.he.push(new OrderBy(r3, n2));
        }), // Add the document key field to the last if it is not explicitly ordered.
        e2.has(FieldPath$1.keyField().canonicalString()) || t2.he.push(new OrderBy(FieldPath$1.keyField(), n2));
      }
      return t2.he;
    }
    __name(__PRIVATE_queryNormalizedOrderBy, "__PRIVATE_queryNormalizedOrderBy");
    function __PRIVATE_queryToTarget(e) {
      const t2 = __PRIVATE_debugCast(e);
      return t2.Pe || (t2.Pe = __PRIVATE__queryToTarget(t2, __PRIVATE_queryNormalizedOrderBy(e))), t2.Pe;
    }
    __name(__PRIVATE_queryToTarget, "__PRIVATE_queryToTarget");
    function __PRIVATE_queryToAggregateTarget(e) {
      const t2 = __PRIVATE_debugCast(e);
      return t2.Te || // Do not include implicit order-bys for aggregate queries.
      (t2.Te = __PRIVATE__queryToTarget(t2, e.explicitOrderBy)), t2.Te;
    }
    __name(__PRIVATE_queryToAggregateTarget, "__PRIVATE_queryToAggregateTarget");
    function __PRIVATE__queryToTarget(e, t2) {
      if ("F" === e.limitType)
        return __PRIVATE_newTarget(e.path, e.collectionGroup, t2, e.filters, e.limit, e.startAt, e.endAt);
      {
        t2 = t2.map((e2) => {
          const t3 = "desc" === e2.dir ? "asc" : "desc";
          return new OrderBy(e2.field, t3);
        });
        const n2 = e.endAt ? new Bound(e.endAt.position, e.endAt.inclusive) : null, r2 = e.startAt ? new Bound(e.startAt.position, e.startAt.inclusive) : null;
        return __PRIVATE_newTarget(e.path, e.collectionGroup, t2, e.filters, e.limit, n2, r2);
      }
    }
    __name(__PRIVATE__queryToTarget, "__PRIVATE__queryToTarget");
    function __PRIVATE_queryWithAddedFilter(e, t2) {
      const n2 = e.filters.concat([t2]);
      return new __PRIVATE_QueryImpl(e.path, e.collectionGroup, e.explicitOrderBy.slice(), n2, e.limit, e.limitType, e.startAt, e.endAt);
    }
    __name(__PRIVATE_queryWithAddedFilter, "__PRIVATE_queryWithAddedFilter");
    function __PRIVATE_queryWithLimit(e, t2, n2) {
      return new __PRIVATE_QueryImpl(e.path, e.collectionGroup, e.explicitOrderBy.slice(), e.filters.slice(), t2, n2, e.startAt, e.endAt);
    }
    __name(__PRIVATE_queryWithLimit, "__PRIVATE_queryWithLimit");
    function __PRIVATE_queryEquals(e, t2) {
      return __PRIVATE_targetEquals(__PRIVATE_queryToTarget(e), __PRIVATE_queryToTarget(t2)) && e.limitType === t2.limitType;
    }
    __name(__PRIVATE_queryEquals, "__PRIVATE_queryEquals");
    function __PRIVATE_canonifyQuery(e) {
      return `${__PRIVATE_canonifyTarget(__PRIVATE_queryToTarget(e))}|lt:${e.limitType}`;
    }
    __name(__PRIVATE_canonifyQuery, "__PRIVATE_canonifyQuery");
    function __PRIVATE_stringifyQuery(e) {
      return `Query(target=${(/* @__PURE__ */ __name(function __PRIVATE_stringifyTarget(e2) {
        let t2 = e2.path.canonicalString();
        return null !== e2.collectionGroup && (t2 += " collectionGroup=" + e2.collectionGroup), e2.filters.length > 0 && (t2 += `, filters: [${e2.filters.map((e3) => __PRIVATE_stringifyFilter(e3)).join(", ")}]`), __PRIVATE_isNullOrUndefined(e2.limit) || (t2 += ", limit: " + e2.limit), e2.orderBy.length > 0 && (t2 += `, orderBy: [${e2.orderBy.map((e3) => (/* @__PURE__ */ __name(function __PRIVATE_stringifyOrderBy(e4) {
          return `${e4.field.canonicalString()} (${e4.dir})`;
        }, "__PRIVATE_stringifyOrderBy"))(e3)).join(", ")}]`), e2.startAt && (t2 += ", startAt: ", t2 += e2.startAt.inclusive ? "b:" : "a:", t2 += e2.startAt.position.map((e3) => canonicalId(e3)).join(",")), e2.endAt && (t2 += ", endAt: ", t2 += e2.endAt.inclusive ? "a:" : "b:", t2 += e2.endAt.position.map((e3) => canonicalId(e3)).join(",")), `Target(${t2})`;
      }, "__PRIVATE_stringifyTarget"))(__PRIVATE_queryToTarget(e))}; limitType=${e.limitType})`;
    }
    __name(__PRIVATE_stringifyQuery, "__PRIVATE_stringifyQuery");
    function __PRIVATE_queryMatches(e, t2) {
      return t2.isFoundDocument() && (/* @__PURE__ */ __name(function __PRIVATE_queryMatchesPathAndCollectionGroup(e2, t3) {
        const n2 = t3.key.path;
        return null !== e2.collectionGroup ? t3.key.hasCollectionId(e2.collectionGroup) && e2.path.isPrefixOf(n2) : DocumentKey.isDocumentKey(e2.path) ? e2.path.isEqual(n2) : e2.path.isImmediateParentOf(n2);
      }, "__PRIVATE_queryMatchesPathAndCollectionGroup"))(e, t2) && (/* @__PURE__ */ __name(function __PRIVATE_queryMatchesOrderBy(e2, t3) {
        for (const n2 of __PRIVATE_queryNormalizedOrderBy(e2))
          if (!n2.field.isKeyField() && null === t3.data.field(n2.field))
            return false;
        return true;
      }, "__PRIVATE_queryMatchesOrderBy"))(e, t2) && (/* @__PURE__ */ __name(function __PRIVATE_queryMatchesFilters(e2, t3) {
        for (const n2 of e2.filters)
          if (!n2.matches(t3))
            return false;
        return true;
      }, "__PRIVATE_queryMatchesFilters"))(e, t2) && (/* @__PURE__ */ __name(function __PRIVATE_queryMatchesBounds(e2, t3) {
        if (e2.startAt && !/**
        * Returns true if a document sorts before a bound using the provided sort
        * order.
        */
        (/* @__PURE__ */ __name(function __PRIVATE_boundSortsBeforeDocument(e3, t4, n2) {
          const r2 = __PRIVATE_boundCompareToDocument(e3, t4, n2);
          return e3.inclusive ? r2 <= 0 : r2 < 0;
        }, "__PRIVATE_boundSortsBeforeDocument"))(e2.startAt, __PRIVATE_queryNormalizedOrderBy(e2), t3))
          return false;
        if (e2.endAt && !(/* @__PURE__ */ __name(function __PRIVATE_boundSortsAfterDocument(e3, t4, n2) {
          const r2 = __PRIVATE_boundCompareToDocument(e3, t4, n2);
          return e3.inclusive ? r2 >= 0 : r2 > 0;
        }, "__PRIVATE_boundSortsAfterDocument"))(e2.endAt, __PRIVATE_queryNormalizedOrderBy(e2), t3))
          return false;
        return true;
      }, "__PRIVATE_queryMatchesBounds"))(e, t2);
    }
    __name(__PRIVATE_queryMatches, "__PRIVATE_queryMatches");
    function __PRIVATE_queryCollectionGroup(e) {
      return e.collectionGroup || (e.path.length % 2 == 1 ? e.path.lastSegment() : e.path.get(e.path.length - 2));
    }
    __name(__PRIVATE_queryCollectionGroup, "__PRIVATE_queryCollectionGroup");
    function __PRIVATE_newQueryComparator(e) {
      return (t2, n2) => {
        let r2 = false;
        for (const i of __PRIVATE_queryNormalizedOrderBy(e)) {
          const e2 = __PRIVATE_compareDocs(i, t2, n2);
          if (0 !== e2)
            return e2;
          r2 = r2 || i.field.isKeyField();
        }
        return 0;
      };
    }
    __name(__PRIVATE_newQueryComparator, "__PRIVATE_newQueryComparator");
    function __PRIVATE_compareDocs(e, t2, n2) {
      const r2 = e.field.isKeyField() ? DocumentKey.comparator(t2.key, n2.key) : (/* @__PURE__ */ __name(function __PRIVATE_compareDocumentsByField(e2, t3, n3) {
        const r3 = t3.data.field(e2), i = n3.data.field(e2);
        return null !== r3 && null !== i ? __PRIVATE_valueCompare(r3, i) : fail();
      }, "__PRIVATE_compareDocumentsByField"))(e.field, t2, n2);
      switch (e.dir) {
        case "asc":
          return r2;
        case "desc":
          return -1 * r2;
        default:
          return fail();
      }
    }
    __name(__PRIVATE_compareDocs, "__PRIVATE_compareDocs");
    var ObjectMap = class {
      constructor(e, t2) {
        this.mapKeyFn = e, this.equalsFn = t2, /**
         * The inner map for a key/value pair. Due to the possibility of collisions we
         * keep a list of entries that we do a linear search through to find an actual
         * match. Note that collisions should be rare, so we still expect near
         * constant time lookups in practice.
         */
        this.inner = {}, /** The number of entries stored in the map */
        this.innerSize = 0;
      }
      /** Get a value for this key, or undefined if it does not exist. */
      get(e) {
        const t2 = this.mapKeyFn(e), n2 = this.inner[t2];
        if (void 0 !== n2) {
          for (const [t3, r2] of n2)
            if (this.equalsFn(t3, e))
              return r2;
        }
      }
      has(e) {
        return void 0 !== this.get(e);
      }
      /** Put this key and value in the map. */
      set(e, t2) {
        const n2 = this.mapKeyFn(e), r2 = this.inner[n2];
        if (void 0 === r2)
          return this.inner[n2] = [[e, t2]], void this.innerSize++;
        for (let n3 = 0; n3 < r2.length; n3++)
          if (this.equalsFn(r2[n3][0], e))
            return void (r2[n3] = [e, t2]);
        r2.push([e, t2]), this.innerSize++;
      }
      /**
       * Remove this key from the map. Returns a boolean if anything was deleted.
       */
      delete(e) {
        const t2 = this.mapKeyFn(e), n2 = this.inner[t2];
        if (void 0 === n2)
          return false;
        for (let r2 = 0; r2 < n2.length; r2++)
          if (this.equalsFn(n2[r2][0], e))
            return 1 === n2.length ? delete this.inner[t2] : n2.splice(r2, 1), this.innerSize--, true;
        return false;
      }
      forEach(e) {
        forEach(this.inner, (t2, n2) => {
          for (const [t3, r2] of n2)
            e(t3, r2);
        });
      }
      isEmpty() {
        return isEmpty(this.inner);
      }
      size() {
        return this.innerSize;
      }
    };
    __name(ObjectMap, "ObjectMap");
    var lt = new SortedMap(DocumentKey.comparator);
    function __PRIVATE_mutableDocumentMap() {
      return lt;
    }
    __name(__PRIVATE_mutableDocumentMap, "__PRIVATE_mutableDocumentMap");
    var ht = new SortedMap(DocumentKey.comparator);
    function documentMap(...e) {
      let t2 = ht;
      for (const n2 of e)
        t2 = t2.insert(n2.key, n2);
      return t2;
    }
    __name(documentMap, "documentMap");
    function __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e) {
      let t2 = ht;
      return e.forEach((e2, n2) => t2 = t2.insert(e2, n2.overlayedDocument)), t2;
    }
    __name(__PRIVATE_convertOverlayedDocumentMapToDocumentMap, "__PRIVATE_convertOverlayedDocumentMapToDocumentMap");
    function __PRIVATE_newOverlayMap() {
      return __PRIVATE_newDocumentKeyMap();
    }
    __name(__PRIVATE_newOverlayMap, "__PRIVATE_newOverlayMap");
    function __PRIVATE_newMutationMap() {
      return __PRIVATE_newDocumentKeyMap();
    }
    __name(__PRIVATE_newMutationMap, "__PRIVATE_newMutationMap");
    function __PRIVATE_newDocumentKeyMap() {
      return new ObjectMap((e) => e.toString(), (e, t2) => e.isEqual(t2));
    }
    __name(__PRIVATE_newDocumentKeyMap, "__PRIVATE_newDocumentKeyMap");
    var Pt = new SortedMap(DocumentKey.comparator);
    var Tt = new SortedSet(DocumentKey.comparator);
    function __PRIVATE_documentKeySet(...e) {
      let t2 = Tt;
      for (const n2 of e)
        t2 = t2.add(n2);
      return t2;
    }
    __name(__PRIVATE_documentKeySet, "__PRIVATE_documentKeySet");
    var It = new SortedSet(__PRIVATE_primitiveComparator);
    function __PRIVATE_targetIdSet() {
      return It;
    }
    __name(__PRIVATE_targetIdSet, "__PRIVATE_targetIdSet");
    function __PRIVATE_toDouble(e, t2) {
      if (e.useProto3Json) {
        if (isNaN(t2))
          return {
            doubleValue: "NaN"
          };
        if (t2 === 1 / 0)
          return {
            doubleValue: "Infinity"
          };
        if (t2 === -1 / 0)
          return {
            doubleValue: "-Infinity"
          };
      }
      return {
        doubleValue: __PRIVATE_isNegativeZero(t2) ? "-0" : t2
      };
    }
    __name(__PRIVATE_toDouble, "__PRIVATE_toDouble");
    function __PRIVATE_toInteger(e) {
      return {
        integerValue: "" + e
      };
    }
    __name(__PRIVATE_toInteger, "__PRIVATE_toInteger");
    function toNumber(e, t2) {
      return isSafeInteger(t2) ? __PRIVATE_toInteger(t2) : __PRIVATE_toDouble(e, t2);
    }
    __name(toNumber, "toNumber");
    var TransformOperation = class {
      constructor() {
        this._ = void 0;
      }
    };
    __name(TransformOperation, "TransformOperation");
    function __PRIVATE_applyTransformOperationToLocalView(e, t2, n2) {
      return e instanceof __PRIVATE_ServerTimestampTransform ? (/* @__PURE__ */ __name(function serverTimestamp$1(e2, t3) {
        const n3 = {
          fields: {
            [et]: {
              stringValue: Xe
            },
            [nt]: {
              timestampValue: {
                seconds: e2.seconds,
                nanos: e2.nanoseconds
              }
            }
          }
        };
        return t3 && __PRIVATE_isServerTimestamp(t3) && (t3 = __PRIVATE_getPreviousValue(t3)), t3 && (n3.fields[tt] = t3), {
          mapValue: n3
        };
      }, "serverTimestamp$1"))(n2, t2) : e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t2) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t2) : (/* @__PURE__ */ __name(function __PRIVATE_applyNumericIncrementTransformOperationToLocalView(e2, t3) {
        const n3 = __PRIVATE_computeTransformOperationBaseValue(e2, t3), r2 = asNumber(n3) + asNumber(e2.Ie);
        return isInteger(n3) && isInteger(e2.Ie) ? __PRIVATE_toInteger(r2) : __PRIVATE_toDouble(e2.serializer, r2);
      }, "__PRIVATE_applyNumericIncrementTransformOperationToLocalView"))(e, t2);
    }
    __name(__PRIVATE_applyTransformOperationToLocalView, "__PRIVATE_applyTransformOperationToLocalView");
    function __PRIVATE_applyTransformOperationToRemoteDocument(e, t2, n2) {
      return e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t2) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t2) : n2;
    }
    __name(__PRIVATE_applyTransformOperationToRemoteDocument, "__PRIVATE_applyTransformOperationToRemoteDocument");
    function __PRIVATE_computeTransformOperationBaseValue(e, t2) {
      return e instanceof __PRIVATE_NumericIncrementTransformOperation ? (
        /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
        (/* @__PURE__ */ __name(function __PRIVATE_isNumber(e2) {
          return isInteger(e2) || (/* @__PURE__ */ __name(function __PRIVATE_isDouble(e3) {
            return !!e3 && "doubleValue" in e3;
          }, "__PRIVATE_isDouble"))(e2);
        }, "__PRIVATE_isNumber"))(t2) ? t2 : {
          integerValue: 0
        }
      ) : null;
    }
    __name(__PRIVATE_computeTransformOperationBaseValue, "__PRIVATE_computeTransformOperationBaseValue");
    var __PRIVATE_ServerTimestampTransform = class extends TransformOperation {
    };
    __name(__PRIVATE_ServerTimestampTransform, "__PRIVATE_ServerTimestampTransform");
    var __PRIVATE_ArrayUnionTransformOperation = class extends TransformOperation {
      constructor(e) {
        super(), this.elements = e;
      }
    };
    __name(__PRIVATE_ArrayUnionTransformOperation, "__PRIVATE_ArrayUnionTransformOperation");
    function __PRIVATE_applyArrayUnionTransformOperation(e, t2) {
      const n2 = __PRIVATE_coercedFieldValuesArray(t2);
      for (const t3 of e.elements)
        n2.some((e2) => __PRIVATE_valueEquals(e2, t3)) || n2.push(t3);
      return {
        arrayValue: {
          values: n2
        }
      };
    }
    __name(__PRIVATE_applyArrayUnionTransformOperation, "__PRIVATE_applyArrayUnionTransformOperation");
    var __PRIVATE_ArrayRemoveTransformOperation = class extends TransformOperation {
      constructor(e) {
        super(), this.elements = e;
      }
    };
    __name(__PRIVATE_ArrayRemoveTransformOperation, "__PRIVATE_ArrayRemoveTransformOperation");
    function __PRIVATE_applyArrayRemoveTransformOperation(e, t2) {
      let n2 = __PRIVATE_coercedFieldValuesArray(t2);
      for (const t3 of e.elements)
        n2 = n2.filter((e2) => !__PRIVATE_valueEquals(e2, t3));
      return {
        arrayValue: {
          values: n2
        }
      };
    }
    __name(__PRIVATE_applyArrayRemoveTransformOperation, "__PRIVATE_applyArrayRemoveTransformOperation");
    var __PRIVATE_NumericIncrementTransformOperation = class extends TransformOperation {
      constructor(e, t2) {
        super(), this.serializer = e, this.Ie = t2;
      }
    };
    __name(__PRIVATE_NumericIncrementTransformOperation, "__PRIVATE_NumericIncrementTransformOperation");
    function asNumber(e) {
      return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);
    }
    __name(asNumber, "asNumber");
    function __PRIVATE_coercedFieldValuesArray(e) {
      return isArray(e) && e.arrayValue.values ? e.arrayValue.values.slice() : [];
    }
    __name(__PRIVATE_coercedFieldValuesArray, "__PRIVATE_coercedFieldValuesArray");
    var FieldTransform = class {
      constructor(e, t2) {
        this.field = e, this.transform = t2;
      }
    };
    __name(FieldTransform, "FieldTransform");
    function __PRIVATE_fieldTransformEquals(e, t2) {
      return e.field.isEqual(t2.field) && (/* @__PURE__ */ __name(function __PRIVATE_transformOperationEquals(e2, t3) {
        return e2 instanceof __PRIVATE_ArrayUnionTransformOperation && t3 instanceof __PRIVATE_ArrayUnionTransformOperation || e2 instanceof __PRIVATE_ArrayRemoveTransformOperation && t3 instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_arrayEquals(e2.elements, t3.elements, __PRIVATE_valueEquals) : e2 instanceof __PRIVATE_NumericIncrementTransformOperation && t3 instanceof __PRIVATE_NumericIncrementTransformOperation ? __PRIVATE_valueEquals(e2.Ie, t3.Ie) : e2 instanceof __PRIVATE_ServerTimestampTransform && t3 instanceof __PRIVATE_ServerTimestampTransform;
      }, "__PRIVATE_transformOperationEquals"))(e.transform, t2.transform);
    }
    __name(__PRIVATE_fieldTransformEquals, "__PRIVATE_fieldTransformEquals");
    var MutationResult = class {
      constructor(e, t2) {
        this.version = e, this.transformResults = t2;
      }
    };
    __name(MutationResult, "MutationResult");
    var Precondition = class {
      constructor(e, t2) {
        this.updateTime = e, this.exists = t2;
      }
      /** Creates a new empty Precondition. */
      static none() {
        return new Precondition();
      }
      /** Creates a new Precondition with an exists flag. */
      static exists(e) {
        return new Precondition(void 0, e);
      }
      /** Creates a new Precondition based on a version a document exists at. */
      static updateTime(e) {
        return new Precondition(e);
      }
      /** Returns whether this Precondition is empty. */
      get isNone() {
        return void 0 === this.updateTime && void 0 === this.exists;
      }
      isEqual(e) {
        return this.exists === e.exists && (this.updateTime ? !!e.updateTime && this.updateTime.isEqual(e.updateTime) : !e.updateTime);
      }
    };
    __name(Precondition, "Precondition");
    function __PRIVATE_preconditionIsValidForDocument(e, t2) {
      return void 0 !== e.updateTime ? t2.isFoundDocument() && t2.version.isEqual(e.updateTime) : void 0 === e.exists || e.exists === t2.isFoundDocument();
    }
    __name(__PRIVATE_preconditionIsValidForDocument, "__PRIVATE_preconditionIsValidForDocument");
    var Mutation = class {
    };
    __name(Mutation, "Mutation");
    function __PRIVATE_calculateOverlayMutation(e, t2) {
      if (!e.hasLocalMutations || t2 && 0 === t2.fields.length)
        return null;
      if (null === t2)
        return e.isNoDocument() ? new __PRIVATE_DeleteMutation(e.key, Precondition.none()) : new __PRIVATE_SetMutation(e.key, e.data, Precondition.none());
      {
        const n2 = e.data, r2 = ObjectValue.empty();
        let i = new SortedSet(FieldPath$1.comparator);
        for (let e2 of t2.fields)
          if (!i.has(e2)) {
            let t3 = n2.field(e2);
            null === t3 && e2.length > 1 && (e2 = e2.popLast(), t3 = n2.field(e2)), null === t3 ? r2.delete(e2) : r2.set(e2, t3), i = i.add(e2);
          }
        return new __PRIVATE_PatchMutation(e.key, r2, new FieldMask(i.toArray()), Precondition.none());
      }
    }
    __name(__PRIVATE_calculateOverlayMutation, "__PRIVATE_calculateOverlayMutation");
    function __PRIVATE_mutationApplyToRemoteDocument(e, t2, n2) {
      e instanceof __PRIVATE_SetMutation ? (/* @__PURE__ */ __name(function __PRIVATE_setMutationApplyToRemoteDocument(e2, t3, n3) {
        const r2 = e2.value.clone(), i = __PRIVATE_serverTransformResults(e2.fieldTransforms, t3, n3.transformResults);
        r2.setAll(i), t3.convertToFoundDocument(n3.version, r2).setHasCommittedMutations();
      }, "__PRIVATE_setMutationApplyToRemoteDocument"))(e, t2, n2) : e instanceof __PRIVATE_PatchMutation ? (/* @__PURE__ */ __name(function __PRIVATE_patchMutationApplyToRemoteDocument(e2, t3, n3) {
        if (!__PRIVATE_preconditionIsValidForDocument(e2.precondition, t3))
          return void t3.convertToUnknownDocument(n3.version);
        const r2 = __PRIVATE_serverTransformResults(e2.fieldTransforms, t3, n3.transformResults), i = t3.data;
        i.setAll(__PRIVATE_getPatch(e2)), i.setAll(r2), t3.convertToFoundDocument(n3.version, i).setHasCommittedMutations();
      }, "__PRIVATE_patchMutationApplyToRemoteDocument"))(e, t2, n2) : (/* @__PURE__ */ __name(function __PRIVATE_deleteMutationApplyToRemoteDocument(e2, t3, n3) {
        t3.convertToNoDocument(n3.version).setHasCommittedMutations();
      }, "__PRIVATE_deleteMutationApplyToRemoteDocument"))(0, t2, n2);
    }
    __name(__PRIVATE_mutationApplyToRemoteDocument, "__PRIVATE_mutationApplyToRemoteDocument");
    function __PRIVATE_mutationApplyToLocalView(e, t2, n2, r2) {
      return e instanceof __PRIVATE_SetMutation ? (/* @__PURE__ */ __name(function __PRIVATE_setMutationApplyToLocalView(e2, t3, n3, r3) {
        if (!__PRIVATE_preconditionIsValidForDocument(e2.precondition, t3))
          return n3;
        const i = e2.value.clone(), s2 = __PRIVATE_localTransformResults(e2.fieldTransforms, r3, t3);
        return i.setAll(s2), t3.convertToFoundDocument(t3.version, i).setHasLocalMutations(), null;
      }, "__PRIVATE_setMutationApplyToLocalView"))(e, t2, n2, r2) : e instanceof __PRIVATE_PatchMutation ? (/* @__PURE__ */ __name(function __PRIVATE_patchMutationApplyToLocalView(e2, t3, n3, r3) {
        if (!__PRIVATE_preconditionIsValidForDocument(e2.precondition, t3))
          return n3;
        const i = __PRIVATE_localTransformResults(e2.fieldTransforms, r3, t3), s2 = t3.data;
        if (s2.setAll(__PRIVATE_getPatch(e2)), s2.setAll(i), t3.convertToFoundDocument(t3.version, s2).setHasLocalMutations(), null === n3)
          return null;
        return n3.unionWith(e2.fieldMask.fields).unionWith(e2.fieldTransforms.map((e3) => e3.field));
      }, "__PRIVATE_patchMutationApplyToLocalView"))(e, t2, n2, r2) : (/* @__PURE__ */ __name(function __PRIVATE_deleteMutationApplyToLocalView(e2, t3, n3) {
        if (__PRIVATE_preconditionIsValidForDocument(e2.precondition, t3))
          return t3.convertToNoDocument(t3.version).setHasLocalMutations(), null;
        return n3;
      }, "__PRIVATE_deleteMutationApplyToLocalView"))(e, t2, n2);
    }
    __name(__PRIVATE_mutationApplyToLocalView, "__PRIVATE_mutationApplyToLocalView");
    function __PRIVATE_mutationExtractBaseValue(e, t2) {
      let n2 = null;
      for (const r2 of e.fieldTransforms) {
        const e2 = t2.data.field(r2.field), i = __PRIVATE_computeTransformOperationBaseValue(r2.transform, e2 || null);
        null != i && (null === n2 && (n2 = ObjectValue.empty()), n2.set(r2.field, i));
      }
      return n2 || null;
    }
    __name(__PRIVATE_mutationExtractBaseValue, "__PRIVATE_mutationExtractBaseValue");
    function __PRIVATE_mutationEquals(e, t2) {
      return e.type === t2.type && (!!e.key.isEqual(t2.key) && (!!e.precondition.isEqual(t2.precondition) && (!!(/* @__PURE__ */ __name(function __PRIVATE_fieldTransformsAreEqual(e2, t3) {
        return void 0 === e2 && void 0 === t3 || !(!e2 || !t3) && __PRIVATE_arrayEquals(e2, t3, (e3, t4) => __PRIVATE_fieldTransformEquals(e3, t4));
      }, "__PRIVATE_fieldTransformsAreEqual"))(e.fieldTransforms, t2.fieldTransforms) && (0 === e.type ? e.value.isEqual(t2.value) : 1 !== e.type || e.data.isEqual(t2.data) && e.fieldMask.isEqual(t2.fieldMask)))));
    }
    __name(__PRIVATE_mutationEquals, "__PRIVATE_mutationEquals");
    var __PRIVATE_SetMutation = class extends Mutation {
      constructor(e, t2, n2, r2 = []) {
        super(), this.key = e, this.value = t2, this.precondition = n2, this.fieldTransforms = r2, this.type = 0;
      }
      getFieldMask() {
        return null;
      }
    };
    __name(__PRIVATE_SetMutation, "__PRIVATE_SetMutation");
    var __PRIVATE_PatchMutation = class extends Mutation {
      constructor(e, t2, n2, r2, i = []) {
        super(), this.key = e, this.data = t2, this.fieldMask = n2, this.precondition = r2, this.fieldTransforms = i, this.type = 1;
      }
      getFieldMask() {
        return this.fieldMask;
      }
    };
    __name(__PRIVATE_PatchMutation, "__PRIVATE_PatchMutation");
    function __PRIVATE_getPatch(e) {
      const t2 = /* @__PURE__ */ new Map();
      return e.fieldMask.fields.forEach((n2) => {
        if (!n2.isEmpty()) {
          const r2 = e.data.field(n2);
          t2.set(n2, r2);
        }
      }), t2;
    }
    __name(__PRIVATE_getPatch, "__PRIVATE_getPatch");
    function __PRIVATE_serverTransformResults(e, t2, n2) {
      const r2 = /* @__PURE__ */ new Map();
      __PRIVATE_hardAssert(e.length === n2.length);
      for (let i = 0; i < n2.length; i++) {
        const s2 = e[i], o2 = s2.transform, _ = t2.data.field(s2.field);
        r2.set(s2.field, __PRIVATE_applyTransformOperationToRemoteDocument(o2, _, n2[i]));
      }
      return r2;
    }
    __name(__PRIVATE_serverTransformResults, "__PRIVATE_serverTransformResults");
    function __PRIVATE_localTransformResults(e, t2, n2) {
      const r2 = /* @__PURE__ */ new Map();
      for (const i of e) {
        const e2 = i.transform, s2 = n2.data.field(i.field);
        r2.set(i.field, __PRIVATE_applyTransformOperationToLocalView(e2, s2, t2));
      }
      return r2;
    }
    __name(__PRIVATE_localTransformResults, "__PRIVATE_localTransformResults");
    var __PRIVATE_DeleteMutation = class extends Mutation {
      constructor(e, t2) {
        super(), this.key = e, this.precondition = t2, this.type = 2, this.fieldTransforms = [];
      }
      getFieldMask() {
        return null;
      }
    };
    __name(__PRIVATE_DeleteMutation, "__PRIVATE_DeleteMutation");
    var __PRIVATE_VerifyMutation = class extends Mutation {
      constructor(e, t2) {
        super(), this.key = e, this.precondition = t2, this.type = 3, this.fieldTransforms = [];
      }
      getFieldMask() {
        return null;
      }
    };
    __name(__PRIVATE_VerifyMutation, "__PRIVATE_VerifyMutation");
    var MutationBatch = class {
      /**
       * @param batchId - The unique ID of this mutation batch.
       * @param localWriteTime - The original write time of this mutation.
       * @param baseMutations - Mutations that are used to populate the base
       * values when this mutation is applied locally. This can be used to locally
       * overwrite values that are persisted in the remote document cache. Base
       * mutations are never sent to the backend.
       * @param mutations - The user-provided mutations in this mutation batch.
       * User-provided mutations are applied both locally and remotely on the
       * backend.
       */
      constructor(e, t2, n2, r2) {
        this.batchId = e, this.localWriteTime = t2, this.baseMutations = n2, this.mutations = r2;
      }
      /**
       * Applies all the mutations in this MutationBatch to the specified document
       * to compute the state of the remote document
       *
       * @param document - The document to apply mutations to.
       * @param batchResult - The result of applying the MutationBatch to the
       * backend.
       */
      applyToRemoteDocument(e, t2) {
        const n2 = t2.mutationResults;
        for (let t3 = 0; t3 < this.mutations.length; t3++) {
          const r2 = this.mutations[t3];
          if (r2.key.isEqual(e.key)) {
            __PRIVATE_mutationApplyToRemoteDocument(r2, e, n2[t3]);
          }
        }
      }
      /**
       * Computes the local view of a document given all the mutations in this
       * batch.
       *
       * @param document - The document to apply mutations to.
       * @param mutatedFields - Fields that have been updated before applying this mutation batch.
       * @returns A `FieldMask` representing all the fields that are mutated.
       */
      applyToLocalView(e, t2) {
        for (const n2 of this.baseMutations)
          n2.key.isEqual(e.key) && (t2 = __PRIVATE_mutationApplyToLocalView(n2, e, t2, this.localWriteTime));
        for (const n2 of this.mutations)
          n2.key.isEqual(e.key) && (t2 = __PRIVATE_mutationApplyToLocalView(n2, e, t2, this.localWriteTime));
        return t2;
      }
      /**
       * Computes the local view for all provided documents given the mutations in
       * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
       * replace all the mutation applications.
       */
      applyToLocalDocumentSet(e, t2) {
        const n2 = __PRIVATE_newMutationMap();
        return this.mutations.forEach((r2) => {
          const i = e.get(r2.key), s2 = i.overlayedDocument;
          let o2 = this.applyToLocalView(s2, i.mutatedFields);
          o2 = t2.has(r2.key) ? null : o2;
          const _ = __PRIVATE_calculateOverlayMutation(s2, o2);
          null !== _ && n2.set(r2.key, _), s2.isValidDocument() || s2.convertToNoDocument(SnapshotVersion.min());
        }), n2;
      }
      keys() {
        return this.mutations.reduce((e, t2) => e.add(t2.key), __PRIVATE_documentKeySet());
      }
      isEqual(e) {
        return this.batchId === e.batchId && __PRIVATE_arrayEquals(this.mutations, e.mutations, (e2, t2) => __PRIVATE_mutationEquals(e2, t2)) && __PRIVATE_arrayEquals(this.baseMutations, e.baseMutations, (e2, t2) => __PRIVATE_mutationEquals(e2, t2));
      }
    };
    __name(MutationBatch, "MutationBatch");
    var MutationBatchResult = class {
      constructor(e, t2, n2, r2) {
        this.batch = e, this.commitVersion = t2, this.mutationResults = n2, this.docVersions = r2;
      }
      /**
       * Creates a new MutationBatchResult for the given batch and results. There
       * must be one result for each mutation in the batch. This static factory
       * caches a document=&gt;version mapping (docVersions).
       */
      static from(e, t2, n2) {
        __PRIVATE_hardAssert(e.mutations.length === n2.length);
        let r2 = (/* @__PURE__ */ __name(function __PRIVATE_documentVersionMap() {
          return Pt;
        }, "__PRIVATE_documentVersionMap"))();
        const i = e.mutations;
        for (let e2 = 0; e2 < i.length; e2++)
          r2 = r2.insert(i[e2].key, n2[e2].version);
        return new MutationBatchResult(e, t2, n2, r2);
      }
    };
    __name(MutationBatchResult, "MutationBatchResult");
    var Overlay = class {
      constructor(e, t2) {
        this.largestBatchId = e, this.mutation = t2;
      }
      getKey() {
        return this.mutation.key;
      }
      isEqual(e) {
        return null !== e && this.mutation === e.mutation;
      }
      toString() {
        return `Overlay{
      largestBatchId: ${this.largestBatchId},
      mutation: ${this.mutation.toString()}
    }`;
      }
    };
    __name(Overlay, "Overlay");
    var __PRIVATE_AggregateImpl = class {
      constructor(e, t2, n2) {
        this.alias = e, this.aggregateType = t2, this.fieldPath = n2;
      }
    };
    __name(__PRIVATE_AggregateImpl, "__PRIVATE_AggregateImpl");
    var ExistenceFilter = class {
      constructor(e, t2) {
        this.count = e, this.unchangedNames = t2;
      }
    };
    __name(ExistenceFilter, "ExistenceFilter");
    var Et;
    var dt;
    function __PRIVATE_isPermanentError(e) {
      switch (e) {
        case C.OK:
          return fail();
        case C.CANCELLED:
        case C.UNKNOWN:
        case C.DEADLINE_EXCEEDED:
        case C.RESOURCE_EXHAUSTED:
        case C.INTERNAL:
        case C.UNAVAILABLE:
        case C.UNAUTHENTICATED:
          return false;
        case C.INVALID_ARGUMENT:
        case C.NOT_FOUND:
        case C.ALREADY_EXISTS:
        case C.PERMISSION_DENIED:
        case C.FAILED_PRECONDITION:
        case C.ABORTED:
        case C.OUT_OF_RANGE:
        case C.UNIMPLEMENTED:
        case C.DATA_LOSS:
          return true;
        default:
          return fail();
      }
    }
    __name(__PRIVATE_isPermanentError, "__PRIVATE_isPermanentError");
    function __PRIVATE_mapCodeFromRpcCode(e) {
      if (void 0 === e)
        return __PRIVATE_logError("GRPC error has no .code"), C.UNKNOWN;
      switch (e) {
        case Et.OK:
          return C.OK;
        case Et.CANCELLED:
          return C.CANCELLED;
        case Et.UNKNOWN:
          return C.UNKNOWN;
        case Et.DEADLINE_EXCEEDED:
          return C.DEADLINE_EXCEEDED;
        case Et.RESOURCE_EXHAUSTED:
          return C.RESOURCE_EXHAUSTED;
        case Et.INTERNAL:
          return C.INTERNAL;
        case Et.UNAVAILABLE:
          return C.UNAVAILABLE;
        case Et.UNAUTHENTICATED:
          return C.UNAUTHENTICATED;
        case Et.INVALID_ARGUMENT:
          return C.INVALID_ARGUMENT;
        case Et.NOT_FOUND:
          return C.NOT_FOUND;
        case Et.ALREADY_EXISTS:
          return C.ALREADY_EXISTS;
        case Et.PERMISSION_DENIED:
          return C.PERMISSION_DENIED;
        case Et.FAILED_PRECONDITION:
          return C.FAILED_PRECONDITION;
        case Et.ABORTED:
          return C.ABORTED;
        case Et.OUT_OF_RANGE:
          return C.OUT_OF_RANGE;
        case Et.UNIMPLEMENTED:
          return C.UNIMPLEMENTED;
        case Et.DATA_LOSS:
          return C.DATA_LOSS;
        default:
          return fail();
      }
    }
    __name(__PRIVATE_mapCodeFromRpcCode, "__PRIVATE_mapCodeFromRpcCode");
    (dt = Et || (Et = {}))[dt.OK = 0] = "OK", dt[dt.CANCELLED = 1] = "CANCELLED", dt[dt.UNKNOWN = 2] = "UNKNOWN", dt[dt.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", dt[dt.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", dt[dt.NOT_FOUND = 5] = "NOT_FOUND", dt[dt.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", dt[dt.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", dt[dt.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", dt[dt.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", dt[dt.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", dt[dt.ABORTED = 10] = "ABORTED", dt[dt.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", dt[dt.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", dt[dt.INTERNAL = 13] = "INTERNAL", dt[dt.UNAVAILABLE = 14] = "UNAVAILABLE", dt[dt.DATA_LOSS = 15] = "DATA_LOSS";
    var At = null;
    function __PRIVATE_newTextEncoder() {
      return new TextEncoder();
    }
    __name(__PRIVATE_newTextEncoder, "__PRIVATE_newTextEncoder");
    var Rt = new bloomBlob.Integer([4294967295, 4294967295], 0);
    function __PRIVATE_getMd5HashValue(e) {
      const t2 = __PRIVATE_newTextEncoder().encode(e), n2 = new bloomBlob.Md5();
      return n2.update(t2), new Uint8Array(n2.digest());
    }
    __name(__PRIVATE_getMd5HashValue, "__PRIVATE_getMd5HashValue");
    function __PRIVATE_get64BitUints(e) {
      const t2 = new DataView(e.buffer), n2 = t2.getUint32(
        0,
        /* littleEndian= */
        true
      ), r2 = t2.getUint32(
        4,
        /* littleEndian= */
        true
      ), i = t2.getUint32(
        8,
        /* littleEndian= */
        true
      ), s2 = t2.getUint32(
        12,
        /* littleEndian= */
        true
      );
      return [new bloomBlob.Integer([n2, r2], 0), new bloomBlob.Integer([i, s2], 0)];
    }
    __name(__PRIVATE_get64BitUints, "__PRIVATE_get64BitUints");
    var BloomFilter = class {
      constructor(e, t2, n2) {
        if (this.bitmap = e, this.padding = t2, this.hashCount = n2, t2 < 0 || t2 >= 8)
          throw new __PRIVATE_BloomFilterError(`Invalid padding: ${t2}`);
        if (n2 < 0)
          throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n2}`);
        if (e.length > 0 && 0 === this.hashCount)
          throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n2}`);
        if (0 === e.length && 0 !== t2)
          throw new __PRIVATE_BloomFilterError(`Invalid padding when bitmap length is 0: ${t2}`);
        this.Ee = 8 * e.length - t2, // Set the bit count in Integer to avoid repetition in mightContain().
        this.de = bloomBlob.Integer.fromNumber(this.Ee);
      }
      // Calculate the ith hash value based on the hashed 64bit integers,
      // and calculate its corresponding bit index in the bitmap to be checked.
      Ae(e, t2, n2) {
        let r2 = e.add(t2.multiply(bloomBlob.Integer.fromNumber(n2)));
        return 1 === r2.compare(Rt) && (r2 = new bloomBlob.Integer([r2.getBits(0), r2.getBits(1)], 0)), r2.modulo(this.de).toNumber();
      }
      // Return whether the bit on the given index in the bitmap is set to 1.
      Re(e) {
        return !!(this.bitmap[Math.floor(e / 8)] & 1 << e % 8);
      }
      mightContain(e) {
        if (0 === this.Ee)
          return false;
        const t2 = __PRIVATE_getMd5HashValue(e), [n2, r2] = __PRIVATE_get64BitUints(t2);
        for (let e2 = 0; e2 < this.hashCount; e2++) {
          const t3 = this.Ae(n2, r2, e2);
          if (!this.Re(t3))
            return false;
        }
        return true;
      }
      /** Create bloom filter for testing purposes only. */
      static create(e, t2, n2) {
        const r2 = e % 8 == 0 ? 0 : 8 - e % 8, i = new Uint8Array(Math.ceil(e / 8)), s2 = new BloomFilter(i, r2, t2);
        return n2.forEach((e2) => s2.insert(e2)), s2;
      }
      insert(e) {
        if (0 === this.Ee)
          return;
        const t2 = __PRIVATE_getMd5HashValue(e), [n2, r2] = __PRIVATE_get64BitUints(t2);
        for (let e2 = 0; e2 < this.hashCount; e2++) {
          const t3 = this.Ae(n2, r2, e2);
          this.Ve(t3);
        }
      }
      Ve(e) {
        const t2 = Math.floor(e / 8), n2 = e % 8;
        this.bitmap[t2] |= 1 << n2;
      }
    };
    __name(BloomFilter, "BloomFilter");
    var __PRIVATE_BloomFilterError = class extends Error {
      constructor() {
        super(...arguments), this.name = "BloomFilterError";
      }
    };
    __name(__PRIVATE_BloomFilterError, "__PRIVATE_BloomFilterError");
    var RemoteEvent = class {
      constructor(e, t2, n2, r2, i) {
        this.snapshotVersion = e, this.targetChanges = t2, this.targetMismatches = n2, this.documentUpdates = r2, this.resolvedLimboDocuments = i;
      }
      /**
       * HACK: Views require RemoteEvents in order to determine whether the view is
       * CURRENT, but secondary tabs don't receive remote events. So this method is
       * used to create a synthesized RemoteEvent that can be used to apply a
       * CURRENT status change to a View, for queries executed in a different tab.
       */
      // PORTING NOTE: Multi-tab only
      static createSynthesizedRemoteEventForCurrentChange(e, t2, n2) {
        const r2 = /* @__PURE__ */ new Map();
        return r2.set(e, TargetChange.createSynthesizedTargetChangeForCurrentChange(e, t2, n2)), new RemoteEvent(SnapshotVersion.min(), r2, new SortedMap(__PRIVATE_primitiveComparator), __PRIVATE_mutableDocumentMap(), __PRIVATE_documentKeySet());
      }
    };
    __name(RemoteEvent, "RemoteEvent");
    var TargetChange = class {
      constructor(e, t2, n2, r2, i) {
        this.resumeToken = e, this.current = t2, this.addedDocuments = n2, this.modifiedDocuments = r2, this.removedDocuments = i;
      }
      /**
       * This method is used to create a synthesized TargetChanges that can be used to
       * apply a CURRENT status change to a View (for queries executed in a different
       * tab) or for new queries (to raise snapshots with correct CURRENT status).
       */
      static createSynthesizedTargetChangeForCurrentChange(e, t2, n2) {
        return new TargetChange(n2, t2, __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet());
      }
    };
    __name(TargetChange, "TargetChange");
    var __PRIVATE_DocumentWatchChange = class {
      constructor(e, t2, n2, r2) {
        this.me = e, this.removedTargetIds = t2, this.key = n2, this.fe = r2;
      }
    };
    __name(__PRIVATE_DocumentWatchChange, "__PRIVATE_DocumentWatchChange");
    var __PRIVATE_ExistenceFilterChange = class {
      constructor(e, t2) {
        this.targetId = e, this.ge = t2;
      }
    };
    __name(__PRIVATE_ExistenceFilterChange, "__PRIVATE_ExistenceFilterChange");
    var __PRIVATE_WatchTargetChange = class {
      constructor(e, t2, n2 = ByteString.EMPTY_BYTE_STRING, r2 = null) {
        this.state = e, this.targetIds = t2, this.resumeToken = n2, this.cause = r2;
      }
    };
    __name(__PRIVATE_WatchTargetChange, "__PRIVATE_WatchTargetChange");
    var __PRIVATE_TargetState = class {
      constructor() {
        this.pe = 0, /**
         * Keeps track of the document changes since the last raised snapshot.
         *
         * These changes are continuously updated as we receive document updates and
         * always reflect the current set of changes against the last issued snapshot.
         */
        this.ye = __PRIVATE_snapshotChangesMap(), /** See public getters for explanations of these fields. */
        this.we = ByteString.EMPTY_BYTE_STRING, this.Se = false, /**
         * Whether this target state should be included in the next snapshot. We
         * initialize to true so that newly-added targets are included in the next
         * RemoteEvent.
         */
        this.be = true;
      }
      /**
       * Whether this target has been marked 'current'.
       *
       * 'Current' has special meaning in the RPC protocol: It implies that the
       * Watch backend has sent us all changes up to the point at which the target
       * was added and that the target is consistent with the rest of the watch
       * stream.
       */
      get current() {
        return this.Se;
      }
      /** The last resume token sent to us for this target. */
      get resumeToken() {
        return this.we;
      }
      /** Whether this target has pending target adds or target removes. */
      get De() {
        return 0 !== this.pe;
      }
      /** Whether we have modified any state that should trigger a snapshot. */
      get ve() {
        return this.be;
      }
      /**
       * Applies the resume token to the TargetChange, but only when it has a new
       * value. Empty resumeTokens are discarded.
       */
      Ce(e) {
        e.approximateByteSize() > 0 && (this.be = true, this.we = e);
      }
      /**
       * Creates a target change from the current set of changes.
       *
       * To reset the document changes after raising this snapshot, call
       * `clearPendingChanges()`.
       */
      Fe() {
        let e = __PRIVATE_documentKeySet(), t2 = __PRIVATE_documentKeySet(), n2 = __PRIVATE_documentKeySet();
        return this.ye.forEach((r2, i) => {
          switch (i) {
            case 0:
              e = e.add(r2);
              break;
            case 2:
              t2 = t2.add(r2);
              break;
            case 1:
              n2 = n2.add(r2);
              break;
            default:
              fail();
          }
        }), new TargetChange(this.we, this.Se, e, t2, n2);
      }
      /**
       * Resets the document changes and sets `hasPendingChanges` to false.
       */
      Me() {
        this.be = false, this.ye = __PRIVATE_snapshotChangesMap();
      }
      xe(e, t2) {
        this.be = true, this.ye = this.ye.insert(e, t2);
      }
      Oe(e) {
        this.be = true, this.ye = this.ye.remove(e);
      }
      Ne() {
        this.pe += 1;
      }
      Be() {
        this.pe -= 1, __PRIVATE_hardAssert(this.pe >= 0);
      }
      Le() {
        this.be = true, this.Se = true;
      }
    };
    __name(__PRIVATE_TargetState, "__PRIVATE_TargetState");
    var __PRIVATE_WatchChangeAggregator = class {
      constructor(e) {
        this.ke = e, /** The internal state of all tracked targets. */
        this.qe = /* @__PURE__ */ new Map(), /** Keeps track of the documents to update since the last raised snapshot. */
        this.Qe = __PRIVATE_mutableDocumentMap(), this.$e = __PRIVATE_documentTargetMap(), /** A mapping of document keys to their set of target IDs. */
        this.Ke = __PRIVATE_documentTargetMap(), /**
         * A map of targets with existence filter mismatches. These targets are
         * known to be inconsistent and their listens needs to be re-established by
         * RemoteStore.
         */
        this.Ue = new SortedMap(__PRIVATE_primitiveComparator);
      }
      /**
       * Processes and adds the DocumentWatchChange to the current set of changes.
       */
      We(e) {
        for (const t2 of e.me)
          e.fe && e.fe.isFoundDocument() ? this.Ge(t2, e.fe) : this.ze(t2, e.key, e.fe);
        for (const t2 of e.removedTargetIds)
          this.ze(t2, e.key, e.fe);
      }
      /** Processes and adds the WatchTargetChange to the current set of changes. */
      je(e) {
        this.forEachTarget(e, (t2) => {
          const n2 = this.He(t2);
          switch (e.state) {
            case 0:
              this.Je(t2) && n2.Ce(e.resumeToken);
              break;
            case 1:
              n2.Be(), n2.De || // We have a freshly added target, so we need to reset any state
              // that we had previously. This can happen e.g. when remove and add
              // back a target for existence filter mismatches.
              n2.Me(), n2.Ce(e.resumeToken);
              break;
            case 2:
              n2.Be(), n2.De || this.removeTarget(t2);
              break;
            case 3:
              this.Je(t2) && (n2.Le(), n2.Ce(e.resumeToken));
              break;
            case 4:
              this.Je(t2) && // Reset the target and synthesizes removes for all existing
              // documents. The backend will re-add any documents that still
              // match the target before it sends the next global snapshot.
              (this.Ye(t2), n2.Ce(e.resumeToken));
              break;
            default:
              fail();
          }
        });
      }
      /**
       * Iterates over all targetIds that the watch change applies to: either the
       * targetIds explicitly listed in the change or the targetIds of all currently
       * active targets.
       */
      forEachTarget(e, t2) {
        e.targetIds.length > 0 ? e.targetIds.forEach(t2) : this.qe.forEach((e2, n2) => {
          this.Je(n2) && t2(n2);
        });
      }
      /**
       * Handles existence filters and synthesizes deletes for filter mismatches.
       * Targets that are invalidated by filter mismatches are added to
       * `pendingTargetResets`.
       */
      Ze(e) {
        const t2 = e.targetId, n2 = e.ge.count, r2 = this.Xe(t2);
        if (r2) {
          const i = r2.target;
          if (__PRIVATE_targetIsDocumentTarget(i))
            if (0 === n2) {
              const e2 = new DocumentKey(i.path);
              this.ze(t2, e2, MutableDocument.newNoDocument(e2, SnapshotVersion.min()));
            } else
              __PRIVATE_hardAssert(1 === n2);
          else {
            const r3 = this.et(t2);
            if (r3 !== n2) {
              const n3 = this.tt(e), i2 = n3 ? this.nt(n3, e, r3) : 1;
              if (0 !== i2) {
                this.Ye(t2);
                const e2 = 2 === i2 ? "TargetPurposeExistenceFilterMismatchBloom" : "TargetPurposeExistenceFilterMismatch";
                this.Ue = this.Ue.insert(t2, e2);
              }
              null == At || At.rt((/* @__PURE__ */ __name(function __PRIVATE_createExistenceFilterMismatchInfoForTestingHooks(e2, t3, n4, r4, i3) {
                var s2, o2, _, a2, u2, c2;
                const l = {
                  localCacheCount: e2,
                  existenceFilterCount: t3.count,
                  databaseId: n4.database,
                  projectId: n4.projectId
                }, h2 = t3.unchangedNames;
                h2 && (l.bloomFilter = {
                  applied: 0 === i3,
                  hashCount: null !== (s2 = null == h2 ? void 0 : h2.hashCount) && void 0 !== s2 ? s2 : 0,
                  bitmapLength: null !== (a2 = null === (_ = null === (o2 = null == h2 ? void 0 : h2.bits) || void 0 === o2 ? void 0 : o2.bitmap) || void 0 === _ ? void 0 : _.length) && void 0 !== a2 ? a2 : 0,
                  padding: null !== (c2 = null === (u2 = null == h2 ? void 0 : h2.bits) || void 0 === u2 ? void 0 : u2.padding) && void 0 !== c2 ? c2 : 0,
                  mightContain: (e3) => {
                    var t4;
                    return null !== (t4 = null == r4 ? void 0 : r4.mightContain(e3)) && void 0 !== t4 && t4;
                  }
                });
                return l;
              }, "__PRIVATE_createExistenceFilterMismatchInfoForTestingHooks"))(r3, e.ge, this.ke.it(), n3, i2));
            }
          }
        }
      }
      /**
       * Parse the bloom filter from the "unchanged_names" field of an existence
       * filter.
       */
      tt(e) {
        const t2 = e.ge.unchangedNames;
        if (!t2 || !t2.bits)
          return null;
        const { bits: { bitmap: n2 = "", padding: r2 = 0 }, hashCount: i = 0 } = t2;
        let s2, o2;
        try {
          s2 = __PRIVATE_normalizeByteString(n2).toUint8Array();
        } catch (e2) {
          if (e2 instanceof __PRIVATE_Base64DecodeError)
            return __PRIVATE_logWarn("Decoding the base64 bloom filter in existence filter failed (" + e2.message + "); ignoring the bloom filter and falling back to full re-query."), null;
          throw e2;
        }
        try {
          o2 = new BloomFilter(s2, r2, i);
        } catch (e2) {
          return __PRIVATE_logWarn(e2 instanceof __PRIVATE_BloomFilterError ? "BloomFilter error: " : "Applying bloom filter failed: ", e2), null;
        }
        return 0 === o2.Ee ? null : o2;
      }
      /**
       * Apply bloom filter to remove the deleted documents, and return the
       * application status.
       */
      nt(e, t2, n2) {
        return t2.ge.count === n2 - this.st(e, t2.targetId) ? 0 : 2;
      }
      /**
       * Filter out removed documents based on bloom filter membership result and
       * return number of documents removed.
       */
      st(e, t2) {
        const n2 = this.ke.getRemoteKeysForTarget(t2);
        let r2 = 0;
        return n2.forEach((n3) => {
          const i = this.ke.it(), s2 = `projects/${i.projectId}/databases/${i.database}/documents/${n3.path.canonicalString()}`;
          e.mightContain(s2) || (this.ze(
            t2,
            n3,
            /*updatedDocument=*/
            null
          ), r2++);
        }), r2;
      }
      /**
       * Converts the currently accumulated state into a remote event at the
       * provided snapshot version. Resets the accumulated changes before returning.
       */
      ot(e) {
        const t2 = /* @__PURE__ */ new Map();
        this.qe.forEach((n3, r3) => {
          const i = this.Xe(r3);
          if (i) {
            if (n3.current && __PRIVATE_targetIsDocumentTarget(i.target)) {
              const t3 = new DocumentKey(i.target.path);
              this._t(t3).has(r3) || this.ut(r3, t3) || this.ze(r3, t3, MutableDocument.newNoDocument(t3, e));
            }
            n3.ve && (t2.set(r3, n3.Fe()), n3.Me());
          }
        });
        let n2 = __PRIVATE_documentKeySet();
        this.Ke.forEach((e2, t3) => {
          let r3 = true;
          t3.forEachWhile((e3) => {
            const t4 = this.Xe(e3);
            return !t4 || "TargetPurposeLimboResolution" === t4.purpose || (r3 = false, false);
          }), r3 && (n2 = n2.add(e2));
        }), this.Qe.forEach((t3, n3) => n3.setReadTime(e));
        const r2 = new RemoteEvent(e, t2, this.Ue, this.Qe, n2);
        return this.Qe = __PRIVATE_mutableDocumentMap(), this.$e = __PRIVATE_documentTargetMap(), this.Ke = __PRIVATE_documentTargetMap(), this.Ue = new SortedMap(__PRIVATE_primitiveComparator), r2;
      }
      /**
       * Adds the provided document to the internal list of document updates and
       * its document key to the given target's mapping.
       */
      // Visible for testing.
      Ge(e, t2) {
        if (!this.Je(e))
          return;
        const n2 = this.ut(e, t2.key) ? 2 : 0;
        this.He(e).xe(t2.key, n2), this.Qe = this.Qe.insert(t2.key, t2), this.$e = this.$e.insert(t2.key, this._t(t2.key).add(e)), this.Ke = this.Ke.insert(t2.key, this.ct(t2.key).add(e));
      }
      /**
       * Removes the provided document from the target mapping. If the
       * document no longer matches the target, but the document's state is still
       * known (e.g. we know that the document was deleted or we received the change
       * that caused the filter mismatch), the new document can be provided
       * to update the remote document cache.
       */
      // Visible for testing.
      ze(e, t2, n2) {
        if (!this.Je(e))
          return;
        const r2 = this.He(e);
        this.ut(e, t2) ? r2.xe(
          t2,
          1
          /* ChangeType.Removed */
        ) : (
          // The document may have entered and left the target before we raised a
          // snapshot, so we can just ignore the change.
          r2.Oe(t2)
        ), this.Ke = this.Ke.insert(t2, this.ct(t2).delete(e)), this.Ke = this.Ke.insert(t2, this.ct(t2).add(e)), n2 && (this.Qe = this.Qe.insert(t2, n2));
      }
      removeTarget(e) {
        this.qe.delete(e);
      }
      /**
       * Returns the current count of documents in the target. This includes both
       * the number of documents that the LocalStore considers to be part of the
       * target as well as any accumulated changes.
       */
      et(e) {
        const t2 = this.He(e).Fe();
        return this.ke.getRemoteKeysForTarget(e).size + t2.addedDocuments.size - t2.removedDocuments.size;
      }
      /**
       * Increment the number of acks needed from watch before we can consider the
       * server to be 'in-sync' with the client's active targets.
       */
      Ne(e) {
        this.He(e).Ne();
      }
      He(e) {
        let t2 = this.qe.get(e);
        return t2 || (t2 = new __PRIVATE_TargetState(), this.qe.set(e, t2)), t2;
      }
      ct(e) {
        let t2 = this.Ke.get(e);
        return t2 || (t2 = new SortedSet(__PRIVATE_primitiveComparator), this.Ke = this.Ke.insert(e, t2)), t2;
      }
      _t(e) {
        let t2 = this.$e.get(e);
        return t2 || (t2 = new SortedSet(__PRIVATE_primitiveComparator), this.$e = this.$e.insert(e, t2)), t2;
      }
      /**
       * Verifies that the user is still interested in this target (by calling
       * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
       * from watch.
       */
      Je(e) {
        const t2 = null !== this.Xe(e);
        return t2 || __PRIVATE_logDebug("WatchChangeAggregator", "Detected inactive target", e), t2;
      }
      /**
       * Returns the TargetData for an active target (i.e. a target that the user
       * is still interested in that has no outstanding target change requests).
       */
      Xe(e) {
        const t2 = this.qe.get(e);
        return t2 && t2.De ? null : this.ke.lt(e);
      }
      /**
       * Resets the state of a Watch target to its initial state (e.g. sets
       * 'current' to false, clears the resume token and removes its target mapping
       * from all documents).
       */
      Ye(e) {
        this.qe.set(e, new __PRIVATE_TargetState());
        this.ke.getRemoteKeysForTarget(e).forEach((t2) => {
          this.ze(
            e,
            t2,
            /*updatedDocument=*/
            null
          );
        });
      }
      /**
       * Returns whether the LocalStore considers the document to be part of the
       * specified target.
       */
      ut(e, t2) {
        return this.ke.getRemoteKeysForTarget(e).has(t2);
      }
    };
    __name(__PRIVATE_WatchChangeAggregator, "__PRIVATE_WatchChangeAggregator");
    function __PRIVATE_documentTargetMap() {
      return new SortedMap(DocumentKey.comparator);
    }
    __name(__PRIVATE_documentTargetMap, "__PRIVATE_documentTargetMap");
    function __PRIVATE_snapshotChangesMap() {
      return new SortedMap(DocumentKey.comparator);
    }
    __name(__PRIVATE_snapshotChangesMap, "__PRIVATE_snapshotChangesMap");
    var Vt = (() => {
      const e = {
        asc: "ASCENDING",
        desc: "DESCENDING"
      };
      return e;
    })();
    var mt = (() => {
      const e = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
      };
      return e;
    })();
    var ft = (() => {
      const e = {
        and: "AND",
        or: "OR"
      };
      return e;
    })();
    var JsonProtoSerializer = class {
      constructor(e, t2) {
        this.databaseId = e, this.useProto3Json = t2;
      }
    };
    __name(JsonProtoSerializer, "JsonProtoSerializer");
    function __PRIVATE_toInt32Proto(e, t2) {
      return e.useProto3Json || __PRIVATE_isNullOrUndefined(t2) ? t2 : {
        value: t2
      };
    }
    __name(__PRIVATE_toInt32Proto, "__PRIVATE_toInt32Proto");
    function toTimestamp(e, t2) {
      if (e.useProto3Json) {
        return `${new Date(1e3 * t2.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + t2.nanoseconds).slice(-9)}Z`;
      }
      return {
        seconds: "" + t2.seconds,
        nanos: t2.nanoseconds
      };
    }
    __name(toTimestamp, "toTimestamp");
    function __PRIVATE_toBytes(e, t2) {
      return e.useProto3Json ? t2.toBase64() : t2.toUint8Array();
    }
    __name(__PRIVATE_toBytes, "__PRIVATE_toBytes");
    function __PRIVATE_toVersion(e, t2) {
      return toTimestamp(e, t2.toTimestamp());
    }
    __name(__PRIVATE_toVersion, "__PRIVATE_toVersion");
    function __PRIVATE_fromVersion(e) {
      return __PRIVATE_hardAssert(!!e), SnapshotVersion.fromTimestamp((/* @__PURE__ */ __name(function fromTimestamp(e2) {
        const t2 = __PRIVATE_normalizeTimestamp(e2);
        return new Timestamp(t2.seconds, t2.nanos);
      }, "fromTimestamp"))(e));
    }
    __name(__PRIVATE_fromVersion, "__PRIVATE_fromVersion");
    function __PRIVATE_toResourceName(e, t2) {
      return __PRIVATE_toResourcePath(e, t2).canonicalString();
    }
    __name(__PRIVATE_toResourceName, "__PRIVATE_toResourceName");
    function __PRIVATE_toResourcePath(e, t2) {
      const n2 = (/* @__PURE__ */ __name(function __PRIVATE_fullyQualifiedPrefixPath(e2) {
        return new ResourcePath(["projects", e2.projectId, "databases", e2.database]);
      }, "__PRIVATE_fullyQualifiedPrefixPath"))(e).child("documents");
      return void 0 === t2 ? n2 : n2.child(t2);
    }
    __name(__PRIVATE_toResourcePath, "__PRIVATE_toResourcePath");
    function __PRIVATE_fromResourceName(e) {
      const t2 = ResourcePath.fromString(e);
      return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(t2)), t2;
    }
    __name(__PRIVATE_fromResourceName, "__PRIVATE_fromResourceName");
    function __PRIVATE_toName(e, t2) {
      return __PRIVATE_toResourceName(e.databaseId, t2.path);
    }
    __name(__PRIVATE_toName, "__PRIVATE_toName");
    function fromName(e, t2) {
      const n2 = __PRIVATE_fromResourceName(t2);
      if (n2.get(1) !== e.databaseId.projectId)
        throw new FirestoreError(C.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n2.get(1) + " vs " + e.databaseId.projectId);
      if (n2.get(3) !== e.databaseId.database)
        throw new FirestoreError(C.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n2.get(3) + " vs " + e.databaseId.database);
      return new DocumentKey(__PRIVATE_extractLocalPathFromResourceName(n2));
    }
    __name(fromName, "fromName");
    function __PRIVATE_toQueryPath(e, t2) {
      return __PRIVATE_toResourceName(e.databaseId, t2);
    }
    __name(__PRIVATE_toQueryPath, "__PRIVATE_toQueryPath");
    function __PRIVATE_fromQueryPath(e) {
      const t2 = __PRIVATE_fromResourceName(e);
      return 4 === t2.length ? ResourcePath.emptyPath() : __PRIVATE_extractLocalPathFromResourceName(t2);
    }
    __name(__PRIVATE_fromQueryPath, "__PRIVATE_fromQueryPath");
    function __PRIVATE_getEncodedDatabaseId(e) {
      return new ResourcePath(["projects", e.databaseId.projectId, "databases", e.databaseId.database]).canonicalString();
    }
    __name(__PRIVATE_getEncodedDatabaseId, "__PRIVATE_getEncodedDatabaseId");
    function __PRIVATE_extractLocalPathFromResourceName(e) {
      return __PRIVATE_hardAssert(e.length > 4 && "documents" === e.get(4)), e.popFirst(5);
    }
    __name(__PRIVATE_extractLocalPathFromResourceName, "__PRIVATE_extractLocalPathFromResourceName");
    function __PRIVATE_toMutationDocument(e, t2, n2) {
      return {
        name: __PRIVATE_toName(e, t2),
        fields: n2.value.mapValue.fields
      };
    }
    __name(__PRIVATE_toMutationDocument, "__PRIVATE_toMutationDocument");
    function __PRIVATE_fromDocument(e, t2, n2) {
      const r2 = fromName(e, t2.name), i = __PRIVATE_fromVersion(t2.updateTime), s2 = t2.createTime ? __PRIVATE_fromVersion(t2.createTime) : SnapshotVersion.min(), o2 = new ObjectValue({
        mapValue: {
          fields: t2.fields
        }
      }), _ = MutableDocument.newFoundDocument(r2, i, s2, o2);
      return n2 && _.setHasCommittedMutations(), n2 ? _.setHasCommittedMutations() : _;
    }
    __name(__PRIVATE_fromDocument, "__PRIVATE_fromDocument");
    function __PRIVATE_fromBatchGetDocumentsResponse(e, t2) {
      return "found" in t2 ? (/* @__PURE__ */ __name(function __PRIVATE_fromFound(e2, t3) {
        __PRIVATE_hardAssert(!!t3.found), t3.found.name, t3.found.updateTime;
        const n2 = fromName(e2, t3.found.name), r2 = __PRIVATE_fromVersion(t3.found.updateTime), i = t3.found.createTime ? __PRIVATE_fromVersion(t3.found.createTime) : SnapshotVersion.min(), s2 = new ObjectValue({
          mapValue: {
            fields: t3.found.fields
          }
        });
        return MutableDocument.newFoundDocument(n2, r2, i, s2);
      }, "__PRIVATE_fromFound"))(e, t2) : "missing" in t2 ? (/* @__PURE__ */ __name(function __PRIVATE_fromMissing(e2, t3) {
        __PRIVATE_hardAssert(!!t3.missing), __PRIVATE_hardAssert(!!t3.readTime);
        const n2 = fromName(e2, t3.missing), r2 = __PRIVATE_fromVersion(t3.readTime);
        return MutableDocument.newNoDocument(n2, r2);
      }, "__PRIVATE_fromMissing"))(e, t2) : fail();
    }
    __name(__PRIVATE_fromBatchGetDocumentsResponse, "__PRIVATE_fromBatchGetDocumentsResponse");
    function __PRIVATE_fromWatchChange(e, t2) {
      let n2;
      if ("targetChange" in t2) {
        t2.targetChange;
        const r2 = (/* @__PURE__ */ __name(function __PRIVATE_fromWatchTargetChangeState(e2) {
          return "NO_CHANGE" === e2 ? 0 : "ADD" === e2 ? 1 : "REMOVE" === e2 ? 2 : "CURRENT" === e2 ? 3 : "RESET" === e2 ? 4 : fail();
        }, "__PRIVATE_fromWatchTargetChangeState"))(t2.targetChange.targetChangeType || "NO_CHANGE"), i = t2.targetChange.targetIds || [], s2 = (/* @__PURE__ */ __name(function __PRIVATE_fromBytes(e2, t3) {
          return e2.useProto3Json ? (__PRIVATE_hardAssert(void 0 === t3 || "string" == typeof t3), ByteString.fromBase64String(t3 || "")) : (__PRIVATE_hardAssert(void 0 === t3 || // Check if the value is an instance of both Buffer and Uint8Array,
          // despite the fact that Buffer extends Uint8Array. In some
          // environments, such as jsdom, the prototype chain of Buffer
          // does not indicate that it extends Uint8Array.
          t3 instanceof Buffer || t3 instanceof Uint8Array), ByteString.fromUint8Array(t3 || new Uint8Array()));
        }, "__PRIVATE_fromBytes"))(e, t2.targetChange.resumeToken), o2 = t2.targetChange.cause, _ = o2 && (/* @__PURE__ */ __name(function __PRIVATE_fromRpcStatus(e2) {
          const t3 = void 0 === e2.code ? C.UNKNOWN : __PRIVATE_mapCodeFromRpcCode(e2.code);
          return new FirestoreError(t3, e2.message || "");
        }, "__PRIVATE_fromRpcStatus"))(o2);
        n2 = new __PRIVATE_WatchTargetChange(r2, i, s2, _ || null);
      } else if ("documentChange" in t2) {
        t2.documentChange;
        const r2 = t2.documentChange;
        r2.document, r2.document.name, r2.document.updateTime;
        const i = fromName(e, r2.document.name), s2 = __PRIVATE_fromVersion(r2.document.updateTime), o2 = r2.document.createTime ? __PRIVATE_fromVersion(r2.document.createTime) : SnapshotVersion.min(), _ = new ObjectValue({
          mapValue: {
            fields: r2.document.fields
          }
        }), a2 = MutableDocument.newFoundDocument(i, s2, o2, _), u2 = r2.targetIds || [], c2 = r2.removedTargetIds || [];
        n2 = new __PRIVATE_DocumentWatchChange(u2, c2, a2.key, a2);
      } else if ("documentDelete" in t2) {
        t2.documentDelete;
        const r2 = t2.documentDelete;
        r2.document;
        const i = fromName(e, r2.document), s2 = r2.readTime ? __PRIVATE_fromVersion(r2.readTime) : SnapshotVersion.min(), o2 = MutableDocument.newNoDocument(i, s2), _ = r2.removedTargetIds || [];
        n2 = new __PRIVATE_DocumentWatchChange([], _, o2.key, o2);
      } else if ("documentRemove" in t2) {
        t2.documentRemove;
        const r2 = t2.documentRemove;
        r2.document;
        const i = fromName(e, r2.document), s2 = r2.removedTargetIds || [];
        n2 = new __PRIVATE_DocumentWatchChange([], s2, i, null);
      } else {
        if (!("filter" in t2))
          return fail();
        {
          t2.filter;
          const e2 = t2.filter;
          e2.targetId;
          const { count: r2 = 0, unchangedNames: i } = e2, s2 = new ExistenceFilter(r2, i), o2 = e2.targetId;
          n2 = new __PRIVATE_ExistenceFilterChange(o2, s2);
        }
      }
      return n2;
    }
    __name(__PRIVATE_fromWatchChange, "__PRIVATE_fromWatchChange");
    function toMutation(e, t2) {
      let n2;
      if (t2 instanceof __PRIVATE_SetMutation)
        n2 = {
          update: __PRIVATE_toMutationDocument(e, t2.key, t2.value)
        };
      else if (t2 instanceof __PRIVATE_DeleteMutation)
        n2 = {
          delete: __PRIVATE_toName(e, t2.key)
        };
      else if (t2 instanceof __PRIVATE_PatchMutation)
        n2 = {
          update: __PRIVATE_toMutationDocument(e, t2.key, t2.data),
          updateMask: __PRIVATE_toDocumentMask(t2.fieldMask)
        };
      else {
        if (!(t2 instanceof __PRIVATE_VerifyMutation))
          return fail();
        n2 = {
          verify: __PRIVATE_toName(e, t2.key)
        };
      }
      return t2.fieldTransforms.length > 0 && (n2.updateTransforms = t2.fieldTransforms.map((e2) => (/* @__PURE__ */ __name(function __PRIVATE_toFieldTransform(e3, t3) {
        const n3 = t3.transform;
        if (n3 instanceof __PRIVATE_ServerTimestampTransform)
          return {
            fieldPath: t3.field.canonicalString(),
            setToServerValue: "REQUEST_TIME"
          };
        if (n3 instanceof __PRIVATE_ArrayUnionTransformOperation)
          return {
            fieldPath: t3.field.canonicalString(),
            appendMissingElements: {
              values: n3.elements
            }
          };
        if (n3 instanceof __PRIVATE_ArrayRemoveTransformOperation)
          return {
            fieldPath: t3.field.canonicalString(),
            removeAllFromArray: {
              values: n3.elements
            }
          };
        if (n3 instanceof __PRIVATE_NumericIncrementTransformOperation)
          return {
            fieldPath: t3.field.canonicalString(),
            increment: n3.Ie
          };
        throw fail();
      }, "__PRIVATE_toFieldTransform"))(0, e2))), t2.precondition.isNone || (n2.currentDocument = (/* @__PURE__ */ __name(function __PRIVATE_toPrecondition(e2, t3) {
        return void 0 !== t3.updateTime ? {
          updateTime: __PRIVATE_toVersion(e2, t3.updateTime)
        } : void 0 !== t3.exists ? {
          exists: t3.exists
        } : fail();
      }, "__PRIVATE_toPrecondition"))(e, t2.precondition)), n2;
    }
    __name(toMutation, "toMutation");
    function __PRIVATE_fromMutation(e, t2) {
      const n2 = t2.currentDocument ? (/* @__PURE__ */ __name(function __PRIVATE_fromPrecondition(e2) {
        return void 0 !== e2.updateTime ? Precondition.updateTime(__PRIVATE_fromVersion(e2.updateTime)) : void 0 !== e2.exists ? Precondition.exists(e2.exists) : Precondition.none();
      }, "__PRIVATE_fromPrecondition"))(t2.currentDocument) : Precondition.none(), r2 = t2.updateTransforms ? t2.updateTransforms.map((t3) => (/* @__PURE__ */ __name(function __PRIVATE_fromFieldTransform(e2, t4) {
        let n3 = null;
        if ("setToServerValue" in t4)
          __PRIVATE_hardAssert("REQUEST_TIME" === t4.setToServerValue), n3 = new __PRIVATE_ServerTimestampTransform();
        else if ("appendMissingElements" in t4) {
          const e3 = t4.appendMissingElements.values || [];
          n3 = new __PRIVATE_ArrayUnionTransformOperation(e3);
        } else if ("removeAllFromArray" in t4) {
          const e3 = t4.removeAllFromArray.values || [];
          n3 = new __PRIVATE_ArrayRemoveTransformOperation(e3);
        } else
          "increment" in t4 ? n3 = new __PRIVATE_NumericIncrementTransformOperation(e2, t4.increment) : fail();
        const r3 = FieldPath$1.fromServerFormat(t4.fieldPath);
        return new FieldTransform(r3, n3);
      }, "__PRIVATE_fromFieldTransform"))(e, t3)) : [];
      if (t2.update) {
        t2.update.name;
        const i = fromName(e, t2.update.name), s2 = new ObjectValue({
          mapValue: {
            fields: t2.update.fields
          }
        });
        if (t2.updateMask) {
          const e2 = (/* @__PURE__ */ __name(function __PRIVATE_fromDocumentMask(e3) {
            const t3 = e3.fieldPaths || [];
            return new FieldMask(t3.map((e4) => FieldPath$1.fromServerFormat(e4)));
          }, "__PRIVATE_fromDocumentMask"))(t2.updateMask);
          return new __PRIVATE_PatchMutation(i, s2, e2, n2, r2);
        }
        return new __PRIVATE_SetMutation(i, s2, n2, r2);
      }
      if (t2.delete) {
        const r3 = fromName(e, t2.delete);
        return new __PRIVATE_DeleteMutation(r3, n2);
      }
      if (t2.verify) {
        const r3 = fromName(e, t2.verify);
        return new __PRIVATE_VerifyMutation(r3, n2);
      }
      return fail();
    }
    __name(__PRIVATE_fromMutation, "__PRIVATE_fromMutation");
    function __PRIVATE_fromWriteResults(e, t2) {
      return e && e.length > 0 ? (__PRIVATE_hardAssert(void 0 !== t2), e.map((e2) => (/* @__PURE__ */ __name(function __PRIVATE_fromWriteResult(e3, t3) {
        let n2 = e3.updateTime ? __PRIVATE_fromVersion(e3.updateTime) : __PRIVATE_fromVersion(t3);
        return n2.isEqual(SnapshotVersion.min()) && // The Firestore Emulator currently returns an update time of 0 for
        // deletes of non-existing documents (rather than null). This breaks the
        // test "get deleted doc while offline with source=cache" as NoDocuments
        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
        // TODO(#2149): Remove this when Emulator is fixed
        (n2 = __PRIVATE_fromVersion(t3)), new MutationResult(n2, e3.transformResults || []);
      }, "__PRIVATE_fromWriteResult"))(e2, t2))) : [];
    }
    __name(__PRIVATE_fromWriteResults, "__PRIVATE_fromWriteResults");
    function __PRIVATE_toDocumentsTarget(e, t2) {
      return {
        documents: [__PRIVATE_toQueryPath(e, t2.path)]
      };
    }
    __name(__PRIVATE_toDocumentsTarget, "__PRIVATE_toDocumentsTarget");
    function __PRIVATE_toQueryTarget(e, t2) {
      const n2 = {
        structuredQuery: {}
      }, r2 = t2.path;
      let i;
      null !== t2.collectionGroup ? (i = r2, n2.structuredQuery.from = [{
        collectionId: t2.collectionGroup,
        allDescendants: true
      }]) : (i = r2.popLast(), n2.structuredQuery.from = [{
        collectionId: r2.lastSegment()
      }]), n2.parent = __PRIVATE_toQueryPath(e, i);
      const s2 = (/* @__PURE__ */ __name(function __PRIVATE_toFilters(e2) {
        if (0 === e2.length)
          return;
        return __PRIVATE_toFilter(CompositeFilter.create(
          e2,
          "and"
          /* CompositeOperator.AND */
        ));
      }, "__PRIVATE_toFilters"))(t2.filters);
      s2 && (n2.structuredQuery.where = s2);
      const o2 = (/* @__PURE__ */ __name(function __PRIVATE_toOrder(e2) {
        if (0 === e2.length)
          return;
        return e2.map((e3) => (
          // visible for testing
          (/* @__PURE__ */ __name(function __PRIVATE_toPropertyOrder(e4) {
            return {
              field: __PRIVATE_toFieldPathReference(e4.field),
              direction: __PRIVATE_toDirection(e4.dir)
            };
          }, "__PRIVATE_toPropertyOrder"))(e3)
        ));
      }, "__PRIVATE_toOrder"))(t2.orderBy);
      o2 && (n2.structuredQuery.orderBy = o2);
      const _ = __PRIVATE_toInt32Proto(e, t2.limit);
      return null !== _ && (n2.structuredQuery.limit = _), t2.startAt && (n2.structuredQuery.startAt = (/* @__PURE__ */ __name(function __PRIVATE_toStartAtCursor(e2) {
        return {
          before: e2.inclusive,
          values: e2.position
        };
      }, "__PRIVATE_toStartAtCursor"))(t2.startAt)), t2.endAt && (n2.structuredQuery.endAt = (/* @__PURE__ */ __name(function __PRIVATE_toEndAtCursor(e2) {
        return {
          before: !e2.inclusive,
          values: e2.position
        };
      }, "__PRIVATE_toEndAtCursor"))(t2.endAt)), {
        ht: n2,
        parent: i
      };
    }
    __name(__PRIVATE_toQueryTarget, "__PRIVATE_toQueryTarget");
    function __PRIVATE_toRunAggregationQueryRequest(e, t2, n2, r2) {
      const { ht: i, parent: s2 } = __PRIVATE_toQueryTarget(e, t2), o2 = {}, _ = [];
      let a2 = 0;
      return n2.forEach((e2) => {
        const t3 = r2 ? e2.alias : "aggregate_" + a2++;
        o2[t3] = e2.alias, "count" === e2.aggregateType ? _.push({
          alias: t3,
          count: {}
        }) : "avg" === e2.aggregateType ? _.push({
          alias: t3,
          avg: {
            field: __PRIVATE_toFieldPathReference(e2.fieldPath)
          }
        }) : "sum" === e2.aggregateType && _.push({
          alias: t3,
          sum: {
            field: __PRIVATE_toFieldPathReference(e2.fieldPath)
          }
        });
      }), {
        request: {
          structuredAggregationQuery: {
            aggregations: _,
            structuredQuery: i.structuredQuery
          },
          parent: i.parent
        },
        Pt: o2,
        parent: s2
      };
    }
    __name(__PRIVATE_toRunAggregationQueryRequest, "__PRIVATE_toRunAggregationQueryRequest");
    function __PRIVATE_convertQueryTargetToQuery(e) {
      let t2 = __PRIVATE_fromQueryPath(e.parent);
      const n2 = e.structuredQuery, r2 = n2.from ? n2.from.length : 0;
      let i = null;
      if (r2 > 0) {
        __PRIVATE_hardAssert(1 === r2);
        const e2 = n2.from[0];
        e2.allDescendants ? i = e2.collectionId : t2 = t2.child(e2.collectionId);
      }
      let s2 = [];
      n2.where && (s2 = (/* @__PURE__ */ __name(function __PRIVATE_fromFilters(e2) {
        const t3 = __PRIVATE_fromFilter(e2);
        if (t3 instanceof CompositeFilter && __PRIVATE_compositeFilterIsFlatConjunction(t3))
          return t3.getFilters();
        return [t3];
      }, "__PRIVATE_fromFilters"))(n2.where));
      let o2 = [];
      n2.orderBy && (o2 = (/* @__PURE__ */ __name(function __PRIVATE_fromOrder(e2) {
        return e2.map((e3) => (/* @__PURE__ */ __name(function __PRIVATE_fromPropertyOrder(e4) {
          return new OrderBy(
            __PRIVATE_fromFieldPathReference(e4.field),
            // visible for testing
            (/* @__PURE__ */ __name(function __PRIVATE_fromDirection(e5) {
              switch (e5) {
                case "ASCENDING":
                  return "asc";
                case "DESCENDING":
                  return "desc";
                default:
                  return;
              }
            }, "__PRIVATE_fromDirection"))(e4.direction)
          );
        }, "__PRIVATE_fromPropertyOrder"))(e3));
      }, "__PRIVATE_fromOrder"))(n2.orderBy));
      let _ = null;
      n2.limit && (_ = (/* @__PURE__ */ __name(function __PRIVATE_fromInt32Proto(e2) {
        let t3;
        return t3 = "object" == typeof e2 ? e2.value : e2, __PRIVATE_isNullOrUndefined(t3) ? null : t3;
      }, "__PRIVATE_fromInt32Proto"))(n2.limit));
      let a2 = null;
      n2.startAt && (a2 = (/* @__PURE__ */ __name(function __PRIVATE_fromStartAtCursor(e2) {
        const t3 = !!e2.before, n3 = e2.values || [];
        return new Bound(n3, t3);
      }, "__PRIVATE_fromStartAtCursor"))(n2.startAt));
      let u2 = null;
      return n2.endAt && (u2 = (/* @__PURE__ */ __name(function __PRIVATE_fromEndAtCursor(e2) {
        const t3 = !e2.before, n3 = e2.values || [];
        return new Bound(n3, t3);
      }, "__PRIVATE_fromEndAtCursor"))(n2.endAt)), __PRIVATE_newQuery(t2, i, o2, s2, _, "F", a2, u2);
    }
    __name(__PRIVATE_convertQueryTargetToQuery, "__PRIVATE_convertQueryTargetToQuery");
    function __PRIVATE_toListenRequestLabels(e, t2) {
      const n2 = (/* @__PURE__ */ __name(function __PRIVATE_toLabel(e2) {
        switch (e2) {
          case "TargetPurposeListen":
            return null;
          case "TargetPurposeExistenceFilterMismatch":
            return "existence-filter-mismatch";
          case "TargetPurposeExistenceFilterMismatchBloom":
            return "existence-filter-mismatch-bloom";
          case "TargetPurposeLimboResolution":
            return "limbo-document";
          default:
            return fail();
        }
      }, "__PRIVATE_toLabel"))(t2.purpose);
      return null == n2 ? null : {
        "goog-listen-tags": n2
      };
    }
    __name(__PRIVATE_toListenRequestLabels, "__PRIVATE_toListenRequestLabels");
    function __PRIVATE_fromFilter(e) {
      return void 0 !== e.unaryFilter ? (/* @__PURE__ */ __name(function __PRIVATE_fromUnaryFilter(e2) {
        switch (e2.unaryFilter.op) {
          case "IS_NAN":
            const t2 = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);
            return FieldFilter.create(t2, "==", {
              doubleValue: NaN
            });
          case "IS_NULL":
            const n2 = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);
            return FieldFilter.create(n2, "==", {
              nullValue: "NULL_VALUE"
            });
          case "IS_NOT_NAN":
            const r2 = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);
            return FieldFilter.create(r2, "!=", {
              doubleValue: NaN
            });
          case "IS_NOT_NULL":
            const i = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);
            return FieldFilter.create(i, "!=", {
              nullValue: "NULL_VALUE"
            });
          default:
            return fail();
        }
      }, "__PRIVATE_fromUnaryFilter"))(e) : void 0 !== e.fieldFilter ? (/* @__PURE__ */ __name(function __PRIVATE_fromFieldFilter(e2) {
        return FieldFilter.create(__PRIVATE_fromFieldPathReference(e2.fieldFilter.field), (/* @__PURE__ */ __name(function __PRIVATE_fromOperatorName(e3) {
          switch (e3) {
            case "EQUAL":
              return "==";
            case "NOT_EQUAL":
              return "!=";
            case "GREATER_THAN":
              return ">";
            case "GREATER_THAN_OR_EQUAL":
              return ">=";
            case "LESS_THAN":
              return "<";
            case "LESS_THAN_OR_EQUAL":
              return "<=";
            case "ARRAY_CONTAINS":
              return "array-contains";
            case "IN":
              return "in";
            case "NOT_IN":
              return "not-in";
            case "ARRAY_CONTAINS_ANY":
              return "array-contains-any";
            default:
              return fail();
          }
        }, "__PRIVATE_fromOperatorName"))(e2.fieldFilter.op), e2.fieldFilter.value);
      }, "__PRIVATE_fromFieldFilter"))(e) : void 0 !== e.compositeFilter ? (/* @__PURE__ */ __name(function __PRIVATE_fromCompositeFilter(e2) {
        return CompositeFilter.create(e2.compositeFilter.filters.map((e3) => __PRIVATE_fromFilter(e3)), (/* @__PURE__ */ __name(function __PRIVATE_fromCompositeOperatorName(e3) {
          switch (e3) {
            case "AND":
              return "and";
            case "OR":
              return "or";
            default:
              return fail();
          }
        }, "__PRIVATE_fromCompositeOperatorName"))(e2.compositeFilter.op));
      }, "__PRIVATE_fromCompositeFilter"))(e) : fail();
    }
    __name(__PRIVATE_fromFilter, "__PRIVATE_fromFilter");
    function __PRIVATE_toDirection(e) {
      return Vt[e];
    }
    __name(__PRIVATE_toDirection, "__PRIVATE_toDirection");
    function __PRIVATE_toOperatorName(e) {
      return mt[e];
    }
    __name(__PRIVATE_toOperatorName, "__PRIVATE_toOperatorName");
    function __PRIVATE_toCompositeOperatorName(e) {
      return ft[e];
    }
    __name(__PRIVATE_toCompositeOperatorName, "__PRIVATE_toCompositeOperatorName");
    function __PRIVATE_toFieldPathReference(e) {
      return {
        fieldPath: e.canonicalString()
      };
    }
    __name(__PRIVATE_toFieldPathReference, "__PRIVATE_toFieldPathReference");
    function __PRIVATE_fromFieldPathReference(e) {
      return FieldPath$1.fromServerFormat(e.fieldPath);
    }
    __name(__PRIVATE_fromFieldPathReference, "__PRIVATE_fromFieldPathReference");
    function __PRIVATE_toFilter(e) {
      return e instanceof FieldFilter ? (/* @__PURE__ */ __name(function __PRIVATE_toUnaryOrFieldFilter(e2) {
        if ("==" === e2.op) {
          if (__PRIVATE_isNanValue(e2.value))
            return {
              unaryFilter: {
                field: __PRIVATE_toFieldPathReference(e2.field),
                op: "IS_NAN"
              }
            };
          if (__PRIVATE_isNullValue(e2.value))
            return {
              unaryFilter: {
                field: __PRIVATE_toFieldPathReference(e2.field),
                op: "IS_NULL"
              }
            };
        } else if ("!=" === e2.op) {
          if (__PRIVATE_isNanValue(e2.value))
            return {
              unaryFilter: {
                field: __PRIVATE_toFieldPathReference(e2.field),
                op: "IS_NOT_NAN"
              }
            };
          if (__PRIVATE_isNullValue(e2.value))
            return {
              unaryFilter: {
                field: __PRIVATE_toFieldPathReference(e2.field),
                op: "IS_NOT_NULL"
              }
            };
        }
        return {
          fieldFilter: {
            field: __PRIVATE_toFieldPathReference(e2.field),
            op: __PRIVATE_toOperatorName(e2.op),
            value: e2.value
          }
        };
      }, "__PRIVATE_toUnaryOrFieldFilter"))(e) : e instanceof CompositeFilter ? (/* @__PURE__ */ __name(function __PRIVATE_toCompositeFilter(e2) {
        const t2 = e2.getFilters().map((e3) => __PRIVATE_toFilter(e3));
        if (1 === t2.length)
          return t2[0];
        return {
          compositeFilter: {
            op: __PRIVATE_toCompositeOperatorName(e2.op),
            filters: t2
          }
        };
      }, "__PRIVATE_toCompositeFilter"))(e) : fail();
    }
    __name(__PRIVATE_toFilter, "__PRIVATE_toFilter");
    function __PRIVATE_toDocumentMask(e) {
      const t2 = [];
      return e.fields.forEach((e2) => t2.push(e2.canonicalString())), {
        fieldPaths: t2
      };
    }
    __name(__PRIVATE_toDocumentMask, "__PRIVATE_toDocumentMask");
    function __PRIVATE_isValidResourceName(e) {
      return e.length >= 4 && "projects" === e.get(0) && "databases" === e.get(2);
    }
    __name(__PRIVATE_isValidResourceName, "__PRIVATE_isValidResourceName");
    var TargetData = class {
      constructor(e, t2, n2, r2, i = SnapshotVersion.min(), s2 = SnapshotVersion.min(), o2 = ByteString.EMPTY_BYTE_STRING, _ = null) {
        this.target = e, this.targetId = t2, this.purpose = n2, this.sequenceNumber = r2, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = s2, this.resumeToken = o2, this.expectedCount = _;
      }
      /** Creates a new target data instance with an updated sequence number. */
      withSequenceNumber(e) {
        return new TargetData(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);
      }
      /**
       * Creates a new target data instance with an updated resume token and
       * snapshot version.
       */
      withResumeToken(e, t2) {
        return new TargetData(
          this.target,
          this.targetId,
          this.purpose,
          this.sequenceNumber,
          t2,
          this.lastLimboFreeSnapshotVersion,
          e,
          /* expectedCount= */
          null
        );
      }
      /**
       * Creates a new target data instance with an updated expected count.
       */
      withExpectedCount(e) {
        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, e);
      }
      /**
       * Creates a new target data instance with an updated last limbo free
       * snapshot version number.
       */
      withLastLimboFreeSnapshotVersion(e) {
        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken, this.expectedCount);
      }
    };
    __name(TargetData, "TargetData");
    var __PRIVATE_LocalSerializer = class {
      constructor(e) {
        this.Tt = e;
      }
    };
    __name(__PRIVATE_LocalSerializer, "__PRIVATE_LocalSerializer");
    function __PRIVATE_fromDbRemoteDocument(e, t2) {
      let n2;
      if (t2.document)
        n2 = __PRIVATE_fromDocument(e.Tt, t2.document, !!t2.hasCommittedMutations);
      else if (t2.noDocument) {
        const e2 = DocumentKey.fromSegments(t2.noDocument.path), r2 = __PRIVATE_fromDbTimestamp(t2.noDocument.readTime);
        n2 = MutableDocument.newNoDocument(e2, r2), t2.hasCommittedMutations && n2.setHasCommittedMutations();
      } else {
        if (!t2.unknownDocument)
          return fail();
        {
          const e2 = DocumentKey.fromSegments(t2.unknownDocument.path), r2 = __PRIVATE_fromDbTimestamp(t2.unknownDocument.version);
          n2 = MutableDocument.newUnknownDocument(e2, r2);
        }
      }
      return t2.readTime && n2.setReadTime((/* @__PURE__ */ __name(function __PRIVATE_fromDbTimestampKey(e2) {
        const t3 = new Timestamp(e2[0], e2[1]);
        return SnapshotVersion.fromTimestamp(t3);
      }, "__PRIVATE_fromDbTimestampKey"))(t2.readTime)), n2;
    }
    __name(__PRIVATE_fromDbRemoteDocument, "__PRIVATE_fromDbRemoteDocument");
    function __PRIVATE_toDbRemoteDocument(e, t2) {
      const n2 = t2.key, r2 = {
        prefixPath: n2.getCollectionPath().popLast().toArray(),
        collectionGroup: n2.collectionGroup,
        documentId: n2.path.lastSegment(),
        readTime: __PRIVATE_toDbTimestampKey(t2.readTime),
        hasCommittedMutations: t2.hasCommittedMutations
      };
      if (t2.isFoundDocument())
        r2.document = (/* @__PURE__ */ __name(function __PRIVATE_toDocument(e2, t3) {
          return {
            name: __PRIVATE_toName(e2, t3.key),
            fields: t3.data.value.mapValue.fields,
            updateTime: toTimestamp(e2, t3.version.toTimestamp()),
            createTime: toTimestamp(e2, t3.createTime.toTimestamp())
          };
        }, "__PRIVATE_toDocument"))(e.Tt, t2);
      else if (t2.isNoDocument())
        r2.noDocument = {
          path: n2.path.toArray(),
          readTime: __PRIVATE_toDbTimestamp(t2.version)
        };
      else {
        if (!t2.isUnknownDocument())
          return fail();
        r2.unknownDocument = {
          path: n2.path.toArray(),
          version: __PRIVATE_toDbTimestamp(t2.version)
        };
      }
      return r2;
    }
    __name(__PRIVATE_toDbRemoteDocument, "__PRIVATE_toDbRemoteDocument");
    function __PRIVATE_toDbTimestampKey(e) {
      const t2 = e.toTimestamp();
      return [t2.seconds, t2.nanoseconds];
    }
    __name(__PRIVATE_toDbTimestampKey, "__PRIVATE_toDbTimestampKey");
    function __PRIVATE_toDbTimestamp(e) {
      const t2 = e.toTimestamp();
      return {
        seconds: t2.seconds,
        nanoseconds: t2.nanoseconds
      };
    }
    __name(__PRIVATE_toDbTimestamp, "__PRIVATE_toDbTimestamp");
    function __PRIVATE_fromDbTimestamp(e) {
      const t2 = new Timestamp(e.seconds, e.nanoseconds);
      return SnapshotVersion.fromTimestamp(t2);
    }
    __name(__PRIVATE_fromDbTimestamp, "__PRIVATE_fromDbTimestamp");
    function __PRIVATE_fromDbMutationBatch(e, t2) {
      const n2 = (t2.baseMutations || []).map((t3) => __PRIVATE_fromMutation(e.Tt, t3));
      for (let e2 = 0; e2 < t2.mutations.length - 1; ++e2) {
        const n3 = t2.mutations[e2];
        if (e2 + 1 < t2.mutations.length && void 0 !== t2.mutations[e2 + 1].transform) {
          const r3 = t2.mutations[e2 + 1];
          n3.updateTransforms = r3.transform.fieldTransforms, t2.mutations.splice(e2 + 1, 1), ++e2;
        }
      }
      const r2 = t2.mutations.map((t3) => __PRIVATE_fromMutation(e.Tt, t3)), i = Timestamp.fromMillis(t2.localWriteTimeMs);
      return new MutationBatch(t2.batchId, i, n2, r2);
    }
    __name(__PRIVATE_fromDbMutationBatch, "__PRIVATE_fromDbMutationBatch");
    function __PRIVATE_fromDbTarget(e) {
      const t2 = __PRIVATE_fromDbTimestamp(e.readTime), n2 = void 0 !== e.lastLimboFreeSnapshotVersion ? __PRIVATE_fromDbTimestamp(e.lastLimboFreeSnapshotVersion) : SnapshotVersion.min();
      let r2;
      return r2 = /**
      * A helper function for figuring out what kind of query has been stored.
      */
      (/* @__PURE__ */ __name(function __PRIVATE_isDocumentQuery(e2) {
        return void 0 !== e2.documents;
      }, "__PRIVATE_isDocumentQuery"))(e.query) ? (/* @__PURE__ */ __name(function __PRIVATE_fromDocumentsTarget(e2) {
        return __PRIVATE_hardAssert(1 === e2.documents.length), __PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(__PRIVATE_fromQueryPath(e2.documents[0])));
      }, "__PRIVATE_fromDocumentsTarget"))(e.query) : (/* @__PURE__ */ __name(function __PRIVATE_fromQueryTarget(e2) {
        return __PRIVATE_queryToTarget(__PRIVATE_convertQueryTargetToQuery(e2));
      }, "__PRIVATE_fromQueryTarget"))(e.query), new TargetData(r2, e.targetId, "TargetPurposeListen", e.lastListenSequenceNumber, t2, n2, ByteString.fromBase64String(e.resumeToken));
    }
    __name(__PRIVATE_fromDbTarget, "__PRIVATE_fromDbTarget");
    function __PRIVATE_toDbTarget(e, t2) {
      const n2 = __PRIVATE_toDbTimestamp(t2.snapshotVersion), r2 = __PRIVATE_toDbTimestamp(t2.lastLimboFreeSnapshotVersion);
      let i;
      i = __PRIVATE_targetIsDocumentTarget(t2.target) ? __PRIVATE_toDocumentsTarget(e.Tt, t2.target) : __PRIVATE_toQueryTarget(e.Tt, t2.target).ht;
      const s2 = t2.resumeToken.toBase64();
      return {
        targetId: t2.targetId,
        canonicalId: __PRIVATE_canonifyTarget(t2.target),
        readTime: n2,
        resumeToken: s2,
        lastListenSequenceNumber: t2.sequenceNumber,
        lastLimboFreeSnapshotVersion: r2,
        query: i
      };
    }
    __name(__PRIVATE_toDbTarget, "__PRIVATE_toDbTarget");
    function __PRIVATE_fromBundledQuery(e) {
      const t2 = __PRIVATE_convertQueryTargetToQuery({
        parent: e.parent,
        structuredQuery: e.structuredQuery
      });
      return "LAST" === e.limitType ? __PRIVATE_queryWithLimit(
        t2,
        t2.limit,
        "L"
        /* LimitType.Last */
      ) : t2;
    }
    __name(__PRIVATE_fromBundledQuery, "__PRIVATE_fromBundledQuery");
    function __PRIVATE_fromDbDocumentOverlay(e, t2) {
      return new Overlay(t2.largestBatchId, __PRIVATE_fromMutation(e.Tt, t2.overlayMutation));
    }
    __name(__PRIVATE_fromDbDocumentOverlay, "__PRIVATE_fromDbDocumentOverlay");
    function __PRIVATE_toDbDocumentOverlayKey(e, t2) {
      const n2 = t2.path.lastSegment();
      return [e, __PRIVATE_encodeResourcePath(t2.path.popLast()), n2];
    }
    __name(__PRIVATE_toDbDocumentOverlayKey, "__PRIVATE_toDbDocumentOverlayKey");
    function __PRIVATE_toDbIndexState(e, t2, n2, r2) {
      return {
        indexId: e,
        uid: t2,
        sequenceNumber: n2,
        readTime: __PRIVATE_toDbTimestamp(r2.readTime),
        documentKey: __PRIVATE_encodeResourcePath(r2.documentKey.path),
        largestBatchId: r2.largestBatchId
      };
    }
    __name(__PRIVATE_toDbIndexState, "__PRIVATE_toDbIndexState");
    var __PRIVATE_IndexedDbBundleCache = class {
      getBundleMetadata(e, t2) {
        return __PRIVATE_bundlesStore(e).get(t2).next((e2) => {
          if (e2)
            return (/* @__PURE__ */ __name(function __PRIVATE_fromDbBundle(e3) {
              return {
                id: e3.bundleId,
                createTime: __PRIVATE_fromDbTimestamp(e3.createTime),
                version: e3.version
              };
            }, "__PRIVATE_fromDbBundle"))(e2);
        });
      }
      saveBundleMetadata(e, t2) {
        return __PRIVATE_bundlesStore(e).put((/* @__PURE__ */ __name(function __PRIVATE_toDbBundle(e2) {
          return {
            bundleId: e2.id,
            createTime: __PRIVATE_toDbTimestamp(__PRIVATE_fromVersion(e2.createTime)),
            version: e2.version
          };
        }, "__PRIVATE_toDbBundle"))(t2));
      }
      getNamedQuery(e, t2) {
        return __PRIVATE_namedQueriesStore(e).get(t2).next((e2) => {
          if (e2)
            return (/* @__PURE__ */ __name(function __PRIVATE_fromDbNamedQuery(e3) {
              return {
                name: e3.name,
                query: __PRIVATE_fromBundledQuery(e3.bundledQuery),
                readTime: __PRIVATE_fromDbTimestamp(e3.readTime)
              };
            }, "__PRIVATE_fromDbNamedQuery"))(e2);
        });
      }
      saveNamedQuery(e, t2) {
        return __PRIVATE_namedQueriesStore(e).put((/* @__PURE__ */ __name(function __PRIVATE_toDbNamedQuery(e2) {
          return {
            name: e2.name,
            readTime: __PRIVATE_toDbTimestamp(__PRIVATE_fromVersion(e2.readTime)),
            bundledQuery: e2.bundledQuery
          };
        }, "__PRIVATE_toDbNamedQuery"))(t2));
      }
    };
    __name(__PRIVATE_IndexedDbBundleCache, "__PRIVATE_IndexedDbBundleCache");
    function __PRIVATE_bundlesStore(e) {
      return __PRIVATE_getStore(e, me);
    }
    __name(__PRIVATE_bundlesStore, "__PRIVATE_bundlesStore");
    function __PRIVATE_namedQueriesStore(e) {
      return __PRIVATE_getStore(e, ge);
    }
    __name(__PRIVATE_namedQueriesStore, "__PRIVATE_namedQueriesStore");
    var __PRIVATE_IndexedDbDocumentOverlayCache = class {
      /**
       * @param serializer - The document serializer.
       * @param userId - The userId for which we are accessing overlays.
       */
      constructor(e, t2) {
        this.serializer = e, this.userId = t2;
      }
      static It(e, t2) {
        const n2 = t2.uid || "";
        return new __PRIVATE_IndexedDbDocumentOverlayCache(e, n2);
      }
      getOverlay(e, t2) {
        return __PRIVATE_documentOverlayStore(e).get(__PRIVATE_toDbDocumentOverlayKey(this.userId, t2)).next((e2) => e2 ? __PRIVATE_fromDbDocumentOverlay(this.serializer, e2) : null);
      }
      getOverlays(e, t2) {
        const n2 = __PRIVATE_newOverlayMap();
        return PersistencePromise.forEach(t2, (t3) => this.getOverlay(e, t3).next((e2) => {
          null !== e2 && n2.set(t3, e2);
        })).next(() => n2);
      }
      saveOverlays(e, t2, n2) {
        const r2 = [];
        return n2.forEach((n3, i) => {
          const s2 = new Overlay(t2, i);
          r2.push(this.Et(e, s2));
        }), PersistencePromise.waitFor(r2);
      }
      removeOverlaysForBatchId(e, t2, n2) {
        const r2 = /* @__PURE__ */ new Set();
        t2.forEach((e2) => r2.add(__PRIVATE_encodeResourcePath(e2.getCollectionPath())));
        const i = [];
        return r2.forEach((t3) => {
          const r3 = IDBKeyRange.bound(
            [this.userId, t3, n2],
            [this.userId, t3, n2 + 1],
            /*lowerOpen=*/
            false,
            /*upperOpen=*/
            true
          );
          i.push(__PRIVATE_documentOverlayStore(e).J(ke, r3));
        }), PersistencePromise.waitFor(i);
      }
      getOverlaysForCollection(e, t2, n2) {
        const r2 = __PRIVATE_newOverlayMap(), i = __PRIVATE_encodeResourcePath(t2), s2 = IDBKeyRange.bound(
          [this.userId, i, n2],
          [this.userId, i, Number.POSITIVE_INFINITY],
          /*lowerOpen=*/
          true
        );
        return __PRIVATE_documentOverlayStore(e).G(ke, s2).next((e2) => {
          for (const t3 of e2) {
            const e3 = __PRIVATE_fromDbDocumentOverlay(this.serializer, t3);
            r2.set(e3.getKey(), e3);
          }
          return r2;
        });
      }
      getOverlaysForCollectionGroup(e, t2, n2, r2) {
        const i = __PRIVATE_newOverlayMap();
        let s2;
        const o2 = IDBKeyRange.bound(
          [this.userId, t2, n2],
          [this.userId, t2, Number.POSITIVE_INFINITY],
          /*lowerOpen=*/
          true
        );
        return __PRIVATE_documentOverlayStore(e).Z({
          index: Qe,
          range: o2
        }, (e2, t3, n3) => {
          const o3 = __PRIVATE_fromDbDocumentOverlay(this.serializer, t3);
          i.size() < r2 || o3.largestBatchId === s2 ? (i.set(o3.getKey(), o3), s2 = o3.largestBatchId) : n3.done();
        }).next(() => i);
      }
      Et(e, t2) {
        return __PRIVATE_documentOverlayStore(e).put((/* @__PURE__ */ __name(function __PRIVATE_toDbDocumentOverlay(e2, t3, n2) {
          const [r2, i, s2] = __PRIVATE_toDbDocumentOverlayKey(t3, n2.mutation.key);
          return {
            userId: t3,
            collectionPath: i,
            documentId: s2,
            collectionGroup: n2.mutation.key.getCollectionGroup(),
            largestBatchId: n2.largestBatchId,
            overlayMutation: toMutation(e2.Tt, n2.mutation)
          };
        }, "__PRIVATE_toDbDocumentOverlay"))(this.serializer, this.userId, t2));
      }
    };
    __name(__PRIVATE_IndexedDbDocumentOverlayCache, "__PRIVATE_IndexedDbDocumentOverlayCache");
    function __PRIVATE_documentOverlayStore(e) {
      return __PRIVATE_getStore(e, Be);
    }
    __name(__PRIVATE_documentOverlayStore, "__PRIVATE_documentOverlayStore");
    var __PRIVATE_IndexedDbGlobalsCache = class {
      dt(e) {
        return __PRIVATE_getStore(e, Ke);
      }
      getSessionToken(e) {
        return this.dt(e).get("sessionToken").next((e2) => {
          const t2 = null == e2 ? void 0 : e2.value;
          return t2 ? ByteString.fromUint8Array(t2) : ByteString.EMPTY_BYTE_STRING;
        });
      }
      setSessionToken(e, t2) {
        return this.dt(e).put({
          name: "sessionToken",
          value: t2.toUint8Array()
        });
      }
    };
    __name(__PRIVATE_IndexedDbGlobalsCache, "__PRIVATE_IndexedDbGlobalsCache");
    var __PRIVATE_FirestoreIndexValueWriter = class {
      constructor() {
      }
      // The write methods below short-circuit writing terminators for values
      // containing a (terminating) truncated value.
      // As an example, consider the resulting encoding for:
      // ["bar", [2, "foo"]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TERM, TERM, TERM)
      // ["bar", [2, truncated("foo")]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TRUNC)
      // ["bar", truncated(["foo"])] -> (STRING, "bar", TERM, ARRAY. STRING, "foo", TERM, TRUNC)
      /** Writes an index value.  */
      At(e, t2) {
        this.Rt(e, t2), // Write separator to split index values
        // (see go/firestore-storage-format#encodings).
        t2.Vt();
      }
      Rt(e, t2) {
        if ("nullValue" in e)
          this.ft(t2, 5);
        else if ("booleanValue" in e)
          this.ft(t2, 10), t2.gt(e.booleanValue ? 1 : 0);
        else if ("integerValue" in e)
          this.ft(t2, 15), t2.gt(__PRIVATE_normalizeNumber(e.integerValue));
        else if ("doubleValue" in e) {
          const n2 = __PRIVATE_normalizeNumber(e.doubleValue);
          isNaN(n2) ? this.ft(t2, 13) : (this.ft(t2, 15), __PRIVATE_isNegativeZero(n2) ? (
            // -0.0, 0 and 0.0 are all considered the same
            t2.gt(0)
          ) : t2.gt(n2));
        } else if ("timestampValue" in e) {
          let n2 = e.timestampValue;
          this.ft(t2, 20), "string" == typeof n2 && (n2 = __PRIVATE_normalizeTimestamp(n2)), t2.yt(`${n2.seconds || ""}`), t2.gt(n2.nanos || 0);
        } else if ("stringValue" in e)
          this.wt(e.stringValue, t2), this.St(t2);
        else if ("bytesValue" in e)
          this.ft(t2, 30), t2.bt(__PRIVATE_normalizeByteString(e.bytesValue)), this.St(t2);
        else if ("referenceValue" in e)
          this.Dt(e.referenceValue, t2);
        else if ("geoPointValue" in e) {
          const n2 = e.geoPointValue;
          this.ft(t2, 45), t2.gt(n2.latitude || 0), t2.gt(n2.longitude || 0);
        } else
          "mapValue" in e ? __PRIVATE_isMaxValue(e) ? this.ft(t2, Number.MAX_SAFE_INTEGER) : __PRIVATE_isVectorValue(e) ? this.vt(e.mapValue, t2) : (this.Ct(e.mapValue, t2), this.St(t2)) : "arrayValue" in e ? (this.Ft(e.arrayValue, t2), this.St(t2)) : fail();
      }
      wt(e, t2) {
        this.ft(t2, 25), this.Mt(e, t2);
      }
      Mt(e, t2) {
        t2.yt(e);
      }
      Ct(e, t2) {
        const n2 = e.fields || {};
        this.ft(t2, 55);
        for (const e2 of Object.keys(n2))
          this.wt(e2, t2), this.Rt(n2[e2], t2);
      }
      vt(e, t2) {
        var n2, r2;
        const i = e.fields || {};
        this.ft(t2, 53);
        const s2 = at, o2 = (null === (r2 = null === (n2 = i[s2].arrayValue) || void 0 === n2 ? void 0 : n2.values) || void 0 === r2 ? void 0 : r2.length) || 0;
        this.ft(t2, 15), t2.gt(__PRIVATE_normalizeNumber(o2)), // Vectors then sort by position value
        this.wt(s2, t2), this.Rt(i[s2], t2);
      }
      Ft(e, t2) {
        const n2 = e.values || [];
        this.ft(t2, 50);
        for (const e2 of n2)
          this.Rt(e2, t2);
      }
      Dt(e, t2) {
        this.ft(t2, 37);
        DocumentKey.fromName(e).path.forEach((e2) => {
          this.ft(t2, 60), this.Mt(e2, t2);
        });
      }
      ft(e, t2) {
        e.gt(t2);
      }
      St(e) {
        e.gt(2);
      }
    };
    __name(__PRIVATE_FirestoreIndexValueWriter, "__PRIVATE_FirestoreIndexValueWriter");
    __PRIVATE_FirestoreIndexValueWriter.xt = new __PRIVATE_FirestoreIndexValueWriter();
    var gt = 255;
    function __PRIVATE_numberOfLeadingZerosInByte(e) {
      if (0 === e)
        return 8;
      let t2 = 0;
      return e >> 4 || // Test if the first four bits are zero.
      (t2 += 4, e <<= 4), e >> 6 || // Test if the first two (or next two) bits are zero.
      (t2 += 2, e <<= 2), e >> 7 || // Test if the remaining bit is zero.
      (t2 += 1), t2;
    }
    __name(__PRIVATE_numberOfLeadingZerosInByte, "__PRIVATE_numberOfLeadingZerosInByte");
    function __PRIVATE_unsignedNumLength(e) {
      const t2 = 64 - (/* @__PURE__ */ __name(function __PRIVATE_numberOfLeadingZeros(e2) {
        let t3 = 0;
        for (let n2 = 0; n2 < 8; ++n2) {
          const r2 = __PRIVATE_numberOfLeadingZerosInByte(255 & e2[n2]);
          if (t3 += r2, 8 !== r2)
            break;
        }
        return t3;
      }, "__PRIVATE_numberOfLeadingZeros"))(e);
      return Math.ceil(t2 / 8);
    }
    __name(__PRIVATE_unsignedNumLength, "__PRIVATE_unsignedNumLength");
    var __PRIVATE_OrderedCodeWriter = class {
      constructor() {
        this.buffer = new Uint8Array(1024), this.position = 0;
      }
      Ot(e) {
        const t2 = e[Symbol.iterator]();
        let n2 = t2.next();
        for (; !n2.done; )
          this.Nt(n2.value), n2 = t2.next();
        this.Bt();
      }
      Lt(e) {
        const t2 = e[Symbol.iterator]();
        let n2 = t2.next();
        for (; !n2.done; )
          this.kt(n2.value), n2 = t2.next();
        this.qt();
      }
      /** Writes utf8 bytes into this byte sequence, ascending. */
      Qt(e) {
        for (const t2 of e) {
          const e2 = t2.charCodeAt(0);
          if (e2 < 128)
            this.Nt(e2);
          else if (e2 < 2048)
            this.Nt(960 | e2 >>> 6), this.Nt(128 | 63 & e2);
          else if (t2 < "\uD800" || "\uDBFF" < t2)
            this.Nt(480 | e2 >>> 12), this.Nt(128 | 63 & e2 >>> 6), this.Nt(128 | 63 & e2);
          else {
            const e3 = t2.codePointAt(0);
            this.Nt(240 | e3 >>> 18), this.Nt(128 | 63 & e3 >>> 12), this.Nt(128 | 63 & e3 >>> 6), this.Nt(128 | 63 & e3);
          }
        }
        this.Bt();
      }
      /** Writes utf8 bytes into this byte sequence, descending */
      $t(e) {
        for (const t2 of e) {
          const e2 = t2.charCodeAt(0);
          if (e2 < 128)
            this.kt(e2);
          else if (e2 < 2048)
            this.kt(960 | e2 >>> 6), this.kt(128 | 63 & e2);
          else if (t2 < "\uD800" || "\uDBFF" < t2)
            this.kt(480 | e2 >>> 12), this.kt(128 | 63 & e2 >>> 6), this.kt(128 | 63 & e2);
          else {
            const e3 = t2.codePointAt(0);
            this.kt(240 | e3 >>> 18), this.kt(128 | 63 & e3 >>> 12), this.kt(128 | 63 & e3 >>> 6), this.kt(128 | 63 & e3);
          }
        }
        this.qt();
      }
      Kt(e) {
        const t2 = this.Ut(e), n2 = __PRIVATE_unsignedNumLength(t2);
        this.Wt(1 + n2), this.buffer[this.position++] = 255 & n2;
        for (let e2 = t2.length - n2; e2 < t2.length; ++e2)
          this.buffer[this.position++] = 255 & t2[e2];
      }
      Gt(e) {
        const t2 = this.Ut(e), n2 = __PRIVATE_unsignedNumLength(t2);
        this.Wt(1 + n2), this.buffer[this.position++] = ~(255 & n2);
        for (let e2 = t2.length - n2; e2 < t2.length; ++e2)
          this.buffer[this.position++] = ~(255 & t2[e2]);
      }
      /**
       * Writes the "infinity" byte sequence that sorts after all other byte
       * sequences written in ascending order.
       */
      zt() {
        this.jt(gt), this.jt(255);
      }
      /**
       * Writes the "infinity" byte sequence that sorts before all other byte
       * sequences written in descending order.
       */
      Ht() {
        this.Jt(gt), this.Jt(255);
      }
      /**
       * Resets the buffer such that it is the same as when it was newly
       * constructed.
       */
      reset() {
        this.position = 0;
      }
      seed(e) {
        this.Wt(e.length), this.buffer.set(e, this.position), this.position += e.length;
      }
      /** Makes a copy of the encoded bytes in this buffer.  */
      Yt() {
        return this.buffer.slice(0, this.position);
      }
      /**
       * Encodes `val` into an encoding so that the order matches the IEEE 754
       * floating-point comparison results with the following exceptions:
       *   -0.0 < 0.0
       *   all non-NaN < NaN
       *   NaN = NaN
       */
      Ut(e) {
        const t2 = (
          /** Converts a JavaScript number to a byte array (using big endian encoding). */
          (/* @__PURE__ */ __name(function __PRIVATE_doubleToLongBits(e2) {
            const t3 = new DataView(new ArrayBuffer(8));
            return t3.setFloat64(
              0,
              e2,
              /* littleEndian= */
              false
            ), new Uint8Array(t3.buffer);
          }, "__PRIVATE_doubleToLongBits"))(e)
        ), n2 = !!(128 & t2[0]);
        t2[0] ^= n2 ? 255 : 128;
        for (let e2 = 1; e2 < t2.length; ++e2)
          t2[e2] ^= n2 ? 255 : 0;
        return t2;
      }
      /** Writes a single byte ascending to the buffer. */
      Nt(e) {
        const t2 = 255 & e;
        0 === t2 ? (this.jt(0), this.jt(255)) : t2 === gt ? (this.jt(gt), this.jt(0)) : this.jt(t2);
      }
      /** Writes a single byte descending to the buffer.  */
      kt(e) {
        const t2 = 255 & e;
        0 === t2 ? (this.Jt(0), this.Jt(255)) : t2 === gt ? (this.Jt(gt), this.Jt(0)) : this.Jt(e);
      }
      Bt() {
        this.jt(0), this.jt(1);
      }
      qt() {
        this.Jt(0), this.Jt(1);
      }
      jt(e) {
        this.Wt(1), this.buffer[this.position++] = e;
      }
      Jt(e) {
        this.Wt(1), this.buffer[this.position++] = ~e;
      }
      Wt(e) {
        const t2 = e + this.position;
        if (t2 <= this.buffer.length)
          return;
        let n2 = 2 * this.buffer.length;
        n2 < t2 && (n2 = t2);
        const r2 = new Uint8Array(n2);
        r2.set(this.buffer), // copy old data
        this.buffer = r2;
      }
    };
    __name(__PRIVATE_OrderedCodeWriter, "__PRIVATE_OrderedCodeWriter");
    var __PRIVATE_AscendingIndexByteEncoder = class {
      constructor(e) {
        this.Zt = e;
      }
      bt(e) {
        this.Zt.Ot(e);
      }
      yt(e) {
        this.Zt.Qt(e);
      }
      gt(e) {
        this.Zt.Kt(e);
      }
      Vt() {
        this.Zt.zt();
      }
    };
    __name(__PRIVATE_AscendingIndexByteEncoder, "__PRIVATE_AscendingIndexByteEncoder");
    var __PRIVATE_DescendingIndexByteEncoder = class {
      constructor(e) {
        this.Zt = e;
      }
      bt(e) {
        this.Zt.Lt(e);
      }
      yt(e) {
        this.Zt.$t(e);
      }
      gt(e) {
        this.Zt.Gt(e);
      }
      Vt() {
        this.Zt.Ht();
      }
    };
    __name(__PRIVATE_DescendingIndexByteEncoder, "__PRIVATE_DescendingIndexByteEncoder");
    var __PRIVATE_IndexByteEncoder = class {
      constructor() {
        this.Zt = new __PRIVATE_OrderedCodeWriter(), this.Xt = new __PRIVATE_AscendingIndexByteEncoder(this.Zt), this.en = new __PRIVATE_DescendingIndexByteEncoder(this.Zt);
      }
      seed(e) {
        this.Zt.seed(e);
      }
      tn(e) {
        return 0 === e ? this.Xt : this.en;
      }
      Yt() {
        return this.Zt.Yt();
      }
      reset() {
        this.Zt.reset();
      }
    };
    __name(__PRIVATE_IndexByteEncoder, "__PRIVATE_IndexByteEncoder");
    var __PRIVATE_IndexEntry = class {
      constructor(e, t2, n2, r2) {
        this.indexId = e, this.documentKey = t2, this.arrayValue = n2, this.directionalValue = r2;
      }
      /**
       * Returns an IndexEntry entry that sorts immediately after the current
       * directional value.
       */
      nn() {
        const e = this.directionalValue.length, t2 = 0 === e || 255 === this.directionalValue[e - 1] ? e + 1 : e, n2 = new Uint8Array(t2);
        return n2.set(this.directionalValue, 0), t2 !== e ? n2.set([0], this.directionalValue.length) : ++n2[n2.length - 1], new __PRIVATE_IndexEntry(this.indexId, this.documentKey, this.arrayValue, n2);
      }
    };
    __name(__PRIVATE_IndexEntry, "__PRIVATE_IndexEntry");
    function __PRIVATE_indexEntryComparator(e, t2) {
      let n2 = e.indexId - t2.indexId;
      return 0 !== n2 ? n2 : (n2 = __PRIVATE_compareByteArrays(e.arrayValue, t2.arrayValue), 0 !== n2 ? n2 : (n2 = __PRIVATE_compareByteArrays(e.directionalValue, t2.directionalValue), 0 !== n2 ? n2 : DocumentKey.comparator(e.documentKey, t2.documentKey)));
    }
    __name(__PRIVATE_indexEntryComparator, "__PRIVATE_indexEntryComparator");
    function __PRIVATE_compareByteArrays(e, t2) {
      for (let n2 = 0; n2 < e.length && n2 < t2.length; ++n2) {
        const r2 = e[n2] - t2[n2];
        if (0 !== r2)
          return r2;
      }
      return e.length - t2.length;
    }
    __name(__PRIVATE_compareByteArrays, "__PRIVATE_compareByteArrays");
    var __PRIVATE_TargetIndexMatcher = class {
      constructor(e) {
        this.rn = new SortedSet((e2, t2) => FieldPath$1.comparator(e2.field, t2.field)), this.collectionId = null != e.collectionGroup ? e.collectionGroup : e.path.lastSegment(), this.sn = e.orderBy, this._n = [];
        for (const t2 of e.filters) {
          const e2 = t2;
          e2.isInequality() ? this.rn = this.rn.add(e2) : this._n.push(e2);
        }
      }
      get an() {
        return this.rn.size > 1;
      }
      /**
       * Returns whether the index can be used to serve the TargetIndexMatcher's
       * target.
       *
       * An index is considered capable of serving the target when:
       * - The target uses all index segments for its filters and orderBy clauses.
       *   The target can have additional filter and orderBy clauses, but not
       *   fewer.
       * - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also
       *   have a corresponding `CONTAINS` segment.
       * - All directional index segments can be mapped to the target as a series of
       *   equality filters, a single inequality filter and a series of orderBy
       *   clauses.
       * - The segments that represent the equality filters may appear out of order.
       * - The optional segment for the inequality filter must appear after all
       *   equality segments.
       * - The segments that represent that orderBy clause of the target must appear
       *   in order after all equality and inequality segments. Single orderBy
       *   clauses cannot be skipped, but a continuous orderBy suffix may be
       *   omitted.
       */
      un(e) {
        if (__PRIVATE_hardAssert(e.collectionGroup === this.collectionId), this.an)
          return false;
        const t2 = __PRIVATE_fieldIndexGetArraySegment(e);
        if (void 0 !== t2 && !this.cn(t2))
          return false;
        const n2 = __PRIVATE_fieldIndexGetDirectionalSegments(e);
        let r2 = /* @__PURE__ */ new Set(), i = 0, s2 = 0;
        for (; i < n2.length && this.cn(n2[i]); ++i)
          r2 = r2.add(n2[i].fieldPath.canonicalString());
        if (i === n2.length)
          return true;
        if (this.rn.size > 0) {
          const e2 = this.rn.getIterator().getNext();
          if (!r2.has(e2.field.canonicalString())) {
            const t3 = n2[i];
            if (!this.ln(e2, t3) || !this.hn(this.sn[s2++], t3))
              return false;
          }
          ++i;
        }
        for (; i < n2.length; ++i) {
          const e2 = n2[i];
          if (s2 >= this.sn.length || !this.hn(this.sn[s2++], e2))
            return false;
        }
        return true;
      }
      /**
       * Returns a full matched field index for this target. Currently multiple
       * inequality query is not supported so function returns null.
       */
      Pn() {
        if (this.an)
          return null;
        let e = new SortedSet(FieldPath$1.comparator);
        const t2 = [];
        for (const n2 of this._n) {
          if (n2.field.isKeyField())
            continue;
          if ("array-contains" === n2.op || "array-contains-any" === n2.op)
            t2.push(new IndexSegment(
              n2.field,
              2
              /* IndexKind.CONTAINS */
            ));
          else {
            if (e.has(n2.field))
              continue;
            e = e.add(n2.field), t2.push(new IndexSegment(
              n2.field,
              0
              /* IndexKind.ASCENDING */
            ));
          }
        }
        for (const n2 of this.sn)
          n2.field.isKeyField() || e.has(n2.field) || (e = e.add(n2.field), t2.push(new IndexSegment(
            n2.field,
            "asc" === n2.dir ? 0 : 1
            /* IndexKind.DESCENDING */
          )));
        return new FieldIndex(FieldIndex.UNKNOWN_ID, this.collectionId, t2, IndexState.empty());
      }
      cn(e) {
        for (const t2 of this._n)
          if (this.ln(t2, e))
            return true;
        return false;
      }
      ln(e, t2) {
        if (void 0 === e || !e.field.isEqual(t2.fieldPath))
          return false;
        const n2 = "array-contains" === e.op || "array-contains-any" === e.op;
        return 2 === t2.kind === n2;
      }
      hn(e, t2) {
        return !!e.field.isEqual(t2.fieldPath) && (0 === t2.kind && "asc" === e.dir || 1 === t2.kind && "desc" === e.dir);
      }
    };
    __name(__PRIVATE_TargetIndexMatcher, "__PRIVATE_TargetIndexMatcher");
    function __PRIVATE_computeInExpansion(e) {
      var t2, n2;
      if (__PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter), e instanceof FieldFilter) {
        if (e instanceof __PRIVATE_InFilter) {
          const r3 = (null === (n2 = null === (t2 = e.value.arrayValue) || void 0 === t2 ? void 0 : t2.values) || void 0 === n2 ? void 0 : n2.map((t3) => FieldFilter.create(e.field, "==", t3))) || [];
          return CompositeFilter.create(
            r3,
            "or"
            /* CompositeOperator.OR */
          );
        }
        return e;
      }
      const r2 = e.filters.map((e2) => __PRIVATE_computeInExpansion(e2));
      return CompositeFilter.create(r2, e.op);
    }
    __name(__PRIVATE_computeInExpansion, "__PRIVATE_computeInExpansion");
    function __PRIVATE_getDnfTerms(e) {
      if (0 === e.getFilters().length)
        return [];
      const t2 = __PRIVATE_computeDistributedNormalForm(__PRIVATE_computeInExpansion(e));
      return __PRIVATE_hardAssert(__PRIVATE_isDisjunctiveNormalForm(t2)), __PRIVATE_isSingleFieldFilter(t2) || __PRIVATE_isFlatConjunction(t2) ? [t2] : t2.getFilters();
    }
    __name(__PRIVATE_getDnfTerms, "__PRIVATE_getDnfTerms");
    function __PRIVATE_isSingleFieldFilter(e) {
      return e instanceof FieldFilter;
    }
    __name(__PRIVATE_isSingleFieldFilter, "__PRIVATE_isSingleFieldFilter");
    function __PRIVATE_isFlatConjunction(e) {
      return e instanceof CompositeFilter && __PRIVATE_compositeFilterIsFlatConjunction(e);
    }
    __name(__PRIVATE_isFlatConjunction, "__PRIVATE_isFlatConjunction");
    function __PRIVATE_isDisjunctiveNormalForm(e) {
      return __PRIVATE_isSingleFieldFilter(e) || __PRIVATE_isFlatConjunction(e) || /**
      * Returns true if the given filter is the disjunction of one or more "flat conjunctions" and
      * field filters. e.g. (a == 10) || (b==20 && c==30)
      */
      (/* @__PURE__ */ __name(function __PRIVATE_isDisjunctionOfFieldFiltersAndFlatConjunctions(e2) {
        if (e2 instanceof CompositeFilter && __PRIVATE_compositeFilterIsDisjunction(e2)) {
          for (const t2 of e2.getFilters())
            if (!__PRIVATE_isSingleFieldFilter(t2) && !__PRIVATE_isFlatConjunction(t2))
              return false;
          return true;
        }
        return false;
      }, "__PRIVATE_isDisjunctionOfFieldFiltersAndFlatConjunctions"))(e);
    }
    __name(__PRIVATE_isDisjunctiveNormalForm, "__PRIVATE_isDisjunctiveNormalForm");
    function __PRIVATE_computeDistributedNormalForm(e) {
      if (__PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter), e instanceof FieldFilter)
        return e;
      if (1 === e.filters.length)
        return __PRIVATE_computeDistributedNormalForm(e.filters[0]);
      const t2 = e.filters.map((e2) => __PRIVATE_computeDistributedNormalForm(e2));
      let n2 = CompositeFilter.create(t2, e.op);
      return n2 = __PRIVATE_applyAssociation(n2), __PRIVATE_isDisjunctiveNormalForm(n2) ? n2 : (__PRIVATE_hardAssert(n2 instanceof CompositeFilter), __PRIVATE_hardAssert(__PRIVATE_compositeFilterIsConjunction(n2)), __PRIVATE_hardAssert(n2.filters.length > 1), n2.filters.reduce((e2, t3) => __PRIVATE_applyDistribution(e2, t3)));
    }
    __name(__PRIVATE_computeDistributedNormalForm, "__PRIVATE_computeDistributedNormalForm");
    function __PRIVATE_applyDistribution(e, t2) {
      let n2;
      return __PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter), __PRIVATE_hardAssert(t2 instanceof FieldFilter || t2 instanceof CompositeFilter), // FieldFilter FieldFilter
      n2 = e instanceof FieldFilter ? t2 instanceof FieldFilter ? (/* @__PURE__ */ __name(function __PRIVATE_applyDistributionFieldFilters(e2, t3) {
        return CompositeFilter.create(
          [e2, t3],
          "and"
          /* CompositeOperator.AND */
        );
      }, "__PRIVATE_applyDistributionFieldFilters"))(e, t2) : __PRIVATE_applyDistributionFieldAndCompositeFilters(e, t2) : t2 instanceof FieldFilter ? __PRIVATE_applyDistributionFieldAndCompositeFilters(t2, e) : (/* @__PURE__ */ __name(function __PRIVATE_applyDistributionCompositeFilters(e2, t3) {
        if (__PRIVATE_hardAssert(e2.filters.length > 0 && t3.filters.length > 0), __PRIVATE_compositeFilterIsConjunction(e2) && __PRIVATE_compositeFilterIsConjunction(t3))
          return __PRIVATE_compositeFilterWithAddedFilters(e2, t3.getFilters());
        const n3 = __PRIVATE_compositeFilterIsDisjunction(e2) ? e2 : t3, r2 = __PRIVATE_compositeFilterIsDisjunction(e2) ? t3 : e2, i = n3.filters.map((e3) => __PRIVATE_applyDistribution(e3, r2));
        return CompositeFilter.create(
          i,
          "or"
          /* CompositeOperator.OR */
        );
      }, "__PRIVATE_applyDistributionCompositeFilters"))(e, t2), __PRIVATE_applyAssociation(n2);
    }
    __name(__PRIVATE_applyDistribution, "__PRIVATE_applyDistribution");
    function __PRIVATE_applyDistributionFieldAndCompositeFilters(e, t2) {
      if (__PRIVATE_compositeFilterIsConjunction(t2))
        return __PRIVATE_compositeFilterWithAddedFilters(t2, e.getFilters());
      {
        const n2 = t2.filters.map((t3) => __PRIVATE_applyDistribution(e, t3));
        return CompositeFilter.create(
          n2,
          "or"
          /* CompositeOperator.OR */
        );
      }
    }
    __name(__PRIVATE_applyDistributionFieldAndCompositeFilters, "__PRIVATE_applyDistributionFieldAndCompositeFilters");
    function __PRIVATE_applyAssociation(e) {
      if (__PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter), e instanceof FieldFilter)
        return e;
      const t2 = e.getFilters();
      if (1 === t2.length)
        return __PRIVATE_applyAssociation(t2[0]);
      if (__PRIVATE_compositeFilterIsFlat(e))
        return e;
      const n2 = t2.map((e2) => __PRIVATE_applyAssociation(e2)), r2 = [];
      return n2.forEach((t3) => {
        t3 instanceof FieldFilter ? r2.push(t3) : t3 instanceof CompositeFilter && (t3.op === e.op ? (
          // compositeFilter: (A | (B | C))
          // compositeSubfilter: (B | C)
          // Result: (A | B | C)
          r2.push(...t3.filters)
        ) : (
          // compositeFilter: (A | (B & C))
          // compositeSubfilter: (B & C)
          // Result: (A | (B & C))
          r2.push(t3)
        ));
      }), 1 === r2.length ? r2[0] : CompositeFilter.create(r2, e.op);
    }
    __name(__PRIVATE_applyAssociation, "__PRIVATE_applyAssociation");
    var __PRIVATE_MemoryIndexManager = class {
      constructor() {
        this.Tn = new __PRIVATE_MemoryCollectionParentIndex();
      }
      addToCollectionParentIndex(e, t2) {
        return this.Tn.add(t2), PersistencePromise.resolve();
      }
      getCollectionParents(e, t2) {
        return PersistencePromise.resolve(this.Tn.getEntries(t2));
      }
      addFieldIndex(e, t2) {
        return PersistencePromise.resolve();
      }
      deleteFieldIndex(e, t2) {
        return PersistencePromise.resolve();
      }
      deleteAllFieldIndexes(e) {
        return PersistencePromise.resolve();
      }
      createTargetIndexes(e, t2) {
        return PersistencePromise.resolve();
      }
      getDocumentsMatchingTarget(e, t2) {
        return PersistencePromise.resolve(null);
      }
      getIndexType(e, t2) {
        return PersistencePromise.resolve(
          0
          /* IndexType.NONE */
        );
      }
      getFieldIndexes(e, t2) {
        return PersistencePromise.resolve([]);
      }
      getNextCollectionGroupToUpdate(e) {
        return PersistencePromise.resolve(null);
      }
      getMinOffset(e, t2) {
        return PersistencePromise.resolve(IndexOffset.min());
      }
      getMinOffsetFromCollectionGroup(e, t2) {
        return PersistencePromise.resolve(IndexOffset.min());
      }
      updateCollectionGroup(e, t2, n2) {
        return PersistencePromise.resolve();
      }
      updateIndexEntries(e, t2) {
        return PersistencePromise.resolve();
      }
    };
    __name(__PRIVATE_MemoryIndexManager, "__PRIVATE_MemoryIndexManager");
    var __PRIVATE_MemoryCollectionParentIndex = class {
      constructor() {
        this.index = {};
      }
      // Returns false if the entry already existed.
      add(e) {
        const t2 = e.lastSegment(), n2 = e.popLast(), r2 = this.index[t2] || new SortedSet(ResourcePath.comparator), i = !r2.has(n2);
        return this.index[t2] = r2.add(n2), i;
      }
      has(e) {
        const t2 = e.lastSegment(), n2 = e.popLast(), r2 = this.index[t2];
        return r2 && r2.has(n2);
      }
      getEntries(e) {
        return (this.index[e] || new SortedSet(ResourcePath.comparator)).toArray();
      }
    };
    __name(__PRIVATE_MemoryCollectionParentIndex, "__PRIVATE_MemoryCollectionParentIndex");
    var pt = "IndexedDbIndexManager";
    var yt = new Uint8Array(0);
    var __PRIVATE_IndexedDbIndexManager = class {
      constructor(e, t2) {
        this.databaseId = t2, /**
         * An in-memory copy of the index entries we've already written since the SDK
         * launched. Used to avoid re-writing the same entry repeatedly.
         *
         * This is *NOT* a complete cache of what's in persistence and so can never be
         * used to satisfy reads.
         */
        this.In = new __PRIVATE_MemoryCollectionParentIndex(), /**
         * Maps from a target to its equivalent list of sub-targets. Each sub-target
         * contains only one term from the target's disjunctive normal form (DNF).
         */
        this.En = new ObjectMap((e2) => __PRIVATE_canonifyTarget(e2), (e2, t3) => __PRIVATE_targetEquals(e2, t3)), this.uid = e.uid || "";
      }
      /**
       * Adds a new entry to the collection parent index.
       *
       * Repeated calls for the same collectionPath should be avoided within a
       * transaction as IndexedDbIndexManager only caches writes once a transaction
       * has been committed.
       */
      addToCollectionParentIndex(e, t2) {
        if (!this.In.has(t2)) {
          const n2 = t2.lastSegment(), r2 = t2.popLast();
          e.addOnCommittedListener(() => {
            this.In.add(t2);
          });
          const i = {
            collectionId: n2,
            parent: __PRIVATE_encodeResourcePath(r2)
          };
          return __PRIVATE_collectionParentsStore(e).put(i);
        }
        return PersistencePromise.resolve();
      }
      getCollectionParents(e, t2) {
        const n2 = [], r2 = IDBKeyRange.bound(
          [t2, ""],
          [__PRIVATE_immediateSuccessor(t2), ""],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        );
        return __PRIVATE_collectionParentsStore(e).G(r2).next((e2) => {
          for (const r3 of e2) {
            if (r3.collectionId !== t2)
              break;
            n2.push(__PRIVATE_decodeResourcePath(r3.parent));
          }
          return n2;
        });
      }
      addFieldIndex(e, t2) {
        const n2 = __PRIVATE_indexConfigurationStore(e), r2 = (/* @__PURE__ */ __name(function __PRIVATE_toDbIndexConfiguration(e2) {
          return {
            indexId: e2.indexId,
            collectionGroup: e2.collectionGroup,
            fields: e2.fields.map((e3) => [e3.fieldPath.canonicalString(), e3.kind])
          };
        }, "__PRIVATE_toDbIndexConfiguration"))(t2);
        delete r2.indexId;
        const i = n2.add(r2);
        if (t2.indexState) {
          const n3 = __PRIVATE_indexStateStore(e);
          return i.next((e2) => {
            n3.put(__PRIVATE_toDbIndexState(e2, this.uid, t2.indexState.sequenceNumber, t2.indexState.offset));
          });
        }
        return i.next();
      }
      deleteFieldIndex(e, t2) {
        const n2 = __PRIVATE_indexConfigurationStore(e), r2 = __PRIVATE_indexStateStore(e), i = __PRIVATE_indexEntriesStore(e);
        return n2.delete(t2.indexId).next(() => r2.delete(IDBKeyRange.bound(
          [t2.indexId],
          [t2.indexId + 1],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        ))).next(() => i.delete(IDBKeyRange.bound(
          [t2.indexId],
          [t2.indexId + 1],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        )));
      }
      deleteAllFieldIndexes(e) {
        const t2 = __PRIVATE_indexConfigurationStore(e), n2 = __PRIVATE_indexEntriesStore(e), r2 = __PRIVATE_indexStateStore(e);
        return t2.J().next(() => n2.J()).next(() => r2.J());
      }
      createTargetIndexes(e, t2) {
        return PersistencePromise.forEach(this.dn(t2), (t3) => this.getIndexType(e, t3).next((n2) => {
          if (0 === n2 || 1 === n2) {
            const n3 = new __PRIVATE_TargetIndexMatcher(t3).Pn();
            if (null != n3)
              return this.addFieldIndex(e, n3);
          }
        }));
      }
      getDocumentsMatchingTarget(e, t2) {
        const n2 = __PRIVATE_indexEntriesStore(e);
        let r2 = true;
        const i = /* @__PURE__ */ new Map();
        return PersistencePromise.forEach(this.dn(t2), (t3) => this.An(e, t3).next((e2) => {
          r2 && (r2 = !!e2), i.set(t3, e2);
        })).next(() => {
          if (r2) {
            let e2 = __PRIVATE_documentKeySet();
            const r3 = [];
            return PersistencePromise.forEach(i, (i2, s2) => {
              __PRIVATE_logDebug(pt, `Using index ${(/* @__PURE__ */ __name(function __PRIVATE_fieldIndexToString(e3) {
                return `id=${e3.indexId}|cg=${e3.collectionGroup}|f=${e3.fields.map((e4) => `${e4.fieldPath}:${e4.kind}`).join(",")}`;
              }, "__PRIVATE_fieldIndexToString"))(i2)} to execute ${__PRIVATE_canonifyTarget(t2)}`);
              const o2 = (/* @__PURE__ */ __name(function __PRIVATE_targetGetArrayValues(e3, t3) {
                const n3 = __PRIVATE_fieldIndexGetArraySegment(t3);
                if (void 0 === n3)
                  return null;
                for (const t4 of __PRIVATE_targetGetFieldFiltersForPath(e3, n3.fieldPath))
                  switch (t4.op) {
                    case "array-contains-any":
                      return t4.value.arrayValue.values || [];
                    case "array-contains":
                      return [t4.value];
                  }
                return null;
              }, "__PRIVATE_targetGetArrayValues"))(s2, i2), _ = (/* @__PURE__ */ __name(function __PRIVATE_targetGetNotInValues(e3, t3) {
                const n3 = /* @__PURE__ */ new Map();
                for (const r4 of __PRIVATE_fieldIndexGetDirectionalSegments(t3))
                  for (const t4 of __PRIVATE_targetGetFieldFiltersForPath(e3, r4.fieldPath))
                    switch (t4.op) {
                      case "==":
                      case "in":
                        n3.set(r4.fieldPath.canonicalString(), t4.value);
                        break;
                      case "not-in":
                      case "!=":
                        return n3.set(r4.fieldPath.canonicalString(), t4.value), Array.from(n3.values());
                    }
                return null;
              }, "__PRIVATE_targetGetNotInValues"))(s2, i2), a2 = (/* @__PURE__ */ __name(function __PRIVATE_targetGetLowerBound(e3, t3) {
                const n3 = [];
                let r4 = true;
                for (const i3 of __PRIVATE_fieldIndexGetDirectionalSegments(t3)) {
                  const t4 = 0 === i3.kind ? __PRIVATE_targetGetAscendingBound(e3, i3.fieldPath, e3.startAt) : __PRIVATE_targetGetDescendingBound(e3, i3.fieldPath, e3.startAt);
                  n3.push(t4.value), r4 && (r4 = t4.inclusive);
                }
                return new Bound(n3, r4);
              }, "__PRIVATE_targetGetLowerBound"))(s2, i2), u2 = (/* @__PURE__ */ __name(function __PRIVATE_targetGetUpperBound(e3, t3) {
                const n3 = [];
                let r4 = true;
                for (const i3 of __PRIVATE_fieldIndexGetDirectionalSegments(t3)) {
                  const t4 = 0 === i3.kind ? __PRIVATE_targetGetDescendingBound(e3, i3.fieldPath, e3.endAt) : __PRIVATE_targetGetAscendingBound(e3, i3.fieldPath, e3.endAt);
                  n3.push(t4.value), r4 && (r4 = t4.inclusive);
                }
                return new Bound(n3, r4);
              }, "__PRIVATE_targetGetUpperBound"))(s2, i2), c2 = this.Rn(i2, s2, a2), l = this.Rn(i2, s2, u2), h2 = this.Vn(i2, s2, _), P = this.mn(i2.indexId, o2, c2, a2.inclusive, l, u2.inclusive, h2);
              return PersistencePromise.forEach(P, (i3) => n2.H(i3, t2.limit).next((t3) => {
                t3.forEach((t4) => {
                  const n3 = DocumentKey.fromSegments(t4.documentKey);
                  e2.has(n3) || (e2 = e2.add(n3), r3.push(n3));
                });
              }));
            }).next(() => r3);
          }
          return PersistencePromise.resolve(null);
        });
      }
      dn(e) {
        let t2 = this.En.get(e);
        if (t2)
          return t2;
        if (0 === e.filters.length)
          t2 = [e];
        else {
          t2 = __PRIVATE_getDnfTerms(CompositeFilter.create(
            e.filters,
            "and"
            /* CompositeOperator.AND */
          )).map((t3) => __PRIVATE_newTarget(e.path, e.collectionGroup, e.orderBy, t3.getFilters(), e.limit, e.startAt, e.endAt));
        }
        return this.En.set(e, t2), t2;
      }
      /**
       * Constructs a key range query on `DbIndexEntryStore` that unions all
       * bounds.
       */
      mn(e, t2, n2, r2, i, s2, o2) {
        const _ = (null != t2 ? t2.length : 1) * Math.max(n2.length, i.length), a2 = _ / (null != t2 ? t2.length : 1), u2 = [];
        for (let c2 = 0; c2 < _; ++c2) {
          const _2 = t2 ? this.fn(t2[c2 / a2]) : yt, l = this.gn(e, _2, n2[c2 % a2], r2), h2 = this.pn(e, _2, i[c2 % a2], s2), P = o2.map((t3) => this.gn(
            e,
            _2,
            t3,
            /* inclusive= */
            true
          ));
          u2.push(...this.createRange(l, h2, P));
        }
        return u2;
      }
      /** Generates the lower bound for `arrayValue` and `directionalValue`. */
      gn(e, t2, n2, r2) {
        const i = new __PRIVATE_IndexEntry(e, DocumentKey.empty(), t2, n2);
        return r2 ? i : i.nn();
      }
      /** Generates the upper bound for `arrayValue` and `directionalValue`. */
      pn(e, t2, n2, r2) {
        const i = new __PRIVATE_IndexEntry(e, DocumentKey.empty(), t2, n2);
        return r2 ? i.nn() : i;
      }
      An(e, t2) {
        const n2 = new __PRIVATE_TargetIndexMatcher(t2), r2 = null != t2.collectionGroup ? t2.collectionGroup : t2.path.lastSegment();
        return this.getFieldIndexes(e, r2).next((e2) => {
          let t3 = null;
          for (const r3 of e2) {
            n2.un(r3) && (!t3 || r3.fields.length > t3.fields.length) && (t3 = r3);
          }
          return t3;
        });
      }
      getIndexType(e, t2) {
        let n2 = 2;
        const r2 = this.dn(t2);
        return PersistencePromise.forEach(r2, (t3) => this.An(e, t3).next((e2) => {
          e2 ? 0 !== n2 && e2.fields.length < (/* @__PURE__ */ __name(function __PRIVATE_targetGetSegmentCount(e3) {
            let t4 = new SortedSet(FieldPath$1.comparator), n3 = false;
            for (const r3 of e3.filters)
              for (const e4 of r3.getFlattenedFilters())
                e4.field.isKeyField() || // ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filters must be counted separately.
                // For instance, it is possible to have an index for "a ARRAY a ASC". Even
                // though these are on the same field, they should be counted as two
                // separate segments in an index.
                ("array-contains" === e4.op || "array-contains-any" === e4.op ? n3 = true : t4 = t4.add(e4.field));
            for (const n4 of e3.orderBy)
              n4.field.isKeyField() || (t4 = t4.add(n4.field));
            return t4.size + (n3 ? 1 : 0);
          }, "__PRIVATE_targetGetSegmentCount"))(t3) && (n2 = 1) : n2 = 0;
        })).next(() => (
          // OR queries have more than one sub-target (one sub-target per DNF term). We currently consider
          // OR queries that have a `limit` to have a partial index. For such queries we perform sorting
          // and apply the limit in memory as a post-processing step.
          (/* @__PURE__ */ __name(function __PRIVATE_targetHasLimit(e2) {
            return null !== e2.limit;
          }, "__PRIVATE_targetHasLimit"))(t2) && r2.length > 1 && 2 === n2 ? 1 : n2
        ));
      }
      /**
       * Returns the byte encoded form of the directional values in the field index.
       * Returns `null` if the document does not have all fields specified in the
       * index.
       */
      yn(e, t2) {
        const n2 = new __PRIVATE_IndexByteEncoder();
        for (const r2 of __PRIVATE_fieldIndexGetDirectionalSegments(e)) {
          const e2 = t2.data.field(r2.fieldPath);
          if (null == e2)
            return null;
          const i = n2.tn(r2.kind);
          __PRIVATE_FirestoreIndexValueWriter.xt.At(e2, i);
        }
        return n2.Yt();
      }
      /** Encodes a single value to the ascending index format. */
      fn(e) {
        const t2 = new __PRIVATE_IndexByteEncoder();
        return __PRIVATE_FirestoreIndexValueWriter.xt.At(e, t2.tn(
          0
          /* IndexKind.ASCENDING */
        )), t2.Yt();
      }
      /**
       * Returns an encoded form of the document key that sorts based on the key
       * ordering of the field index.
       */
      wn(e, t2) {
        const n2 = new __PRIVATE_IndexByteEncoder();
        return __PRIVATE_FirestoreIndexValueWriter.xt.At(__PRIVATE_refValue(this.databaseId, t2), n2.tn((/* @__PURE__ */ __name(function __PRIVATE_fieldIndexGetKeyOrder(e2) {
          const t3 = __PRIVATE_fieldIndexGetDirectionalSegments(e2);
          return 0 === t3.length ? 0 : t3[t3.length - 1].kind;
        }, "__PRIVATE_fieldIndexGetKeyOrder"))(e))), n2.Yt();
      }
      /**
       * Encodes the given field values according to the specification in `target`.
       * For IN queries, a list of possible values is returned.
       */
      Vn(e, t2, n2) {
        if (null === n2)
          return [];
        let r2 = [];
        r2.push(new __PRIVATE_IndexByteEncoder());
        let i = 0;
        for (const s2 of __PRIVATE_fieldIndexGetDirectionalSegments(e)) {
          const e2 = n2[i++];
          for (const n3 of r2)
            if (this.Sn(t2, s2.fieldPath) && isArray(e2))
              r2 = this.bn(r2, s2, e2);
            else {
              const t3 = n3.tn(s2.kind);
              __PRIVATE_FirestoreIndexValueWriter.xt.At(e2, t3);
            }
        }
        return this.Dn(r2);
      }
      /**
       * Encodes the given bounds according to the specification in `target`. For IN
       * queries, a list of possible values is returned.
       */
      Rn(e, t2, n2) {
        return this.Vn(e, t2, n2.position);
      }
      /** Returns the byte representation for the provided encoders. */
      Dn(e) {
        const t2 = [];
        for (let n2 = 0; n2 < e.length; ++n2)
          t2[n2] = e[n2].Yt();
        return t2;
      }
      /**
       * Creates a separate encoder for each element of an array.
       *
       * The method appends each value to all existing encoders (e.g. filter("a",
       * "==", "a1").filter("b", "in", ["b1", "b2"]) becomes ["a1,b1", "a1,b2"]). A
       * list of new encoders is returned.
       */
      bn(e, t2, n2) {
        const r2 = [...e], i = [];
        for (const e2 of n2.arrayValue.values || [])
          for (const n3 of r2) {
            const r3 = new __PRIVATE_IndexByteEncoder();
            r3.seed(n3.Yt()), __PRIVATE_FirestoreIndexValueWriter.xt.At(e2, r3.tn(t2.kind)), i.push(r3);
          }
        return i;
      }
      Sn(e, t2) {
        return !!e.filters.find((e2) => e2 instanceof FieldFilter && e2.field.isEqual(t2) && ("in" === e2.op || "not-in" === e2.op));
      }
      getFieldIndexes(e, t2) {
        const n2 = __PRIVATE_indexConfigurationStore(e), r2 = __PRIVATE_indexStateStore(e);
        return (t2 ? n2.G(Se, IDBKeyRange.bound(t2, t2)) : n2.G()).next((e2) => {
          const t3 = [];
          return PersistencePromise.forEach(e2, (e3) => r2.get([e3.indexId, this.uid]).next((n3) => {
            t3.push((/* @__PURE__ */ __name(function __PRIVATE_fromDbIndexConfiguration(e4, t4) {
              const n4 = t4 ? new IndexState(t4.sequenceNumber, new IndexOffset(__PRIVATE_fromDbTimestamp(t4.readTime), new DocumentKey(__PRIVATE_decodeResourcePath(t4.documentKey)), t4.largestBatchId)) : IndexState.empty(), r3 = e4.fields.map(([e5, t5]) => new IndexSegment(FieldPath$1.fromServerFormat(e5), t5));
              return new FieldIndex(e4.indexId, e4.collectionGroup, r3, n4);
            }, "__PRIVATE_fromDbIndexConfiguration"))(e3, n3));
          })).next(() => t3);
        });
      }
      getNextCollectionGroupToUpdate(e) {
        return this.getFieldIndexes(e).next((e2) => 0 === e2.length ? null : (e2.sort((e3, t2) => {
          const n2 = e3.indexState.sequenceNumber - t2.indexState.sequenceNumber;
          return 0 !== n2 ? n2 : __PRIVATE_primitiveComparator(e3.collectionGroup, t2.collectionGroup);
        }), e2[0].collectionGroup));
      }
      updateCollectionGroup(e, t2, n2) {
        const r2 = __PRIVATE_indexConfigurationStore(e), i = __PRIVATE_indexStateStore(e);
        return this.vn(e).next((e2) => r2.G(Se, IDBKeyRange.bound(t2, t2)).next((t3) => PersistencePromise.forEach(t3, (t4) => i.put(__PRIVATE_toDbIndexState(t4.indexId, this.uid, e2, n2)))));
      }
      updateIndexEntries(e, t2) {
        const n2 = /* @__PURE__ */ new Map();
        return PersistencePromise.forEach(t2, (t3, r2) => {
          const i = n2.get(t3.collectionGroup);
          return (i ? PersistencePromise.resolve(i) : this.getFieldIndexes(e, t3.collectionGroup)).next((i2) => (n2.set(t3.collectionGroup, i2), PersistencePromise.forEach(i2, (n3) => this.Cn(e, t3, n3).next((t4) => {
            const i3 = this.Fn(r2, n3);
            return t4.isEqual(i3) ? PersistencePromise.resolve() : this.Mn(e, r2, n3, t4, i3);
          }))));
        });
      }
      xn(e, t2, n2, r2) {
        return __PRIVATE_indexEntriesStore(e).put({
          indexId: r2.indexId,
          uid: this.uid,
          arrayValue: r2.arrayValue,
          directionalValue: r2.directionalValue,
          orderedDocumentKey: this.wn(n2, t2.key),
          documentKey: t2.key.path.toArray()
        });
      }
      On(e, t2, n2, r2) {
        return __PRIVATE_indexEntriesStore(e).delete([r2.indexId, this.uid, r2.arrayValue, r2.directionalValue, this.wn(n2, t2.key), t2.key.path.toArray()]);
      }
      Cn(e, t2, n2) {
        const r2 = __PRIVATE_indexEntriesStore(e);
        let i = new SortedSet(__PRIVATE_indexEntryComparator);
        return r2.Z({
          index: Oe,
          range: IDBKeyRange.only([n2.indexId, this.uid, this.wn(n2, t2)])
        }, (e2, r3) => {
          i = i.add(new __PRIVATE_IndexEntry(n2.indexId, t2, r3.arrayValue, r3.directionalValue));
        }).next(() => i);
      }
      /** Creates the index entries for the given document. */
      Fn(e, t2) {
        let n2 = new SortedSet(__PRIVATE_indexEntryComparator);
        const r2 = this.yn(t2, e);
        if (null == r2)
          return n2;
        const i = __PRIVATE_fieldIndexGetArraySegment(t2);
        if (null != i) {
          const s2 = e.data.field(i.fieldPath);
          if (isArray(s2))
            for (const i2 of s2.arrayValue.values || [])
              n2 = n2.add(new __PRIVATE_IndexEntry(t2.indexId, e.key, this.fn(i2), r2));
        } else
          n2 = n2.add(new __PRIVATE_IndexEntry(t2.indexId, e.key, yt, r2));
        return n2;
      }
      /**
       * Updates the index entries for the provided document by deleting entries
       * that are no longer referenced in `newEntries` and adding all newly added
       * entries.
       */
      Mn(e, t2, n2, r2, i) {
        __PRIVATE_logDebug(pt, "Updating index entries for document '%s'", t2.key);
        const s2 = [];
        return (/* @__PURE__ */ __name(function __PRIVATE_diffSortedSets(e2, t3, n3, r3, i2) {
          const s3 = e2.getIterator(), o2 = t3.getIterator();
          let _ = __PRIVATE_advanceIterator(s3), a2 = __PRIVATE_advanceIterator(o2);
          for (; _ || a2; ) {
            let e3 = false, t4 = false;
            if (_ && a2) {
              const r4 = n3(_, a2);
              r4 < 0 ? (
                // The element was removed if the next element in our ordered
                // walkthrough is only in `before`.
                t4 = true
              ) : r4 > 0 && // The element was added if the next element in our ordered walkthrough
              // is only in `after`.
              (e3 = true);
            } else
              null != _ ? t4 = true : e3 = true;
            e3 ? (r3(a2), a2 = __PRIVATE_advanceIterator(o2)) : t4 ? (i2(_), _ = __PRIVATE_advanceIterator(s3)) : (_ = __PRIVATE_advanceIterator(s3), a2 = __PRIVATE_advanceIterator(o2));
          }
        }, "__PRIVATE_diffSortedSets"))(
          r2,
          i,
          __PRIVATE_indexEntryComparator,
          /* onAdd= */
          (r3) => {
            s2.push(this.xn(e, t2, n2, r3));
          },
          /* onRemove= */
          (r3) => {
            s2.push(this.On(e, t2, n2, r3));
          }
        ), PersistencePromise.waitFor(s2);
      }
      vn(e) {
        let t2 = 1;
        return __PRIVATE_indexStateStore(e).Z({
          index: Ce,
          reverse: true,
          range: IDBKeyRange.upperBound([this.uid, Number.MAX_SAFE_INTEGER])
        }, (e2, n2, r2) => {
          r2.done(), t2 = n2.sequenceNumber + 1;
        }).next(() => t2);
      }
      /**
       * Returns a new set of IDB ranges that splits the existing range and excludes
       * any values that match the `notInValue` from these ranges. As an example,
       * '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.
       */
      createRange(e, t2, n2) {
        n2 = n2.sort((e2, t3) => __PRIVATE_indexEntryComparator(e2, t3)).filter((e2, t3, n3) => !t3 || 0 !== __PRIVATE_indexEntryComparator(e2, n3[t3 - 1]));
        const r2 = [];
        r2.push(e);
        for (const i2 of n2) {
          const n3 = __PRIVATE_indexEntryComparator(i2, e), s2 = __PRIVATE_indexEntryComparator(i2, t2);
          if (0 === n3)
            r2[0] = e.nn();
          else if (n3 > 0 && s2 < 0)
            r2.push(i2), r2.push(i2.nn());
          else if (s2 > 0)
            break;
        }
        r2.push(t2);
        const i = [];
        for (let e2 = 0; e2 < r2.length; e2 += 2) {
          if (this.Nn(r2[e2], r2[e2 + 1]))
            return [];
          const t3 = [r2[e2].indexId, this.uid, r2[e2].arrayValue, r2[e2].directionalValue, yt, []], n3 = [r2[e2 + 1].indexId, this.uid, r2[e2 + 1].arrayValue, r2[e2 + 1].directionalValue, yt, []];
          i.push(IDBKeyRange.bound(t3, n3));
        }
        return i;
      }
      Nn(e, t2) {
        return __PRIVATE_indexEntryComparator(e, t2) > 0;
      }
      getMinOffsetFromCollectionGroup(e, t2) {
        return this.getFieldIndexes(e, t2).next(__PRIVATE_getMinOffsetFromFieldIndexes);
      }
      getMinOffset(e, t2) {
        return PersistencePromise.mapArray(this.dn(t2), (t3) => this.An(e, t3).next((e2) => e2 || fail())).next(__PRIVATE_getMinOffsetFromFieldIndexes);
      }
    };
    __name(__PRIVATE_IndexedDbIndexManager, "__PRIVATE_IndexedDbIndexManager");
    function __PRIVATE_collectionParentsStore(e) {
      return __PRIVATE_getStore(e, de);
    }
    __name(__PRIVATE_collectionParentsStore, "__PRIVATE_collectionParentsStore");
    function __PRIVATE_indexEntriesStore(e) {
      return __PRIVATE_getStore(e, Me);
    }
    __name(__PRIVATE_indexEntriesStore, "__PRIVATE_indexEntriesStore");
    function __PRIVATE_indexConfigurationStore(e) {
      return __PRIVATE_getStore(e, ye);
    }
    __name(__PRIVATE_indexConfigurationStore, "__PRIVATE_indexConfigurationStore");
    function __PRIVATE_indexStateStore(e) {
      return __PRIVATE_getStore(e, De);
    }
    __name(__PRIVATE_indexStateStore, "__PRIVATE_indexStateStore");
    function __PRIVATE_getMinOffsetFromFieldIndexes(e) {
      __PRIVATE_hardAssert(0 !== e.length);
      let t2 = e[0].indexState.offset, n2 = t2.largestBatchId;
      for (let r2 = 1; r2 < e.length; r2++) {
        const i = e[r2].indexState.offset;
        __PRIVATE_indexOffsetComparator(i, t2) < 0 && (t2 = i), n2 < i.largestBatchId && (n2 = i.largestBatchId);
      }
      return new IndexOffset(t2.readTime, t2.documentKey, n2);
    }
    __name(__PRIVATE_getMinOffsetFromFieldIndexes, "__PRIVATE_getMinOffsetFromFieldIndexes");
    var wt = {
      didRun: false,
      sequenceNumbersCollected: 0,
      targetsRemoved: 0,
      documentsRemoved: 0
    };
    var St = 41943040;
    var LruParams = class {
      static withCacheSize(e) {
        return new LruParams(e, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
      }
      constructor(e, t2, n2) {
        this.cacheSizeCollectionThreshold = e, this.percentileToCollect = t2, this.maximumSequenceNumbersToCollect = n2;
      }
    };
    __name(LruParams, "LruParams");
    function removeMutationBatch(e, t2, n2) {
      const r2 = e.store(j), i = e.store(X), s2 = [], o2 = IDBKeyRange.only(n2.batchId);
      let _ = 0;
      const a2 = r2.Z({
        range: o2
      }, (e2, t3, n3) => (_++, n3.delete()));
      s2.push(a2.next(() => {
        __PRIVATE_hardAssert(1 === _);
      }));
      const u2 = [];
      for (const e2 of n2.mutations) {
        const r3 = __PRIVATE_newDbDocumentMutationKey(t2, e2.key.path, n2.batchId);
        s2.push(i.delete(r3)), u2.push(e2.key);
      }
      return PersistencePromise.waitFor(s2).next(() => u2);
    }
    __name(removeMutationBatch, "removeMutationBatch");
    function __PRIVATE_dbDocumentSize(e) {
      if (!e)
        return 0;
      let t2;
      if (e.document)
        t2 = e.document;
      else if (e.unknownDocument)
        t2 = e.unknownDocument;
      else {
        if (!e.noDocument)
          throw fail();
        t2 = e.noDocument;
      }
      return JSON.stringify(t2).length;
    }
    __name(__PRIVATE_dbDocumentSize, "__PRIVATE_dbDocumentSize");
    LruParams.DEFAULT_COLLECTION_PERCENTILE = 10, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, LruParams.DEFAULT = new LruParams(St, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), LruParams.DISABLED = new LruParams(-1, 0, 0);
    var __PRIVATE_IndexedDbMutationQueue = class {
      constructor(e, t2, n2, r2) {
        this.userId = e, this.serializer = t2, this.indexManager = n2, this.referenceDelegate = r2, /**
         * Caches the document keys for pending mutation batches. If the mutation
         * has been removed from IndexedDb, the cached value may continue to
         * be used to retrieve the batch's document keys. To remove a cached value
         * locally, `removeCachedMutationKeys()` should be invoked either directly
         * or through `removeMutationBatches()`.
         *
         * With multi-tab, when the primary client acknowledges or rejects a mutation,
         * this cache is used by secondary clients to invalidate the local
         * view of the documents that were previously affected by the mutation.
         */
        // PORTING NOTE: Multi-tab only.
        this.Bn = {};
      }
      /**
       * Creates a new mutation queue for the given user.
       * @param user - The user for which to create a mutation queue.
       * @param serializer - The serializer to use when persisting to IndexedDb.
       */
      static It(e, t2, n2, r2) {
        __PRIVATE_hardAssert("" !== e.uid);
        const i = e.isAuthenticated() ? e.uid : "";
        return new __PRIVATE_IndexedDbMutationQueue(i, t2, n2, r2);
      }
      checkEmpty(e) {
        let t2 = true;
        const n2 = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
        return __PRIVATE_mutationsStore(e).Z({
          index: J,
          range: n2
        }, (e2, n3, r2) => {
          t2 = false, r2.done();
        }).next(() => t2);
      }
      addMutationBatch(e, t2, n2, r2) {
        const i = __PRIVATE_documentMutationsStore(e), s2 = __PRIVATE_mutationsStore(e);
        return s2.add({}).next((o2) => {
          __PRIVATE_hardAssert("number" == typeof o2);
          const _ = new MutationBatch(o2, t2, n2, r2), a2 = (/* @__PURE__ */ __name(function __PRIVATE_toDbMutationBatch(e2, t3, n3) {
            const r3 = n3.baseMutations.map((t4) => toMutation(e2.Tt, t4)), i2 = n3.mutations.map((t4) => toMutation(e2.Tt, t4));
            return {
              userId: t3,
              batchId: n3.batchId,
              localWriteTimeMs: n3.localWriteTime.toMillis(),
              baseMutations: r3,
              mutations: i2
            };
          }, "__PRIVATE_toDbMutationBatch"))(this.serializer, this.userId, _), u2 = [];
          let c2 = new SortedSet((e2, t3) => __PRIVATE_primitiveComparator(e2.canonicalString(), t3.canonicalString()));
          for (const e2 of r2) {
            const t3 = __PRIVATE_newDbDocumentMutationKey(this.userId, e2.key.path, o2);
            c2 = c2.add(e2.key.path.popLast()), u2.push(s2.put(a2)), u2.push(i.put(t3, Z));
          }
          return c2.forEach((t3) => {
            u2.push(this.indexManager.addToCollectionParentIndex(e, t3));
          }), e.addOnCommittedListener(() => {
            this.Bn[o2] = _.keys();
          }), PersistencePromise.waitFor(u2).next(() => _);
        });
      }
      lookupMutationBatch(e, t2) {
        return __PRIVATE_mutationsStore(e).get(t2).next((e2) => e2 ? (__PRIVATE_hardAssert(e2.userId === this.userId), __PRIVATE_fromDbMutationBatch(this.serializer, e2)) : null);
      }
      /**
       * Returns the document keys for the mutation batch with the given batchId.
       * For primary clients, this method returns `null` after
       * `removeMutationBatches()` has been called. Secondary clients return a
       * cached result until `removeCachedMutationKeys()` is invoked.
       */
      // PORTING NOTE: Multi-tab only.
      Ln(e, t2) {
        return this.Bn[t2] ? PersistencePromise.resolve(this.Bn[t2]) : this.lookupMutationBatch(e, t2).next((e2) => {
          if (e2) {
            const n2 = e2.keys();
            return this.Bn[t2] = n2, n2;
          }
          return null;
        });
      }
      getNextMutationBatchAfterBatchId(e, t2) {
        const n2 = t2 + 1, r2 = IDBKeyRange.lowerBound([this.userId, n2]);
        let i = null;
        return __PRIVATE_mutationsStore(e).Z({
          index: J,
          range: r2
        }, (e2, t3, r3) => {
          t3.userId === this.userId && (__PRIVATE_hardAssert(t3.batchId >= n2), i = __PRIVATE_fromDbMutationBatch(this.serializer, t3)), r3.done();
        }).next(() => i);
      }
      getHighestUnacknowledgedBatchId(e) {
        const t2 = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]);
        let n2 = Q;
        return __PRIVATE_mutationsStore(e).Z({
          index: J,
          range: t2,
          reverse: true
        }, (e2, t3, r2) => {
          n2 = t3.batchId, r2.done();
        }).next(() => n2);
      }
      getAllMutationBatches(e) {
        const t2 = IDBKeyRange.bound([this.userId, Q], [this.userId, Number.POSITIVE_INFINITY]);
        return __PRIVATE_mutationsStore(e).G(J, t2).next((e2) => e2.map((e3) => __PRIVATE_fromDbMutationBatch(this.serializer, e3)));
      }
      getAllMutationBatchesAffectingDocumentKey(e, t2) {
        const n2 = __PRIVATE_newDbDocumentMutationPrefixForPath(this.userId, t2.path), r2 = IDBKeyRange.lowerBound(n2), i = [];
        return __PRIVATE_documentMutationsStore(e).Z({
          range: r2
        }, (n3, r3, s2) => {
          const [o2, _, a2] = n3, u2 = __PRIVATE_decodeResourcePath(_);
          if (o2 === this.userId && t2.path.isEqual(u2))
            return __PRIVATE_mutationsStore(e).get(a2).next((e2) => {
              if (!e2)
                throw fail();
              __PRIVATE_hardAssert(e2.userId === this.userId), i.push(__PRIVATE_fromDbMutationBatch(this.serializer, e2));
            });
          s2.done();
        }).next(() => i);
      }
      getAllMutationBatchesAffectingDocumentKeys(e, t2) {
        let n2 = new SortedSet(__PRIVATE_primitiveComparator);
        const r2 = [];
        return t2.forEach((t3) => {
          const i = __PRIVATE_newDbDocumentMutationPrefixForPath(this.userId, t3.path), s2 = IDBKeyRange.lowerBound(i), o2 = __PRIVATE_documentMutationsStore(e).Z({
            range: s2
          }, (e2, r3, i2) => {
            const [s3, o3, _] = e2, a2 = __PRIVATE_decodeResourcePath(o3);
            s3 === this.userId && t3.path.isEqual(a2) ? n2 = n2.add(_) : i2.done();
          });
          r2.push(o2);
        }), PersistencePromise.waitFor(r2).next(() => this.kn(e, n2));
      }
      getAllMutationBatchesAffectingQuery(e, t2) {
        const n2 = t2.path, r2 = n2.length + 1, i = __PRIVATE_newDbDocumentMutationPrefixForPath(this.userId, n2), s2 = IDBKeyRange.lowerBound(i);
        let o2 = new SortedSet(__PRIVATE_primitiveComparator);
        return __PRIVATE_documentMutationsStore(e).Z({
          range: s2
        }, (e2, t3, i2) => {
          const [s3, _, a2] = e2, u2 = __PRIVATE_decodeResourcePath(_);
          s3 === this.userId && n2.isPrefixOf(u2) ? (
            // Rows with document keys more than one segment longer than the
            // query path can't be matches. For example, a query on 'rooms'
            // can't match the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            u2.length === r2 && (o2 = o2.add(a2))
          ) : i2.done();
        }).next(() => this.kn(e, o2));
      }
      kn(e, t2) {
        const n2 = [], r2 = [];
        return t2.forEach((t3) => {
          r2.push(__PRIVATE_mutationsStore(e).get(t3).next((e2) => {
            if (null === e2)
              throw fail();
            __PRIVATE_hardAssert(e2.userId === this.userId), n2.push(__PRIVATE_fromDbMutationBatch(this.serializer, e2));
          }));
        }), PersistencePromise.waitFor(r2).next(() => n2);
      }
      removeMutationBatch(e, t2) {
        return removeMutationBatch(e.ue, this.userId, t2).next((n2) => (e.addOnCommittedListener(() => {
          this.qn(t2.batchId);
        }), PersistencePromise.forEach(n2, (t3) => this.referenceDelegate.markPotentiallyOrphaned(e, t3))));
      }
      /**
       * Clears the cached keys for a mutation batch. This method should be
       * called by secondary clients after they process mutation updates.
       *
       * Note that this method does not have to be called from primary clients as
       * the corresponding cache entries are cleared when an acknowledged or
       * rejected batch is removed from the mutation queue.
       */
      // PORTING NOTE: Multi-tab only
      qn(e) {
        delete this.Bn[e];
      }
      performConsistencyCheck(e) {
        return this.checkEmpty(e).next((t2) => {
          if (!t2)
            return PersistencePromise.resolve();
          const n2 = IDBKeyRange.lowerBound(
            /**
            * Creates a [userId] key for use in the DbDocumentMutations index to iterate
            * over all of a user's document mutations.
            */
            (/* @__PURE__ */ __name(function __PRIVATE_newDbDocumentMutationPrefixForUser(e2) {
              return [e2];
            }, "__PRIVATE_newDbDocumentMutationPrefixForUser"))(this.userId)
          ), r2 = [];
          return __PRIVATE_documentMutationsStore(e).Z({
            range: n2
          }, (e2, t3, n3) => {
            if (e2[0] === this.userId) {
              const t4 = __PRIVATE_decodeResourcePath(e2[1]);
              r2.push(t4);
            } else
              n3.done();
          }).next(() => {
            __PRIVATE_hardAssert(0 === r2.length);
          });
        });
      }
      containsKey(e, t2) {
        return __PRIVATE_mutationQueueContainsKey(e, this.userId, t2);
      }
      // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
      /** Returns the mutation queue's metadata from IndexedDb. */
      Qn(e) {
        return __PRIVATE_mutationQueuesStore(e).get(this.userId).next((e2) => e2 || {
          userId: this.userId,
          lastAcknowledgedBatchId: Q,
          lastStreamToken: ""
        });
      }
    };
    __name(__PRIVATE_IndexedDbMutationQueue, "__PRIVATE_IndexedDbMutationQueue");
    function __PRIVATE_mutationQueueContainsKey(e, t2, n2) {
      const r2 = __PRIVATE_newDbDocumentMutationPrefixForPath(t2, n2.path), i = r2[1], s2 = IDBKeyRange.lowerBound(r2);
      let o2 = false;
      return __PRIVATE_documentMutationsStore(e).Z({
        range: s2,
        Y: true
      }, (e2, n3, r3) => {
        const [
          s3,
          _,
          /*batchID*/
          a2
        ] = e2;
        s3 === t2 && _ === i && (o2 = true), r3.done();
      }).next(() => o2);
    }
    __name(__PRIVATE_mutationQueueContainsKey, "__PRIVATE_mutationQueueContainsKey");
    function __PRIVATE_mutationsStore(e) {
      return __PRIVATE_getStore(e, j);
    }
    __name(__PRIVATE_mutationsStore, "__PRIVATE_mutationsStore");
    function __PRIVATE_documentMutationsStore(e) {
      return __PRIVATE_getStore(e, X);
    }
    __name(__PRIVATE_documentMutationsStore, "__PRIVATE_documentMutationsStore");
    function __PRIVATE_mutationQueuesStore(e) {
      return __PRIVATE_getStore(e, G);
    }
    __name(__PRIVATE_mutationQueuesStore, "__PRIVATE_mutationQueuesStore");
    var __PRIVATE_TargetIdGenerator = class {
      constructor(e) {
        this.$n = e;
      }
      next() {
        return this.$n += 2, this.$n;
      }
      static Kn() {
        return new __PRIVATE_TargetIdGenerator(0);
      }
      static Un() {
        return new __PRIVATE_TargetIdGenerator(-1);
      }
    };
    __name(__PRIVATE_TargetIdGenerator, "__PRIVATE_TargetIdGenerator");
    var __PRIVATE_IndexedDbTargetCache = class {
      constructor(e, t2) {
        this.referenceDelegate = e, this.serializer = t2;
      }
      // PORTING NOTE: We don't cache global metadata for the target cache, since
      // some of it (in particular `highestTargetId`) can be modified by secondary
      // tabs. We could perhaps be more granular (and e.g. still cache
      // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
      // to IndexedDb whenever we need to read metadata. We can revisit if it turns
      // out to have a meaningful performance impact.
      allocateTargetId(e) {
        return this.Wn(e).next((t2) => {
          const n2 = new __PRIVATE_TargetIdGenerator(t2.highestTargetId);
          return t2.highestTargetId = n2.next(), this.Gn(e, t2).next(() => t2.highestTargetId);
        });
      }
      getLastRemoteSnapshotVersion(e) {
        return this.Wn(e).next((e2) => SnapshotVersion.fromTimestamp(new Timestamp(e2.lastRemoteSnapshotVersion.seconds, e2.lastRemoteSnapshotVersion.nanoseconds)));
      }
      getHighestSequenceNumber(e) {
        return this.Wn(e).next((e2) => e2.highestListenSequenceNumber);
      }
      setTargetsMetadata(e, t2, n2) {
        return this.Wn(e).next((r2) => (r2.highestListenSequenceNumber = t2, n2 && (r2.lastRemoteSnapshotVersion = n2.toTimestamp()), t2 > r2.highestListenSequenceNumber && (r2.highestListenSequenceNumber = t2), this.Gn(e, r2)));
      }
      addTargetData(e, t2) {
        return this.zn(e, t2).next(() => this.Wn(e).next((n2) => (n2.targetCount += 1, this.jn(t2, n2), this.Gn(e, n2))));
      }
      updateTargetData(e, t2) {
        return this.zn(e, t2);
      }
      removeTargetData(e, t2) {
        return this.removeMatchingKeysForTargetId(e, t2.targetId).next(() => __PRIVATE_targetsStore(e).delete(t2.targetId)).next(() => this.Wn(e)).next((t3) => (__PRIVATE_hardAssert(t3.targetCount > 0), t3.targetCount -= 1, this.Gn(e, t3)));
      }
      /**
       * Drops any targets with sequence number less than or equal to the upper bound, excepting those
       * present in `activeTargetIds`. Document associations for the removed targets are also removed.
       * Returns the number of targets removed.
       */
      removeTargets(e, t2, n2) {
        let r2 = 0;
        const i = [];
        return __PRIVATE_targetsStore(e).Z((s2, o2) => {
          const _ = __PRIVATE_fromDbTarget(o2);
          _.sequenceNumber <= t2 && null === n2.get(_.targetId) && (r2++, i.push(this.removeTargetData(e, _)));
        }).next(() => PersistencePromise.waitFor(i)).next(() => r2);
      }
      /**
       * Call provided function with each `TargetData` that we have cached.
       */
      forEachTarget(e, t2) {
        return __PRIVATE_targetsStore(e).Z((e2, n2) => {
          const r2 = __PRIVATE_fromDbTarget(n2);
          t2(r2);
        });
      }
      Wn(e) {
        return __PRIVATE_globalTargetStore(e).get(Ie).next((e2) => (__PRIVATE_hardAssert(null !== e2), e2));
      }
      Gn(e, t2) {
        return __PRIVATE_globalTargetStore(e).put(Ie, t2);
      }
      zn(e, t2) {
        return __PRIVATE_targetsStore(e).put(__PRIVATE_toDbTarget(this.serializer, t2));
      }
      /**
       * In-place updates the provided metadata to account for values in the given
       * TargetData. Saving is done separately. Returns true if there were any
       * changes to the metadata.
       */
      jn(e, t2) {
        let n2 = false;
        return e.targetId > t2.highestTargetId && (t2.highestTargetId = e.targetId, n2 = true), e.sequenceNumber > t2.highestListenSequenceNumber && (t2.highestListenSequenceNumber = e.sequenceNumber, n2 = true), n2;
      }
      getTargetCount(e) {
        return this.Wn(e).next((e2) => e2.targetCount);
      }
      getTargetData(e, t2) {
        const n2 = __PRIVATE_canonifyTarget(t2), r2 = IDBKeyRange.bound([n2, Number.NEGATIVE_INFINITY], [n2, Number.POSITIVE_INFINITY]);
        let i = null;
        return __PRIVATE_targetsStore(e).Z({
          range: r2,
          index: ue
        }, (e2, n3, r3) => {
          const s2 = __PRIVATE_fromDbTarget(n3);
          __PRIVATE_targetEquals(t2, s2.target) && (i = s2, r3.done());
        }).next(() => i);
      }
      addMatchingKeys(e, t2, n2) {
        const r2 = [], i = __PRIVATE_documentTargetStore(e);
        return t2.forEach((t3) => {
          const s2 = __PRIVATE_encodeResourcePath(t3.path);
          r2.push(i.put({
            targetId: n2,
            path: s2
          })), r2.push(this.referenceDelegate.addReference(e, n2, t3));
        }), PersistencePromise.waitFor(r2);
      }
      removeMatchingKeys(e, t2, n2) {
        const r2 = __PRIVATE_documentTargetStore(e);
        return PersistencePromise.forEach(t2, (t3) => {
          const i = __PRIVATE_encodeResourcePath(t3.path);
          return PersistencePromise.waitFor([r2.delete([n2, i]), this.referenceDelegate.removeReference(e, n2, t3)]);
        });
      }
      removeMatchingKeysForTargetId(e, t2) {
        const n2 = __PRIVATE_documentTargetStore(e), r2 = IDBKeyRange.bound(
          [t2],
          [t2 + 1],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        );
        return n2.delete(r2);
      }
      getMatchingKeysForTargetId(e, t2) {
        const n2 = IDBKeyRange.bound(
          [t2],
          [t2 + 1],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        ), r2 = __PRIVATE_documentTargetStore(e);
        let i = __PRIVATE_documentKeySet();
        return r2.Z({
          range: n2,
          Y: true
        }, (e2, t3, n3) => {
          const r3 = __PRIVATE_decodeResourcePath(e2[1]), s2 = new DocumentKey(r3);
          i = i.add(s2);
        }).next(() => i);
      }
      containsKey(e, t2) {
        const n2 = __PRIVATE_encodeResourcePath(t2.path), r2 = IDBKeyRange.bound(
          [n2],
          [__PRIVATE_immediateSuccessor(n2)],
          /*lowerOpen=*/
          false,
          /*upperOpen=*/
          true
        );
        let i = 0;
        return __PRIVATE_documentTargetStore(e).Z({
          index: Pe,
          Y: true,
          range: r2
        }, ([e2, t3], n3, r3) => {
          0 !== e2 && (i++, r3.done());
        }).next(() => i > 0);
      }
      /**
       * Looks up a TargetData entry by target ID.
       *
       * @param targetId - The target ID of the TargetData entry to look up.
       * @returns The cached TargetData entry, or null if the cache has no entry for
       * the target.
       */
      // PORTING NOTE: Multi-tab only.
      lt(e, t2) {
        return __PRIVATE_targetsStore(e).get(t2).next((e2) => e2 ? __PRIVATE_fromDbTarget(e2) : null);
      }
    };
    __name(__PRIVATE_IndexedDbTargetCache, "__PRIVATE_IndexedDbTargetCache");
    function __PRIVATE_targetsStore(e) {
      return __PRIVATE_getStore(e, ae);
    }
    __name(__PRIVATE_targetsStore, "__PRIVATE_targetsStore");
    function __PRIVATE_globalTargetStore(e) {
      return __PRIVATE_getStore(e, Ee);
    }
    __name(__PRIVATE_globalTargetStore, "__PRIVATE_globalTargetStore");
    function __PRIVATE_documentTargetStore(e) {
      return __PRIVATE_getStore(e, le);
    }
    __name(__PRIVATE_documentTargetStore, "__PRIVATE_documentTargetStore");
    var bt = "LruGarbageCollector";
    var Dt = 1048576;
    function __PRIVATE_bufferEntryComparator([e, t2], [n2, r2]) {
      const i = __PRIVATE_primitiveComparator(e, n2);
      return 0 === i ? __PRIVATE_primitiveComparator(t2, r2) : i;
    }
    __name(__PRIVATE_bufferEntryComparator, "__PRIVATE_bufferEntryComparator");
    var __PRIVATE_RollingSequenceNumberBuffer = class {
      constructor(e) {
        this.Hn = e, this.buffer = new SortedSet(__PRIVATE_bufferEntryComparator), this.Jn = 0;
      }
      Yn() {
        return ++this.Jn;
      }
      Zn(e) {
        const t2 = [e, this.Yn()];
        if (this.buffer.size < this.Hn)
          this.buffer = this.buffer.add(t2);
        else {
          const e2 = this.buffer.last();
          __PRIVATE_bufferEntryComparator(t2, e2) < 0 && (this.buffer = this.buffer.delete(e2).add(t2));
        }
      }
      get maxValue() {
        return this.buffer.last()[0];
      }
    };
    __name(__PRIVATE_RollingSequenceNumberBuffer, "__PRIVATE_RollingSequenceNumberBuffer");
    var __PRIVATE_LruScheduler = class {
      constructor(e, t2, n2) {
        this.garbageCollector = e, this.asyncQueue = t2, this.localStore = n2, this.Xn = null;
      }
      start() {
        -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.er(6e4);
      }
      stop() {
        this.Xn && (this.Xn.cancel(), this.Xn = null);
      }
      get started() {
        return null !== this.Xn;
      }
      er(e) {
        __PRIVATE_logDebug(bt, `Garbage collection scheduled in ${e}ms`), this.Xn = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection", e, async () => {
          this.Xn = null;
          try {
            await this.localStore.collectGarbage(this.garbageCollector);
          } catch (e2) {
            __PRIVATE_isIndexedDbTransactionError(e2) ? __PRIVATE_logDebug(bt, "Ignoring IndexedDB error during garbage collection: ", e2) : await __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);
          }
          await this.er(3e5);
        });
      }
    };
    __name(__PRIVATE_LruScheduler, "__PRIVATE_LruScheduler");
    var __PRIVATE_LruGarbageCollectorImpl = class {
      constructor(e, t2) {
        this.tr = e, this.params = t2;
      }
      calculateTargetCount(e, t2) {
        return this.tr.nr(e).next((e2) => Math.floor(t2 / 100 * e2));
      }
      nthSequenceNumber(e, t2) {
        if (0 === t2)
          return PersistencePromise.resolve(__PRIVATE_ListenSequence.ae);
        const n2 = new __PRIVATE_RollingSequenceNumberBuffer(t2);
        return this.tr.forEachTarget(e, (e2) => n2.Zn(e2.sequenceNumber)).next(() => this.tr.rr(e, (e2) => n2.Zn(e2))).next(() => n2.maxValue);
      }
      removeTargets(e, t2, n2) {
        return this.tr.removeTargets(e, t2, n2);
      }
      removeOrphanedDocuments(e, t2) {
        return this.tr.removeOrphanedDocuments(e, t2);
      }
      collect(e, t2) {
        return -1 === this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug("LruGarbageCollector", "Garbage collection skipped; disabled"), PersistencePromise.resolve(wt)) : this.getCacheSize(e).next((n2) => n2 < this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug("LruGarbageCollector", `Garbage collection skipped; Cache size ${n2} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), wt) : this.ir(e, t2));
      }
      getCacheSize(e) {
        return this.tr.getCacheSize(e);
      }
      ir(e, t2) {
        let n2, r2, i, s2, o2, _, u2;
        const c2 = Date.now();
        return this.calculateTargetCount(e, this.params.percentileToCollect).next((t3) => (
          // Cap at the configured max
          (t3 > this.params.maximumSequenceNumbersToCollect ? (__PRIVATE_logDebug("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${t3}`), r2 = this.params.maximumSequenceNumbersToCollect) : r2 = t3, s2 = Date.now(), this.nthSequenceNumber(e, r2))
        )).next((r3) => (n2 = r3, o2 = Date.now(), this.removeTargets(e, n2, t2))).next((t3) => (i = t3, _ = Date.now(), this.removeOrphanedDocuments(e, n2))).next((e2) => {
          if (u2 = Date.now(), __PRIVATE_getLogLevel() <= logger.LogLevel.DEBUG) {
            __PRIVATE_logDebug("LruGarbageCollector", `LRU Garbage Collection
	Counted targets in ${s2 - c2}ms
	Determined least recently used ${r2} in ` + (o2 - s2) + `ms
	Removed ${i} targets in ` + (_ - o2) + `ms
	Removed ${e2} documents in ` + (u2 - _) + `ms
Total Duration: ${u2 - c2}ms`);
          }
          return PersistencePromise.resolve({
            didRun: true,
            sequenceNumbersCollected: r2,
            targetsRemoved: i,
            documentsRemoved: e2
          });
        });
      }
    };
    __name(__PRIVATE_LruGarbageCollectorImpl, "__PRIVATE_LruGarbageCollectorImpl");
    function __PRIVATE_newLruGarbageCollector(e, t2) {
      return new __PRIVATE_LruGarbageCollectorImpl(e, t2);
    }
    __name(__PRIVATE_newLruGarbageCollector, "__PRIVATE_newLruGarbageCollector");
    var __PRIVATE_IndexedDbLruDelegateImpl = class {
      constructor(e, t2) {
        this.db = e, this.garbageCollector = __PRIVATE_newLruGarbageCollector(this, t2);
      }
      nr(e) {
        const t2 = this.sr(e);
        return this.db.getTargetCache().getTargetCount(e).next((e2) => t2.next((t3) => e2 + t3));
      }
      sr(e) {
        let t2 = 0;
        return this.rr(e, (e2) => {
          t2++;
        }).next(() => t2);
      }
      forEachTarget(e, t2) {
        return this.db.getTargetCache().forEachTarget(e, t2);
      }
      rr(e, t2) {
        return this._r(e, (e2, n2) => t2(n2));
      }
      addReference(e, t2, n2) {
        return __PRIVATE_writeSentinelKey(e, n2);
      }
      removeReference(e, t2, n2) {
        return __PRIVATE_writeSentinelKey(e, n2);
      }
      removeTargets(e, t2, n2) {
        return this.db.getTargetCache().removeTargets(e, t2, n2);
      }
      markPotentiallyOrphaned(e, t2) {
        return __PRIVATE_writeSentinelKey(e, t2);
      }
      /**
       * Returns true if anything would prevent this document from being garbage
       * collected, given that the document in question is not present in any
       * targets and has a sequence number less than or equal to the upper bound for
       * the collection run.
       */
      ar(e, t2) {
        return (/* @__PURE__ */ __name(function __PRIVATE_mutationQueuesContainKey(e2, t3) {
          let n2 = false;
          return __PRIVATE_mutationQueuesStore(e2).X((r2) => __PRIVATE_mutationQueueContainsKey(e2, r2, t3).next((e3) => (e3 && (n2 = true), PersistencePromise.resolve(!e3)))).next(() => n2);
        }, "__PRIVATE_mutationQueuesContainKey"))(e, t2);
      }
      removeOrphanedDocuments(e, t2) {
        const n2 = this.db.getRemoteDocumentCache().newChangeBuffer(), r2 = [];
        let i = 0;
        return this._r(e, (s2, o2) => {
          if (o2 <= t2) {
            const t3 = this.ar(e, s2).next((t4) => {
              if (!t4)
                return i++, n2.getEntry(e, s2).next(() => (n2.removeEntry(s2, SnapshotVersion.min()), __PRIVATE_documentTargetStore(e).delete((/* @__PURE__ */ __name(function __PRIVATE_sentinelKey$1(e2) {
                  return [0, __PRIVATE_encodeResourcePath(e2.path)];
                }, "__PRIVATE_sentinelKey$1"))(s2))));
            });
            r2.push(t3);
          }
        }).next(() => PersistencePromise.waitFor(r2)).next(() => n2.apply(e)).next(() => i);
      }
      removeTarget(e, t2) {
        const n2 = t2.withSequenceNumber(e.currentSequenceNumber);
        return this.db.getTargetCache().updateTargetData(e, n2);
      }
      updateLimboDocument(e, t2) {
        return __PRIVATE_writeSentinelKey(e, t2);
      }
      /**
       * Call provided function for each document in the cache that is 'orphaned'. Orphaned
       * means not a part of any target, so the only entry in the target-document index for
       * that document will be the sentinel row (targetId 0), which will also have the sequence
       * number for the last time the document was accessed.
       */
      _r(e, t2) {
        const n2 = __PRIVATE_documentTargetStore(e);
        let r2, i = __PRIVATE_ListenSequence.ae;
        return n2.Z({
          index: Pe
        }, ([e2, n3], { path: s2, sequenceNumber: o2 }) => {
          0 === e2 ? (
            // if nextToReport is valid, report it, this is a new key so the
            // last one must not be a member of any targets.
            (i !== __PRIVATE_ListenSequence.ae && t2(new DocumentKey(__PRIVATE_decodeResourcePath(r2)), i), // set nextToReport to be this sequence number. It's the next one we
            // might report, if we don't find any targets for this document.
            // Note that the sequence number must be defined when the targetId
            // is 0.
            i = o2, r2 = s2)
          ) : (
            // set nextToReport to be invalid, we know we don't need to report
            // this one since we found a target for it.
            i = __PRIVATE_ListenSequence.ae
          );
        }).next(() => {
          i !== __PRIVATE_ListenSequence.ae && t2(new DocumentKey(__PRIVATE_decodeResourcePath(r2)), i);
        });
      }
      getCacheSize(e) {
        return this.db.getRemoteDocumentCache().getSize(e);
      }
    };
    __name(__PRIVATE_IndexedDbLruDelegateImpl, "__PRIVATE_IndexedDbLruDelegateImpl");
    function __PRIVATE_writeSentinelKey(e, t2) {
      return __PRIVATE_documentTargetStore(e).put((/* @__PURE__ */ __name(function __PRIVATE_sentinelRow(e2, t3) {
        return {
          targetId: 0,
          path: __PRIVATE_encodeResourcePath(e2.path),
          sequenceNumber: t3
        };
      }, "__PRIVATE_sentinelRow"))(t2, e.currentSequenceNumber));
    }
    __name(__PRIVATE_writeSentinelKey, "__PRIVATE_writeSentinelKey");
    var RemoteDocumentChangeBuffer = class {
      constructor() {
        this.changes = new ObjectMap((e) => e.toString(), (e, t2) => e.isEqual(t2)), this.changesApplied = false;
      }
      /**
       * Buffers a `RemoteDocumentCache.addEntry()` call.
       *
       * You can only modify documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      addEntry(e) {
        this.assertNotApplied(), this.changes.set(e.key, e);
      }
      /**
       * Buffers a `RemoteDocumentCache.removeEntry()` call.
       *
       * You can only remove documents that have already been retrieved via
       * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
       */
      removeEntry(e, t2) {
        this.assertNotApplied(), this.changes.set(e, MutableDocument.newInvalidDocument(e).setReadTime(t2));
      }
      /**
       * Looks up an entry in the cache. The buffered changes will first be checked,
       * and if no buffered change applies, this will forward to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKey - The key of the entry to look up.
       * @returns The cached document or an invalid document if we have nothing
       * cached.
       */
      getEntry(e, t2) {
        this.assertNotApplied();
        const n2 = this.changes.get(t2);
        return void 0 !== n2 ? PersistencePromise.resolve(n2) : this.getFromCache(e, t2);
      }
      /**
       * Looks up several entries in the cache, forwarding to
       * `RemoteDocumentCache.getEntry()`.
       *
       * @param transaction - The transaction in which to perform any persistence
       *     operations.
       * @param documentKeys - The keys of the entries to look up.
       * @returns A map of cached documents, indexed by key. If an entry cannot be
       *     found, the corresponding key will be mapped to an invalid document.
       */
      getEntries(e, t2) {
        return this.getAllFromCache(e, t2);
      }
      /**
       * Applies buffered changes to the underlying RemoteDocumentCache, using
       * the provided transaction.
       */
      apply(e) {
        return this.assertNotApplied(), this.changesApplied = true, this.applyChanges(e);
      }
      /** Helper to assert this.changes is not null  */
      assertNotApplied() {
      }
    };
    __name(RemoteDocumentChangeBuffer, "RemoteDocumentChangeBuffer");
    var __PRIVATE_IndexedDbRemoteDocumentCacheImpl = class {
      constructor(e) {
        this.serializer = e;
      }
      setIndexManager(e) {
        this.indexManager = e;
      }
      /**
       * Adds the supplied entries to the cache.
       *
       * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
       */
      addEntry(e, t2, n2) {
        return __PRIVATE_remoteDocumentsStore(e).put(n2);
      }
      /**
       * Removes a document from the cache.
       *
       * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
       */
      removeEntry(e, t2, n2) {
        return __PRIVATE_remoteDocumentsStore(e).delete(
          /**
          * Returns a key that can be used for document lookups via the primary key of
          * the DbRemoteDocument object store.
          */
          (/* @__PURE__ */ __name(function __PRIVATE_dbReadTimeKey(e2, t3) {
            const n3 = e2.path.toArray();
            return [
              /* prefix path */
              n3.slice(0, n3.length - 2),
              /* collection id */
              n3[n3.length - 2],
              __PRIVATE_toDbTimestampKey(t3),
              /* document id */
              n3[n3.length - 1]
            ];
          }, "__PRIVATE_dbReadTimeKey"))(t2, n2)
        );
      }
      /**
       * Updates the current cache size.
       *
       * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
       * cache's metadata.
       */
      updateMetadata(e, t2) {
        return this.getMetadata(e).next((n2) => (n2.byteSize += t2, this.ur(e, n2)));
      }
      getEntry(e, t2) {
        let n2 = MutableDocument.newInvalidDocument(t2);
        return __PRIVATE_remoteDocumentsStore(e).Z({
          index: ne,
          range: IDBKeyRange.only(__PRIVATE_dbKey(t2))
        }, (e2, r2) => {
          n2 = this.cr(t2, r2);
        }).next(() => n2);
      }
      /**
       * Looks up an entry in the cache.
       *
       * @param documentKey - The key of the entry to look up.
       * @returns The cached document entry and its size.
       */
      lr(e, t2) {
        let n2 = {
          size: 0,
          document: MutableDocument.newInvalidDocument(t2)
        };
        return __PRIVATE_remoteDocumentsStore(e).Z({
          index: ne,
          range: IDBKeyRange.only(__PRIVATE_dbKey(t2))
        }, (e2, r2) => {
          n2 = {
            document: this.cr(t2, r2),
            size: __PRIVATE_dbDocumentSize(r2)
          };
        }).next(() => n2);
      }
      getEntries(e, t2) {
        let n2 = __PRIVATE_mutableDocumentMap();
        return this.hr(e, t2, (e2, t3) => {
          const r2 = this.cr(e2, t3);
          n2 = n2.insert(e2, r2);
        }).next(() => n2);
      }
      /**
       * Looks up several entries in the cache.
       *
       * @param documentKeys - The set of keys entries to look up.
       * @returns A map of documents indexed by key and a map of sizes indexed by
       *     key (zero if the document does not exist).
       */
      Pr(e, t2) {
        let n2 = __PRIVATE_mutableDocumentMap(), r2 = new SortedMap(DocumentKey.comparator);
        return this.hr(e, t2, (e2, t3) => {
          const i = this.cr(e2, t3);
          n2 = n2.insert(e2, i), r2 = r2.insert(e2, __PRIVATE_dbDocumentSize(t3));
        }).next(() => ({
          documents: n2,
          Tr: r2
        }));
      }
      hr(e, t2, n2) {
        if (t2.isEmpty())
          return PersistencePromise.resolve();
        let r2 = new SortedSet(__PRIVATE_dbKeyComparator);
        t2.forEach((e2) => r2 = r2.add(e2));
        const i = IDBKeyRange.bound(__PRIVATE_dbKey(r2.first()), __PRIVATE_dbKey(r2.last())), s2 = r2.getIterator();
        let o2 = s2.getNext();
        return __PRIVATE_remoteDocumentsStore(e).Z({
          index: ne,
          range: i
        }, (e2, t3, r3) => {
          const i2 = DocumentKey.fromSegments([...t3.prefixPath, t3.collectionGroup, t3.documentId]);
          for (; o2 && __PRIVATE_dbKeyComparator(o2, i2) < 0; )
            n2(o2, null), o2 = s2.getNext();
          o2 && o2.isEqual(i2) && // Key found in cache.
          (n2(o2, t3), o2 = s2.hasNext() ? s2.getNext() : null), // Skip to the next key (if there is one).
          o2 ? r3.W(__PRIVATE_dbKey(o2)) : r3.done();
        }).next(() => {
          for (; o2; )
            n2(o2, null), o2 = s2.hasNext() ? s2.getNext() : null;
        });
      }
      getDocumentsMatchingQuery(e, t2, n2, r2, i) {
        const s2 = t2.path, o2 = [s2.popLast().toArray(), s2.lastSegment(), __PRIVATE_toDbTimestampKey(n2.readTime), n2.documentKey.path.isEmpty() ? "" : n2.documentKey.path.lastSegment()], _ = [s2.popLast().toArray(), s2.lastSegment(), [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER], ""];
        return __PRIVATE_remoteDocumentsStore(e).G(IDBKeyRange.bound(o2, _, true)).next((e2) => {
          null == i || i.incrementDocumentReadCount(e2.length);
          let n3 = __PRIVATE_mutableDocumentMap();
          for (const i2 of e2) {
            const e3 = this.cr(DocumentKey.fromSegments(i2.prefixPath.concat(i2.collectionGroup, i2.documentId)), i2);
            e3.isFoundDocument() && (__PRIVATE_queryMatches(t2, e3) || r2.has(e3.key)) && // Either the document matches the given query, or it is mutated.
            (n3 = n3.insert(e3.key, e3));
          }
          return n3;
        });
      }
      getAllFromCollectionGroup(e, t2, n2, r2) {
        let i = __PRIVATE_mutableDocumentMap();
        const s2 = __PRIVATE_dbCollectionGroupKey(t2, n2), o2 = __PRIVATE_dbCollectionGroupKey(t2, IndexOffset.max());
        return __PRIVATE_remoteDocumentsStore(e).Z({
          index: ie,
          range: IDBKeyRange.bound(s2, o2, true)
        }, (e2, t3, n3) => {
          const s3 = this.cr(DocumentKey.fromSegments(t3.prefixPath.concat(t3.collectionGroup, t3.documentId)), t3);
          i = i.insert(s3.key, s3), i.size === r2 && n3.done();
        }).next(() => i);
      }
      newChangeBuffer(e) {
        return new __PRIVATE_IndexedDbRemoteDocumentChangeBuffer(this, !!e && e.trackRemovals);
      }
      getSize(e) {
        return this.getMetadata(e).next((e2) => e2.byteSize);
      }
      getMetadata(e) {
        return __PRIVATE_documentGlobalStore(e).get(_e).next((e2) => (__PRIVATE_hardAssert(!!e2), e2));
      }
      ur(e, t2) {
        return __PRIVATE_documentGlobalStore(e).put(_e, t2);
      }
      /**
       * Decodes `dbRemoteDoc` and returns the document (or an invalid document if
       * the document corresponds to the format used for sentinel deletes).
       */
      cr(e, t2) {
        if (t2) {
          const e2 = __PRIVATE_fromDbRemoteDocument(this.serializer, t2);
          if (!(e2.isNoDocument() && e2.version.isEqual(SnapshotVersion.min())))
            return e2;
        }
        return MutableDocument.newInvalidDocument(e);
      }
    };
    __name(__PRIVATE_IndexedDbRemoteDocumentCacheImpl, "__PRIVATE_IndexedDbRemoteDocumentCacheImpl");
    function __PRIVATE_newIndexedDbRemoteDocumentCache(e) {
      return new __PRIVATE_IndexedDbRemoteDocumentCacheImpl(e);
    }
    __name(__PRIVATE_newIndexedDbRemoteDocumentCache, "__PRIVATE_newIndexedDbRemoteDocumentCache");
    var __PRIVATE_IndexedDbRemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {
      /**
       * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
       * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
       * `getNewDocumentChanges()`.
       */
      constructor(e, t2) {
        super(), this.Ir = e, this.trackRemovals = t2, // A map of document sizes and read times prior to applying the changes in
        // this buffer.
        this.Er = new ObjectMap((e2) => e2.toString(), (e2, t3) => e2.isEqual(t3));
      }
      applyChanges(e) {
        const t2 = [];
        let n2 = 0, r2 = new SortedSet((e2, t3) => __PRIVATE_primitiveComparator(e2.canonicalString(), t3.canonicalString()));
        return this.changes.forEach((i, s2) => {
          const o2 = this.Er.get(i);
          if (t2.push(this.Ir.removeEntry(e, i, o2.readTime)), s2.isValidDocument()) {
            const _ = __PRIVATE_toDbRemoteDocument(this.Ir.serializer, s2);
            r2 = r2.add(i.path.popLast());
            const a2 = __PRIVATE_dbDocumentSize(_);
            n2 += a2 - o2.size, t2.push(this.Ir.addEntry(e, i, _));
          } else if (n2 -= o2.size, this.trackRemovals) {
            const n3 = __PRIVATE_toDbRemoteDocument(this.Ir.serializer, s2.convertToNoDocument(SnapshotVersion.min()));
            t2.push(this.Ir.addEntry(e, i, n3));
          }
        }), r2.forEach((n3) => {
          t2.push(this.Ir.indexManager.addToCollectionParentIndex(e, n3));
        }), t2.push(this.Ir.updateMetadata(e, n2)), PersistencePromise.waitFor(t2);
      }
      getFromCache(e, t2) {
        return this.Ir.lr(e, t2).next((e2) => (this.Er.set(t2, {
          size: e2.size,
          readTime: e2.document.readTime
        }), e2.document));
      }
      getAllFromCache(e, t2) {
        return this.Ir.Pr(e, t2).next(({ documents: e2, Tr: t3 }) => (
          // Note: `getAllFromCache` returns two maps instead of a single map from
          // keys to `DocumentSizeEntry`s. This is to allow returning the
          // `MutableDocumentMap` directly, without a conversion.
          (t3.forEach((t4, n2) => {
            this.Er.set(t4, {
              size: n2,
              readTime: e2.get(t4).readTime
            });
          }), e2)
        ));
      }
    };
    __name(__PRIVATE_IndexedDbRemoteDocumentChangeBuffer, "__PRIVATE_IndexedDbRemoteDocumentChangeBuffer");
    function __PRIVATE_documentGlobalStore(e) {
      return __PRIVATE_getStore(e, oe);
    }
    __name(__PRIVATE_documentGlobalStore, "__PRIVATE_documentGlobalStore");
    function __PRIVATE_remoteDocumentsStore(e) {
      return __PRIVATE_getStore(e, ee);
    }
    __name(__PRIVATE_remoteDocumentsStore, "__PRIVATE_remoteDocumentsStore");
    function __PRIVATE_dbKey(e) {
      const t2 = e.path.toArray();
      return [
        /* prefix path */
        t2.slice(0, t2.length - 2),
        /* collection id */
        t2[t2.length - 2],
        /* document id */
        t2[t2.length - 1]
      ];
    }
    __name(__PRIVATE_dbKey, "__PRIVATE_dbKey");
    function __PRIVATE_dbCollectionGroupKey(e, t2) {
      const n2 = t2.documentKey.path.toArray();
      return [
        /* collection id */
        e,
        __PRIVATE_toDbTimestampKey(t2.readTime),
        /* prefix path */
        n2.slice(0, n2.length - 2),
        /* document id */
        n2.length > 0 ? n2[n2.length - 1] : ""
      ];
    }
    __name(__PRIVATE_dbCollectionGroupKey, "__PRIVATE_dbCollectionGroupKey");
    function __PRIVATE_dbKeyComparator(e, t2) {
      const n2 = e.path.toArray(), r2 = t2.path.toArray();
      let i = 0;
      for (let e2 = 0; e2 < n2.length - 2 && e2 < r2.length - 2; ++e2)
        if (i = __PRIVATE_primitiveComparator(n2[e2], r2[e2]), i)
          return i;
      return i = __PRIVATE_primitiveComparator(n2.length, r2.length), i || (i = __PRIVATE_primitiveComparator(n2[n2.length - 2], r2[r2.length - 2]), i || __PRIVATE_primitiveComparator(n2[n2.length - 1], r2[r2.length - 1]));
    }
    __name(__PRIVATE_dbKeyComparator, "__PRIVATE_dbKeyComparator");
    var OverlayedDocument = class {
      constructor(e, t2) {
        this.overlayedDocument = e, this.mutatedFields = t2;
      }
    };
    __name(OverlayedDocument, "OverlayedDocument");
    var LocalDocumentsView = class {
      constructor(e, t2, n2, r2) {
        this.remoteDocumentCache = e, this.mutationQueue = t2, this.documentOverlayCache = n2, this.indexManager = r2;
      }
      /**
       * Get the local view of the document identified by `key`.
       *
       * @returns Local view of the document or null if we don't have any cached
       * state for it.
       */
      getDocument(e, t2) {
        let n2 = null;
        return this.documentOverlayCache.getOverlay(e, t2).next((r2) => (n2 = r2, this.remoteDocumentCache.getEntry(e, t2))).next((e2) => (null !== n2 && __PRIVATE_mutationApplyToLocalView(n2.mutation, e2, FieldMask.empty(), Timestamp.now()), e2));
      }
      /**
       * Gets the local view of the documents identified by `keys`.
       *
       * If we don't have cached state for a document in `keys`, a NoDocument will
       * be stored for that key in the resulting set.
       */
      getDocuments(e, t2) {
        return this.remoteDocumentCache.getEntries(e, t2).next((t3) => this.getLocalViewOfDocuments(e, t3, __PRIVATE_documentKeySet()).next(() => t3));
      }
      /**
       * Similar to `getDocuments`, but creates the local view from the given
       * `baseDocs` without retrieving documents from the local store.
       *
       * @param transaction - The transaction this operation is scoped to.
       * @param docs - The documents to apply local mutations to get the local views.
       * @param existenceStateChanged - The set of document keys whose existence state
       *   is changed. This is useful to determine if some documents overlay needs
       *   to be recalculated.
       */
      getLocalViewOfDocuments(e, t2, n2 = __PRIVATE_documentKeySet()) {
        const r2 = __PRIVATE_newOverlayMap();
        return this.populateOverlays(e, r2, t2).next(() => this.computeViews(e, t2, r2, n2).next((e2) => {
          let t3 = documentMap();
          return e2.forEach((e3, n3) => {
            t3 = t3.insert(e3, n3.overlayedDocument);
          }), t3;
        }));
      }
      /**
       * Gets the overlayed documents for the given document map, which will include
       * the local view of those documents and a `FieldMask` indicating which fields
       * are mutated locally, `null` if overlay is a Set or Delete mutation.
       */
      getOverlayedDocuments(e, t2) {
        const n2 = __PRIVATE_newOverlayMap();
        return this.populateOverlays(e, n2, t2).next(() => this.computeViews(e, t2, n2, __PRIVATE_documentKeySet()));
      }
      /**
       * Fetches the overlays for {@code docs} and adds them to provided overlay map
       * if the map does not already contain an entry for the given document key.
       */
      populateOverlays(e, t2, n2) {
        const r2 = [];
        return n2.forEach((e2) => {
          t2.has(e2) || r2.push(e2);
        }), this.documentOverlayCache.getOverlays(e, r2).next((e2) => {
          e2.forEach((e3, n3) => {
            t2.set(e3, n3);
          });
        });
      }
      /**
       * Computes the local view for the given documents.
       *
       * @param docs - The documents to compute views for. It also has the base
       *   version of the documents.
       * @param overlays - The overlays that need to be applied to the given base
       *   version of the documents.
       * @param existenceStateChanged - A set of documents whose existence states
       *   might have changed. This is used to determine if we need to re-calculate
       *   overlays from mutation queues.
       * @return A map represents the local documents view.
       */
      computeViews(e, t2, n2, r2) {
        let i = __PRIVATE_mutableDocumentMap();
        const s2 = __PRIVATE_newDocumentKeyMap(), o2 = (/* @__PURE__ */ __name(function __PRIVATE_newOverlayedDocumentMap() {
          return __PRIVATE_newDocumentKeyMap();
        }, "__PRIVATE_newOverlayedDocumentMap"))();
        return t2.forEach((e2, t3) => {
          const o3 = n2.get(t3.key);
          r2.has(t3.key) && (void 0 === o3 || o3.mutation instanceof __PRIVATE_PatchMutation) ? i = i.insert(t3.key, t3) : void 0 !== o3 ? (s2.set(t3.key, o3.mutation.getFieldMask()), __PRIVATE_mutationApplyToLocalView(o3.mutation, t3, o3.mutation.getFieldMask(), Timestamp.now())) : (
            // no overlay exists
            // Using EMPTY to indicate there is no overlay for the document.
            s2.set(t3.key, FieldMask.empty())
          );
        }), this.recalculateAndSaveOverlays(e, i).next((e2) => (e2.forEach((e3, t3) => s2.set(e3, t3)), t2.forEach((e3, t3) => {
          var n3;
          return o2.set(e3, new OverlayedDocument(t3, null !== (n3 = s2.get(e3)) && void 0 !== n3 ? n3 : null));
        }), o2));
      }
      recalculateAndSaveOverlays(e, t2) {
        const n2 = __PRIVATE_newDocumentKeyMap();
        let r2 = new SortedMap((e2, t3) => e2 - t3), i = __PRIVATE_documentKeySet();
        return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e, t2).next((e2) => {
          for (const i2 of e2)
            i2.keys().forEach((e3) => {
              const s2 = t2.get(e3);
              if (null === s2)
                return;
              let o2 = n2.get(e3) || FieldMask.empty();
              o2 = i2.applyToLocalView(s2, o2), n2.set(e3, o2);
              const _ = (r2.get(i2.batchId) || __PRIVATE_documentKeySet()).add(e3);
              r2 = r2.insert(i2.batchId, _);
            });
        }).next(() => {
          const s2 = [], o2 = r2.getReverseIterator();
          for (; o2.hasNext(); ) {
            const r3 = o2.getNext(), _ = r3.key, a2 = r3.value, u2 = __PRIVATE_newMutationMap();
            a2.forEach((e2) => {
              if (!i.has(e2)) {
                const r4 = __PRIVATE_calculateOverlayMutation(t2.get(e2), n2.get(e2));
                null !== r4 && u2.set(e2, r4), i = i.add(e2);
              }
            }), s2.push(this.documentOverlayCache.saveOverlays(e, _, u2));
          }
          return PersistencePromise.waitFor(s2);
        }).next(() => n2);
      }
      /**
       * Recalculates overlays by reading the documents from remote document cache
       * first, and saves them after they are calculated.
       */
      recalculateAndSaveOverlaysForDocumentKeys(e, t2) {
        return this.remoteDocumentCache.getEntries(e, t2).next((t3) => this.recalculateAndSaveOverlays(e, t3));
      }
      /**
       * Performs a query against the local view of all documents.
       *
       * @param transaction - The persistence transaction.
       * @param query - The query to match documents against.
       * @param offset - Read time and key to start scanning by (exclusive).
       * @param context - A optional tracker to keep a record of important details
       *   during database local query execution.
       */
      getDocumentsMatchingQuery(e, t2, n2, r2) {
        return (/* @__PURE__ */ __name(function __PRIVATE_isDocumentQuery$1(e2) {
          return DocumentKey.isDocumentKey(e2.path) && null === e2.collectionGroup && 0 === e2.filters.length;
        }, "__PRIVATE_isDocumentQuery$1"))(t2) ? this.getDocumentsMatchingDocumentQuery(e, t2.path) : __PRIVATE_isCollectionGroupQuery(t2) ? this.getDocumentsMatchingCollectionGroupQuery(e, t2, n2, r2) : this.getDocumentsMatchingCollectionQuery(e, t2, n2, r2);
      }
      /**
       * Given a collection group, returns the next documents that follow the provided offset, along
       * with an updated batch ID.
       *
       * <p>The documents returned by this method are ordered by remote version from the provided
       * offset. If there are no more remote documents after the provided offset, documents with
       * mutations in order of batch id from the offset are returned. Since all documents in a batch are
       * returned together, the total number of documents returned can exceed {@code count}.
       *
       * @param transaction
       * @param collectionGroup The collection group for the documents.
       * @param offset The offset to index into.
       * @param count The number of documents to return
       * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
       */
      getNextDocuments(e, t2, n2, r2) {
        return this.remoteDocumentCache.getAllFromCollectionGroup(e, t2, n2, r2).next((i) => {
          const s2 = r2 - i.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(e, t2, n2.largestBatchId, r2 - i.size) : PersistencePromise.resolve(__PRIVATE_newOverlayMap());
          let o2 = N, _ = i;
          return s2.next((t3) => PersistencePromise.forEach(t3, (t4, n3) => (o2 < n3.largestBatchId && (o2 = n3.largestBatchId), i.get(t4) ? PersistencePromise.resolve() : this.remoteDocumentCache.getEntry(e, t4).next((e2) => {
            _ = _.insert(t4, e2);
          }))).next(() => this.populateOverlays(e, t3, i)).next(() => this.computeViews(e, _, t3, __PRIVATE_documentKeySet())).next((e2) => ({
            batchId: o2,
            changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e2)
          })));
        });
      }
      getDocumentsMatchingDocumentQuery(e, t2) {
        return this.getDocument(e, new DocumentKey(t2)).next((e2) => {
          let t3 = documentMap();
          return e2.isFoundDocument() && (t3 = t3.insert(e2.key, e2)), t3;
        });
      }
      getDocumentsMatchingCollectionGroupQuery(e, t2, n2, r2) {
        const i = t2.collectionGroup;
        let s2 = documentMap();
        return this.indexManager.getCollectionParents(e, i).next((o2) => PersistencePromise.forEach(o2, (o3) => {
          const _ = (/* @__PURE__ */ __name(function __PRIVATE_asCollectionQueryAtPath(e2, t3) {
            return new __PRIVATE_QueryImpl(
              t3,
              /*collectionGroup=*/
              null,
              e2.explicitOrderBy.slice(),
              e2.filters.slice(),
              e2.limit,
              e2.limitType,
              e2.startAt,
              e2.endAt
            );
          }, "__PRIVATE_asCollectionQueryAtPath"))(t2, o3.child(i));
          return this.getDocumentsMatchingCollectionQuery(e, _, n2, r2).next((e2) => {
            e2.forEach((e3, t3) => {
              s2 = s2.insert(e3, t3);
            });
          });
        }).next(() => s2));
      }
      getDocumentsMatchingCollectionQuery(e, t2, n2, r2) {
        let i;
        return this.documentOverlayCache.getOverlaysForCollection(e, t2.path, n2.largestBatchId).next((s2) => (i = s2, this.remoteDocumentCache.getDocumentsMatchingQuery(e, t2, n2, i, r2))).next((e2) => {
          i.forEach((t3, n4) => {
            const r3 = n4.getKey();
            null === e2.get(r3) && (e2 = e2.insert(r3, MutableDocument.newInvalidDocument(r3)));
          });
          let n3 = documentMap();
          return e2.forEach((e3, r3) => {
            const s2 = i.get(e3);
            void 0 !== s2 && __PRIVATE_mutationApplyToLocalView(s2.mutation, r3, FieldMask.empty(), Timestamp.now()), // Finally, insert the documents that still match the query
            __PRIVATE_queryMatches(t2, r3) && (n3 = n3.insert(e3, r3));
          }), n3;
        });
      }
    };
    __name(LocalDocumentsView, "LocalDocumentsView");
    var __PRIVATE_MemoryBundleCache = class {
      constructor(e) {
        this.serializer = e, this.dr = /* @__PURE__ */ new Map(), this.Ar = /* @__PURE__ */ new Map();
      }
      getBundleMetadata(e, t2) {
        return PersistencePromise.resolve(this.dr.get(t2));
      }
      saveBundleMetadata(e, t2) {
        return this.dr.set(
          t2.id,
          /** Decodes a BundleMetadata proto into a BundleMetadata object. */
          (/* @__PURE__ */ __name(function __PRIVATE_fromBundleMetadata(e2) {
            return {
              id: e2.id,
              version: e2.version,
              createTime: __PRIVATE_fromVersion(e2.createTime)
            };
          }, "__PRIVATE_fromBundleMetadata"))(t2)
        ), PersistencePromise.resolve();
      }
      getNamedQuery(e, t2) {
        return PersistencePromise.resolve(this.Ar.get(t2));
      }
      saveNamedQuery(e, t2) {
        return this.Ar.set(t2.name, (/* @__PURE__ */ __name(function __PRIVATE_fromProtoNamedQuery(e2) {
          return {
            name: e2.name,
            query: __PRIVATE_fromBundledQuery(e2.bundledQuery),
            readTime: __PRIVATE_fromVersion(e2.readTime)
          };
        }, "__PRIVATE_fromProtoNamedQuery"))(t2)), PersistencePromise.resolve();
      }
    };
    __name(__PRIVATE_MemoryBundleCache, "__PRIVATE_MemoryBundleCache");
    var __PRIVATE_MemoryDocumentOverlayCache = class {
      constructor() {
        this.overlays = new SortedMap(DocumentKey.comparator), this.Rr = /* @__PURE__ */ new Map();
      }
      getOverlay(e, t2) {
        return PersistencePromise.resolve(this.overlays.get(t2));
      }
      getOverlays(e, t2) {
        const n2 = __PRIVATE_newOverlayMap();
        return PersistencePromise.forEach(t2, (t3) => this.getOverlay(e, t3).next((e2) => {
          null !== e2 && n2.set(t3, e2);
        })).next(() => n2);
      }
      saveOverlays(e, t2, n2) {
        return n2.forEach((n3, r2) => {
          this.Et(e, t2, r2);
        }), PersistencePromise.resolve();
      }
      removeOverlaysForBatchId(e, t2, n2) {
        const r2 = this.Rr.get(n2);
        return void 0 !== r2 && (r2.forEach((e2) => this.overlays = this.overlays.remove(e2)), this.Rr.delete(n2)), PersistencePromise.resolve();
      }
      getOverlaysForCollection(e, t2, n2) {
        const r2 = __PRIVATE_newOverlayMap(), i = t2.length + 1, s2 = new DocumentKey(t2.child("")), o2 = this.overlays.getIteratorFrom(s2);
        for (; o2.hasNext(); ) {
          const e2 = o2.getNext().value, s3 = e2.getKey();
          if (!t2.isPrefixOf(s3.path))
            break;
          s3.path.length === i && (e2.largestBatchId > n2 && r2.set(e2.getKey(), e2));
        }
        return PersistencePromise.resolve(r2);
      }
      getOverlaysForCollectionGroup(e, t2, n2, r2) {
        let i = new SortedMap((e2, t3) => e2 - t3);
        const s2 = this.overlays.getIterator();
        for (; s2.hasNext(); ) {
          const e2 = s2.getNext().value;
          if (e2.getKey().getCollectionGroup() === t2 && e2.largestBatchId > n2) {
            let t3 = i.get(e2.largestBatchId);
            null === t3 && (t3 = __PRIVATE_newOverlayMap(), i = i.insert(e2.largestBatchId, t3)), t3.set(e2.getKey(), e2);
          }
        }
        const o2 = __PRIVATE_newOverlayMap(), _ = i.getIterator();
        for (; _.hasNext(); ) {
          if (_.getNext().value.forEach((e2, t3) => o2.set(e2, t3)), o2.size() >= r2)
            break;
        }
        return PersistencePromise.resolve(o2);
      }
      Et(e, t2, n2) {
        const r2 = this.overlays.get(n2.key);
        if (null !== r2) {
          const e2 = this.Rr.get(r2.largestBatchId).delete(n2.key);
          this.Rr.set(r2.largestBatchId, e2);
        }
        this.overlays = this.overlays.insert(n2.key, new Overlay(t2, n2));
        let i = this.Rr.get(t2);
        void 0 === i && (i = __PRIVATE_documentKeySet(), this.Rr.set(t2, i)), this.Rr.set(t2, i.add(n2.key));
      }
    };
    __name(__PRIVATE_MemoryDocumentOverlayCache, "__PRIVATE_MemoryDocumentOverlayCache");
    var __PRIVATE_MemoryGlobalsCache = class {
      constructor() {
        this.sessionToken = ByteString.EMPTY_BYTE_STRING;
      }
      getSessionToken(e) {
        return PersistencePromise.resolve(this.sessionToken);
      }
      setSessionToken(e, t2) {
        return this.sessionToken = t2, PersistencePromise.resolve();
      }
    };
    __name(__PRIVATE_MemoryGlobalsCache, "__PRIVATE_MemoryGlobalsCache");
    var __PRIVATE_ReferenceSet = class {
      constructor() {
        this.Vr = new SortedSet(__PRIVATE_DocReference.mr), // A set of outstanding references to a document sorted by target id.
        this.gr = new SortedSet(__PRIVATE_DocReference.pr);
      }
      /** Returns true if the reference set contains no references. */
      isEmpty() {
        return this.Vr.isEmpty();
      }
      /** Adds a reference to the given document key for the given ID. */
      addReference(e, t2) {
        const n2 = new __PRIVATE_DocReference(e, t2);
        this.Vr = this.Vr.add(n2), this.gr = this.gr.add(n2);
      }
      /** Add references to the given document keys for the given ID. */
      yr(e, t2) {
        e.forEach((e2) => this.addReference(e2, t2));
      }
      /**
       * Removes a reference to the given document key for the given
       * ID.
       */
      removeReference(e, t2) {
        this.wr(new __PRIVATE_DocReference(e, t2));
      }
      Sr(e, t2) {
        e.forEach((e2) => this.removeReference(e2, t2));
      }
      /**
       * Clears all references with a given ID. Calls removeRef() for each key
       * removed.
       */
      br(e) {
        const t2 = new DocumentKey(new ResourcePath([])), n2 = new __PRIVATE_DocReference(t2, e), r2 = new __PRIVATE_DocReference(t2, e + 1), i = [];
        return this.gr.forEachInRange([n2, r2], (e2) => {
          this.wr(e2), i.push(e2.key);
        }), i;
      }
      Dr() {
        this.Vr.forEach((e) => this.wr(e));
      }
      wr(e) {
        this.Vr = this.Vr.delete(e), this.gr = this.gr.delete(e);
      }
      vr(e) {
        const t2 = new DocumentKey(new ResourcePath([])), n2 = new __PRIVATE_DocReference(t2, e), r2 = new __PRIVATE_DocReference(t2, e + 1);
        let i = __PRIVATE_documentKeySet();
        return this.gr.forEachInRange([n2, r2], (e2) => {
          i = i.add(e2.key);
        }), i;
      }
      containsKey(e) {
        const t2 = new __PRIVATE_DocReference(e, 0), n2 = this.Vr.firstAfterOrEqual(t2);
        return null !== n2 && e.isEqual(n2.key);
      }
    };
    __name(__PRIVATE_ReferenceSet, "__PRIVATE_ReferenceSet");
    var __PRIVATE_DocReference = class {
      constructor(e, t2) {
        this.key = e, this.Cr = t2;
      }
      /** Compare by key then by ID */
      static mr(e, t2) {
        return DocumentKey.comparator(e.key, t2.key) || __PRIVATE_primitiveComparator(e.Cr, t2.Cr);
      }
      /** Compare by ID then by key */
      static pr(e, t2) {
        return __PRIVATE_primitiveComparator(e.Cr, t2.Cr) || DocumentKey.comparator(e.key, t2.key);
      }
    };
    __name(__PRIVATE_DocReference, "__PRIVATE_DocReference");
    var __PRIVATE_MemoryMutationQueue = class {
      constructor(e, t2) {
        this.indexManager = e, this.referenceDelegate = t2, /**
         * The set of all mutations that have been sent but not yet been applied to
         * the backend.
         */
        this.mutationQueue = [], /** Next value to use when assigning sequential IDs to each mutation batch. */
        this.Fr = 1, /** An ordered mapping between documents and the mutations batch IDs. */
        this.Mr = new SortedSet(__PRIVATE_DocReference.mr);
      }
      checkEmpty(e) {
        return PersistencePromise.resolve(0 === this.mutationQueue.length);
      }
      addMutationBatch(e, t2, n2, r2) {
        const i = this.Fr;
        this.Fr++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
        const s2 = new MutationBatch(i, t2, n2, r2);
        this.mutationQueue.push(s2);
        for (const t3 of r2)
          this.Mr = this.Mr.add(new __PRIVATE_DocReference(t3.key, i)), this.indexManager.addToCollectionParentIndex(e, t3.key.path.popLast());
        return PersistencePromise.resolve(s2);
      }
      lookupMutationBatch(e, t2) {
        return PersistencePromise.resolve(this.Or(t2));
      }
      getNextMutationBatchAfterBatchId(e, t2) {
        const n2 = t2 + 1, r2 = this.Nr(n2), i = r2 < 0 ? 0 : r2;
        return PersistencePromise.resolve(this.mutationQueue.length > i ? this.mutationQueue[i] : null);
      }
      getHighestUnacknowledgedBatchId() {
        return PersistencePromise.resolve(0 === this.mutationQueue.length ? Q : this.Fr - 1);
      }
      getAllMutationBatches(e) {
        return PersistencePromise.resolve(this.mutationQueue.slice());
      }
      getAllMutationBatchesAffectingDocumentKey(e, t2) {
        const n2 = new __PRIVATE_DocReference(t2, 0), r2 = new __PRIVATE_DocReference(t2, Number.POSITIVE_INFINITY), i = [];
        return this.Mr.forEachInRange([n2, r2], (e2) => {
          const t3 = this.Or(e2.Cr);
          i.push(t3);
        }), PersistencePromise.resolve(i);
      }
      getAllMutationBatchesAffectingDocumentKeys(e, t2) {
        let n2 = new SortedSet(__PRIVATE_primitiveComparator);
        return t2.forEach((e2) => {
          const t3 = new __PRIVATE_DocReference(e2, 0), r2 = new __PRIVATE_DocReference(e2, Number.POSITIVE_INFINITY);
          this.Mr.forEachInRange([t3, r2], (e3) => {
            n2 = n2.add(e3.Cr);
          });
        }), PersistencePromise.resolve(this.Br(n2));
      }
      getAllMutationBatchesAffectingQuery(e, t2) {
        const n2 = t2.path, r2 = n2.length + 1;
        let i = n2;
        DocumentKey.isDocumentKey(i) || (i = i.child(""));
        const s2 = new __PRIVATE_DocReference(new DocumentKey(i), 0);
        let o2 = new SortedSet(__PRIVATE_primitiveComparator);
        return this.Mr.forEachWhile((e2) => {
          const t3 = e2.key.path;
          return !!n2.isPrefixOf(t3) && // Rows with document keys more than one segment longer than the query
          // path can't be matches. For example, a query on 'rooms' can't match
          // the document /rooms/abc/messages/xyx.
          // TODO(mcg): we'll need a different scanner when we implement
          // ancestor queries.
          (t3.length === r2 && (o2 = o2.add(e2.Cr)), true);
        }, s2), PersistencePromise.resolve(this.Br(o2));
      }
      Br(e) {
        const t2 = [];
        return e.forEach((e2) => {
          const n2 = this.Or(e2);
          null !== n2 && t2.push(n2);
        }), t2;
      }
      removeMutationBatch(e, t2) {
        __PRIVATE_hardAssert(0 === this.Lr(t2.batchId, "removed")), this.mutationQueue.shift();
        let n2 = this.Mr;
        return PersistencePromise.forEach(t2.mutations, (r2) => {
          const i = new __PRIVATE_DocReference(r2.key, t2.batchId);
          return n2 = n2.delete(i), this.referenceDelegate.markPotentiallyOrphaned(e, r2.key);
        }).next(() => {
          this.Mr = n2;
        });
      }
      qn(e) {
      }
      containsKey(e, t2) {
        const n2 = new __PRIVATE_DocReference(t2, 0), r2 = this.Mr.firstAfterOrEqual(n2);
        return PersistencePromise.resolve(t2.isEqual(r2 && r2.key));
      }
      performConsistencyCheck(e) {
        return this.mutationQueue.length, PersistencePromise.resolve();
      }
      /**
       * Finds the index of the given batchId in the mutation queue and asserts that
       * the resulting index is within the bounds of the queue.
       *
       * @param batchId - The batchId to search for
       * @param action - A description of what the caller is doing, phrased in passive
       * form (e.g. "acknowledged" in a routine that acknowledges batches).
       */
      Lr(e, t2) {
        return this.Nr(e);
      }
      /**
       * Finds the index of the given batchId in the mutation queue. This operation
       * is O(1).
       *
       * @returns The computed index of the batch with the given batchId, based on
       * the state of the queue. Note this index can be negative if the requested
       * batchId has already been removed from the queue or past the end of the
       * queue if the batchId is larger than the last added batch.
       */
      Nr(e) {
        if (0 === this.mutationQueue.length)
          return 0;
        return e - this.mutationQueue[0].batchId;
      }
      /**
       * A version of lookupMutationBatch that doesn't return a promise, this makes
       * other functions that uses this code easier to read and more efficient.
       */
      Or(e) {
        const t2 = this.Nr(e);
        if (t2 < 0 || t2 >= this.mutationQueue.length)
          return null;
        return this.mutationQueue[t2];
      }
    };
    __name(__PRIVATE_MemoryMutationQueue, "__PRIVATE_MemoryMutationQueue");
    var __PRIVATE_MemoryRemoteDocumentCacheImpl = class {
      /**
       * @param sizer - Used to assess the size of a document. For eager GC, this is
       * expected to just return 0 to avoid unnecessarily doing the work of
       * calculating the size.
       */
      constructor(e) {
        this.kr = e, /** Underlying cache of documents and their read times. */
        this.docs = (/* @__PURE__ */ __name(function __PRIVATE_documentEntryMap() {
          return new SortedMap(DocumentKey.comparator);
        }, "__PRIVATE_documentEntryMap"))(), /** Size of all cached documents. */
        this.size = 0;
      }
      setIndexManager(e) {
        this.indexManager = e;
      }
      /**
       * Adds the supplied entry to the cache and updates the cache size as appropriate.
       *
       * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */
      addEntry(e, t2) {
        const n2 = t2.key, r2 = this.docs.get(n2), i = r2 ? r2.size : 0, s2 = this.kr(t2);
        return this.docs = this.docs.insert(n2, {
          document: t2.mutableCopy(),
          size: s2
        }), this.size += s2 - i, this.indexManager.addToCollectionParentIndex(e, n2.path.popLast());
      }
      /**
       * Removes the specified entry from the cache and updates the cache size as appropriate.
       *
       * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
       * returned by `newChangeBuffer()`.
       */
      removeEntry(e) {
        const t2 = this.docs.get(e);
        t2 && (this.docs = this.docs.remove(e), this.size -= t2.size);
      }
      getEntry(e, t2) {
        const n2 = this.docs.get(t2);
        return PersistencePromise.resolve(n2 ? n2.document.mutableCopy() : MutableDocument.newInvalidDocument(t2));
      }
      getEntries(e, t2) {
        let n2 = __PRIVATE_mutableDocumentMap();
        return t2.forEach((e2) => {
          const t3 = this.docs.get(e2);
          n2 = n2.insert(e2, t3 ? t3.document.mutableCopy() : MutableDocument.newInvalidDocument(e2));
        }), PersistencePromise.resolve(n2);
      }
      getDocumentsMatchingQuery(e, t2, n2, r2) {
        let i = __PRIVATE_mutableDocumentMap();
        const s2 = t2.path, o2 = new DocumentKey(s2.child("__id-9223372036854775808__")), _ = this.docs.getIteratorFrom(o2);
        for (; _.hasNext(); ) {
          const { key: e2, value: { document: o3 } } = _.getNext();
          if (!s2.isPrefixOf(e2.path))
            break;
          e2.path.length > s2.length + 1 || (__PRIVATE_indexOffsetComparator(__PRIVATE_newIndexOffsetFromDocument(o3), n2) <= 0 || (r2.has(o3.key) || __PRIVATE_queryMatches(t2, o3)) && (i = i.insert(o3.key, o3.mutableCopy())));
        }
        return PersistencePromise.resolve(i);
      }
      getAllFromCollectionGroup(e, t2, n2, r2) {
        fail();
      }
      qr(e, t2) {
        return PersistencePromise.forEach(this.docs, (e2) => t2(e2));
      }
      newChangeBuffer(e) {
        return new __PRIVATE_MemoryRemoteDocumentChangeBuffer(this);
      }
      getSize(e) {
        return PersistencePromise.resolve(this.size);
      }
    };
    __name(__PRIVATE_MemoryRemoteDocumentCacheImpl, "__PRIVATE_MemoryRemoteDocumentCacheImpl");
    var __PRIVATE_MemoryRemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {
      constructor(e) {
        super(), this.Ir = e;
      }
      applyChanges(e) {
        const t2 = [];
        return this.changes.forEach((n2, r2) => {
          r2.isValidDocument() ? t2.push(this.Ir.addEntry(e, r2)) : this.Ir.removeEntry(n2);
        }), PersistencePromise.waitFor(t2);
      }
      getFromCache(e, t2) {
        return this.Ir.getEntry(e, t2);
      }
      getAllFromCache(e, t2) {
        return this.Ir.getEntries(e, t2);
      }
    };
    __name(__PRIVATE_MemoryRemoteDocumentChangeBuffer, "__PRIVATE_MemoryRemoteDocumentChangeBuffer");
    var __PRIVATE_MemoryTargetCache = class {
      constructor(e) {
        this.persistence = e, /**
         * Maps a target to the data about that target
         */
        this.Qr = new ObjectMap((e2) => __PRIVATE_canonifyTarget(e2), __PRIVATE_targetEquals), /** The last received snapshot version. */
        this.lastRemoteSnapshotVersion = SnapshotVersion.min(), /** The highest numbered target ID encountered. */
        this.highestTargetId = 0, /** The highest sequence number encountered. */
        this.$r = 0, /**
         * A ordered bidirectional mapping between documents and the remote target
         * IDs.
         */
        this.Kr = new __PRIVATE_ReferenceSet(), this.targetCount = 0, this.Ur = __PRIVATE_TargetIdGenerator.Kn();
      }
      forEachTarget(e, t2) {
        return this.Qr.forEach((e2, n2) => t2(n2)), PersistencePromise.resolve();
      }
      getLastRemoteSnapshotVersion(e) {
        return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
      }
      getHighestSequenceNumber(e) {
        return PersistencePromise.resolve(this.$r);
      }
      allocateTargetId(e) {
        return this.highestTargetId = this.Ur.next(), PersistencePromise.resolve(this.highestTargetId);
      }
      setTargetsMetadata(e, t2, n2) {
        return n2 && (this.lastRemoteSnapshotVersion = n2), t2 > this.$r && (this.$r = t2), PersistencePromise.resolve();
      }
      zn(e) {
        this.Qr.set(e.target, e);
        const t2 = e.targetId;
        t2 > this.highestTargetId && (this.Ur = new __PRIVATE_TargetIdGenerator(t2), this.highestTargetId = t2), e.sequenceNumber > this.$r && (this.$r = e.sequenceNumber);
      }
      addTargetData(e, t2) {
        return this.zn(t2), this.targetCount += 1, PersistencePromise.resolve();
      }
      updateTargetData(e, t2) {
        return this.zn(t2), PersistencePromise.resolve();
      }
      removeTargetData(e, t2) {
        return this.Qr.delete(t2.target), this.Kr.br(t2.targetId), this.targetCount -= 1, PersistencePromise.resolve();
      }
      removeTargets(e, t2, n2) {
        let r2 = 0;
        const i = [];
        return this.Qr.forEach((s2, o2) => {
          o2.sequenceNumber <= t2 && null === n2.get(o2.targetId) && (this.Qr.delete(s2), i.push(this.removeMatchingKeysForTargetId(e, o2.targetId)), r2++);
        }), PersistencePromise.waitFor(i).next(() => r2);
      }
      getTargetCount(e) {
        return PersistencePromise.resolve(this.targetCount);
      }
      getTargetData(e, t2) {
        const n2 = this.Qr.get(t2) || null;
        return PersistencePromise.resolve(n2);
      }
      addMatchingKeys(e, t2, n2) {
        return this.Kr.yr(t2, n2), PersistencePromise.resolve();
      }
      removeMatchingKeys(e, t2, n2) {
        this.Kr.Sr(t2, n2);
        const r2 = this.persistence.referenceDelegate, i = [];
        return r2 && t2.forEach((t3) => {
          i.push(r2.markPotentiallyOrphaned(e, t3));
        }), PersistencePromise.waitFor(i);
      }
      removeMatchingKeysForTargetId(e, t2) {
        return this.Kr.br(t2), PersistencePromise.resolve();
      }
      getMatchingKeysForTargetId(e, t2) {
        const n2 = this.Kr.vr(t2);
        return PersistencePromise.resolve(n2);
      }
      containsKey(e, t2) {
        return PersistencePromise.resolve(this.Kr.containsKey(t2));
      }
    };
    __name(__PRIVATE_MemoryTargetCache, "__PRIVATE_MemoryTargetCache");
    var __PRIVATE_MemoryPersistence = class {
      /**
       * The constructor accepts a factory for creating a reference delegate. This
       * allows both the delegate and this instance to have strong references to
       * each other without having nullable fields that would then need to be
       * checked or asserted on every access.
       */
      constructor(e, t2) {
        this.Wr = {}, this.overlays = {}, this.Gr = new __PRIVATE_ListenSequence(0), this.zr = false, this.zr = true, this.jr = new __PRIVATE_MemoryGlobalsCache(), this.referenceDelegate = e(this), this.Hr = new __PRIVATE_MemoryTargetCache(this);
        this.indexManager = new __PRIVATE_MemoryIndexManager(), this.remoteDocumentCache = (/* @__PURE__ */ __name(function __PRIVATE_newMemoryRemoteDocumentCache(e2) {
          return new __PRIVATE_MemoryRemoteDocumentCacheImpl(e2);
        }, "__PRIVATE_newMemoryRemoteDocumentCache"))((e2) => this.referenceDelegate.Jr(e2)), this.serializer = new __PRIVATE_LocalSerializer(t2), this.Yr = new __PRIVATE_MemoryBundleCache(this.serializer);
      }
      start() {
        return Promise.resolve();
      }
      shutdown() {
        return this.zr = false, Promise.resolve();
      }
      get started() {
        return this.zr;
      }
      setDatabaseDeletedListener() {
      }
      setNetworkEnabled() {
      }
      getIndexManager(e) {
        return this.indexManager;
      }
      getDocumentOverlayCache(e) {
        let t2 = this.overlays[e.toKey()];
        return t2 || (t2 = new __PRIVATE_MemoryDocumentOverlayCache(), this.overlays[e.toKey()] = t2), t2;
      }
      getMutationQueue(e, t2) {
        let n2 = this.Wr[e.toKey()];
        return n2 || (n2 = new __PRIVATE_MemoryMutationQueue(t2, this.referenceDelegate), this.Wr[e.toKey()] = n2), n2;
      }
      getGlobalsCache() {
        return this.jr;
      }
      getTargetCache() {
        return this.Hr;
      }
      getRemoteDocumentCache() {
        return this.remoteDocumentCache;
      }
      getBundleCache() {
        return this.Yr;
      }
      runTransaction(e, t2, n2) {
        __PRIVATE_logDebug("MemoryPersistence", "Starting transaction:", e);
        const r2 = new __PRIVATE_MemoryTransaction(this.Gr.next());
        return this.referenceDelegate.Zr(), n2(r2).next((e2) => this.referenceDelegate.Xr(r2).next(() => e2)).toPromise().then((e2) => (r2.raiseOnCommittedEvent(), e2));
      }
      ei(e, t2) {
        return PersistencePromise.or(Object.values(this.Wr).map((n2) => () => n2.containsKey(e, t2)));
      }
    };
    __name(__PRIVATE_MemoryPersistence, "__PRIVATE_MemoryPersistence");
    var __PRIVATE_MemoryTransaction = class extends PersistenceTransaction {
      constructor(e) {
        super(), this.currentSequenceNumber = e;
      }
    };
    __name(__PRIVATE_MemoryTransaction, "__PRIVATE_MemoryTransaction");
    var __PRIVATE_MemoryEagerDelegate = class {
      constructor(e) {
        this.persistence = e, /** Tracks all documents that are active in Query views. */
        this.ti = new __PRIVATE_ReferenceSet(), /** The list of documents that are potentially GCed after each transaction. */
        this.ni = null;
      }
      static ri(e) {
        return new __PRIVATE_MemoryEagerDelegate(e);
      }
      get ii() {
        if (this.ni)
          return this.ni;
        throw fail();
      }
      addReference(e, t2, n2) {
        return this.ti.addReference(n2, t2), this.ii.delete(n2.toString()), PersistencePromise.resolve();
      }
      removeReference(e, t2, n2) {
        return this.ti.removeReference(n2, t2), this.ii.add(n2.toString()), PersistencePromise.resolve();
      }
      markPotentiallyOrphaned(e, t2) {
        return this.ii.add(t2.toString()), PersistencePromise.resolve();
      }
      removeTarget(e, t2) {
        this.ti.br(t2.targetId).forEach((e2) => this.ii.add(e2.toString()));
        const n2 = this.persistence.getTargetCache();
        return n2.getMatchingKeysForTargetId(e, t2.targetId).next((e2) => {
          e2.forEach((e3) => this.ii.add(e3.toString()));
        }).next(() => n2.removeTargetData(e, t2));
      }
      Zr() {
        this.ni = /* @__PURE__ */ new Set();
      }
      Xr(e) {
        const t2 = this.persistence.getRemoteDocumentCache().newChangeBuffer();
        return PersistencePromise.forEach(this.ii, (n2) => {
          const r2 = DocumentKey.fromPath(n2);
          return this.si(e, r2).next((e2) => {
            e2 || t2.removeEntry(r2, SnapshotVersion.min());
          });
        }).next(() => (this.ni = null, t2.apply(e)));
      }
      updateLimboDocument(e, t2) {
        return this.si(e, t2).next((e2) => {
          e2 ? this.ii.delete(t2.toString()) : this.ii.add(t2.toString());
        });
      }
      Jr(e) {
        return 0;
      }
      si(e, t2) {
        return PersistencePromise.or([() => PersistencePromise.resolve(this.ti.containsKey(t2)), () => this.persistence.getTargetCache().containsKey(e, t2), () => this.persistence.ei(e, t2)]);
      }
    };
    __name(__PRIVATE_MemoryEagerDelegate, "__PRIVATE_MemoryEagerDelegate");
    var __PRIVATE_MemoryLruDelegate = class {
      constructor(e, t2) {
        this.persistence = e, this.oi = new ObjectMap((e2) => __PRIVATE_encodeResourcePath(e2.path), (e2, t3) => e2.isEqual(t3)), this.garbageCollector = __PRIVATE_newLruGarbageCollector(this, t2);
      }
      static ri(e, t2) {
        return new __PRIVATE_MemoryLruDelegate(e, t2);
      }
      // No-ops, present so memory persistence doesn't have to care which delegate
      // it has.
      Zr() {
      }
      Xr(e) {
        return PersistencePromise.resolve();
      }
      forEachTarget(e, t2) {
        return this.persistence.getTargetCache().forEachTarget(e, t2);
      }
      nr(e) {
        const t2 = this.sr(e);
        return this.persistence.getTargetCache().getTargetCount(e).next((e2) => t2.next((t3) => e2 + t3));
      }
      sr(e) {
        let t2 = 0;
        return this.rr(e, (e2) => {
          t2++;
        }).next(() => t2);
      }
      rr(e, t2) {
        return PersistencePromise.forEach(this.oi, (n2, r2) => this.ar(e, n2, r2).next((e2) => e2 ? PersistencePromise.resolve() : t2(r2)));
      }
      removeTargets(e, t2, n2) {
        return this.persistence.getTargetCache().removeTargets(e, t2, n2);
      }
      removeOrphanedDocuments(e, t2) {
        let n2 = 0;
        const r2 = this.persistence.getRemoteDocumentCache(), i = r2.newChangeBuffer();
        return r2.qr(e, (r3) => this.ar(e, r3, t2).next((e2) => {
          e2 || (n2++, i.removeEntry(r3, SnapshotVersion.min()));
        })).next(() => i.apply(e)).next(() => n2);
      }
      markPotentiallyOrphaned(e, t2) {
        return this.oi.set(t2, e.currentSequenceNumber), PersistencePromise.resolve();
      }
      removeTarget(e, t2) {
        const n2 = t2.withSequenceNumber(e.currentSequenceNumber);
        return this.persistence.getTargetCache().updateTargetData(e, n2);
      }
      addReference(e, t2, n2) {
        return this.oi.set(n2, e.currentSequenceNumber), PersistencePromise.resolve();
      }
      removeReference(e, t2, n2) {
        return this.oi.set(n2, e.currentSequenceNumber), PersistencePromise.resolve();
      }
      updateLimboDocument(e, t2) {
        return this.oi.set(t2, e.currentSequenceNumber), PersistencePromise.resolve();
      }
      Jr(e) {
        let t2 = e.key.toString().length;
        return e.isFoundDocument() && (t2 += __PRIVATE_estimateByteSize(e.data.value)), t2;
      }
      ar(e, t2, n2) {
        return PersistencePromise.or([() => this.persistence.ei(e, t2), () => this.persistence.getTargetCache().containsKey(e, t2), () => {
          const e2 = this.oi.get(t2);
          return PersistencePromise.resolve(void 0 !== e2 && e2 > n2);
        }]);
      }
      getCacheSize(e) {
        return this.persistence.getRemoteDocumentCache().getSize(e);
      }
    };
    __name(__PRIVATE_MemoryLruDelegate, "__PRIVATE_MemoryLruDelegate");
    var __PRIVATE_SchemaConverter = class {
      constructor(e) {
        this.serializer = e;
      }
      /**
       * Performs database creation and schema upgrades.
       *
       * Note that in production, this method is only ever used to upgrade the schema
       * to SCHEMA_VERSION. Different values of toVersion are only used for testing
       * and local feature development.
       */
      B(e, t2, n2, r2) {
        const i = new __PRIVATE_SimpleDbTransaction("createOrUpgrade", t2);
        n2 < 1 && r2 >= 1 && (!(/* @__PURE__ */ __name(function __PRIVATE_createPrimaryClientStore(e2) {
          e2.createObjectStore(U);
        }, "__PRIVATE_createPrimaryClientStore"))(e), (/* @__PURE__ */ __name(function __PRIVATE_createMutationQueue(e2) {
          e2.createObjectStore(G, {
            keyPath: z
          });
          const t3 = e2.createObjectStore(j, {
            keyPath: H,
            autoIncrement: true
          });
          t3.createIndex(J, Y, {
            unique: true
          }), e2.createObjectStore(X);
        }, "__PRIVATE_createMutationQueue"))(e), __PRIVATE_createQueryCache(e), (/* @__PURE__ */ __name(function __PRIVATE_createLegacyRemoteDocumentCache(e2) {
          e2.createObjectStore(K);
        }, "__PRIVATE_createLegacyRemoteDocumentCache"))(e));
        let s2 = PersistencePromise.resolve();
        return n2 < 3 && r2 >= 3 && // Brand new clients don't need to drop and recreate--only clients that
        // potentially have corrupt data.
        (0 !== n2 && (!(/* @__PURE__ */ __name(function __PRIVATE_dropQueryCache(e2) {
          e2.deleteObjectStore(le), e2.deleteObjectStore(ae), e2.deleteObjectStore(Ee);
        }, "__PRIVATE_dropQueryCache"))(e), __PRIVATE_createQueryCache(e)), s2 = s2.next(() => (
          /**
          * Creates the target global singleton row.
          *
          * @param txn - The version upgrade transaction for indexeddb
          */
          (/* @__PURE__ */ __name(function __PRIVATE_writeEmptyTargetGlobalEntry(e2) {
            const t3 = e2.store(Ee), n3 = {
              highestTargetId: 0,
              highestListenSequenceNumber: 0,
              lastRemoteSnapshotVersion: SnapshotVersion.min().toTimestamp(),
              targetCount: 0
            };
            return t3.put(Ie, n3);
          }, "__PRIVATE_writeEmptyTargetGlobalEntry"))(i)
        ))), n2 < 4 && r2 >= 4 && (0 !== n2 && // Schema version 3 uses auto-generated keys to generate globally unique
        // mutation batch IDs (this was previously ensured internally by the
        // client). To migrate to the new schema, we have to read all mutations
        // and write them back out. We preserve the existing batch IDs to guarantee
        // consistency with other object stores. Any further mutation batch IDs will
        // be auto-generated.
        (s2 = s2.next(() => (/* @__PURE__ */ __name(function __PRIVATE_upgradeMutationBatchSchemaAndMigrateData(e2, t3) {
          const n3 = t3.store(j);
          return n3.G().next((n4) => {
            e2.deleteObjectStore(j);
            e2.createObjectStore(j, {
              keyPath: H,
              autoIncrement: true
            }).createIndex(J, Y, {
              unique: true
            });
            const r3 = t3.store(j), i2 = n4.map((e3) => r3.put(e3));
            return PersistencePromise.waitFor(i2);
          });
        }, "__PRIVATE_upgradeMutationBatchSchemaAndMigrateData"))(e, i))), s2 = s2.next(() => {
          !(/* @__PURE__ */ __name(function __PRIVATE_createClientMetadataStore(e2) {
            e2.createObjectStore(Re, {
              keyPath: Ve
            });
          }, "__PRIVATE_createClientMetadataStore"))(e);
        })), n2 < 5 && r2 >= 5 && (s2 = s2.next(() => this._i(i))), n2 < 6 && r2 >= 6 && (s2 = s2.next(() => ((/* @__PURE__ */ __name(function __PRIVATE_createDocumentGlobalStore(e2) {
          e2.createObjectStore(oe);
        }, "__PRIVATE_createDocumentGlobalStore"))(e), this.ai(i)))), n2 < 7 && r2 >= 7 && (s2 = s2.next(() => this.ui(i))), n2 < 8 && r2 >= 8 && (s2 = s2.next(() => this.ci(e, i))), n2 < 9 && r2 >= 9 && (s2 = s2.next(() => {
          !(/* @__PURE__ */ __name(function __PRIVATE_dropRemoteDocumentChangesStore(e2) {
            e2.objectStoreNames.contains("remoteDocumentChanges") && e2.deleteObjectStore("remoteDocumentChanges");
          }, "__PRIVATE_dropRemoteDocumentChangesStore"))(e);
        })), n2 < 10 && r2 >= 10 && (s2 = s2.next(() => this.li(i))), n2 < 11 && r2 >= 11 && (s2 = s2.next(() => {
          !(/* @__PURE__ */ __name(function __PRIVATE_createBundlesStore(e2) {
            e2.createObjectStore(me, {
              keyPath: fe
            });
          }, "__PRIVATE_createBundlesStore"))(e), (/* @__PURE__ */ __name(function __PRIVATE_createNamedQueriesStore(e2) {
            e2.createObjectStore(ge, {
              keyPath: pe
            });
          }, "__PRIVATE_createNamedQueriesStore"))(e);
        })), n2 < 12 && r2 >= 12 && (s2 = s2.next(() => {
          !(/* @__PURE__ */ __name(function __PRIVATE_createDocumentOverlayStore(e2) {
            const t3 = e2.createObjectStore(Be, {
              keyPath: Le
            });
            t3.createIndex(ke, qe, {
              unique: false
            }), t3.createIndex(Qe, $e, {
              unique: false
            });
          }, "__PRIVATE_createDocumentOverlayStore"))(e);
        })), n2 < 13 && r2 >= 13 && (s2 = s2.next(() => (/* @__PURE__ */ __name(function __PRIVATE_createRemoteDocumentCache(e2) {
          const t3 = e2.createObjectStore(ee, {
            keyPath: te
          });
          t3.createIndex(ne, re), t3.createIndex(ie, se);
        }, "__PRIVATE_createRemoteDocumentCache"))(e)).next(() => this.hi(e, i)).next(() => e.deleteObjectStore(K))), n2 < 14 && r2 >= 14 && (s2 = s2.next(() => this.Pi(e, i))), n2 < 15 && r2 >= 15 && (s2 = s2.next(() => (/* @__PURE__ */ __name(function __PRIVATE_createFieldIndex(e2) {
          const t3 = e2.createObjectStore(ye, {
            keyPath: we,
            autoIncrement: true
          });
          t3.createIndex(Se, be, {
            unique: false
          });
          const n3 = e2.createObjectStore(De, {
            keyPath: ve
          });
          n3.createIndex(Ce, Fe, {
            unique: false
          });
          const r3 = e2.createObjectStore(Me, {
            keyPath: xe
          });
          r3.createIndex(Oe, Ne, {
            unique: false
          });
        }, "__PRIVATE_createFieldIndex"))(e))), n2 < 16 && r2 >= 16 && // Clear the object stores to remove possibly corrupted index entries
        (s2 = s2.next(() => {
          t2.objectStore(De).clear();
        }).next(() => {
          t2.objectStore(Me).clear();
        })), n2 < 17 && r2 >= 17 && (s2 = s2.next(() => {
          !(/* @__PURE__ */ __name(function __PRIVATE_createGlobalsStore(e2) {
            e2.createObjectStore(Ke, {
              keyPath: Ue
            });
          }, "__PRIVATE_createGlobalsStore"))(e);
        })), s2;
      }
      ai(e) {
        let t2 = 0;
        return e.store(K).Z((e2, n2) => {
          t2 += __PRIVATE_dbDocumentSize(n2);
        }).next(() => {
          const n2 = {
            byteSize: t2
          };
          return e.store(oe).put(_e, n2);
        });
      }
      _i(e) {
        const t2 = e.store(G), n2 = e.store(j);
        return t2.G().next((t3) => PersistencePromise.forEach(t3, (t4) => {
          const r2 = IDBKeyRange.bound([t4.userId, Q], [t4.userId, t4.lastAcknowledgedBatchId]);
          return n2.G(J, r2).next((n3) => PersistencePromise.forEach(n3, (n4) => {
            __PRIVATE_hardAssert(n4.userId === t4.userId);
            const r3 = __PRIVATE_fromDbMutationBatch(this.serializer, n4);
            return removeMutationBatch(e, t4.userId, r3).next(() => {
            });
          }));
        }));
      }
      /**
       * Ensures that every document in the remote document cache has a corresponding sentinel row
       * with a sequence number. Missing rows are given the most recently used sequence number.
       */
      ui(e) {
        const t2 = e.store(le), n2 = e.store(K);
        return e.store(Ee).get(Ie).next((e2) => {
          const r2 = [];
          return n2.Z((n3, i) => {
            const s2 = new ResourcePath(n3), o2 = (/* @__PURE__ */ __name(function __PRIVATE_sentinelKey(e3) {
              return [0, __PRIVATE_encodeResourcePath(e3)];
            }, "__PRIVATE_sentinelKey"))(s2);
            r2.push(t2.get(o2).next((n4) => n4 ? PersistencePromise.resolve() : ((n5) => t2.put({
              targetId: 0,
              path: __PRIVATE_encodeResourcePath(n5),
              sequenceNumber: e2.highestListenSequenceNumber
            }))(s2)));
          }).next(() => PersistencePromise.waitFor(r2));
        });
      }
      ci(e, t2) {
        e.createObjectStore(de, {
          keyPath: Ae
        });
        const n2 = t2.store(de), r2 = new __PRIVATE_MemoryCollectionParentIndex(), addEntry = /* @__PURE__ */ __name((e2) => {
          if (r2.add(e2)) {
            const t3 = e2.lastSegment(), r3 = e2.popLast();
            return n2.put({
              collectionId: t3,
              parent: __PRIVATE_encodeResourcePath(r3)
            });
          }
        }, "addEntry");
        return t2.store(K).Z({
          Y: true
        }, (e2, t3) => {
          const n3 = new ResourcePath(e2);
          return addEntry(n3.popLast());
        }).next(() => t2.store(X).Z({
          Y: true
        }, ([e2, t3, n3], r3) => {
          const i = __PRIVATE_decodeResourcePath(t3);
          return addEntry(i.popLast());
        }));
      }
      li(e) {
        const t2 = e.store(ae);
        return t2.Z((e2, n2) => {
          const r2 = __PRIVATE_fromDbTarget(n2), i = __PRIVATE_toDbTarget(this.serializer, r2);
          return t2.put(i);
        });
      }
      hi(e, t2) {
        const n2 = t2.store(K), r2 = [];
        return n2.Z((e2, n3) => {
          const i = t2.store(ee), s2 = (/* @__PURE__ */ __name(function __PRIVATE_extractKey(e3) {
            return e3.document ? new DocumentKey(ResourcePath.fromString(e3.document.name).popFirst(5)) : e3.noDocument ? DocumentKey.fromSegments(e3.noDocument.path) : e3.unknownDocument ? DocumentKey.fromSegments(e3.unknownDocument.path) : fail();
          }, "__PRIVATE_extractKey"))(n3).path.toArray(), o2 = {
            prefixPath: s2.slice(0, s2.length - 2),
            collectionGroup: s2[s2.length - 2],
            documentId: s2[s2.length - 1],
            readTime: n3.readTime || [0, 0],
            unknownDocument: n3.unknownDocument,
            noDocument: n3.noDocument,
            document: n3.document,
            hasCommittedMutations: !!n3.hasCommittedMutations
          };
          r2.push(i.put(o2));
        }).next(() => PersistencePromise.waitFor(r2));
      }
      Pi(e, t2) {
        const n2 = t2.store(j), r2 = __PRIVATE_newIndexedDbRemoteDocumentCache(this.serializer), i = new __PRIVATE_MemoryPersistence(__PRIVATE_MemoryEagerDelegate.ri, this.serializer.Tt);
        return n2.G().next((e2) => {
          const n3 = /* @__PURE__ */ new Map();
          return e2.forEach((e3) => {
            var t3;
            let r3 = null !== (t3 = n3.get(e3.userId)) && void 0 !== t3 ? t3 : __PRIVATE_documentKeySet();
            __PRIVATE_fromDbMutationBatch(this.serializer, e3).keys().forEach((e4) => r3 = r3.add(e4)), n3.set(e3.userId, r3);
          }), PersistencePromise.forEach(n3, (e3, n4) => {
            const s2 = new User(n4), o2 = __PRIVATE_IndexedDbDocumentOverlayCache.It(this.serializer, s2), _ = i.getIndexManager(s2), a2 = __PRIVATE_IndexedDbMutationQueue.It(s2, this.serializer, _, i.referenceDelegate);
            return new LocalDocumentsView(r2, a2, o2, _).recalculateAndSaveOverlaysForDocumentKeys(new __PRIVATE_IndexedDbTransaction(t2, __PRIVATE_ListenSequence.ae), e3).next();
          });
        });
      }
    };
    __name(__PRIVATE_SchemaConverter, "__PRIVATE_SchemaConverter");
    function __PRIVATE_createQueryCache(e) {
      e.createObjectStore(le, {
        keyPath: he
      }).createIndex(Pe, Te, {
        unique: true
      });
      e.createObjectStore(ae, {
        keyPath: "targetId"
      }).createIndex(ue, ce, {
        unique: true
      }), e.createObjectStore(Ee);
    }
    __name(__PRIVATE_createQueryCache, "__PRIVATE_createQueryCache");
    var vt = "IndexedDbPersistence";
    var Ct = 18e5;
    var Ft = 5e3;
    var Mt = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
    var xt = "main";
    var __PRIVATE_IndexedDbPersistence = class {
      constructor(e, t2, n2, r2, i, s2, o2, _, a2, u2, c2 = 17) {
        if (this.allowTabSynchronization = e, this.persistenceKey = t2, this.clientId = n2, this.Ti = i, this.window = s2, this.document = o2, this.Ii = a2, this.Ei = u2, this.di = c2, this.Gr = null, this.zr = false, this.isPrimary = false, this.networkEnabled = true, /** Our window.unload handler, if registered. */
        this.Ai = null, this.inForeground = false, /** Our 'visibilitychange' listener if registered. */
        this.Ri = null, /** The client metadata refresh task. */
        this.Vi = null, /** The last time we garbage collected the client metadata object store. */
        this.mi = Number.NEGATIVE_INFINITY, /** A listener to notify on primary state changes. */
        this.fi = (e2) => Promise.resolve(), !__PRIVATE_IndexedDbPersistence.D())
          throw new FirestoreError(C.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
        this.referenceDelegate = new __PRIVATE_IndexedDbLruDelegateImpl(this, r2), this.gi = t2 + xt, this.serializer = new __PRIVATE_LocalSerializer(_), this.pi = new __PRIVATE_SimpleDb(this.gi, this.di, new __PRIVATE_SchemaConverter(this.serializer)), this.jr = new __PRIVATE_IndexedDbGlobalsCache(), this.Hr = new __PRIVATE_IndexedDbTargetCache(this.referenceDelegate, this.serializer), this.remoteDocumentCache = __PRIVATE_newIndexedDbRemoteDocumentCache(this.serializer), this.Yr = new __PRIVATE_IndexedDbBundleCache(), this.window && this.window.localStorage ? this.yi = this.window.localStorage : (this.yi = null, false === u2 && __PRIVATE_logError(vt, "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
      }
      /**
       * Attempt to start IndexedDb persistence.
       *
       * @returns Whether persistence was enabled.
       */
      start() {
        return this.wi().then(() => {
          if (!this.isPrimary && !this.allowTabSynchronization)
            throw new FirestoreError(C.FAILED_PRECONDITION, Mt);
          return this.Si(), this.bi(), this.Di(), this.runTransaction("getHighestListenSequenceNumber", "readonly", (e) => this.Hr.getHighestSequenceNumber(e));
        }).then((e) => {
          this.Gr = new __PRIVATE_ListenSequence(e, this.Ii);
        }).then(() => {
          this.zr = true;
        }).catch((e) => (this.pi && this.pi.close(), Promise.reject(e)));
      }
      /**
       * Registers a listener that gets called when the primary state of the
       * instance changes. Upon registering, this listener is invoked immediately
       * with the current primary state.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      Ci(e) {
        return this.fi = async (t2) => {
          if (this.started)
            return e(t2);
        }, e(this.isPrimary);
      }
      /**
       * Registers a listener that gets called when the database receives a
       * version change event indicating that it has deleted.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      setDatabaseDeletedListener(e) {
        this.pi.k(async (t2) => {
          null === t2.newVersion && await e();
        });
      }
      /**
       * Adjusts the current network state in the client's metadata, potentially
       * affecting the primary lease.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      setNetworkEnabled(e) {
        this.networkEnabled !== e && (this.networkEnabled = e, // Schedule a primary lease refresh for immediate execution. The eventual
        // lease update will be propagated via `primaryStateListener`.
        this.Ti.enqueueAndForget(async () => {
          this.started && await this.wi();
        }));
      }
      /**
       * Updates the client metadata in IndexedDb and attempts to either obtain or
       * extend the primary lease for the local client. Asynchronously notifies the
       * primary state listener if the client either newly obtained or released its
       * primary lease.
       */
      wi() {
        return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (e) => __PRIVATE_clientMetadataStore(e).put({
          clientId: this.clientId,
          updateTimeMs: Date.now(),
          networkEnabled: this.networkEnabled,
          inForeground: this.inForeground
        }).next(() => {
          if (this.isPrimary)
            return this.Fi(e).next((e2) => {
              e2 || (this.isPrimary = false, this.Ti.enqueueRetryable(() => this.fi(false)));
            });
        }).next(() => this.Mi(e)).next((t2) => this.isPrimary && !t2 ? this.xi(e).next(() => false) : !!t2 && this.Oi(e).next(() => true))).catch((e) => {
          if (__PRIVATE_isIndexedDbTransactionError(e))
            return __PRIVATE_logDebug(vt, "Failed to extend owner lease: ", e), this.isPrimary;
          if (!this.allowTabSynchronization)
            throw e;
          return __PRIVATE_logDebug(vt, "Releasing owner lease after error during lease refresh", e), /* isPrimary= */
          false;
        }).then((e) => {
          this.isPrimary !== e && this.Ti.enqueueRetryable(() => this.fi(e)), this.isPrimary = e;
        });
      }
      Fi(e) {
        return __PRIVATE_primaryClientStore(e).get(W).next((e2) => PersistencePromise.resolve(this.Ni(e2)));
      }
      Bi(e) {
        return __PRIVATE_clientMetadataStore(e).delete(this.clientId);
      }
      /**
       * If the garbage collection threshold has passed, prunes the
       * RemoteDocumentChanges and the ClientMetadata store based on the last update
       * time of all clients.
       */
      async Li() {
        if (this.isPrimary && !this.ki(this.mi, Ct)) {
          this.mi = Date.now();
          const e = await this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (e2) => {
            const t2 = __PRIVATE_getStore(e2, Re);
            return t2.G().next((e3) => {
              const n2 = this.qi(e3, Ct), r2 = e3.filter((e4) => -1 === n2.indexOf(e4));
              return PersistencePromise.forEach(r2, (e4) => t2.delete(e4.clientId)).next(() => r2);
            });
          }).catch(() => []);
          if (this.yi)
            for (const t2 of e)
              this.yi.removeItem(this.Qi(t2.clientId));
        }
      }
      /**
       * Schedules a recurring timer to update the client metadata and to either
       * extend or acquire the primary lease if the client is eligible.
       */
      Di() {
        this.Vi = this.Ti.enqueueAfterDelay("client_metadata_refresh", 4e3, () => this.wi().then(() => this.Li()).then(() => this.Di()));
      }
      /** Checks whether `client` is the local client. */
      Ni(e) {
        return !!e && e.ownerId === this.clientId;
      }
      /**
       * Evaluate the state of all active clients and determine whether the local
       * client is or can act as the holder of the primary lease. Returns whether
       * the client is eligible for the lease, but does not actually acquire it.
       * May return 'false' even if there is no active leaseholder and another
       * (foreground) client should become leaseholder instead.
       */
      Mi(e) {
        if (this.Ei)
          return PersistencePromise.resolve(true);
        return __PRIVATE_primaryClientStore(e).get(W).next((t2) => {
          if (null !== t2 && this.ki(t2.leaseTimestampMs, Ft) && !this.$i(t2.ownerId)) {
            if (this.Ni(t2) && this.networkEnabled)
              return true;
            if (!this.Ni(t2)) {
              if (!t2.allowTabSynchronization)
                throw new FirestoreError(C.FAILED_PRECONDITION, Mt);
              return false;
            }
          }
          return !(!this.networkEnabled || !this.inForeground) || __PRIVATE_clientMetadataStore(e).G().next((e2) => void 0 === this.qi(e2, Ft).find((e3) => {
            if (this.clientId !== e3.clientId) {
              const t3 = !this.networkEnabled && e3.networkEnabled, n2 = !this.inForeground && e3.inForeground, r2 = this.networkEnabled === e3.networkEnabled;
              if (t3 || n2 && r2)
                return true;
            }
            return false;
          }));
        }).next((e2) => (this.isPrimary !== e2 && __PRIVATE_logDebug(vt, `Client ${e2 ? "is" : "is not"} eligible for a primary lease.`), e2));
      }
      async shutdown() {
        this.zr = false, this.Ki(), this.Vi && (this.Vi.cancel(), this.Vi = null), this.Ui(), this.Wi(), // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
        // has obtained the primary lease.
        await this.pi.runTransaction("shutdown", "readwrite", [U, Re], (e) => {
          const t2 = new __PRIVATE_IndexedDbTransaction(e, __PRIVATE_ListenSequence.ae);
          return this.xi(t2).next(() => this.Bi(t2));
        }), this.pi.close(), // Remove the entry marking the client as zombied from LocalStorage since
        // we successfully deleted its metadata from IndexedDb.
        this.Gi();
      }
      /**
       * Returns clients that are not zombied and have an updateTime within the
       * provided threshold.
       */
      qi(e, t2) {
        return e.filter((e2) => this.ki(e2.updateTimeMs, t2) && !this.$i(e2.clientId));
      }
      /**
       * Returns the IDs of the clients that are currently active. If multi-tab
       * is not supported, returns an array that only contains the local client's
       * ID.
       *
       * PORTING NOTE: This is only used for Web multi-tab.
       */
      zi() {
        return this.runTransaction("getActiveClients", "readonly", (e) => __PRIVATE_clientMetadataStore(e).G().next((e2) => this.qi(e2, Ct).map((e3) => e3.clientId)));
      }
      get started() {
        return this.zr;
      }
      getGlobalsCache() {
        return this.jr;
      }
      getMutationQueue(e, t2) {
        return __PRIVATE_IndexedDbMutationQueue.It(e, this.serializer, t2, this.referenceDelegate);
      }
      getTargetCache() {
        return this.Hr;
      }
      getRemoteDocumentCache() {
        return this.remoteDocumentCache;
      }
      getIndexManager(e) {
        return new __PRIVATE_IndexedDbIndexManager(e, this.serializer.Tt.databaseId);
      }
      getDocumentOverlayCache(e) {
        return __PRIVATE_IndexedDbDocumentOverlayCache.It(this.serializer, e);
      }
      getBundleCache() {
        return this.Yr;
      }
      runTransaction(e, t2, n2) {
        __PRIVATE_logDebug(vt, "Starting transaction:", e);
        const r2 = "readonly" === t2 ? "readonly" : "readwrite", i = (
          /** Returns the object stores for the provided schema. */
          (/* @__PURE__ */ __name(function __PRIVATE_getObjectStores(e2) {
            return 17 === e2 ? Ye : 16 === e2 ? Je : 15 === e2 ? He : 14 === e2 ? je : 13 === e2 ? ze : 12 === e2 ? Ge : 11 === e2 ? We : void fail();
          }, "__PRIVATE_getObjectStores"))(this.di)
        );
        let s2;
        return this.pi.runTransaction(e, r2, i, (r3) => (s2 = new __PRIVATE_IndexedDbTransaction(r3, this.Gr ? this.Gr.next() : __PRIVATE_ListenSequence.ae), "readwrite-primary" === t2 ? this.Fi(s2).next((e2) => !!e2 || this.Mi(s2)).next((t3) => {
          if (!t3)
            throw __PRIVATE_logError(`Failed to obtain primary lease for action '${e}'.`), this.isPrimary = false, this.Ti.enqueueRetryable(() => this.fi(false)), new FirestoreError(C.FAILED_PRECONDITION, B);
          return n2(s2);
        }).next((e2) => this.Oi(s2).next(() => e2)) : this.ji(s2).next(() => n2(s2)))).then((e2) => (s2.raiseOnCommittedEvent(), e2));
      }
      /**
       * Verifies that the current tab is the primary leaseholder or alternatively
       * that the leaseholder has opted into multi-tab synchronization.
       */
      // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
      // be turned off.
      ji(e) {
        return __PRIVATE_primaryClientStore(e).get(W).next((e2) => {
          if (null !== e2 && this.ki(e2.leaseTimestampMs, Ft) && !this.$i(e2.ownerId) && !this.Ni(e2) && !(this.Ei || this.allowTabSynchronization && e2.allowTabSynchronization))
            throw new FirestoreError(C.FAILED_PRECONDITION, Mt);
        });
      }
      /**
       * Obtains or extends the new primary lease for the local client. This
       * method does not verify that the client is eligible for this lease.
       */
      Oi(e) {
        const t2 = {
          ownerId: this.clientId,
          allowTabSynchronization: this.allowTabSynchronization,
          leaseTimestampMs: Date.now()
        };
        return __PRIVATE_primaryClientStore(e).put(W, t2);
      }
      static D() {
        return __PRIVATE_SimpleDb.D();
      }
      /** Checks the primary lease and removes it if we are the current primary. */
      xi(e) {
        const t2 = __PRIVATE_primaryClientStore(e);
        return t2.get(W).next((e2) => this.Ni(e2) ? (__PRIVATE_logDebug(vt, "Releasing primary lease."), t2.delete(W)) : PersistencePromise.resolve());
      }
      /** Verifies that `updateTimeMs` is within `maxAgeMs`. */
      ki(e, t2) {
        const n2 = Date.now();
        return !(e < n2 - t2) && (!(e > n2) || (__PRIVATE_logError(`Detected an update time that is in the future: ${e} > ${n2}`), false));
      }
      Si() {
        null !== this.document && "function" == typeof this.document.addEventListener && (this.Ri = () => {
          this.Ti.enqueueAndForget(() => (this.inForeground = "visible" === this.document.visibilityState, this.wi()));
        }, this.document.addEventListener("visibilitychange", this.Ri), this.inForeground = "visible" === this.document.visibilityState);
      }
      Ui() {
        this.Ri && (this.document.removeEventListener("visibilitychange", this.Ri), this.Ri = null);
      }
      /**
       * Attaches a window.unload handler that will synchronously write our
       * clientId to a "zombie client id" location in LocalStorage. This can be used
       * by tabs trying to acquire the primary lease to determine that the lease
       * is no longer valid even if the timestamp is recent. This is particularly
       * important for the refresh case (so the tab correctly re-acquires the
       * primary lease). LocalStorage is used for this rather than IndexedDb because
       * it is a synchronous API and so can be used reliably from  an unload
       * handler.
       */
      bi() {
        var e;
        "function" == typeof (null === (e = this.window) || void 0 === e ? void 0 : e.addEventListener) && (this.Ai = () => {
          this.Ki();
          const e2 = /(?:Version|Mobile)\/1[456]/;
          util.isSafari() && (navigator.appVersion.match(e2) || "Cloudflare-Workers".match(e2)) && // On Safari 14, 15, and 16, we do not run any cleanup actions as it might
          // trigger a bug that prevents Safari from re-opening IndexedDB during
          // the next page load.
          // See https://bugs.webkit.org/show_bug.cgi?id=226547
          this.Ti.enterRestrictedMode(
            /* purgeExistingTasks= */
            true
          ), this.Ti.enqueueAndForget(() => this.shutdown());
        }, this.window.addEventListener("pagehide", this.Ai));
      }
      Wi() {
        this.Ai && (this.window.removeEventListener("pagehide", this.Ai), this.Ai = null);
      }
      /**
       * Returns whether a client is "zombied" based on its LocalStorage entry.
       * Clients become zombied when their tab closes without running all of the
       * cleanup logic in `shutdown()`.
       */
      $i(e) {
        var t2;
        try {
          const n2 = null !== (null === (t2 = this.yi) || void 0 === t2 ? void 0 : t2.getItem(this.Qi(e)));
          return __PRIVATE_logDebug(vt, `Client '${e}' ${n2 ? "is" : "is not"} zombied in LocalStorage`), n2;
        } catch (e2) {
          return __PRIVATE_logError(vt, "Failed to get zombied client id.", e2), false;
        }
      }
      /**
       * Record client as zombied (a client that had its tab closed). Zombied
       * clients are ignored during primary tab selection.
       */
      Ki() {
        if (this.yi)
          try {
            this.yi.setItem(this.Qi(this.clientId), String(Date.now()));
          } catch (e) {
            __PRIVATE_logError("Failed to set zombie client id.", e);
          }
      }
      /** Removes the zombied client entry if it exists. */
      Gi() {
        if (this.yi)
          try {
            this.yi.removeItem(this.Qi(this.clientId));
          } catch (e) {
          }
      }
      Qi(e) {
        return `firestore_zombie_${this.persistenceKey}_${e}`;
      }
    };
    __name(__PRIVATE_IndexedDbPersistence, "__PRIVATE_IndexedDbPersistence");
    function __PRIVATE_primaryClientStore(e) {
      return __PRIVATE_getStore(e, U);
    }
    __name(__PRIVATE_primaryClientStore, "__PRIVATE_primaryClientStore");
    function __PRIVATE_clientMetadataStore(e) {
      return __PRIVATE_getStore(e, Re);
    }
    __name(__PRIVATE_clientMetadataStore, "__PRIVATE_clientMetadataStore");
    function __PRIVATE_indexedDbStoragePrefix(e, t2) {
      let n2 = e.projectId;
      return e.isDefaultDatabase || (n2 += "." + e.database), "firestore/" + t2 + "/" + n2 + "/";
    }
    __name(__PRIVATE_indexedDbStoragePrefix, "__PRIVATE_indexedDbStoragePrefix");
    var __PRIVATE_LocalViewChanges = class {
      constructor(e, t2, n2, r2) {
        this.targetId = e, this.fromCache = t2, this.Hi = n2, this.Ji = r2;
      }
      static Yi(e, t2) {
        let n2 = __PRIVATE_documentKeySet(), r2 = __PRIVATE_documentKeySet();
        for (const e2 of t2.docChanges)
          switch (e2.type) {
            case 0:
              n2 = n2.add(e2.doc.key);
              break;
            case 1:
              r2 = r2.add(e2.doc.key);
          }
        return new __PRIVATE_LocalViewChanges(e, t2.fromCache, n2, r2);
      }
    };
    __name(__PRIVATE_LocalViewChanges, "__PRIVATE_LocalViewChanges");
    var QueryContext = class {
      constructor() {
        this._documentReadCount = 0;
      }
      get documentReadCount() {
        return this._documentReadCount;
      }
      incrementDocumentReadCount(e) {
        this._documentReadCount += e;
      }
    };
    __name(QueryContext, "QueryContext");
    var __PRIVATE_QueryEngine = class {
      constructor() {
        this.Zi = false, this.Xi = false, /**
         * SDK only decides whether it should create index when collection size is
         * larger than this.
         */
        this.es = 100, this.ts = /**
        * This cost represents the evaluation result of
        * (([index, docKey] + [docKey, docContent]) per document in the result set)
        * / ([docKey, docContent] per documents in full collection scan) coming from
        * experiment [enter PR experiment URL here].
        */
        (/* @__PURE__ */ __name(function __PRIVATE_getDefaultRelativeIndexReadCostPerDocument() {
          return util.isSafari() ? 8 : __PRIVATE_getAndroidVersion(util.getUA()) > 0 ? 6 : 4;
        }, "__PRIVATE_getDefaultRelativeIndexReadCostPerDocument"))();
      }
      /** Sets the document view to query against. */
      initialize(e, t2) {
        this.ns = e, this.indexManager = t2, this.Zi = true;
      }
      /** Returns all local documents matching the specified query. */
      getDocumentsMatchingQuery(e, t2, n2, r2) {
        const i = {
          result: null
        };
        return this.rs(e, t2).next((e2) => {
          i.result = e2;
        }).next(() => {
          if (!i.result)
            return this.ss(e, t2, r2, n2).next((e2) => {
              i.result = e2;
            });
        }).next(() => {
          if (i.result)
            return;
          const n3 = new QueryContext();
          return this._s(e, t2, n3).next((r3) => {
            if (i.result = r3, this.Xi)
              return this.us(e, t2, n3, r3.size);
          });
        }).next(() => i.result);
      }
      us(e, t2, n2, r2) {
        return n2.documentReadCount < this.es ? (__PRIVATE_getLogLevel() <= logger.LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "SDK will not create cache indexes for query:", __PRIVATE_stringifyQuery(t2), "since it only creates cache indexes for collection contains", "more than or equal to", this.es, "documents"), PersistencePromise.resolve()) : (__PRIVATE_getLogLevel() <= logger.LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Query:", __PRIVATE_stringifyQuery(t2), "scans", n2.documentReadCount, "local documents and returns", r2, "documents as results."), n2.documentReadCount > this.ts * r2 ? (__PRIVATE_getLogLevel() <= logger.LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "The SDK decides to create cache indexes for query:", __PRIVATE_stringifyQuery(t2), "as using cache indexes may help improve performance."), this.indexManager.createTargetIndexes(e, __PRIVATE_queryToTarget(t2))) : PersistencePromise.resolve());
      }
      /**
       * Performs an indexed query that evaluates the query based on a collection's
       * persisted index values. Returns `null` if an index is not available.
       */
      rs(e, t2) {
        if (__PRIVATE_queryMatchesAllDocuments(t2))
          return PersistencePromise.resolve(null);
        let n2 = __PRIVATE_queryToTarget(t2);
        return this.indexManager.getIndexType(e, n2).next((r2) => 0 === r2 ? null : (null !== t2.limit && 1 === r2 && // We cannot apply a limit for targets that are served using a partial
        // index. If a partial index will be used to serve the target, the
        // query may return a superset of documents that match the target
        // (e.g. if the index doesn't include all the target's filters), or
        // may return the correct set of documents in the wrong order (e.g. if
        // the index doesn't include a segment for one of the orderBys).
        // Therefore, a limit should not be applied in such cases.
        (t2 = __PRIVATE_queryWithLimit(
          t2,
          null,
          "F"
          /* LimitType.First */
        ), n2 = __PRIVATE_queryToTarget(t2)), this.indexManager.getDocumentsMatchingTarget(e, n2).next((r3) => {
          const i = __PRIVATE_documentKeySet(...r3);
          return this.ns.getDocuments(e, i).next((r4) => this.indexManager.getMinOffset(e, n2).next((n3) => {
            const s2 = this.cs(t2, r4);
            return this.ls(t2, s2, i, n3.readTime) ? this.rs(e, __PRIVATE_queryWithLimit(
              t2,
              null,
              "F"
              /* LimitType.First */
            )) : this.hs(e, s2, t2, n3);
          }));
        })));
      }
      /**
       * Performs a query based on the target's persisted query mapping. Returns
       * `null` if the mapping is not available or cannot be used.
       */
      ss(e, t2, n2, r2) {
        return __PRIVATE_queryMatchesAllDocuments(t2) || r2.isEqual(SnapshotVersion.min()) ? PersistencePromise.resolve(null) : this.ns.getDocuments(e, n2).next((i) => {
          const s2 = this.cs(t2, i);
          return this.ls(t2, s2, n2, r2) ? PersistencePromise.resolve(null) : (__PRIVATE_getLogLevel() <= logger.LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Re-using previous result from %s to execute query: %s", r2.toString(), __PRIVATE_stringifyQuery(t2)), this.hs(e, s2, t2, __PRIVATE_newIndexOffsetSuccessorFromReadTime(r2, N)).next((e2) => e2));
        });
      }
      /** Applies the query filter and sorting to the provided documents.  */
      cs(e, t2) {
        let n2 = new SortedSet(__PRIVATE_newQueryComparator(e));
        return t2.forEach((t3, r2) => {
          __PRIVATE_queryMatches(e, r2) && (n2 = n2.add(r2));
        }), n2;
      }
      /**
       * Determines if a limit query needs to be refilled from cache, making it
       * ineligible for index-free execution.
       *
       * @param query - The query.
       * @param sortedPreviousResults - The documents that matched the query when it
       * was last synchronized, sorted by the query's comparator.
       * @param remoteKeys - The document keys that matched the query at the last
       * snapshot.
       * @param limboFreeSnapshotVersion - The version of the snapshot when the
       * query was last synchronized.
       */
      ls(e, t2, n2, r2) {
        if (null === e.limit)
          return false;
        if (n2.size !== t2.size)
          return true;
        const i = "F" === e.limitType ? t2.last() : t2.first();
        return !!i && (i.hasPendingWrites || i.version.compareTo(r2) > 0);
      }
      _s(e, t2, n2) {
        return __PRIVATE_getLogLevel() <= logger.LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Using full collection scan to execute query:", __PRIVATE_stringifyQuery(t2)), this.ns.getDocumentsMatchingQuery(e, t2, IndexOffset.min(), n2);
      }
      /**
       * Combines the results from an indexed execution with the remaining documents
       * that have not yet been indexed.
       */
      hs(e, t2, n2, r2) {
        return this.ns.getDocumentsMatchingQuery(e, n2, r2).next((e2) => (
          // Merge with existing results
          (t2.forEach((t3) => {
            e2 = e2.insert(t3.key, t3);
          }), e2)
        ));
      }
    };
    __name(__PRIVATE_QueryEngine, "__PRIVATE_QueryEngine");
    var Ot = "LocalStore";
    var Nt = 3e8;
    var __PRIVATE_LocalStoreImpl = class {
      constructor(e, t2, n2, r2) {
        this.persistence = e, this.Ps = t2, this.serializer = r2, /**
         * Maps a targetID to data about its target.
         *
         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
         * of `applyRemoteEvent()` idempotent.
         */
        this.Ts = new SortedMap(__PRIVATE_primitiveComparator), /** Maps a target to its targetID. */
        // TODO(wuandy): Evaluate if TargetId can be part of Target.
        this.Is = new ObjectMap((e2) => __PRIVATE_canonifyTarget(e2), __PRIVATE_targetEquals), /**
         * A per collection group index of the last read time processed by
         * `getNewDocumentChanges()`.
         *
         * PORTING NOTE: This is only used for multi-tab synchronization.
         */
        this.Es = /* @__PURE__ */ new Map(), this.ds = e.getRemoteDocumentCache(), this.Hr = e.getTargetCache(), this.Yr = e.getBundleCache(), this.As(n2);
      }
      As(e) {
        this.documentOverlayCache = this.persistence.getDocumentOverlayCache(e), this.indexManager = this.persistence.getIndexManager(e), this.mutationQueue = this.persistence.getMutationQueue(e, this.indexManager), this.localDocuments = new LocalDocumentsView(this.ds, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.ds.setIndexManager(this.indexManager), this.Ps.initialize(this.localDocuments, this.indexManager);
      }
      collectGarbage(e) {
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (t2) => e.collect(t2, this.Ts));
      }
    };
    __name(__PRIVATE_LocalStoreImpl, "__PRIVATE_LocalStoreImpl");
    function __PRIVATE_newLocalStore(e, t2, n2, r2) {
      return new __PRIVATE_LocalStoreImpl(e, t2, n2, r2);
    }
    __name(__PRIVATE_newLocalStore, "__PRIVATE_newLocalStore");
    async function __PRIVATE_localStoreHandleUserChange(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      return await n2.persistence.runTransaction("Handle user change", "readonly", (e2) => {
        let r2;
        return n2.mutationQueue.getAllMutationBatches(e2).next((i) => (r2 = i, n2.As(t2), n2.mutationQueue.getAllMutationBatches(e2))).next((t3) => {
          const i = [], s2 = [];
          let o2 = __PRIVATE_documentKeySet();
          for (const e3 of r2) {
            i.push(e3.batchId);
            for (const t4 of e3.mutations)
              o2 = o2.add(t4.key);
          }
          for (const e3 of t3) {
            s2.push(e3.batchId);
            for (const t4 of e3.mutations)
              o2 = o2.add(t4.key);
          }
          return n2.localDocuments.getDocuments(e2, o2).next((e3) => ({
            Rs: e3,
            removedBatchIds: i,
            addedBatchIds: s2
          }));
        });
      });
    }
    __name(__PRIVATE_localStoreHandleUserChange, "__PRIVATE_localStoreHandleUserChange");
    function __PRIVATE_localStoreAcknowledgeBatch(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      return n2.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (e2) => {
        const r2 = t2.batch.keys(), i = n2.ds.newChangeBuffer({
          trackRemovals: true
        });
        return (/* @__PURE__ */ __name(function __PRIVATE_applyWriteToRemoteDocuments(e3, t3, n3, r3) {
          const i2 = n3.batch, s2 = i2.keys();
          let o2 = PersistencePromise.resolve();
          return s2.forEach((e4) => {
            o2 = o2.next(() => r3.getEntry(t3, e4)).next((t4) => {
              const s3 = n3.docVersions.get(e4);
              __PRIVATE_hardAssert(null !== s3), t4.version.compareTo(s3) < 0 && (i2.applyToRemoteDocument(t4, n3), t4.isValidDocument() && // We use the commitVersion as the readTime rather than the
              // document's updateTime since the updateTime is not advanced
              // for updates that do not modify the underlying document.
              (t4.setReadTime(n3.commitVersion), r3.addEntry(t4)));
            });
          }), o2.next(() => e3.mutationQueue.removeMutationBatch(t3, i2));
        }, "__PRIVATE_applyWriteToRemoteDocuments"))(n2, e2, t2, i).next(() => i.apply(e2)).next(() => n2.mutationQueue.performConsistencyCheck(e2)).next(() => n2.documentOverlayCache.removeOverlaysForBatchId(e2, r2, t2.batch.batchId)).next(() => n2.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e2, (/* @__PURE__ */ __name(function __PRIVATE_getKeysWithTransformResults(e3) {
          let t3 = __PRIVATE_documentKeySet();
          for (let n3 = 0; n3 < e3.mutationResults.length; ++n3) {
            e3.mutationResults[n3].transformResults.length > 0 && (t3 = t3.add(e3.batch.mutations[n3].key));
          }
          return t3;
        }, "__PRIVATE_getKeysWithTransformResults"))(t2))).next(() => n2.localDocuments.getDocuments(e2, r2));
      });
    }
    __name(__PRIVATE_localStoreAcknowledgeBatch, "__PRIVATE_localStoreAcknowledgeBatch");
    function __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e) {
      const t2 = __PRIVATE_debugCast(e);
      return t2.persistence.runTransaction("Get last remote snapshot version", "readonly", (e2) => t2.Hr.getLastRemoteSnapshotVersion(e2));
    }
    __name(__PRIVATE_localStoreGetLastRemoteSnapshotVersion, "__PRIVATE_localStoreGetLastRemoteSnapshotVersion");
    function __PRIVATE_localStoreApplyRemoteEventToLocalCache(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = t2.snapshotVersion;
      let i = n2.Ts;
      return n2.persistence.runTransaction("Apply remote event", "readwrite-primary", (e2) => {
        const s2 = n2.ds.newChangeBuffer({
          trackRemovals: true
        });
        i = n2.Ts;
        const o2 = [];
        t2.targetChanges.forEach((s3, _2) => {
          const a3 = i.get(_2);
          if (!a3)
            return;
          o2.push(n2.Hr.removeMatchingKeys(e2, s3.removedDocuments, _2).next(() => n2.Hr.addMatchingKeys(e2, s3.addedDocuments, _2)));
          let u2 = a3.withSequenceNumber(e2.currentSequenceNumber);
          null !== t2.targetMismatches.get(_2) ? u2 = u2.withResumeToken(ByteString.EMPTY_BYTE_STRING, SnapshotVersion.min()).withLastLimboFreeSnapshotVersion(SnapshotVersion.min()) : s3.resumeToken.approximateByteSize() > 0 && (u2 = u2.withResumeToken(s3.resumeToken, r2)), i = i.insert(_2, u2), // Update the target data if there are target changes (or if
          // sufficient time has passed since the last update).
          /**
          * Returns true if the newTargetData should be persisted during an update of
          * an active target. TargetData should always be persisted when a target is
          * being released and should not call this function.
          *
          * While the target is active, TargetData updates can be omitted when nothing
          * about the target has changed except metadata like the resume token or
          * snapshot version. Occasionally it's worth the extra write to prevent these
          * values from getting too stale after a crash, but this doesn't have to be
          * too frequent.
          */
          (/* @__PURE__ */ __name(function __PRIVATE_shouldPersistTargetData(e3, t3, n3) {
            if (0 === e3.resumeToken.approximateByteSize())
              return true;
            const r3 = t3.snapshotVersion.toMicroseconds() - e3.snapshotVersion.toMicroseconds();
            if (r3 >= Nt)
              return true;
            const i2 = n3.addedDocuments.size + n3.modifiedDocuments.size + n3.removedDocuments.size;
            return i2 > 0;
          }, "__PRIVATE_shouldPersistTargetData"))(a3, u2, s3) && o2.push(n2.Hr.updateTargetData(e2, u2));
        });
        let _ = __PRIVATE_mutableDocumentMap(), a2 = __PRIVATE_documentKeySet();
        if (t2.documentUpdates.forEach((r3) => {
          t2.resolvedLimboDocuments.has(r3) && o2.push(n2.persistence.referenceDelegate.updateLimboDocument(e2, r3));
        }), // Each loop iteration only affects its "own" doc, so it's safe to get all
        // the remote documents in advance in a single call.
        o2.push(__PRIVATE_populateDocumentChangeBuffer(e2, s2, t2.documentUpdates).next((e3) => {
          _ = e3.Vs, a2 = e3.fs;
        })), !r2.isEqual(SnapshotVersion.min())) {
          const t3 = n2.Hr.getLastRemoteSnapshotVersion(e2).next((t4) => n2.Hr.setTargetsMetadata(e2, e2.currentSequenceNumber, r2));
          o2.push(t3);
        }
        return PersistencePromise.waitFor(o2).next(() => s2.apply(e2)).next(() => n2.localDocuments.getLocalViewOfDocuments(e2, _, a2)).next(() => _);
      }).then((e2) => (n2.Ts = i, e2));
    }
    __name(__PRIVATE_localStoreApplyRemoteEventToLocalCache, "__PRIVATE_localStoreApplyRemoteEventToLocalCache");
    function __PRIVATE_populateDocumentChangeBuffer(e, t2, n2) {
      let r2 = __PRIVATE_documentKeySet(), i = __PRIVATE_documentKeySet();
      return n2.forEach((e2) => r2 = r2.add(e2)), t2.getEntries(e, r2).next((e2) => {
        let r3 = __PRIVATE_mutableDocumentMap();
        return n2.forEach((n3, s2) => {
          const o2 = e2.get(n3);
          s2.isFoundDocument() !== o2.isFoundDocument() && (i = i.add(n3)), // Note: The order of the steps below is important, since we want
          // to ensure that rejected limbo resolutions (which fabricate
          // NoDocuments with SnapshotVersion.min()) never add documents to
          // cache.
          s2.isNoDocument() && s2.version.isEqual(SnapshotVersion.min()) ? (
            // NoDocuments with SnapshotVersion.min() are used in manufactured
            // events. We remove these documents from cache since we lost
            // access.
            (t2.removeEntry(n3, s2.readTime), r3 = r3.insert(n3, s2))
          ) : !o2.isValidDocument() || s2.version.compareTo(o2.version) > 0 || 0 === s2.version.compareTo(o2.version) && o2.hasPendingWrites ? (t2.addEntry(s2), r3 = r3.insert(n3, s2)) : __PRIVATE_logDebug(Ot, "Ignoring outdated watch update for ", n3, ". Current version:", o2.version, " Watch version:", s2.version);
        }), {
          Vs: r3,
          fs: i
        };
      });
    }
    __name(__PRIVATE_populateDocumentChangeBuffer, "__PRIVATE_populateDocumentChangeBuffer");
    function __PRIVATE_localStoreGetNextMutationBatch(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      return n2.persistence.runTransaction("Get next mutation batch", "readonly", (e2) => (void 0 === t2 && (t2 = Q), n2.mutationQueue.getNextMutationBatchAfterBatchId(e2, t2)));
    }
    __name(__PRIVATE_localStoreGetNextMutationBatch, "__PRIVATE_localStoreGetNextMutationBatch");
    function __PRIVATE_localStoreAllocateTarget(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      return n2.persistence.runTransaction("Allocate target", "readwrite", (e2) => {
        let r2;
        return n2.Hr.getTargetData(e2, t2).next((i) => i ? (
          // This target has been listened to previously, so reuse the
          // previous targetID.
          // TODO(mcg): freshen last accessed date?
          (r2 = i, PersistencePromise.resolve(r2))
        ) : n2.Hr.allocateTargetId(e2).next((i2) => (r2 = new TargetData(t2, i2, "TargetPurposeListen", e2.currentSequenceNumber), n2.Hr.addTargetData(e2, r2).next(() => r2))));
      }).then((e2) => {
        const r2 = n2.Ts.get(e2.targetId);
        return (null === r2 || e2.snapshotVersion.compareTo(r2.snapshotVersion) > 0) && (n2.Ts = n2.Ts.insert(e2.targetId, e2), n2.Is.set(t2, e2.targetId)), e2;
      });
    }
    __name(__PRIVATE_localStoreAllocateTarget, "__PRIVATE_localStoreAllocateTarget");
    async function __PRIVATE_localStoreReleaseTarget(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e), i = r2.Ts.get(t2), s2 = n2 ? "readwrite" : "readwrite-primary";
      try {
        n2 || await r2.persistence.runTransaction("Release target", s2, (e2) => r2.persistence.referenceDelegate.removeTarget(e2, i));
      } catch (e2) {
        if (!__PRIVATE_isIndexedDbTransactionError(e2))
          throw e2;
        __PRIVATE_logDebug(Ot, `Failed to update sequence numbers for target ${t2}: ${e2}`);
      }
      r2.Ts = r2.Ts.remove(t2), r2.Is.delete(i.target);
    }
    __name(__PRIVATE_localStoreReleaseTarget, "__PRIVATE_localStoreReleaseTarget");
    function __PRIVATE_localStoreExecuteQuery(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e);
      let i = SnapshotVersion.min(), s2 = __PRIVATE_documentKeySet();
      return r2.persistence.runTransaction(
        "Execute query",
        "readwrite",
        // Use readwrite instead of readonly so indexes can be created
        // Use readwrite instead of readonly so indexes can be created
        (e2) => (/* @__PURE__ */ __name(function __PRIVATE_localStoreGetTargetData(e3, t3, n3) {
          const r3 = __PRIVATE_debugCast(e3), i2 = r3.Is.get(n3);
          return void 0 !== i2 ? PersistencePromise.resolve(r3.Ts.get(i2)) : r3.Hr.getTargetData(t3, n3);
        }, "__PRIVATE_localStoreGetTargetData"))(r2, e2, __PRIVATE_queryToTarget(t2)).next((t3) => {
          if (t3)
            return i = t3.lastLimboFreeSnapshotVersion, r2.Hr.getMatchingKeysForTargetId(e2, t3.targetId).next((e3) => {
              s2 = e3;
            });
        }).next(() => r2.Ps.getDocumentsMatchingQuery(e2, t2, n2 ? i : SnapshotVersion.min(), n2 ? s2 : __PRIVATE_documentKeySet())).next((e3) => (__PRIVATE_setMaxReadTime(r2, __PRIVATE_queryCollectionGroup(t2), e3), {
          documents: e3,
          gs: s2
        }))
      );
    }
    __name(__PRIVATE_localStoreExecuteQuery, "__PRIVATE_localStoreExecuteQuery");
    function __PRIVATE_localStoreGetCachedTarget(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = __PRIVATE_debugCast(n2.Hr), i = n2.Ts.get(t2);
      return i ? Promise.resolve(i.target) : n2.persistence.runTransaction("Get target data", "readonly", (e2) => r2.lt(e2, t2).next((e3) => e3 ? e3.target : null));
    }
    __name(__PRIVATE_localStoreGetCachedTarget, "__PRIVATE_localStoreGetCachedTarget");
    function __PRIVATE_localStoreGetNewDocumentChanges(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = n2.Es.get(t2) || SnapshotVersion.min();
      return n2.persistence.runTransaction("Get new document changes", "readonly", (e2) => n2.ds.getAllFromCollectionGroup(
        e2,
        t2,
        __PRIVATE_newIndexOffsetSuccessorFromReadTime(r2, N),
        /* limit= */
        Number.MAX_SAFE_INTEGER
      )).then((e2) => (__PRIVATE_setMaxReadTime(n2, t2, e2), e2));
    }
    __name(__PRIVATE_localStoreGetNewDocumentChanges, "__PRIVATE_localStoreGetNewDocumentChanges");
    function __PRIVATE_setMaxReadTime(e, t2, n2) {
      let r2 = e.Es.get(t2) || SnapshotVersion.min();
      n2.forEach((e2, t3) => {
        t3.readTime.compareTo(r2) > 0 && (r2 = t3.readTime);
      }), e.Es.set(t2, r2);
    }
    __name(__PRIVATE_setMaxReadTime, "__PRIVATE_setMaxReadTime");
    async function __PRIVATE_localStoreApplyBundledDocuments(e, t2, n2, r2) {
      const i = __PRIVATE_debugCast(e);
      let s2 = __PRIVATE_documentKeySet(), o2 = __PRIVATE_mutableDocumentMap();
      for (const e2 of n2) {
        const n3 = t2.ps(e2.metadata.name);
        e2.document && (s2 = s2.add(n3));
        const r3 = t2.ys(e2);
        r3.setReadTime(t2.ws(e2.metadata.readTime)), o2 = o2.insert(n3, r3);
      }
      const _ = i.ds.newChangeBuffer({
        trackRemovals: true
      }), a2 = await __PRIVATE_localStoreAllocateTarget(i, (/* @__PURE__ */ __name(function __PRIVATE_umbrellaTarget(e2) {
        return __PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(ResourcePath.fromString(`__bundle__/docs/${e2}`)));
      }, "__PRIVATE_umbrellaTarget"))(r2));
      return i.persistence.runTransaction("Apply bundle documents", "readwrite", (e2) => __PRIVATE_populateDocumentChangeBuffer(e2, _, o2).next((t3) => (_.apply(e2), t3)).next((t3) => i.Hr.removeMatchingKeysForTargetId(e2, a2.targetId).next(() => i.Hr.addMatchingKeys(e2, s2, a2.targetId)).next(() => i.localDocuments.getLocalViewOfDocuments(e2, t3.Vs, t3.fs)).next(() => t3.Vs)));
    }
    __name(__PRIVATE_localStoreApplyBundledDocuments, "__PRIVATE_localStoreApplyBundledDocuments");
    async function __PRIVATE_localStoreSaveNamedQuery(e, t2, n2 = __PRIVATE_documentKeySet()) {
      const r2 = await __PRIVATE_localStoreAllocateTarget(e, __PRIVATE_queryToTarget(__PRIVATE_fromBundledQuery(t2.bundledQuery))), i = __PRIVATE_debugCast(e);
      return i.persistence.runTransaction("Save named query", "readwrite", (e2) => {
        const s2 = __PRIVATE_fromVersion(t2.readTime);
        if (r2.snapshotVersion.compareTo(s2) >= 0)
          return i.Yr.saveNamedQuery(e2, t2);
        const o2 = r2.withResumeToken(ByteString.EMPTY_BYTE_STRING, s2);
        return i.Ts = i.Ts.insert(o2.targetId, o2), i.Hr.updateTargetData(e2, o2).next(() => i.Hr.removeMatchingKeysForTargetId(e2, r2.targetId)).next(() => i.Hr.addMatchingKeys(e2, n2, r2.targetId)).next(() => i.Yr.saveNamedQuery(e2, t2));
      });
    }
    __name(__PRIVATE_localStoreSaveNamedQuery, "__PRIVATE_localStoreSaveNamedQuery");
    var Bt = "firestore_clients";
    function createWebStorageClientStateKey(e, t2) {
      return `${Bt}_${e}_${t2}`;
    }
    __name(createWebStorageClientStateKey, "createWebStorageClientStateKey");
    var Lt = "firestore_mutations";
    function createWebStorageMutationBatchKey(e, t2, n2) {
      let r2 = `${Lt}_${e}_${n2}`;
      return t2.isAuthenticated() && (r2 += `_${t2.uid}`), r2;
    }
    __name(createWebStorageMutationBatchKey, "createWebStorageMutationBatchKey");
    var kt = "firestore_targets";
    function createWebStorageQueryTargetMetadataKey(e, t2) {
      return `${kt}_${e}_${t2}`;
    }
    __name(createWebStorageQueryTargetMetadataKey, "createWebStorageQueryTargetMetadataKey");
    var qt = "SharedClientState";
    var __PRIVATE_MutationMetadata = class {
      constructor(e, t2, n2, r2) {
        this.user = e, this.batchId = t2, this.state = n2, this.error = r2;
      }
      /**
       * Parses a MutationMetadata from its JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */
      static Ss(e, t2, n2) {
        const r2 = JSON.parse(n2);
        let i, s2 = "object" == typeof r2 && -1 !== ["pending", "acknowledged", "rejected"].indexOf(r2.state) && (void 0 === r2.error || "object" == typeof r2.error);
        return s2 && r2.error && (s2 = "string" == typeof r2.error.message && "string" == typeof r2.error.code, s2 && (i = new FirestoreError(r2.error.code, r2.error.message))), s2 ? new __PRIVATE_MutationMetadata(e, t2, r2.state, i) : (__PRIVATE_logError(qt, `Failed to parse mutation state for ID '${t2}': ${n2}`), null);
      }
      bs() {
        const e = {
          state: this.state,
          updateTimeMs: Date.now()
        };
        return this.error && (e.error = {
          code: this.error.code,
          message: this.error.message
        }), JSON.stringify(e);
      }
    };
    __name(__PRIVATE_MutationMetadata, "__PRIVATE_MutationMetadata");
    var __PRIVATE_QueryTargetMetadata = class {
      constructor(e, t2, n2) {
        this.targetId = e, this.state = t2, this.error = n2;
      }
      /**
       * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */
      static Ss(e, t2) {
        const n2 = JSON.parse(t2);
        let r2, i = "object" == typeof n2 && -1 !== ["not-current", "current", "rejected"].indexOf(n2.state) && (void 0 === n2.error || "object" == typeof n2.error);
        return i && n2.error && (i = "string" == typeof n2.error.message && "string" == typeof n2.error.code, i && (r2 = new FirestoreError(n2.error.code, n2.error.message))), i ? new __PRIVATE_QueryTargetMetadata(e, n2.state, r2) : (__PRIVATE_logError(qt, `Failed to parse target state for ID '${e}': ${t2}`), null);
      }
      bs() {
        const e = {
          state: this.state,
          updateTimeMs: Date.now()
        };
        return this.error && (e.error = {
          code: this.error.code,
          message: this.error.message
        }), JSON.stringify(e);
      }
    };
    __name(__PRIVATE_QueryTargetMetadata, "__PRIVATE_QueryTargetMetadata");
    var __PRIVATE_RemoteClientState = class {
      constructor(e, t2) {
        this.clientId = e, this.activeTargetIds = t2;
      }
      /**
       * Parses a RemoteClientState from the JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */
      static Ss(e, t2) {
        const n2 = JSON.parse(t2);
        let r2 = "object" == typeof n2 && n2.activeTargetIds instanceof Array, i = __PRIVATE_targetIdSet();
        for (let e2 = 0; r2 && e2 < n2.activeTargetIds.length; ++e2)
          r2 = isSafeInteger(n2.activeTargetIds[e2]), i = i.add(n2.activeTargetIds[e2]);
        return r2 ? new __PRIVATE_RemoteClientState(e, i) : (__PRIVATE_logError(qt, `Failed to parse client data for instance '${e}': ${t2}`), null);
      }
    };
    __name(__PRIVATE_RemoteClientState, "__PRIVATE_RemoteClientState");
    var __PRIVATE_SharedOnlineState = class {
      constructor(e, t2) {
        this.clientId = e, this.onlineState = t2;
      }
      /**
       * Parses a SharedOnlineState from its JSON representation in WebStorage.
       * Logs a warning and returns null if the format of the data is not valid.
       */
      static Ss(e) {
        const t2 = JSON.parse(e);
        return "object" == typeof t2 && -1 !== ["Unknown", "Online", "Offline"].indexOf(t2.onlineState) && "string" == typeof t2.clientId ? new __PRIVATE_SharedOnlineState(t2.clientId, t2.onlineState) : (__PRIVATE_logError(qt, `Failed to parse online state: ${e}`), null);
      }
    };
    __name(__PRIVATE_SharedOnlineState, "__PRIVATE_SharedOnlineState");
    var __PRIVATE_LocalClientState = class {
      constructor() {
        this.activeTargetIds = __PRIVATE_targetIdSet();
      }
      Ds(e) {
        this.activeTargetIds = this.activeTargetIds.add(e);
      }
      vs(e) {
        this.activeTargetIds = this.activeTargetIds.delete(e);
      }
      /**
       * Converts this entry into a JSON-encoded format we can use for WebStorage.
       * Does not encode `clientId` as it is part of the key in WebStorage.
       */
      bs() {
        const e = {
          activeTargetIds: this.activeTargetIds.toArray(),
          updateTimeMs: Date.now()
        };
        return JSON.stringify(e);
      }
    };
    __name(__PRIVATE_LocalClientState, "__PRIVATE_LocalClientState");
    var __PRIVATE_WebStorageSharedClientState = class {
      constructor(e, t2, n2, r2, i) {
        this.window = e, this.Ti = t2, this.persistenceKey = n2, this.Cs = r2, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.Fs = this.Ms.bind(this), this.xs = new SortedMap(__PRIVATE_primitiveComparator), this.started = false, /**
         * Captures WebStorage events that occur before `start()` is called. These
         * events are replayed once `WebStorageSharedClientState` is started.
         */
        this.Os = [];
        const s2 = n2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        this.storage = this.window.localStorage, this.currentUser = i, this.Ns = createWebStorageClientStateKey(this.persistenceKey, this.Cs), this.Bs = /** Assembles the key for the current sequence number. */
        (/* @__PURE__ */ __name(function createWebStorageSequenceNumberKey(e2) {
          return `firestore_sequence_number_${e2}`;
        }, "createWebStorageSequenceNumberKey"))(this.persistenceKey), this.xs = this.xs.insert(this.Cs, new __PRIVATE_LocalClientState()), this.Ls = new RegExp(`^${Bt}_${s2}_([^_]*)$`), this.ks = new RegExp(`^${Lt}_${s2}_(\\d+)(?:_(.*))?$`), this.qs = new RegExp(`^${kt}_${s2}_(\\d+)$`), this.Qs = /** Assembles the key for the online state of the primary tab. */
        (/* @__PURE__ */ __name(function createWebStorageOnlineStateKey(e2) {
          return `firestore_online_state_${e2}`;
        }, "createWebStorageOnlineStateKey"))(this.persistenceKey), this.$s = (/* @__PURE__ */ __name(function createBundleLoadedKey(e2) {
          return `firestore_bundle_loaded_v2_${e2}`;
        }, "createBundleLoadedKey"))(this.persistenceKey), // Rather than adding the storage observer during start(), we add the
        // storage observer during initialization. This ensures that we collect
        // events before other components populate their initial state (during their
        // respective start() calls). Otherwise, we might for example miss a
        // mutation that is added after LocalStore's start() processed the existing
        // mutations but before we observe WebStorage events.
        this.window.addEventListener("storage", this.Fs);
      }
      /** Returns 'true' if WebStorage is available in the current environment. */
      static D(e) {
        return !(!e || !e.localStorage);
      }
      async start() {
        const e = await this.syncEngine.zi();
        for (const t3 of e) {
          if (t3 === this.Cs)
            continue;
          const e2 = this.getItem(createWebStorageClientStateKey(this.persistenceKey, t3));
          if (e2) {
            const n2 = __PRIVATE_RemoteClientState.Ss(t3, e2);
            n2 && (this.xs = this.xs.insert(n2.clientId, n2));
          }
        }
        this.Ks();
        const t2 = this.storage.getItem(this.Qs);
        if (t2) {
          const e2 = this.Us(t2);
          e2 && this.Ws(e2);
        }
        for (const e2 of this.Os)
          this.Ms(e2);
        this.Os = [], // Register a window unload hook to remove the client metadata entry from
        // WebStorage even if `shutdown()` was not called.
        this.window.addEventListener("pagehide", () => this.shutdown()), this.started = true;
      }
      writeSequenceNumber(e) {
        this.setItem(this.Bs, JSON.stringify(e));
      }
      getAllActiveQueryTargets() {
        return this.Gs(this.xs);
      }
      isActiveQueryTarget(e) {
        let t2 = false;
        return this.xs.forEach((n2, r2) => {
          r2.activeTargetIds.has(e) && (t2 = true);
        }), t2;
      }
      addPendingMutation(e) {
        this.zs(e, "pending");
      }
      updateMutationState(e, t2, n2) {
        this.zs(e, t2, n2), // Once a final mutation result is observed by other clients, they no longer
        // access the mutation's metadata entry. Since WebStorage replays events
        // in order, it is safe to delete the entry right after updating it.
        this.js(e);
      }
      addLocalQueryTarget(e, t2 = true) {
        let n2 = "not-current";
        if (this.isActiveQueryTarget(e)) {
          const t3 = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, e));
          if (t3) {
            const r2 = __PRIVATE_QueryTargetMetadata.Ss(e, t3);
            r2 && (n2 = r2.state);
          }
        }
        return t2 && this.Hs.Ds(e), this.Ks(), n2;
      }
      removeLocalQueryTarget(e) {
        this.Hs.vs(e), this.Ks();
      }
      isLocalQueryTarget(e) {
        return this.Hs.activeTargetIds.has(e);
      }
      clearQueryState(e) {
        this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, e));
      }
      updateQueryState(e, t2, n2) {
        this.Js(e, t2, n2);
      }
      handleUserChange(e, t2, n2) {
        t2.forEach((e2) => {
          this.js(e2);
        }), this.currentUser = e, n2.forEach((e2) => {
          this.addPendingMutation(e2);
        });
      }
      setOnlineState(e) {
        this.Ys(e);
      }
      notifyBundleLoaded(e) {
        this.Zs(e);
      }
      shutdown() {
        this.started && (this.window.removeEventListener("storage", this.Fs), this.removeItem(this.Ns), this.started = false);
      }
      getItem(e) {
        const t2 = this.storage.getItem(e);
        return __PRIVATE_logDebug(qt, "READ", e, t2), t2;
      }
      setItem(e, t2) {
        __PRIVATE_logDebug(qt, "SET", e, t2), this.storage.setItem(e, t2);
      }
      removeItem(e) {
        __PRIVATE_logDebug(qt, "REMOVE", e), this.storage.removeItem(e);
      }
      Ms(e) {
        const t2 = e;
        if (t2.storageArea === this.storage) {
          if (__PRIVATE_logDebug(qt, "EVENT", t2.key, t2.newValue), t2.key === this.Ns)
            return void __PRIVATE_logError("Received WebStorage notification for local change. Another client might have garbage-collected our state");
          this.Ti.enqueueRetryable(async () => {
            if (this.started) {
              if (null !== t2.key) {
                if (this.Ls.test(t2.key)) {
                  if (null == t2.newValue) {
                    const e2 = this.Xs(t2.key);
                    return this.eo(e2, null);
                  }
                  {
                    const e2 = this.no(t2.key, t2.newValue);
                    if (e2)
                      return this.eo(e2.clientId, e2);
                  }
                } else if (this.ks.test(t2.key)) {
                  if (null !== t2.newValue) {
                    const e2 = this.ro(t2.key, t2.newValue);
                    if (e2)
                      return this.io(e2);
                  }
                } else if (this.qs.test(t2.key)) {
                  if (null !== t2.newValue) {
                    const e2 = this.so(t2.key, t2.newValue);
                    if (e2)
                      return this.oo(e2);
                  }
                } else if (t2.key === this.Qs) {
                  if (null !== t2.newValue) {
                    const e2 = this.Us(t2.newValue);
                    if (e2)
                      return this.Ws(e2);
                  }
                } else if (t2.key === this.Bs) {
                  const e2 = (/* @__PURE__ */ __name(function __PRIVATE_fromWebStorageSequenceNumber(e3) {
                    let t3 = __PRIVATE_ListenSequence.ae;
                    if (null != e3)
                      try {
                        const n2 = JSON.parse(e3);
                        __PRIVATE_hardAssert("number" == typeof n2), t3 = n2;
                      } catch (e4) {
                        __PRIVATE_logError(qt, "Failed to read sequence number from WebStorage", e4);
                      }
                    return t3;
                  }, "__PRIVATE_fromWebStorageSequenceNumber"))(t2.newValue);
                  e2 !== __PRIVATE_ListenSequence.ae && this.sequenceNumberHandler(e2);
                } else if (t2.key === this.$s) {
                  const e2 = this._o(t2.newValue);
                  await Promise.all(e2.map((e3) => this.syncEngine.ao(e3)));
                }
              }
            } else
              this.Os.push(t2);
          });
        }
      }
      get Hs() {
        return this.xs.get(this.Cs);
      }
      Ks() {
        this.setItem(this.Ns, this.Hs.bs());
      }
      zs(e, t2, n2) {
        const r2 = new __PRIVATE_MutationMetadata(this.currentUser, e, t2, n2), i = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, e);
        this.setItem(i, r2.bs());
      }
      js(e) {
        const t2 = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, e);
        this.removeItem(t2);
      }
      Ys(e) {
        const t2 = {
          clientId: this.Cs,
          onlineState: e
        };
        this.storage.setItem(this.Qs, JSON.stringify(t2));
      }
      Js(e, t2, n2) {
        const r2 = createWebStorageQueryTargetMetadataKey(this.persistenceKey, e), i = new __PRIVATE_QueryTargetMetadata(e, t2, n2);
        this.setItem(r2, i.bs());
      }
      Zs(e) {
        const t2 = JSON.stringify(Array.from(e));
        this.setItem(this.$s, t2);
      }
      /**
       * Parses a client state key in WebStorage. Returns null if the key does not
       * match the expected key format.
       */
      Xs(e) {
        const t2 = this.Ls.exec(e);
        return t2 ? t2[1] : null;
      }
      /**
       * Parses a client state in WebStorage. Returns 'null' if the value could not
       * be parsed.
       */
      no(e, t2) {
        const n2 = this.Xs(e);
        return __PRIVATE_RemoteClientState.Ss(n2, t2);
      }
      /**
       * Parses a mutation batch state in WebStorage. Returns 'null' if the value
       * could not be parsed.
       */
      ro(e, t2) {
        const n2 = this.ks.exec(e), r2 = Number(n2[1]), i = void 0 !== n2[2] ? n2[2] : null;
        return __PRIVATE_MutationMetadata.Ss(new User(i), r2, t2);
      }
      /**
       * Parses a query target state from WebStorage. Returns 'null' if the value
       * could not be parsed.
       */
      so(e, t2) {
        const n2 = this.qs.exec(e), r2 = Number(n2[1]);
        return __PRIVATE_QueryTargetMetadata.Ss(r2, t2);
      }
      /**
       * Parses an online state from WebStorage. Returns 'null' if the value
       * could not be parsed.
       */
      Us(e) {
        return __PRIVATE_SharedOnlineState.Ss(e);
      }
      _o(e) {
        return JSON.parse(e);
      }
      async io(e) {
        if (e.user.uid === this.currentUser.uid)
          return this.syncEngine.uo(e.batchId, e.state, e.error);
        __PRIVATE_logDebug(qt, `Ignoring mutation for non-active user ${e.user.uid}`);
      }
      oo(e) {
        return this.syncEngine.co(e.targetId, e.state, e.error);
      }
      eo(e, t2) {
        const n2 = t2 ? this.xs.insert(e, t2) : this.xs.remove(e), r2 = this.Gs(this.xs), i = this.Gs(n2), s2 = [], o2 = [];
        return i.forEach((e2) => {
          r2.has(e2) || s2.push(e2);
        }), r2.forEach((e2) => {
          i.has(e2) || o2.push(e2);
        }), this.syncEngine.lo(s2, o2).then(() => {
          this.xs = n2;
        });
      }
      Ws(e) {
        this.xs.get(e.clientId) && this.onlineStateHandler(e.onlineState);
      }
      Gs(e) {
        let t2 = __PRIVATE_targetIdSet();
        return e.forEach((e2, n2) => {
          t2 = t2.unionWith(n2.activeTargetIds);
        }), t2;
      }
    };
    __name(__PRIVATE_WebStorageSharedClientState, "__PRIVATE_WebStorageSharedClientState");
    var __PRIVATE_MemorySharedClientState = class {
      constructor() {
        this.ho = new __PRIVATE_LocalClientState(), this.Po = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
      }
      addPendingMutation(e) {
      }
      updateMutationState(e, t2, n2) {
      }
      addLocalQueryTarget(e, t2 = true) {
        return t2 && this.ho.Ds(e), this.Po[e] || "not-current";
      }
      updateQueryState(e, t2, n2) {
        this.Po[e] = t2;
      }
      removeLocalQueryTarget(e) {
        this.ho.vs(e);
      }
      isLocalQueryTarget(e) {
        return this.ho.activeTargetIds.has(e);
      }
      clearQueryState(e) {
        delete this.Po[e];
      }
      getAllActiveQueryTargets() {
        return this.ho.activeTargetIds;
      }
      isActiveQueryTarget(e) {
        return this.ho.activeTargetIds.has(e);
      }
      start() {
        return this.ho = new __PRIVATE_LocalClientState(), Promise.resolve();
      }
      handleUserChange(e, t2, n2) {
      }
      setOnlineState(e) {
      }
      shutdown() {
      }
      writeSequenceNumber(e) {
      }
      notifyBundleLoaded(e) {
      }
    };
    __name(__PRIVATE_MemorySharedClientState, "__PRIVATE_MemorySharedClientState");
    var __PRIVATE_NoopConnectivityMonitor = class {
      To(e) {
      }
      shutdown() {
      }
    };
    __name(__PRIVATE_NoopConnectivityMonitor, "__PRIVATE_NoopConnectivityMonitor");
    var Qt = "ConnectivityMonitor";
    var __PRIVATE_BrowserConnectivityMonitor = class {
      constructor() {
        this.Io = () => this.Eo(), this.Ao = () => this.Ro(), this.Vo = [], this.mo();
      }
      To(e) {
        this.Vo.push(e);
      }
      shutdown() {
        window.removeEventListener("online", this.Io), window.removeEventListener("offline", this.Ao);
      }
      mo() {
        window.addEventListener("online", this.Io), window.addEventListener("offline", this.Ao);
      }
      Eo() {
        __PRIVATE_logDebug(Qt, "Network connectivity changed: AVAILABLE");
        for (const e of this.Vo)
          e(
            0
            /* NetworkStatus.AVAILABLE */
          );
      }
      Ro() {
        __PRIVATE_logDebug(Qt, "Network connectivity changed: UNAVAILABLE");
        for (const e of this.Vo)
          e(
            1
            /* NetworkStatus.UNAVAILABLE */
          );
      }
      // TODO(chenbrian): Consider passing in window either into this component or
      // here for testing via FakeWindow.
      /** Checks that all used attributes of window are available. */
      static D() {
        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
      }
    };
    __name(__PRIVATE_BrowserConnectivityMonitor, "__PRIVATE_BrowserConnectivityMonitor");
    var $t = null;
    function __PRIVATE_generateUniqueDebugId() {
      return null === $t ? $t = (/* @__PURE__ */ __name(function __PRIVATE_generateInitialUniqueDebugId() {
        return 268435456 + Math.round(2147483648 * Math.random());
      }, "__PRIVATE_generateInitialUniqueDebugId"))() : $t++, "0x" + $t.toString(16);
    }
    __name(__PRIVATE_generateUniqueDebugId, "__PRIVATE_generateUniqueDebugId");
    var Kt = "RestConnection";
    var Ut = {
      BatchGetDocuments: "batchGet",
      Commit: "commit",
      RunQuery: "runQuery",
      RunAggregationQuery: "runAggregationQuery"
    };
    var __PRIVATE_RestConnection = class {
      get fo() {
        return false;
      }
      constructor(e) {
        this.databaseInfo = e, this.databaseId = e.databaseId;
        const t2 = e.ssl ? "https" : "http", n2 = encodeURIComponent(this.databaseId.projectId), r2 = encodeURIComponent(this.databaseId.database);
        this.po = t2 + "://" + e.host, this.yo = `projects/${n2}/databases/${r2}`, this.wo = this.databaseId.database === rt ? `project_id=${n2}` : `project_id=${n2}&database_id=${r2}`;
      }
      So(e, t2, n2, r2, i) {
        const s2 = __PRIVATE_generateUniqueDebugId(), o2 = this.bo(e, t2.toUriEncodedString());
        __PRIVATE_logDebug(Kt, `Sending RPC '${e}' ${s2}:`, o2, n2);
        const _ = {
          "google-cloud-resource-prefix": this.yo,
          "x-goog-request-params": this.wo
        };
        return this.Do(_, r2, i), this.vo(e, o2, _, n2).then((t3) => (__PRIVATE_logDebug(Kt, `Received RPC '${e}' ${s2}: `, t3), t3), (t3) => {
          throw __PRIVATE_logWarn(Kt, `RPC '${e}' ${s2} failed with error: `, t3, "url: ", o2, "request:", n2), t3;
        });
      }
      Co(e, t2, n2, r2, i, s2) {
        return this.So(e, t2, n2, r2, i);
      }
      /**
       * Modifies the headers for a request, adding any authorization token if
       * present and any additional headers for the request.
       */
      Do(e, t2, n2) {
        e["X-Goog-Api-Client"] = // SDK_VERSION is updated to different value at runtime depending on the entry point,
        // so we need to get its value when we need it in a function.
        (/* @__PURE__ */ __name(function __PRIVATE_getGoogApiClientValue() {
          return "gl-js/ fire/" + D;
        }, "__PRIVATE_getGoogApiClientValue"))(), // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        e["Content-Type"] = "text/plain", this.databaseInfo.appId && (e["X-Firebase-GMPID"] = this.databaseInfo.appId), t2 && t2.headers.forEach((t3, n3) => e[n3] = t3), n2 && n2.headers.forEach((t3, n3) => e[n3] = t3);
      }
      bo(e, t2) {
        const n2 = Ut[e];
        return `${this.po}/v1/${t2}:${n2}`;
      }
      /**
       * Closes and cleans up any resources associated with the connection. This
       * implementation is a no-op because there are no resources associated
       * with the RestConnection that need to be cleaned up.
       */
      terminate() {
      }
    };
    __name(__PRIVATE_RestConnection, "__PRIVATE_RestConnection");
    var __PRIVATE_StreamBridge = class {
      constructor(e) {
        this.Fo = e.Fo, this.Mo = e.Mo;
      }
      xo(e) {
        this.Oo = e;
      }
      No(e) {
        this.Bo = e;
      }
      Lo(e) {
        this.ko = e;
      }
      onMessage(e) {
        this.qo = e;
      }
      close() {
        this.Mo();
      }
      send(e) {
        this.Fo(e);
      }
      Qo() {
        this.Oo();
      }
      $o() {
        this.Bo();
      }
      Ko(e) {
        this.ko(e);
      }
      Uo(e) {
        this.qo(e);
      }
    };
    __name(__PRIVATE_StreamBridge, "__PRIVATE_StreamBridge");
    var Wt = "WebChannelConnection";
    var __PRIVATE_WebChannelConnection = class extends __PRIVATE_RestConnection {
      constructor(e) {
        super(e), this.forceLongPolling = e.forceLongPolling, this.autoDetectLongPolling = e.autoDetectLongPolling, this.useFetchStreams = e.useFetchStreams, this.longPollingOptions = e.longPollingOptions;
      }
      vo(e, t2, n2, r2) {
        const i = __PRIVATE_generateUniqueDebugId();
        return new Promise((s2, o2) => {
          const _ = new webchannelBlob.XhrIo();
          _.setWithCredentials(true), _.listenOnce(webchannelBlob.EventType.COMPLETE, () => {
            try {
              switch (_.getLastErrorCode()) {
                case webchannelBlob.ErrorCode.NO_ERROR:
                  const t3 = _.getResponseJson();
                  __PRIVATE_logDebug(Wt, `XHR for RPC '${e}' ${i} received:`, JSON.stringify(t3)), s2(t3);
                  break;
                case webchannelBlob.ErrorCode.TIMEOUT:
                  __PRIVATE_logDebug(Wt, `RPC '${e}' ${i} timed out`), o2(new FirestoreError(C.DEADLINE_EXCEEDED, "Request time out"));
                  break;
                case webchannelBlob.ErrorCode.HTTP_ERROR:
                  const n3 = _.getStatus();
                  if (__PRIVATE_logDebug(Wt, `RPC '${e}' ${i} failed with status:`, n3, "response text:", _.getResponseText()), n3 > 0) {
                    let e2 = _.getResponseJson();
                    Array.isArray(e2) && (e2 = e2[0]);
                    const t4 = null == e2 ? void 0 : e2.error;
                    if (t4 && t4.status && t4.message) {
                      const e3 = (/* @__PURE__ */ __name(function __PRIVATE_mapCodeFromHttpResponseErrorStatus(e4) {
                        const t5 = e4.toLowerCase().replace(/_/g, "-");
                        return Object.values(C).indexOf(t5) >= 0 ? t5 : C.UNKNOWN;
                      }, "__PRIVATE_mapCodeFromHttpResponseErrorStatus"))(t4.status);
                      o2(new FirestoreError(e3, t4.message));
                    } else
                      o2(new FirestoreError(C.UNKNOWN, "Server responded with status " + _.getStatus()));
                  } else
                    o2(new FirestoreError(C.UNAVAILABLE, "Connection failed."));
                  break;
                default:
                  fail();
              }
            } finally {
              __PRIVATE_logDebug(Wt, `RPC '${e}' ${i} completed.`);
            }
          });
          const a2 = JSON.stringify(r2);
          __PRIVATE_logDebug(Wt, `RPC '${e}' ${i} sending request:`, r2), _.send(t2, "POST", a2, n2, 15);
        });
      }
      Wo(e, t2, n2) {
        const r2 = __PRIVATE_generateUniqueDebugId(), i = [this.po, "/", "google.firestore.v1.Firestore", "/", e, "/channel"], s2 = webchannelBlob.createWebChannelTransport(), o2 = webchannelBlob.getStatEventTarget(), _ = {
          // Required for backend stickiness, routing behavior is based on this
          // parameter.
          httpSessionIdParam: "gsessionid",
          initMessageHeaders: {},
          messageUrlParams: {
            // This param is used to improve routing and project isolation by the
            // backend and must be included in every request.
            database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
          },
          sendRawJson: true,
          supportsCrossDomainXhr: true,
          internalChannelParams: {
            // Override the default timeout (randomized between 10-20 seconds) since
            // a large write batch on a slow internet connection may take a long
            // time to send to the backend. Rather than have WebChannel impose a
            // tight timeout which could lead to infinite timeouts and retries, we
            // set it very large (5-10 minutes) and rely on the browser's builtin
            // timeouts to kick in if the request isn't working.
            forwardChannelRequestTimeoutMs: 6e5
          },
          forceLongPolling: this.forceLongPolling,
          detectBufferingProxy: this.autoDetectLongPolling
        }, a2 = this.longPollingOptions.timeoutSeconds;
        void 0 !== a2 && (_.longPollingTimeout = Math.round(1e3 * a2)), this.useFetchStreams && (_.useFetchStreams = true), this.Do(_.initMessageHeaders, t2, n2), // Sending the custom headers we just added to request.initMessageHeaders
        // (Authorization, etc.) will trigger the browser to make a CORS preflight
        // request because the XHR will no longer meet the criteria for a "simple"
        // CORS request:
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
        // Therefore to avoid the CORS preflight request (an extra network
        // roundtrip), we use the encodeInitMessageHeaders option to specify that
        // the headers should instead be encoded in the request's POST payload,
        // which is recognized by the webchannel backend.
        _.encodeInitMessageHeaders = true;
        const u2 = i.join("");
        __PRIVATE_logDebug(Wt, `Creating RPC '${e}' stream ${r2}: ${u2}`, _);
        const c2 = s2.createWebChannel(u2, _);
        let l = false, h2 = false;
        const P = new __PRIVATE_StreamBridge({
          Fo: (t3) => {
            h2 ? __PRIVATE_logDebug(Wt, `Not sending because RPC '${e}' stream ${r2} is closed:`, t3) : (l || (__PRIVATE_logDebug(Wt, `Opening RPC '${e}' stream ${r2} transport.`), c2.open(), l = true), __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r2} sending:`, t3), c2.send(t3));
          },
          Mo: () => c2.close()
        }), __PRIVATE_unguardedEventListen = /* @__PURE__ */ __name((e2, t3, n3) => {
          e2.listen(t3, (e3) => {
            try {
              n3(e3);
            } catch (e4) {
              setTimeout(() => {
                throw e4;
              }, 0);
            }
          });
        }, "__PRIVATE_unguardedEventListen");
        return __PRIVATE_unguardedEventListen(c2, webchannelBlob.WebChannel.EventType.OPEN, () => {
          h2 || (__PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r2} transport opened.`), P.Qo());
        }), __PRIVATE_unguardedEventListen(c2, webchannelBlob.WebChannel.EventType.CLOSE, () => {
          h2 || (h2 = true, __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r2} transport closed`), P.Ko());
        }), __PRIVATE_unguardedEventListen(c2, webchannelBlob.WebChannel.EventType.ERROR, (t3) => {
          h2 || (h2 = true, __PRIVATE_logWarn(Wt, `RPC '${e}' stream ${r2} transport errored:`, t3), P.Ko(new FirestoreError(C.UNAVAILABLE, "The operation could not be completed")));
        }), __PRIVATE_unguardedEventListen(c2, webchannelBlob.WebChannel.EventType.MESSAGE, (t3) => {
          var n3;
          if (!h2) {
            const i2 = t3.data[0];
            __PRIVATE_hardAssert(!!i2);
            const s3 = i2, o3 = (null == s3 ? void 0 : s3.error) || (null === (n3 = s3[0]) || void 0 === n3 ? void 0 : n3.error);
            if (o3) {
              __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r2} received error:`, o3);
              const t4 = o3.status;
              let n4 = (
                /**
                * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
                *
                * @returns The Code equivalent to the given status string or undefined if
                *     there is no match.
                */
                (/* @__PURE__ */ __name(function __PRIVATE_mapCodeFromRpcStatus(e2) {
                  const t5 = Et[e2];
                  if (void 0 !== t5)
                    return __PRIVATE_mapCodeFromRpcCode(t5);
                }, "__PRIVATE_mapCodeFromRpcStatus"))(t4)
              ), i3 = o3.message;
              void 0 === n4 && (n4 = C.INTERNAL, i3 = "Unknown error status: " + t4 + " with message " + o3.message), // Mark closed so no further events are propagated
              h2 = true, P.Ko(new FirestoreError(n4, i3)), c2.close();
            } else
              __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r2} received:`, i2), P.Uo(i2);
          }
        }), __PRIVATE_unguardedEventListen(o2, webchannelBlob.Event.STAT_EVENT, (t3) => {
          t3.stat === webchannelBlob.Stat.PROXY ? __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r2} detected buffering proxy`) : t3.stat === webchannelBlob.Stat.NOPROXY && __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r2} detected no buffering proxy`);
        }), setTimeout(() => {
          P.$o();
        }, 0), P;
      }
    };
    __name(__PRIVATE_WebChannelConnection, "__PRIVATE_WebChannelConnection");
    function __PRIVATE_getWindow() {
      return "undefined" != typeof window ? window : null;
    }
    __name(__PRIVATE_getWindow, "__PRIVATE_getWindow");
    function getDocument() {
      return "undefined" != typeof document ? document : null;
    }
    __name(getDocument, "getDocument");
    function __PRIVATE_newSerializer(e) {
      return new JsonProtoSerializer(
        e,
        /* useProto3Json= */
        true
      );
    }
    __name(__PRIVATE_newSerializer, "__PRIVATE_newSerializer");
    var __PRIVATE_ExponentialBackoff = class {
      constructor(e, t2, n2 = 1e3, r2 = 1.5, i = 6e4) {
        this.Ti = e, this.timerId = t2, this.Go = n2, this.zo = r2, this.jo = i, this.Ho = 0, this.Jo = null, /** The last backoff attempt, as epoch milliseconds. */
        this.Yo = Date.now(), this.reset();
      }
      /**
       * Resets the backoff delay.
       *
       * The very next backoffAndWait() will have no delay. If it is called again
       * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
       * subsequent ones will increase according to the backoffFactor.
       */
      reset() {
        this.Ho = 0;
      }
      /**
       * Resets the backoff delay to the maximum delay (e.g. for use after a
       * RESOURCE_EXHAUSTED error).
       */
      Zo() {
        this.Ho = this.jo;
      }
      /**
       * Returns a promise that resolves after currentDelayMs, and increases the
       * delay for any subsequent attempts. If there was a pending backoff operation
       * already, it will be canceled.
       */
      Xo(e) {
        this.cancel();
        const t2 = Math.floor(this.Ho + this.e_()), n2 = Math.max(0, Date.now() - this.Yo), r2 = Math.max(0, t2 - n2);
        r2 > 0 && __PRIVATE_logDebug("ExponentialBackoff", `Backing off for ${r2} ms (base delay: ${this.Ho} ms, delay with jitter: ${t2} ms, last attempt: ${n2} ms ago)`), this.Jo = this.Ti.enqueueAfterDelay(this.timerId, r2, () => (this.Yo = Date.now(), e())), // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.Ho *= this.zo, this.Ho < this.Go && (this.Ho = this.Go), this.Ho > this.jo && (this.Ho = this.jo);
      }
      t_() {
        null !== this.Jo && (this.Jo.skipDelay(), this.Jo = null);
      }
      cancel() {
        null !== this.Jo && (this.Jo.cancel(), this.Jo = null);
      }
      /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
      e_() {
        return (Math.random() - 0.5) * this.Ho;
      }
    };
    __name(__PRIVATE_ExponentialBackoff, "__PRIVATE_ExponentialBackoff");
    var Gt = "PersistentStream";
    var __PRIVATE_PersistentStream = class {
      constructor(e, t2, n2, r2, i, s2, o2, _) {
        this.Ti = e, this.n_ = n2, this.r_ = r2, this.connection = i, this.authCredentialsProvider = s2, this.appCheckCredentialsProvider = o2, this.listener = _, this.state = 0, /**
         * A close count that's incremented every time the stream is closed; used by
         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
         * close.
         */
        this.i_ = 0, this.s_ = null, this.o_ = null, this.stream = null, /**
         * Count of response messages received.
         */
        this.__ = 0, this.a_ = new __PRIVATE_ExponentialBackoff(e, t2);
      }
      /**
       * Returns true if start() has been called and no error has occurred. True
       * indicates the stream is open or in the process of opening (which
       * encompasses respecting backoff, getting auth tokens, and starting the
       * actual RPC). Use isOpen() to determine if the stream is open and ready for
       * outbound requests.
       */
      u_() {
        return 1 === this.state || 5 === this.state || this.c_();
      }
      /**
       * Returns true if the underlying RPC is open (the onOpen() listener has been
       * called) and the stream is ready for outbound requests.
       */
      c_() {
        return 2 === this.state || 3 === this.state;
      }
      /**
       * Starts the RPC. Only allowed if isStarted() returns false. The stream is
       * not immediately ready for use: onOpen() will be invoked when the RPC is
       * ready for outbound requests, at which point isOpen() will return true.
       *
       * When start returns, isStarted() will return true.
       */
      start() {
        this.__ = 0, 4 !== this.state ? this.auth() : this.l_();
      }
      /**
       * Stops the RPC. This call is idempotent and allowed regardless of the
       * current isStarted() state.
       *
       * When stop returns, isStarted() and isOpen() will both return false.
       */
      async stop() {
        this.u_() && await this.close(
          0
          /* PersistentStreamState.Initial */
        );
      }
      /**
       * After an error the stream will usually back off on the next attempt to
       * start it. If the error warrants an immediate restart of the stream, the
       * sender can use this to indicate that the receiver should not back off.
       *
       * Each error will call the onClose() listener. That function can decide to
       * inhibit backoff if required.
       */
      h_() {
        this.state = 0, this.a_.reset();
      }
      /**
       * Marks this stream as idle. If no further actions are performed on the
       * stream for one minute, the stream will automatically close itself and
       * notify the stream's onClose() handler with Status.OK. The stream will then
       * be in a !isStarted() state, requiring the caller to start the stream again
       * before further use.
       *
       * Only streams that are in state 'Open' can be marked idle, as all other
       * states imply pending network operations.
       */
      P_() {
        this.c_() && null === this.s_ && (this.s_ = this.Ti.enqueueAfterDelay(this.n_, 6e4, () => this.T_()));
      }
      /** Sends a message to the underlying stream. */
      I_(e) {
        this.E_(), this.stream.send(e);
      }
      /** Called by the idle timer when the stream should close due to inactivity. */
      async T_() {
        if (this.c_())
          return this.close(
            0
            /* PersistentStreamState.Initial */
          );
      }
      /** Marks the stream as active again. */
      E_() {
        this.s_ && (this.s_.cancel(), this.s_ = null);
      }
      /** Cancels the health check delayed operation. */
      d_() {
        this.o_ && (this.o_.cancel(), this.o_ = null);
      }
      /**
       * Closes the stream and cleans up as necessary:
       *
       * * closes the underlying GRPC stream;
       * * calls the onClose handler with the given 'error';
       * * sets internal stream state to 'finalState';
       * * adjusts the backoff timer based on the error
       *
       * A new stream can be opened by calling start().
       *
       * @param finalState - the intended state of the stream after closing.
       * @param error - the error the connection was closed with.
       */
      async close(e, t2) {
        this.E_(), this.d_(), this.a_.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
        // underlying stream), guaranteeing they won't execute.
        this.i_++, 4 !== e ? (
          // If this is an intentional close ensure we don't delay our next connection attempt.
          this.a_.reset()
        ) : t2 && t2.code === C.RESOURCE_EXHAUSTED ? (
          // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
          (__PRIVATE_logError(t2.toString()), __PRIVATE_logError("Using maximum backoff delay to prevent overloading the backend."), this.a_.Zo())
        ) : t2 && t2.code === C.UNAUTHENTICATED && 3 !== this.state && // "unauthenticated" error means the token was rejected. This should rarely
        // happen since both Auth and AppCheck ensure a sufficient TTL when we
        // request a token. If a user manually resets their system clock this can
        // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
        // before we received the first message and we need to invalidate the token
        // to ensure that we fetch a new token.
        (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), // Clean up the underlying stream because we are no longer interested in events.
        null !== this.stream && (this.A_(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
        // inhibit backoff or otherwise manipulate the state in its non-started state.
        this.state = e, // Notify the listener that the stream closed.
        await this.listener.Lo(t2);
      }
      /**
       * Can be overridden to perform additional cleanup before the stream is closed.
       * Calling super.tearDown() is not required.
       */
      A_() {
      }
      auth() {
        this.state = 1;
        const e = this.R_(this.i_), t2 = this.i_;
        Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([e2, n2]) => {
          this.i_ === t2 && // Normally we'd have to schedule the callback on the AsyncQueue.
          // However, the following calls are safe to be called outside the
          // AsyncQueue since they don't chain asynchronous calls
          this.V_(e2, n2);
        }, (t3) => {
          e(() => {
            const e2 = new FirestoreError(C.UNKNOWN, "Fetching auth token failed: " + t3.message);
            return this.m_(e2);
          });
        });
      }
      V_(e, t2) {
        const n2 = this.R_(this.i_);
        this.stream = this.f_(e, t2), this.stream.xo(() => {
          n2(() => this.listener.xo());
        }), this.stream.No(() => {
          n2(() => (this.state = 2, this.o_ = this.Ti.enqueueAfterDelay(this.r_, 1e4, () => (this.c_() && (this.state = 3), Promise.resolve())), this.listener.No()));
        }), this.stream.Lo((e2) => {
          n2(() => this.m_(e2));
        }), this.stream.onMessage((e2) => {
          n2(() => 1 == ++this.__ ? this.g_(e2) : this.onNext(e2));
        });
      }
      l_() {
        this.state = 5, this.a_.Xo(async () => {
          this.state = 0, this.start();
        });
      }
      // Visible for tests
      m_(e) {
        return __PRIVATE_logDebug(Gt, `close with error: ${e}`), this.stream = null, this.close(4, e);
      }
      /**
       * Returns a "dispatcher" function that dispatches operations onto the
       * AsyncQueue but only runs them if closeCount remains unchanged. This allows
       * us to turn auth / stream callbacks into no-ops if the stream is closed /
       * re-opened, etc.
       */
      R_(e) {
        return (t2) => {
          this.Ti.enqueueAndForget(() => this.i_ === e ? t2() : (__PRIVATE_logDebug(Gt, "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve()));
        };
      }
    };
    __name(__PRIVATE_PersistentStream, "__PRIVATE_PersistentStream");
    var __PRIVATE_PersistentListenStream = class extends __PRIVATE_PersistentStream {
      constructor(e, t2, n2, r2, i, s2) {
        super(e, "listen_stream_connection_backoff", "listen_stream_idle", "health_check_timeout", t2, n2, r2, s2), this.serializer = i;
      }
      f_(e, t2) {
        return this.connection.Wo("Listen", e, t2);
      }
      g_(e) {
        return this.onNext(e);
      }
      onNext(e) {
        this.a_.reset();
        const t2 = __PRIVATE_fromWatchChange(this.serializer, e), n2 = (/* @__PURE__ */ __name(function __PRIVATE_versionFromListenResponse(e2) {
          if (!("targetChange" in e2))
            return SnapshotVersion.min();
          const t3 = e2.targetChange;
          return t3.targetIds && t3.targetIds.length ? SnapshotVersion.min() : t3.readTime ? __PRIVATE_fromVersion(t3.readTime) : SnapshotVersion.min();
        }, "__PRIVATE_versionFromListenResponse"))(e);
        return this.listener.p_(t2, n2);
      }
      /**
       * Registers interest in the results of the given target. If the target
       * includes a resumeToken it will be included in the request. Results that
       * affect the target will be streamed back as WatchChange messages that
       * reference the targetId.
       */
      y_(e) {
        const t2 = {};
        t2.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t2.addTarget = (/* @__PURE__ */ __name(function __PRIVATE_toTarget(e2, t3) {
          let n3;
          const r2 = t3.target;
          if (n3 = __PRIVATE_targetIsDocumentTarget(r2) ? {
            documents: __PRIVATE_toDocumentsTarget(e2, r2)
          } : {
            query: __PRIVATE_toQueryTarget(e2, r2).ht
          }, n3.targetId = t3.targetId, t3.resumeToken.approximateByteSize() > 0) {
            n3.resumeToken = __PRIVATE_toBytes(e2, t3.resumeToken);
            const r3 = __PRIVATE_toInt32Proto(e2, t3.expectedCount);
            null !== r3 && (n3.expectedCount = r3);
          } else if (t3.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
            n3.readTime = toTimestamp(e2, t3.snapshotVersion.toTimestamp());
            const r3 = __PRIVATE_toInt32Proto(e2, t3.expectedCount);
            null !== r3 && (n3.expectedCount = r3);
          }
          return n3;
        }, "__PRIVATE_toTarget"))(this.serializer, e);
        const n2 = __PRIVATE_toListenRequestLabels(this.serializer, e);
        n2 && (t2.labels = n2), this.I_(t2);
      }
      /**
       * Unregisters interest in the results of the target associated with the
       * given targetId.
       */
      w_(e) {
        const t2 = {};
        t2.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t2.removeTarget = e, this.I_(t2);
      }
    };
    __name(__PRIVATE_PersistentListenStream, "__PRIVATE_PersistentListenStream");
    var __PRIVATE_PersistentWriteStream = class extends __PRIVATE_PersistentStream {
      constructor(e, t2, n2, r2, i, s2) {
        super(e, "write_stream_connection_backoff", "write_stream_idle", "health_check_timeout", t2, n2, r2, s2), this.serializer = i;
      }
      /**
       * Tracks whether or not a handshake has been successfully exchanged and
       * the stream is ready to accept mutations.
       */
      get S_() {
        return this.__ > 0;
      }
      // Override of PersistentStream.start
      start() {
        this.lastStreamToken = void 0, super.start();
      }
      A_() {
        this.S_ && this.b_([]);
      }
      f_(e, t2) {
        return this.connection.Wo("Write", e, t2);
      }
      g_(e) {
        return __PRIVATE_hardAssert(!!e.streamToken), this.lastStreamToken = e.streamToken, // The first response is always the handshake response
        __PRIVATE_hardAssert(!e.writeResults || 0 === e.writeResults.length), this.listener.D_();
      }
      onNext(e) {
        __PRIVATE_hardAssert(!!e.streamToken), this.lastStreamToken = e.streamToken, // A successful first write response means the stream is healthy,
        // Note, that we could consider a successful handshake healthy, however,
        // the write itself might be causing an error we want to back off from.
        this.a_.reset();
        const t2 = __PRIVATE_fromWriteResults(e.writeResults, e.commitTime), n2 = __PRIVATE_fromVersion(e.commitTime);
        return this.listener.v_(n2, t2);
      }
      /**
       * Sends an initial streamToken to the server, performing the handshake
       * required to make the StreamingWrite RPC work. Subsequent
       * calls should wait until onHandshakeComplete was called.
       */
      C_() {
        const e = {};
        e.database = __PRIVATE_getEncodedDatabaseId(this.serializer), this.I_(e);
      }
      /** Sends a group of mutations to the Firestore backend to apply. */
      b_(e) {
        const t2 = {
          streamToken: this.lastStreamToken,
          writes: e.map((e2) => toMutation(this.serializer, e2))
        };
        this.I_(t2);
      }
    };
    __name(__PRIVATE_PersistentWriteStream, "__PRIVATE_PersistentWriteStream");
    var Datastore = class {
    };
    __name(Datastore, "Datastore");
    var __PRIVATE_DatastoreImpl = class extends Datastore {
      constructor(e, t2, n2, r2) {
        super(), this.authCredentials = e, this.appCheckCredentials = t2, this.connection = n2, this.serializer = r2, this.F_ = false;
      }
      M_() {
        if (this.F_)
          throw new FirestoreError(C.FAILED_PRECONDITION, "The client has already been terminated.");
      }
      /** Invokes the provided RPC with auth and AppCheck tokens. */
      So(e, t2, n2, r2) {
        return this.M_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([i, s2]) => this.connection.So(e, __PRIVATE_toResourcePath(t2, n2), r2, i, s2)).catch((e2) => {
          throw "FirebaseError" === e2.name ? (e2.code === C.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e2) : new FirestoreError(C.UNKNOWN, e2.toString());
        });
      }
      /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */
      Co(e, t2, n2, r2, i) {
        return this.M_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([s2, o2]) => this.connection.Co(e, __PRIVATE_toResourcePath(t2, n2), r2, s2, o2, i)).catch((e2) => {
          throw "FirebaseError" === e2.name ? (e2.code === C.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e2) : new FirestoreError(C.UNKNOWN, e2.toString());
        });
      }
      terminate() {
        this.F_ = true, this.connection.terminate();
      }
    };
    __name(__PRIVATE_DatastoreImpl, "__PRIVATE_DatastoreImpl");
    var __PRIVATE_OnlineStateTracker = class {
      constructor(e, t2) {
        this.asyncQueue = e, this.onlineStateHandler = t2, /** The current OnlineState. */
        this.state = "Unknown", /**
         * A count of consecutive failures to open the stream. If it reaches the
         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
         * Offline.
         */
        this.x_ = 0, /**
         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
         */
        this.O_ = null, /**
         * Whether the client should log a warning message if it fails to connect to
         * the backend (initially true, cleared after a successful stream, or if we've
         * logged the message already).
         */
        this.N_ = true;
      }
      /**
       * Called by RemoteStore when a watch stream is started (including on each
       * backoff attempt).
       *
       * If this is the first attempt, it sets the OnlineState to Unknown and starts
       * the onlineStateTimer.
       */
      B_() {
        0 === this.x_ && (this.L_(
          "Unknown"
          /* OnlineState.Unknown */
        ), this.O_ = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, () => (this.O_ = null, this.k_("Backend didn't respond within 10 seconds."), this.L_(
          "Offline"
          /* OnlineState.Offline */
        ), Promise.resolve())));
      }
      /**
       * Updates our OnlineState as appropriate after the watch stream reports a
       * failure. The first failure moves us to the 'Unknown' state. We then may
       * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
       * actually transition to the 'Offline' state.
       */
      q_(e) {
        "Online" === this.state ? this.L_(
          "Unknown"
          /* OnlineState.Unknown */
        ) : (this.x_++, this.x_ >= 1 && (this.Q_(), this.k_(`Connection failed 1 times. Most recent error: ${e.toString()}`), this.L_(
          "Offline"
          /* OnlineState.Offline */
        )));
      }
      /**
       * Explicitly sets the OnlineState to the specified state.
       *
       * Note that this resets our timers / failure counters, etc. used by our
       * Offline heuristics, so must not be used in place of
       * handleWatchStreamStart() and handleWatchStreamFailure().
       */
      set(e) {
        this.Q_(), this.x_ = 0, "Online" === e && // We've connected to watch at least once. Don't warn the developer
        // about being offline going forward.
        (this.N_ = false), this.L_(e);
      }
      L_(e) {
        e !== this.state && (this.state = e, this.onlineStateHandler(e));
      }
      k_(e) {
        const t2 = `Could not reach Cloud Firestore backend. ${e}
This typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
        this.N_ ? (__PRIVATE_logError(t2), this.N_ = false) : __PRIVATE_logDebug("OnlineStateTracker", t2);
      }
      Q_() {
        null !== this.O_ && (this.O_.cancel(), this.O_ = null);
      }
    };
    __name(__PRIVATE_OnlineStateTracker, "__PRIVATE_OnlineStateTracker");
    var zt = "RemoteStore";
    var __PRIVATE_RemoteStoreImpl = class {
      constructor(e, t2, n2, r2, i) {
        this.localStore = e, this.datastore = t2, this.asyncQueue = n2, this.remoteSyncer = {}, /**
         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
         * LocalStore via fillWritePipeline() and have or will send to the write
         * stream.
         *
         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
         * restart the write stream. When the stream is established the writes in the
         * pipeline will be sent in order.
         *
         * Writes remain in writePipeline until they are acknowledged by the backend
         * and thus will automatically be re-sent if the stream is interrupted /
         * restarted before they're acknowledged.
         *
         * Write responses from the backend are linked to their originating request
         * purely based on order, and so we can just shift() writes from the front of
         * the writePipeline as we receive responses.
         */
        this.K_ = [], /**
         * A mapping of watched targets that the client cares about tracking and the
         * user has explicitly called a 'listen' for this target.
         *
         * These targets may or may not have been sent to or acknowledged by the
         * server. On re-establishing the listen stream, these targets should be sent
         * to the server. The targets removed with unlistens are removed eagerly
         * without waiting for confirmation from the listen stream.
         */
        this.U_ = /* @__PURE__ */ new Map(), /**
         * A set of reasons for why the RemoteStore may be offline. If empty, the
         * RemoteStore may start its network connections.
         */
        this.W_ = /* @__PURE__ */ new Set(), /**
         * Event handlers that get called when the network is disabled or enabled.
         *
         * PORTING NOTE: These functions are used on the Web client to create the
         * underlying streams (to support tree-shakeable streams). On Android and iOS,
         * the streams are created during construction of RemoteStore.
         */
        this.G_ = [], this.z_ = i, this.z_.To((e2) => {
          n2.enqueueAndForget(async () => {
            __PRIVATE_canUseNetwork(this) && (__PRIVATE_logDebug(zt, "Restarting streams for network reachability change."), await (/* @__PURE__ */ __name(async function __PRIVATE_restartNetwork(e3) {
              const t3 = __PRIVATE_debugCast(e3);
              t3.W_.add(
                4
                /* OfflineCause.ConnectivityChange */
              ), await __PRIVATE_disableNetworkInternal(t3), t3.j_.set(
                "Unknown"
                /* OnlineState.Unknown */
              ), t3.W_.delete(
                4
                /* OfflineCause.ConnectivityChange */
              ), await __PRIVATE_enableNetworkInternal(t3);
            }, "__PRIVATE_restartNetwork"))(this));
          });
        }), this.j_ = new __PRIVATE_OnlineStateTracker(n2, r2);
      }
    };
    __name(__PRIVATE_RemoteStoreImpl, "__PRIVATE_RemoteStoreImpl");
    async function __PRIVATE_enableNetworkInternal(e) {
      if (__PRIVATE_canUseNetwork(e))
        for (const t2 of e.G_)
          await t2(
            /* enabled= */
            true
          );
    }
    __name(__PRIVATE_enableNetworkInternal, "__PRIVATE_enableNetworkInternal");
    async function __PRIVATE_disableNetworkInternal(e) {
      for (const t2 of e.G_)
        await t2(
          /* enabled= */
          false
        );
    }
    __name(__PRIVATE_disableNetworkInternal, "__PRIVATE_disableNetworkInternal");
    function __PRIVATE_remoteStoreListen(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      n2.U_.has(t2.targetId) || // Mark this as something the client is currently listening for.
      (n2.U_.set(t2.targetId, t2), __PRIVATE_shouldStartWatchStream(n2) ? (
        // The listen will be sent in onWatchStreamOpen
        __PRIVATE_startWatchStream(n2)
      ) : __PRIVATE_ensureWatchStream(n2).c_() && __PRIVATE_sendWatchRequest(n2, t2));
    }
    __name(__PRIVATE_remoteStoreListen, "__PRIVATE_remoteStoreListen");
    function __PRIVATE_remoteStoreUnlisten(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = __PRIVATE_ensureWatchStream(n2);
      n2.U_.delete(t2), r2.c_() && __PRIVATE_sendUnwatchRequest(n2, t2), 0 === n2.U_.size && (r2.c_() ? r2.P_() : __PRIVATE_canUseNetwork(n2) && // Revert to OnlineState.Unknown if the watch stream is not open and we
      // have no listeners, since without any listens to send we cannot
      // confirm if the stream is healthy and upgrade to OnlineState.Online.
      n2.j_.set(
        "Unknown"
        /* OnlineState.Unknown */
      ));
    }
    __name(__PRIVATE_remoteStoreUnlisten, "__PRIVATE_remoteStoreUnlisten");
    function __PRIVATE_sendWatchRequest(e, t2) {
      if (e.H_.Ne(t2.targetId), t2.resumeToken.approximateByteSize() > 0 || t2.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
        const n2 = e.remoteSyncer.getRemoteKeysForTarget(t2.targetId).size;
        t2 = t2.withExpectedCount(n2);
      }
      __PRIVATE_ensureWatchStream(e).y_(t2);
    }
    __name(__PRIVATE_sendWatchRequest, "__PRIVATE_sendWatchRequest");
    function __PRIVATE_sendUnwatchRequest(e, t2) {
      e.H_.Ne(t2), __PRIVATE_ensureWatchStream(e).w_(t2);
    }
    __name(__PRIVATE_sendUnwatchRequest, "__PRIVATE_sendUnwatchRequest");
    function __PRIVATE_startWatchStream(e) {
      e.H_ = new __PRIVATE_WatchChangeAggregator({
        getRemoteKeysForTarget: (t2) => e.remoteSyncer.getRemoteKeysForTarget(t2),
        lt: (t2) => e.U_.get(t2) || null,
        it: () => e.datastore.serializer.databaseId
      }), __PRIVATE_ensureWatchStream(e).start(), e.j_.B_();
    }
    __name(__PRIVATE_startWatchStream, "__PRIVATE_startWatchStream");
    function __PRIVATE_shouldStartWatchStream(e) {
      return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWatchStream(e).u_() && e.U_.size > 0;
    }
    __name(__PRIVATE_shouldStartWatchStream, "__PRIVATE_shouldStartWatchStream");
    function __PRIVATE_canUseNetwork(e) {
      return 0 === __PRIVATE_debugCast(e).W_.size;
    }
    __name(__PRIVATE_canUseNetwork, "__PRIVATE_canUseNetwork");
    function __PRIVATE_cleanUpWatchStreamState(e) {
      e.H_ = void 0;
    }
    __name(__PRIVATE_cleanUpWatchStreamState, "__PRIVATE_cleanUpWatchStreamState");
    async function __PRIVATE_onWatchStreamConnected(e) {
      e.j_.set(
        "Online"
        /* OnlineState.Online */
      );
    }
    __name(__PRIVATE_onWatchStreamConnected, "__PRIVATE_onWatchStreamConnected");
    async function __PRIVATE_onWatchStreamOpen(e) {
      e.U_.forEach((t2, n2) => {
        __PRIVATE_sendWatchRequest(e, t2);
      });
    }
    __name(__PRIVATE_onWatchStreamOpen, "__PRIVATE_onWatchStreamOpen");
    async function __PRIVATE_onWatchStreamClose(e, t2) {
      __PRIVATE_cleanUpWatchStreamState(e), // If we still need the watch stream, retry the connection.
      __PRIVATE_shouldStartWatchStream(e) ? (e.j_.q_(t2), __PRIVATE_startWatchStream(e)) : (
        // No need to restart watch stream because there are no active targets.
        // The online state is set to unknown because there is no active attempt
        // at establishing a connection
        e.j_.set(
          "Unknown"
          /* OnlineState.Unknown */
        )
      );
    }
    __name(__PRIVATE_onWatchStreamClose, "__PRIVATE_onWatchStreamClose");
    async function __PRIVATE_onWatchStreamChange(e, t2, n2) {
      if (
        // Mark the client as online since we got a message from the server
        e.j_.set(
          "Online"
          /* OnlineState.Online */
        ), t2 instanceof __PRIVATE_WatchTargetChange && 2 === t2.state && t2.cause
      )
        try {
          await (/* @__PURE__ */ __name(async function __PRIVATE_handleTargetError(e2, t3) {
            const n3 = t3.cause;
            for (const r2 of t3.targetIds)
              e2.U_.has(r2) && (await e2.remoteSyncer.rejectListen(r2, n3), e2.U_.delete(r2), e2.H_.removeTarget(r2));
          }, "__PRIVATE_handleTargetError"))(e, t2);
        } catch (n3) {
          __PRIVATE_logDebug(zt, "Failed to remove targets %s: %s ", t2.targetIds.join(","), n3), await __PRIVATE_disableNetworkUntilRecovery(e, n3);
        }
      else if (t2 instanceof __PRIVATE_DocumentWatchChange ? e.H_.We(t2) : t2 instanceof __PRIVATE_ExistenceFilterChange ? e.H_.Ze(t2) : e.H_.je(t2), !n2.isEqual(SnapshotVersion.min()))
        try {
          const t3 = await __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore);
          n2.compareTo(t3) >= 0 && // We have received a target change with a global snapshot if the snapshot
          // version is not equal to SnapshotVersion.min().
          /**
          * Takes a batch of changes from the Datastore, repackages them as a
          * RemoteEvent, and passes that on to the listener, which is typically the
          * SyncEngine.
          */
          await (/* @__PURE__ */ __name(function __PRIVATE_raiseWatchSnapshot(e2, t4) {
            const n3 = e2.H_.ot(t4);
            return n3.targetChanges.forEach((n4, r2) => {
              if (n4.resumeToken.approximateByteSize() > 0) {
                const i = e2.U_.get(r2);
                i && e2.U_.set(r2, i.withResumeToken(n4.resumeToken, t4));
              }
            }), // Re-establish listens for the targets that have been invalidated by
            // existence filter mismatches.
            n3.targetMismatches.forEach((t5, n4) => {
              const r2 = e2.U_.get(t5);
              if (!r2)
                return;
              e2.U_.set(t5, r2.withResumeToken(ByteString.EMPTY_BYTE_STRING, r2.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
              // deliberately don't send a resume token so that we get a full update.
              __PRIVATE_sendUnwatchRequest(e2, t5);
              const i = new TargetData(r2.target, t5, n4, r2.sequenceNumber);
              __PRIVATE_sendWatchRequest(e2, i);
            }), e2.remoteSyncer.applyRemoteEvent(n3);
          }, "__PRIVATE_raiseWatchSnapshot"))(e, n2);
        } catch (t3) {
          __PRIVATE_logDebug(zt, "Failed to raise snapshot:", t3), await __PRIVATE_disableNetworkUntilRecovery(e, t3);
        }
    }
    __name(__PRIVATE_onWatchStreamChange, "__PRIVATE_onWatchStreamChange");
    async function __PRIVATE_disableNetworkUntilRecovery(e, t2, n2) {
      if (!__PRIVATE_isIndexedDbTransactionError(t2))
        throw t2;
      e.W_.add(
        1
        /* OfflineCause.IndexedDbFailed */
      ), // Disable network and raise offline snapshots
      await __PRIVATE_disableNetworkInternal(e), e.j_.set(
        "Offline"
        /* OnlineState.Offline */
      ), n2 || // Use a simple read operation to determine if IndexedDB recovered.
      // Ideally, we would expose a health check directly on SimpleDb, but
      // RemoteStore only has access to persistence through LocalStore.
      (n2 = /* @__PURE__ */ __name(() => __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore), "n")), // Probe IndexedDB periodically and re-enable network
      e.asyncQueue.enqueueRetryable(async () => {
        __PRIVATE_logDebug(zt, "Retrying IndexedDB access"), await n2(), e.W_.delete(
          1
          /* OfflineCause.IndexedDbFailed */
        ), await __PRIVATE_enableNetworkInternal(e);
      });
    }
    __name(__PRIVATE_disableNetworkUntilRecovery, "__PRIVATE_disableNetworkUntilRecovery");
    function __PRIVATE_executeWithRecovery(e, t2) {
      return t2().catch((n2) => __PRIVATE_disableNetworkUntilRecovery(e, n2, t2));
    }
    __name(__PRIVATE_executeWithRecovery, "__PRIVATE_executeWithRecovery");
    async function __PRIVATE_fillWritePipeline(e) {
      const t2 = __PRIVATE_debugCast(e), n2 = __PRIVATE_ensureWriteStream(t2);
      let r2 = t2.K_.length > 0 ? t2.K_[t2.K_.length - 1].batchId : Q;
      for (; __PRIVATE_canAddToWritePipeline(t2); )
        try {
          const e2 = await __PRIVATE_localStoreGetNextMutationBatch(t2.localStore, r2);
          if (null === e2) {
            0 === t2.K_.length && n2.P_();
            break;
          }
          r2 = e2.batchId, __PRIVATE_addToWritePipeline(t2, e2);
        } catch (e2) {
          await __PRIVATE_disableNetworkUntilRecovery(t2, e2);
        }
      __PRIVATE_shouldStartWriteStream(t2) && __PRIVATE_startWriteStream(t2);
    }
    __name(__PRIVATE_fillWritePipeline, "__PRIVATE_fillWritePipeline");
    function __PRIVATE_canAddToWritePipeline(e) {
      return __PRIVATE_canUseNetwork(e) && e.K_.length < 10;
    }
    __name(__PRIVATE_canAddToWritePipeline, "__PRIVATE_canAddToWritePipeline");
    function __PRIVATE_addToWritePipeline(e, t2) {
      e.K_.push(t2);
      const n2 = __PRIVATE_ensureWriteStream(e);
      n2.c_() && n2.S_ && n2.b_(t2.mutations);
    }
    __name(__PRIVATE_addToWritePipeline, "__PRIVATE_addToWritePipeline");
    function __PRIVATE_shouldStartWriteStream(e) {
      return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWriteStream(e).u_() && e.K_.length > 0;
    }
    __name(__PRIVATE_shouldStartWriteStream, "__PRIVATE_shouldStartWriteStream");
    function __PRIVATE_startWriteStream(e) {
      __PRIVATE_ensureWriteStream(e).start();
    }
    __name(__PRIVATE_startWriteStream, "__PRIVATE_startWriteStream");
    async function __PRIVATE_onWriteStreamOpen(e) {
      __PRIVATE_ensureWriteStream(e).C_();
    }
    __name(__PRIVATE_onWriteStreamOpen, "__PRIVATE_onWriteStreamOpen");
    async function __PRIVATE_onWriteHandshakeComplete(e) {
      const t2 = __PRIVATE_ensureWriteStream(e);
      for (const n2 of e.K_)
        t2.b_(n2.mutations);
    }
    __name(__PRIVATE_onWriteHandshakeComplete, "__PRIVATE_onWriteHandshakeComplete");
    async function __PRIVATE_onMutationResult(e, t2, n2) {
      const r2 = e.K_.shift(), i = MutationBatchResult.from(r2, t2, n2);
      await __PRIVATE_executeWithRecovery(e, () => e.remoteSyncer.applySuccessfulWrite(i)), // It's possible that with the completion of this mutation another
      // slot has freed up.
      await __PRIVATE_fillWritePipeline(e);
    }
    __name(__PRIVATE_onMutationResult, "__PRIVATE_onMutationResult");
    async function __PRIVATE_onWriteStreamClose(e, t2) {
      t2 && __PRIVATE_ensureWriteStream(e).S_ && // This error affects the actual write.
      await (/* @__PURE__ */ __name(async function __PRIVATE_handleWriteError(e2, t3) {
        if ((/* @__PURE__ */ __name(function __PRIVATE_isPermanentWriteError(e3) {
          return __PRIVATE_isPermanentError(e3) && e3 !== C.ABORTED;
        }, "__PRIVATE_isPermanentWriteError"))(t3.code)) {
          const n2 = e2.K_.shift();
          __PRIVATE_ensureWriteStream(e2).h_(), await __PRIVATE_executeWithRecovery(e2, () => e2.remoteSyncer.rejectFailedWrite(n2.batchId, t3)), // It's possible that with the completion of this mutation
          // another slot has freed up.
          await __PRIVATE_fillWritePipeline(e2);
        }
      }, "__PRIVATE_handleWriteError"))(e, t2), // The write stream might have been started by refilling the write
      // pipeline for failed writes
      __PRIVATE_shouldStartWriteStream(e) && __PRIVATE_startWriteStream(e);
    }
    __name(__PRIVATE_onWriteStreamClose, "__PRIVATE_onWriteStreamClose");
    async function __PRIVATE_remoteStoreHandleCredentialChange(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      n2.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(zt, "RemoteStore received new credentials");
      const r2 = __PRIVATE_canUseNetwork(n2);
      n2.W_.add(
        3
        /* OfflineCause.CredentialChange */
      ), await __PRIVATE_disableNetworkInternal(n2), r2 && // Don't set the network status to Unknown if we are offline.
      n2.j_.set(
        "Unknown"
        /* OnlineState.Unknown */
      ), await n2.remoteSyncer.handleCredentialChange(t2), n2.W_.delete(
        3
        /* OfflineCause.CredentialChange */
      ), await __PRIVATE_enableNetworkInternal(n2);
    }
    __name(__PRIVATE_remoteStoreHandleCredentialChange, "__PRIVATE_remoteStoreHandleCredentialChange");
    async function __PRIVATE_remoteStoreApplyPrimaryState(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      t2 ? (n2.W_.delete(
        2
        /* OfflineCause.IsSecondary */
      ), await __PRIVATE_enableNetworkInternal(n2)) : t2 || (n2.W_.add(
        2
        /* OfflineCause.IsSecondary */
      ), await __PRIVATE_disableNetworkInternal(n2), n2.j_.set(
        "Unknown"
        /* OnlineState.Unknown */
      ));
    }
    __name(__PRIVATE_remoteStoreApplyPrimaryState, "__PRIVATE_remoteStoreApplyPrimaryState");
    function __PRIVATE_ensureWatchStream(e) {
      return e.J_ || // Create stream (but note that it is not started yet).
      (e.J_ = (/* @__PURE__ */ __name(function __PRIVATE_newPersistentWatchStream(e2, t2, n2) {
        const r2 = __PRIVATE_debugCast(e2);
        return r2.M_(), new __PRIVATE_PersistentListenStream(t2, r2.connection, r2.authCredentials, r2.appCheckCredentials, r2.serializer, n2);
      }, "__PRIVATE_newPersistentWatchStream"))(e.datastore, e.asyncQueue, {
        xo: __PRIVATE_onWatchStreamConnected.bind(null, e),
        No: __PRIVATE_onWatchStreamOpen.bind(null, e),
        Lo: __PRIVATE_onWatchStreamClose.bind(null, e),
        p_: __PRIVATE_onWatchStreamChange.bind(null, e)
      }), e.G_.push(async (t2) => {
        t2 ? (e.J_.h_(), __PRIVATE_shouldStartWatchStream(e) ? __PRIVATE_startWatchStream(e) : e.j_.set(
          "Unknown"
          /* OnlineState.Unknown */
        )) : (await e.J_.stop(), __PRIVATE_cleanUpWatchStreamState(e));
      })), e.J_;
    }
    __name(__PRIVATE_ensureWatchStream, "__PRIVATE_ensureWatchStream");
    function __PRIVATE_ensureWriteStream(e) {
      return e.Y_ || // Create stream (but note that it is not started yet).
      (e.Y_ = (/* @__PURE__ */ __name(function __PRIVATE_newPersistentWriteStream(e2, t2, n2) {
        const r2 = __PRIVATE_debugCast(e2);
        return r2.M_(), new __PRIVATE_PersistentWriteStream(t2, r2.connection, r2.authCredentials, r2.appCheckCredentials, r2.serializer, n2);
      }, "__PRIVATE_newPersistentWriteStream"))(e.datastore, e.asyncQueue, {
        xo: () => Promise.resolve(),
        No: __PRIVATE_onWriteStreamOpen.bind(null, e),
        Lo: __PRIVATE_onWriteStreamClose.bind(null, e),
        D_: __PRIVATE_onWriteHandshakeComplete.bind(null, e),
        v_: __PRIVATE_onMutationResult.bind(null, e)
      }), e.G_.push(async (t2) => {
        t2 ? (e.Y_.h_(), // This will start the write stream if necessary.
        await __PRIVATE_fillWritePipeline(e)) : (await e.Y_.stop(), e.K_.length > 0 && (__PRIVATE_logDebug(zt, `Stopping write stream with ${e.K_.length} pending writes`), e.K_ = []));
      })), e.Y_;
    }
    __name(__PRIVATE_ensureWriteStream, "__PRIVATE_ensureWriteStream");
    var DelayedOperation = class {
      constructor(e, t2, n2, r2, i) {
        this.asyncQueue = e, this.timerId = t2, this.targetTimeMs = n2, this.op = r2, this.removalCallback = i, this.deferred = new __PRIVATE_Deferred(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.deferred.promise.catch((e2) => {
        });
      }
      get promise() {
        return this.deferred.promise;
      }
      /**
       * Creates and returns a DelayedOperation that has been scheduled to be
       * executed on the provided asyncQueue after the provided delayMs.
       *
       * @param asyncQueue - The queue to schedule the operation on.
       * @param id - A Timer ID identifying the type of operation this is.
       * @param delayMs - The delay (ms) before the operation should be scheduled.
       * @param op - The operation to run.
       * @param removalCallback - A callback to be called synchronously once the
       *   operation is executed or canceled, notifying the AsyncQueue to remove it
       *   from its delayedOperations list.
       *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
       *   the DelayedOperation class public.
       */
      static createAndSchedule(e, t2, n2, r2, i) {
        const s2 = Date.now() + n2, o2 = new DelayedOperation(e, t2, s2, r2, i);
        return o2.start(n2), o2;
      }
      /**
       * Starts the timer. This is called immediately after construction by
       * createAndSchedule().
       */
      start(e) {
        this.timerHandle = setTimeout(() => this.handleDelayElapsed(), e);
      }
      /**
       * Queues the operation to run immediately (if it hasn't already been run or
       * canceled).
       */
      skipDelay() {
        return this.handleDelayElapsed();
      }
      /**
       * Cancels the operation if it hasn't already been executed or canceled. The
       * promise will be rejected.
       *
       * As long as the operation has not yet been run, calling cancel() provides a
       * guarantee that the operation will not be run.
       */
      cancel(e) {
        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(C.CANCELLED, "Operation cancelled" + (e ? ": " + e : ""))));
      }
      handleDelayElapsed() {
        this.asyncQueue.enqueueAndForget(() => null !== this.timerHandle ? (this.clearTimeout(), this.op().then((e) => this.deferred.resolve(e))) : Promise.resolve());
      }
      clearTimeout() {
        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
      }
    };
    __name(DelayedOperation, "DelayedOperation");
    function __PRIVATE_wrapInUserErrorIfRecoverable(e, t2) {
      if (__PRIVATE_logError("AsyncQueue", `${t2}: ${e}`), __PRIVATE_isIndexedDbTransactionError(e))
        return new FirestoreError(C.UNAVAILABLE, `${t2}: ${e}`);
      throw e;
    }
    __name(__PRIVATE_wrapInUserErrorIfRecoverable, "__PRIVATE_wrapInUserErrorIfRecoverable");
    var DocumentSet = class {
      /**
       * Returns an empty copy of the existing DocumentSet, using the same
       * comparator.
       */
      static emptySet(e) {
        return new DocumentSet(e.comparator);
      }
      /** The default ordering is by key if the comparator is omitted */
      constructor(e) {
        this.comparator = e ? (t2, n2) => e(t2, n2) || DocumentKey.comparator(t2.key, n2.key) : (e2, t2) => DocumentKey.comparator(e2.key, t2.key), this.keyedMap = documentMap(), this.sortedSet = new SortedMap(this.comparator);
      }
      has(e) {
        return null != this.keyedMap.get(e);
      }
      get(e) {
        return this.keyedMap.get(e);
      }
      first() {
        return this.sortedSet.minKey();
      }
      last() {
        return this.sortedSet.maxKey();
      }
      isEmpty() {
        return this.sortedSet.isEmpty();
      }
      /**
       * Returns the index of the provided key in the document set, or -1 if the
       * document key is not present in the set;
       */
      indexOf(e) {
        const t2 = this.keyedMap.get(e);
        return t2 ? this.sortedSet.indexOf(t2) : -1;
      }
      get size() {
        return this.sortedSet.size;
      }
      /** Iterates documents in order defined by "comparator" */
      forEach(e) {
        this.sortedSet.inorderTraversal((t2, n2) => (e(t2), false));
      }
      /** Inserts or updates a document with the same key */
      add(e) {
        const t2 = this.delete(e.key);
        return t2.copy(t2.keyedMap.insert(e.key, e), t2.sortedSet.insert(e, null));
      }
      /** Deletes a document with a given key */
      delete(e) {
        const t2 = this.get(e);
        return t2 ? this.copy(this.keyedMap.remove(e), this.sortedSet.remove(t2)) : this;
      }
      isEqual(e) {
        if (!(e instanceof DocumentSet))
          return false;
        if (this.size !== e.size)
          return false;
        const t2 = this.sortedSet.getIterator(), n2 = e.sortedSet.getIterator();
        for (; t2.hasNext(); ) {
          const e2 = t2.getNext().key, r2 = n2.getNext().key;
          if (!e2.isEqual(r2))
            return false;
        }
        return true;
      }
      toString() {
        const e = [];
        return this.forEach((t2) => {
          e.push(t2.toString());
        }), 0 === e.length ? "DocumentSet ()" : "DocumentSet (\n  " + e.join("  \n") + "\n)";
      }
      copy(e, t2) {
        const n2 = new DocumentSet();
        return n2.comparator = this.comparator, n2.keyedMap = e, n2.sortedSet = t2, n2;
      }
    };
    __name(DocumentSet, "DocumentSet");
    var __PRIVATE_DocumentChangeSet = class {
      constructor() {
        this.Z_ = new SortedMap(DocumentKey.comparator);
      }
      track(e) {
        const t2 = e.doc.key, n2 = this.Z_.get(t2);
        n2 ? (
          // Merge the new change with the existing change.
          0 !== e.type && 3 === n2.type ? this.Z_ = this.Z_.insert(t2, e) : 3 === e.type && 1 !== n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: n2.type,
            doc: e.doc
          }) : 2 === e.type && 2 === n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: 2,
            doc: e.doc
          }) : 2 === e.type && 0 === n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: 0,
            doc: e.doc
          }) : 1 === e.type && 0 === n2.type ? this.Z_ = this.Z_.remove(t2) : 1 === e.type && 2 === n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: 1,
            doc: n2.doc
          }) : 0 === e.type && 1 === n2.type ? this.Z_ = this.Z_.insert(t2, {
            type: 2,
            doc: e.doc
          }) : (
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            fail()
          )
        ) : this.Z_ = this.Z_.insert(t2, e);
      }
      X_() {
        const e = [];
        return this.Z_.inorderTraversal((t2, n2) => {
          e.push(n2);
        }), e;
      }
    };
    __name(__PRIVATE_DocumentChangeSet, "__PRIVATE_DocumentChangeSet");
    var ViewSnapshot = class {
      constructor(e, t2, n2, r2, i, s2, o2, _, a2) {
        this.query = e, this.docs = t2, this.oldDocs = n2, this.docChanges = r2, this.mutatedKeys = i, this.fromCache = s2, this.syncStateChanged = o2, this.excludesMetadataChanges = _, this.hasCachedResults = a2;
      }
      /** Returns a view snapshot as if all documents in the snapshot were added. */
      static fromInitialDocuments(e, t2, n2, r2, i) {
        const s2 = [];
        return t2.forEach((e2) => {
          s2.push({
            type: 0,
            doc: e2
          });
        }), new ViewSnapshot(
          e,
          t2,
          DocumentSet.emptySet(t2),
          s2,
          n2,
          r2,
          /* syncStateChanged= */
          true,
          /* excludesMetadataChanges= */
          false,
          i
        );
      }
      get hasPendingWrites() {
        return !this.mutatedKeys.isEmpty();
      }
      isEqual(e) {
        if (!(this.fromCache === e.fromCache && this.hasCachedResults === e.hasCachedResults && this.syncStateChanged === e.syncStateChanged && this.mutatedKeys.isEqual(e.mutatedKeys) && __PRIVATE_queryEquals(this.query, e.query) && this.docs.isEqual(e.docs) && this.oldDocs.isEqual(e.oldDocs)))
          return false;
        const t2 = this.docChanges, n2 = e.docChanges;
        if (t2.length !== n2.length)
          return false;
        for (let e2 = 0; e2 < t2.length; e2++)
          if (t2[e2].type !== n2[e2].type || !t2[e2].doc.isEqual(n2[e2].doc))
            return false;
        return true;
      }
    };
    __name(ViewSnapshot, "ViewSnapshot");
    var __PRIVATE_QueryListenersInfo = class {
      constructor() {
        this.ea = void 0, this.ta = [];
      }
      // Helper methods that checks if the query has listeners that listening to remote store
      na() {
        return this.ta.some((e) => e.ra());
      }
    };
    __name(__PRIVATE_QueryListenersInfo, "__PRIVATE_QueryListenersInfo");
    var __PRIVATE_EventManagerImpl = class {
      constructor() {
        this.queries = __PRIVATE_newQueriesObjectMap(), this.onlineState = "Unknown", this.ia = /* @__PURE__ */ new Set();
      }
      terminate() {
        !(/* @__PURE__ */ __name(function __PRIVATE_errorAllTargets(e, t2) {
          const n2 = __PRIVATE_debugCast(e), r2 = n2.queries;
          n2.queries = __PRIVATE_newQueriesObjectMap(), r2.forEach((e2, n3) => {
            for (const e3 of n3.ta)
              e3.onError(t2);
          });
        }, "__PRIVATE_errorAllTargets"))(this, new FirestoreError(C.ABORTED, "Firestore shutting down"));
      }
    };
    __name(__PRIVATE_EventManagerImpl, "__PRIVATE_EventManagerImpl");
    function __PRIVATE_newQueriesObjectMap() {
      return new ObjectMap((e) => __PRIVATE_canonifyQuery(e), __PRIVATE_queryEquals);
    }
    __name(__PRIVATE_newQueriesObjectMap, "__PRIVATE_newQueriesObjectMap");
    async function __PRIVATE_eventManagerListen(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      let r2 = 3;
      const i = t2.query;
      let s2 = n2.queries.get(i);
      s2 ? !s2.na() && t2.ra() && // Query has been listening to local cache, and tries to add a new listener sourced from watch.
      (r2 = 2) : (s2 = new __PRIVATE_QueryListenersInfo(), r2 = t2.ra() ? 0 : 1);
      try {
        switch (r2) {
          case 0:
            s2.ea = await n2.onListen(
              i,
              /** enableRemoteListen= */
              true
            );
            break;
          case 1:
            s2.ea = await n2.onListen(
              i,
              /** enableRemoteListen= */
              false
            );
            break;
          case 2:
            await n2.onFirstRemoteStoreListen(i);
        }
      } catch (e2) {
        const n3 = __PRIVATE_wrapInUserErrorIfRecoverable(e2, `Initialization of query '${__PRIVATE_stringifyQuery(t2.query)}' failed`);
        return void t2.onError(n3);
      }
      if (n2.queries.set(i, s2), s2.ta.push(t2), // Run global snapshot listeners if a consistent snapshot has been emitted.
      t2.sa(n2.onlineState), s2.ea) {
        t2.oa(s2.ea) && __PRIVATE_raiseSnapshotsInSyncEvent(n2);
      }
    }
    __name(__PRIVATE_eventManagerListen, "__PRIVATE_eventManagerListen");
    async function __PRIVATE_eventManagerUnlisten(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = t2.query;
      let i = 3;
      const s2 = n2.queries.get(r2);
      if (s2) {
        const e2 = s2.ta.indexOf(t2);
        e2 >= 0 && (s2.ta.splice(e2, 1), 0 === s2.ta.length ? i = t2.ra() ? 0 : 1 : !s2.na() && t2.ra() && // The removed listener is the last one that sourced from watch.
        (i = 2));
      }
      switch (i) {
        case 0:
          return n2.queries.delete(r2), n2.onUnlisten(
            r2,
            /** disableRemoteListen= */
            true
          );
        case 1:
          return n2.queries.delete(r2), n2.onUnlisten(
            r2,
            /** disableRemoteListen= */
            false
          );
        case 2:
          return n2.onLastRemoteStoreUnlisten(r2);
        default:
          return;
      }
    }
    __name(__PRIVATE_eventManagerUnlisten, "__PRIVATE_eventManagerUnlisten");
    function __PRIVATE_eventManagerOnWatchChange(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      let r2 = false;
      for (const e2 of t2) {
        const t3 = e2.query, i = n2.queries.get(t3);
        if (i) {
          for (const t4 of i.ta)
            t4.oa(e2) && (r2 = true);
          i.ea = e2;
        }
      }
      r2 && __PRIVATE_raiseSnapshotsInSyncEvent(n2);
    }
    __name(__PRIVATE_eventManagerOnWatchChange, "__PRIVATE_eventManagerOnWatchChange");
    function __PRIVATE_eventManagerOnWatchError(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e), i = r2.queries.get(t2);
      if (i)
        for (const e2 of i.ta)
          e2.onError(n2);
      r2.queries.delete(t2);
    }
    __name(__PRIVATE_eventManagerOnWatchError, "__PRIVATE_eventManagerOnWatchError");
    function __PRIVATE_raiseSnapshotsInSyncEvent(e) {
      e.ia.forEach((e2) => {
        e2.next();
      });
    }
    __name(__PRIVATE_raiseSnapshotsInSyncEvent, "__PRIVATE_raiseSnapshotsInSyncEvent");
    var jt;
    var Ht;
    (Ht = jt || (jt = {}))._a = "default", /** Listen to changes in cache only */
    Ht.Cache = "cache";
    var __PRIVATE_QueryListener = class {
      constructor(e, t2, n2) {
        this.query = e, this.aa = t2, /**
         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
         * observer. This flag is set to true once we've actually raised an event.
         */
        this.ua = false, this.ca = null, this.onlineState = "Unknown", this.options = n2 || {};
      }
      /**
       * Applies the new ViewSnapshot to this listener, raising a user-facing event
       * if applicable (depending on what changed, whether the user has opted into
       * metadata-only changes, etc.). Returns true if a user-facing event was
       * indeed raised.
       */
      oa(e) {
        if (!this.options.includeMetadataChanges) {
          const t3 = [];
          for (const n2 of e.docChanges)
            3 !== n2.type && t3.push(n2);
          e = new ViewSnapshot(
            e.query,
            e.docs,
            e.oldDocs,
            t3,
            e.mutatedKeys,
            e.fromCache,
            e.syncStateChanged,
            /* excludesMetadataChanges= */
            true,
            e.hasCachedResults
          );
        }
        let t2 = false;
        return this.ua ? this.la(e) && (this.aa.next(e), t2 = true) : this.ha(e, this.onlineState) && (this.Pa(e), t2 = true), this.ca = e, t2;
      }
      onError(e) {
        this.aa.error(e);
      }
      /** Returns whether a snapshot was raised. */
      sa(e) {
        this.onlineState = e;
        let t2 = false;
        return this.ca && !this.ua && this.ha(this.ca, e) && (this.Pa(this.ca), t2 = true), t2;
      }
      ha(e, t2) {
        if (!e.fromCache)
          return true;
        if (!this.ra())
          return true;
        const n2 = "Offline" !== t2;
        return (!this.options.Ta || !n2) && (!e.docs.isEmpty() || e.hasCachedResults || "Offline" === t2);
      }
      la(e) {
        if (e.docChanges.length > 0)
          return true;
        const t2 = this.ca && this.ca.hasPendingWrites !== e.hasPendingWrites;
        return !(!e.syncStateChanged && !t2) && true === this.options.includeMetadataChanges;
      }
      Pa(e) {
        e = ViewSnapshot.fromInitialDocuments(e.query, e.docs, e.mutatedKeys, e.fromCache, e.hasCachedResults), this.ua = true, this.aa.next(e);
      }
      ra() {
        return this.options.source !== jt.Cache;
      }
    };
    __name(__PRIVATE_QueryListener, "__PRIVATE_QueryListener");
    var __PRIVATE_SizedBundleElement = class {
      constructor(e, t2) {
        this.Ia = e, this.byteLength = t2;
      }
      Ea() {
        return "metadata" in this.Ia;
      }
    };
    __name(__PRIVATE_SizedBundleElement, "__PRIVATE_SizedBundleElement");
    var __PRIVATE_BundleConverterImpl = class {
      constructor(e) {
        this.serializer = e;
      }
      ps(e) {
        return fromName(this.serializer, e);
      }
      /**
       * Converts a BundleDocument to a MutableDocument.
       */
      ys(e) {
        return e.metadata.exists ? __PRIVATE_fromDocument(this.serializer, e.document, false) : MutableDocument.newNoDocument(this.ps(e.metadata.name), this.ws(e.metadata.readTime));
      }
      ws(e) {
        return __PRIVATE_fromVersion(e);
      }
    };
    __name(__PRIVATE_BundleConverterImpl, "__PRIVATE_BundleConverterImpl");
    var __PRIVATE_BundleLoader = class {
      constructor(e, t2, n2) {
        this.da = e, this.localStore = t2, this.serializer = n2, /** Batched queries to be saved into storage */
        this.queries = [], /** Batched documents to be saved into storage */
        this.documents = [], /** The collection groups affected by this bundle. */
        this.collectionGroups = /* @__PURE__ */ new Set(), this.progress = __PRIVATE_bundleInitialProgress(e);
      }
      /**
       * Adds an element from the bundle to the loader.
       *
       * Returns a new progress if adding the element leads to a new progress,
       * otherwise returns null.
       */
      Aa(e) {
        this.progress.bytesLoaded += e.byteLength;
        let t2 = this.progress.documentsLoaded;
        if (e.Ia.namedQuery)
          this.queries.push(e.Ia.namedQuery);
        else if (e.Ia.documentMetadata) {
          this.documents.push({
            metadata: e.Ia.documentMetadata
          }), e.Ia.documentMetadata.exists || ++t2;
          const n2 = ResourcePath.fromString(e.Ia.documentMetadata.name);
          this.collectionGroups.add(n2.get(n2.length - 2));
        } else
          e.Ia.document && (this.documents[this.documents.length - 1].document = e.Ia.document, ++t2);
        return t2 !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = t2, Object.assign({}, this.progress)) : null;
      }
      Ra(e) {
        const t2 = /* @__PURE__ */ new Map(), n2 = new __PRIVATE_BundleConverterImpl(this.serializer);
        for (const r2 of e)
          if (r2.metadata.queries) {
            const e2 = n2.ps(r2.metadata.name);
            for (const n3 of r2.metadata.queries) {
              const r3 = (t2.get(n3) || __PRIVATE_documentKeySet()).add(e2);
              t2.set(n3, r3);
            }
          }
        return t2;
      }
      /**
       * Update the progress to 'Success' and return the updated progress.
       */
      async complete() {
        const e = await __PRIVATE_localStoreApplyBundledDocuments(this.localStore, new __PRIVATE_BundleConverterImpl(this.serializer), this.documents, this.da.id), t2 = this.Ra(this.documents);
        for (const e2 of this.queries)
          await __PRIVATE_localStoreSaveNamedQuery(this.localStore, e2, t2.get(e2.name));
        return this.progress.taskState = "Success", {
          progress: this.progress,
          Va: this.collectionGroups,
          ma: e
        };
      }
    };
    __name(__PRIVATE_BundleLoader, "__PRIVATE_BundleLoader");
    function __PRIVATE_bundleInitialProgress(e) {
      return {
        taskState: "Running",
        documentsLoaded: 0,
        bytesLoaded: 0,
        totalDocuments: e.totalDocuments,
        totalBytes: e.totalBytes
      };
    }
    __name(__PRIVATE_bundleInitialProgress, "__PRIVATE_bundleInitialProgress");
    var __PRIVATE_AddedLimboDocument = class {
      constructor(e) {
        this.key = e;
      }
    };
    __name(__PRIVATE_AddedLimboDocument, "__PRIVATE_AddedLimboDocument");
    var __PRIVATE_RemovedLimboDocument = class {
      constructor(e) {
        this.key = e;
      }
    };
    __name(__PRIVATE_RemovedLimboDocument, "__PRIVATE_RemovedLimboDocument");
    var __PRIVATE_View = class {
      constructor(e, t2) {
        this.query = e, this.fa = t2, this.ga = null, this.hasCachedResults = false, /**
         * A flag whether the view is current with the backend. A view is considered
         * current after it has seen the current flag from the backend and did not
         * lose consistency within the watch stream (e.g. because of an existence
         * filter mismatch).
         */
        this.current = false, /** Documents in the view but not in the remote target */
        this.pa = __PRIVATE_documentKeySet(), /** Document Keys that have local changes */
        this.mutatedKeys = __PRIVATE_documentKeySet(), this.ya = __PRIVATE_newQueryComparator(e), this.wa = new DocumentSet(this.ya);
      }
      /**
       * The set of remote documents that the server has told us belongs to the target associated with
       * this view.
       */
      get Sa() {
        return this.fa;
      }
      /**
       * Iterates over a set of doc changes, applies the query limit, and computes
       * what the new results should be, what the changes were, and whether we may
       * need to go back to the local cache for more results. Does not make any
       * changes to the view.
       * @param docChanges - The doc changes to apply to this view.
       * @param previousChanges - If this is being called with a refill, then start
       *        with this set of docs and changes instead of the current view.
       * @returns a new set of docs, changes, and refill flag.
       */
      ba(e, t2) {
        const n2 = t2 ? t2.Da : new __PRIVATE_DocumentChangeSet(), r2 = t2 ? t2.wa : this.wa;
        let i = t2 ? t2.mutatedKeys : this.mutatedKeys, s2 = r2, o2 = false;
        const _ = "F" === this.query.limitType && r2.size === this.query.limit ? r2.last() : null, a2 = "L" === this.query.limitType && r2.size === this.query.limit ? r2.first() : null;
        if (e.inorderTraversal((e2, t3) => {
          const u2 = r2.get(e2), c2 = __PRIVATE_queryMatches(this.query, t3) ? t3 : null, l = !!u2 && this.mutatedKeys.has(u2.key), h2 = !!c2 && (c2.hasLocalMutations || // We only consider committed mutations for documents that were
          // mutated during the lifetime of the view.
          this.mutatedKeys.has(c2.key) && c2.hasCommittedMutations);
          let P = false;
          if (u2 && c2) {
            u2.data.isEqual(c2.data) ? l !== h2 && (n2.track({
              type: 3,
              doc: c2
            }), P = true) : this.va(u2, c2) || (n2.track({
              type: 2,
              doc: c2
            }), P = true, (_ && this.ya(c2, _) > 0 || a2 && this.ya(c2, a2) < 0) && // This doc moved from inside the limit to outside the limit.
            // That means there may be some other doc in the local cache
            // that should be included instead.
            (o2 = true));
          } else
            !u2 && c2 ? (n2.track({
              type: 0,
              doc: c2
            }), P = true) : u2 && !c2 && (n2.track({
              type: 1,
              doc: u2
            }), P = true, (_ || a2) && // A doc was removed from a full limit query. We'll need to
            // requery from the local cache to see if we know about some other
            // doc that should be in the results.
            (o2 = true));
          P && (c2 ? (s2 = s2.add(c2), i = h2 ? i.add(e2) : i.delete(e2)) : (s2 = s2.delete(e2), i = i.delete(e2)));
        }), null !== this.query.limit)
          for (; s2.size > this.query.limit; ) {
            const e2 = "F" === this.query.limitType ? s2.last() : s2.first();
            s2 = s2.delete(e2.key), i = i.delete(e2.key), n2.track({
              type: 1,
              doc: e2
            });
          }
        return {
          wa: s2,
          Da: n2,
          ls: o2,
          mutatedKeys: i
        };
      }
      va(e, t2) {
        return e.hasLocalMutations && t2.hasCommittedMutations && !t2.hasLocalMutations;
      }
      /**
       * Updates the view with the given ViewDocumentChanges and optionally updates
       * limbo docs and sync state from the provided target change.
       * @param docChanges - The set of changes to make to the view's docs.
       * @param limboResolutionEnabled - Whether to update limbo documents based on
       *        this change.
       * @param targetChange - A target change to apply for computing limbo docs and
       *        sync state.
       * @param targetIsPendingReset - Whether the target is pending to reset due to
       *        existence filter mismatch. If not explicitly specified, it is treated
       *        equivalently to `false`.
       * @returns A new ViewChange with the given docs, changes, and sync state.
       */
      // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
      applyChanges(e, t2, n2, r2) {
        const i = this.wa;
        this.wa = e.wa, this.mutatedKeys = e.mutatedKeys;
        const s2 = e.Da.X_();
        s2.sort((e2, t3) => (/* @__PURE__ */ __name(function __PRIVATE_compareChangeType(e3, t4) {
          const order = /* @__PURE__ */ __name((e4) => {
            switch (e4) {
              case 0:
                return 1;
              case 2:
              case 3:
                return 2;
              case 1:
                return 0;
              default:
                return fail();
            }
          }, "order");
          return order(e3) - order(t4);
        }, "__PRIVATE_compareChangeType"))(e2.type, t3.type) || this.ya(e2.doc, t3.doc)), this.Ca(n2), r2 = null != r2 && r2;
        const o2 = t2 && !r2 ? this.Fa() : [], _ = 0 === this.pa.size && this.current && !r2 ? 1 : 0, a2 = _ !== this.ga;
        if (this.ga = _, 0 !== s2.length || a2) {
          return {
            snapshot: new ViewSnapshot(
              this.query,
              e.wa,
              i,
              s2,
              e.mutatedKeys,
              0 === _,
              a2,
              /* excludesMetadataChanges= */
              false,
              !!n2 && n2.resumeToken.approximateByteSize() > 0
            ),
            Ma: o2
          };
        }
        return {
          Ma: o2
        };
      }
      /**
       * Applies an OnlineState change to the view, potentially generating a
       * ViewChange if the view's syncState changes as a result.
       */
      sa(e) {
        return this.current && "Offline" === e ? (
          // If we're offline, set `current` to false and then call applyChanges()
          // to refresh our syncState and generate a ViewChange as appropriate. We
          // are guaranteed to get a new TargetChange that sets `current` back to
          // true once the client is back online.
          (this.current = false, this.applyChanges(
            {
              wa: this.wa,
              Da: new __PRIVATE_DocumentChangeSet(),
              mutatedKeys: this.mutatedKeys,
              ls: false
            },
            /* limboResolutionEnabled= */
            false
          ))
        ) : {
          Ma: []
        };
      }
      /**
       * Returns whether the doc for the given key should be in limbo.
       */
      xa(e) {
        return !this.fa.has(e) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
        (!!this.wa.has(e) && !this.wa.get(e).hasLocalMutations);
      }
      /**
       * Updates syncedDocuments, current, and limbo docs based on the given change.
       * Returns the list of changes to which docs are in limbo.
       */
      Ca(e) {
        e && (e.addedDocuments.forEach((e2) => this.fa = this.fa.add(e2)), e.modifiedDocuments.forEach((e2) => {
        }), e.removedDocuments.forEach((e2) => this.fa = this.fa.delete(e2)), this.current = e.current);
      }
      Fa() {
        if (!this.current)
          return [];
        const e = this.pa;
        this.pa = __PRIVATE_documentKeySet(), this.wa.forEach((e2) => {
          this.xa(e2.key) && (this.pa = this.pa.add(e2.key));
        });
        const t2 = [];
        return e.forEach((e2) => {
          this.pa.has(e2) || t2.push(new __PRIVATE_RemovedLimboDocument(e2));
        }), this.pa.forEach((n2) => {
          e.has(n2) || t2.push(new __PRIVATE_AddedLimboDocument(n2));
        }), t2;
      }
      /**
       * Update the in-memory state of the current view with the state read from
       * persistence.
       *
       * We update the query view whenever a client's primary status changes:
       * - When a client transitions from primary to secondary, it can miss
       *   LocalStorage updates and its query views may temporarily not be
       *   synchronized with the state on disk.
       * - For secondary to primary transitions, the client needs to update the list
       *   of `syncedDocuments` since secondary clients update their query views
       *   based purely on synthesized RemoteEvents.
       *
       * @param queryResult.documents - The documents that match the query according
       * to the LocalStore.
       * @param queryResult.remoteKeys - The keys of the documents that match the
       * query according to the backend.
       *
       * @returns The ViewChange that resulted from this synchronization.
       */
      // PORTING NOTE: Multi-tab only.
      Oa(e) {
        this.fa = e.gs, this.pa = __PRIVATE_documentKeySet();
        const t2 = this.ba(e.documents);
        return this.applyChanges(
          t2,
          /* limboResolutionEnabled= */
          true
        );
      }
      /**
       * Returns a view snapshot as if this query was just listened to. Contains
       * a document add for every existing document and the `fromCache` and
       * `hasPendingWrites` status of the already established view.
       */
      // PORTING NOTE: Multi-tab only.
      Na() {
        return ViewSnapshot.fromInitialDocuments(this.query, this.wa, this.mutatedKeys, 0 === this.ga, this.hasCachedResults);
      }
    };
    __name(__PRIVATE_View, "__PRIVATE_View");
    var Jt = "SyncEngine";
    var __PRIVATE_QueryView = class {
      constructor(e, t2, n2) {
        this.query = e, this.targetId = t2, this.view = n2;
      }
    };
    __name(__PRIVATE_QueryView, "__PRIVATE_QueryView");
    var LimboResolution = class {
      constructor(e) {
        this.key = e, /**
         * Set to true once we've received a document. This is used in
         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
         * decide whether it needs to manufacture a delete event for the target once
         * the target is CURRENT.
         */
        this.Ba = false;
      }
    };
    __name(LimboResolution, "LimboResolution");
    var __PRIVATE_SyncEngineImpl = class {
      constructor(e, t2, n2, r2, i, s2) {
        this.localStore = e, this.remoteStore = t2, this.eventManager = n2, this.sharedClientState = r2, this.currentUser = i, this.maxConcurrentLimboResolutions = s2, this.La = {}, this.ka = new ObjectMap((e2) => __PRIVATE_canonifyQuery(e2), __PRIVATE_queryEquals), this.qa = /* @__PURE__ */ new Map(), /**
         * The keys of documents that are in limbo for which we haven't yet started a
         * limbo resolution query. The strings in this set are the result of calling
         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
         *
         * The `Set` type was chosen because it provides efficient lookup and removal
         * of arbitrary elements and it also maintains insertion order, providing the
         * desired queue-like FIFO semantics.
         */
        this.Qa = /* @__PURE__ */ new Set(), /**
         * Keeps track of the target ID for each document that is in limbo with an
         * active target.
         */
        this.$a = new SortedMap(DocumentKey.comparator), /**
         * Keeps track of the information about an active limbo resolution for each
         * active target ID that was started for the purpose of limbo resolution.
         */
        this.Ka = /* @__PURE__ */ new Map(), this.Ua = new __PRIVATE_ReferenceSet(), /** Stores user completion handlers, indexed by User and BatchId. */
        this.Wa = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */
        this.Ga = /* @__PURE__ */ new Map(), this.za = __PRIVATE_TargetIdGenerator.Un(), this.onlineState = "Unknown", // The primary state is set to `true` or `false` immediately after Firestore
        // startup. In the interim, a client should only be considered primary if
        // `isPrimary` is true.
        this.ja = void 0;
      }
      get isPrimaryClient() {
        return true === this.ja;
      }
    };
    __name(__PRIVATE_SyncEngineImpl, "__PRIVATE_SyncEngineImpl");
    async function __PRIVATE_syncEngineListen(e, t2, n2 = true) {
      const r2 = __PRIVATE_ensureWatchCallbacks(e);
      let i;
      const s2 = r2.ka.get(t2);
      return s2 ? (
        // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
        // already exists when EventManager calls us for the first time. This
        // happens when the primary tab is already listening to this query on
        // behalf of another tab and the user of the primary also starts listening
        // to the query. EventManager will not have an assigned target ID in this
        // case and calls `listen` to obtain this ID.
        (r2.sharedClientState.addLocalQueryTarget(s2.targetId), i = s2.view.Na())
      ) : i = await __PRIVATE_allocateTargetAndMaybeListen(
        r2,
        t2,
        n2,
        /** shouldInitializeView= */
        true
      ), i;
    }
    __name(__PRIVATE_syncEngineListen, "__PRIVATE_syncEngineListen");
    async function __PRIVATE_triggerRemoteStoreListen(e, t2) {
      const n2 = __PRIVATE_ensureWatchCallbacks(e);
      await __PRIVATE_allocateTargetAndMaybeListen(
        n2,
        t2,
        /** shouldListenToRemote= */
        true,
        /** shouldInitializeView= */
        false
      );
    }
    __name(__PRIVATE_triggerRemoteStoreListen, "__PRIVATE_triggerRemoteStoreListen");
    async function __PRIVATE_allocateTargetAndMaybeListen(e, t2, n2, r2) {
      const i = await __PRIVATE_localStoreAllocateTarget(e.localStore, __PRIVATE_queryToTarget(t2)), s2 = i.targetId, o2 = e.sharedClientState.addLocalQueryTarget(s2, n2);
      let _;
      return r2 && (_ = await __PRIVATE_initializeViewAndComputeSnapshot(e, t2, s2, "current" === o2, i.resumeToken)), e.isPrimaryClient && n2 && __PRIVATE_remoteStoreListen(e.remoteStore, i), _;
    }
    __name(__PRIVATE_allocateTargetAndMaybeListen, "__PRIVATE_allocateTargetAndMaybeListen");
    async function __PRIVATE_initializeViewAndComputeSnapshot(e, t2, n2, r2, i) {
      e.Ha = (t3, n3, r3) => (/* @__PURE__ */ __name(async function __PRIVATE_applyDocChanges(e2, t4, n4, r4) {
        let i2 = t4.view.ba(n4);
        i2.ls && // The query has a limit and some docs were removed, so we need
        // to re-run the query against the local store to make sure we
        // didn't lose any good docs that had been past the limit.
        (i2 = await __PRIVATE_localStoreExecuteQuery(
          e2.localStore,
          t4.query,
          /* usePreviousResults= */
          false
        ).then(({ documents: e3 }) => t4.view.ba(e3, i2)));
        const s3 = r4 && r4.targetChanges.get(t4.targetId), o3 = r4 && null != r4.targetMismatches.get(t4.targetId), _2 = t4.view.applyChanges(
          i2,
          /* limboResolutionEnabled= */
          e2.isPrimaryClient,
          s3,
          o3
        );
        return __PRIVATE_updateTrackedLimbos(e2, t4.targetId, _2.Ma), _2.snapshot;
      }, "__PRIVATE_applyDocChanges"))(e, t3, n3, r3);
      const s2 = await __PRIVATE_localStoreExecuteQuery(
        e.localStore,
        t2,
        /* usePreviousResults= */
        true
      ), o2 = new __PRIVATE_View(t2, s2.gs), _ = o2.ba(s2.documents), a2 = TargetChange.createSynthesizedTargetChangeForCurrentChange(n2, r2 && "Offline" !== e.onlineState, i), u2 = o2.applyChanges(
        _,
        /* limboResolutionEnabled= */
        e.isPrimaryClient,
        a2
      );
      __PRIVATE_updateTrackedLimbos(e, n2, u2.Ma);
      const c2 = new __PRIVATE_QueryView(t2, n2, o2);
      return e.ka.set(t2, c2), e.qa.has(n2) ? e.qa.get(n2).push(t2) : e.qa.set(n2, [t2]), u2.snapshot;
    }
    __name(__PRIVATE_initializeViewAndComputeSnapshot, "__PRIVATE_initializeViewAndComputeSnapshot");
    async function __PRIVATE_syncEngineUnlisten(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e), i = r2.ka.get(t2), s2 = r2.qa.get(i.targetId);
      if (s2.length > 1)
        return r2.qa.set(i.targetId, s2.filter((e2) => !__PRIVATE_queryEquals(e2, t2))), void r2.ka.delete(t2);
      if (r2.isPrimaryClient) {
        r2.sharedClientState.removeLocalQueryTarget(i.targetId);
        r2.sharedClientState.isActiveQueryTarget(i.targetId) || await __PRIVATE_localStoreReleaseTarget(
          r2.localStore,
          i.targetId,
          /*keepPersistedTargetData=*/
          false
        ).then(() => {
          r2.sharedClientState.clearQueryState(i.targetId), n2 && __PRIVATE_remoteStoreUnlisten(r2.remoteStore, i.targetId), __PRIVATE_removeAndCleanupTarget(r2, i.targetId);
        }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
      } else
        __PRIVATE_removeAndCleanupTarget(r2, i.targetId), await __PRIVATE_localStoreReleaseTarget(
          r2.localStore,
          i.targetId,
          /*keepPersistedTargetData=*/
          true
        );
    }
    __name(__PRIVATE_syncEngineUnlisten, "__PRIVATE_syncEngineUnlisten");
    async function __PRIVATE_triggerRemoteStoreUnlisten(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = n2.ka.get(t2), i = n2.qa.get(r2.targetId);
      n2.isPrimaryClient && 1 === i.length && // PORTING NOTE: Unregister the target ID with local Firestore client as
      // watch target.
      (n2.sharedClientState.removeLocalQueryTarget(r2.targetId), __PRIVATE_remoteStoreUnlisten(n2.remoteStore, r2.targetId));
    }
    __name(__PRIVATE_triggerRemoteStoreUnlisten, "__PRIVATE_triggerRemoteStoreUnlisten");
    async function __PRIVATE_syncEngineWrite(e, t2, n2) {
      const r2 = __PRIVATE_syncEngineEnsureWriteCallbacks(e);
      try {
        const e2 = await (/* @__PURE__ */ __name(function __PRIVATE_localStoreWriteLocally(e3, t3) {
          const n3 = __PRIVATE_debugCast(e3), r3 = Timestamp.now(), i = t3.reduce((e4, t4) => e4.add(t4.key), __PRIVATE_documentKeySet());
          let s2, o2;
          return n3.persistence.runTransaction("Locally write mutations", "readwrite", (e4) => {
            let _ = __PRIVATE_mutableDocumentMap(), a2 = __PRIVATE_documentKeySet();
            return n3.ds.getEntries(e4, i).next((e5) => {
              _ = e5, _.forEach((e6, t4) => {
                t4.isValidDocument() || (a2 = a2.add(e6));
              });
            }).next(() => n3.localDocuments.getOverlayedDocuments(e4, _)).next((i2) => {
              s2 = i2;
              const o3 = [];
              for (const e5 of t3) {
                const t4 = __PRIVATE_mutationExtractBaseValue(e5, s2.get(e5.key).overlayedDocument);
                null != t4 && // NOTE: The base state should only be applied if there's some
                // existing document to override, so use a Precondition of
                // exists=true
                o3.push(new __PRIVATE_PatchMutation(e5.key, t4, __PRIVATE_extractFieldMask(t4.value.mapValue), Precondition.exists(true)));
              }
              return n3.mutationQueue.addMutationBatch(e4, r3, o3, t3);
            }).next((t4) => {
              o2 = t4;
              const r4 = t4.applyToLocalDocumentSet(s2, a2);
              return n3.documentOverlayCache.saveOverlays(e4, t4.batchId, r4);
            });
          }).then(() => ({
            batchId: o2.batchId,
            changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(s2)
          }));
        }, "__PRIVATE_localStoreWriteLocally"))(r2.localStore, t2);
        r2.sharedClientState.addPendingMutation(e2.batchId), (/* @__PURE__ */ __name(function __PRIVATE_addMutationCallback(e3, t3, n3) {
          let r3 = e3.Wa[e3.currentUser.toKey()];
          r3 || (r3 = new SortedMap(__PRIVATE_primitiveComparator));
          r3 = r3.insert(t3, n3), e3.Wa[e3.currentUser.toKey()] = r3;
        }, "__PRIVATE_addMutationCallback"))(r2, e2.batchId, n2), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r2, e2.changes), await __PRIVATE_fillWritePipeline(r2.remoteStore);
      } catch (e2) {
        const t3 = __PRIVATE_wrapInUserErrorIfRecoverable(e2, "Failed to persist write");
        n2.reject(t3);
      }
    }
    __name(__PRIVATE_syncEngineWrite, "__PRIVATE_syncEngineWrite");
    async function __PRIVATE_syncEngineApplyRemoteEvent(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      try {
        const e2 = await __PRIVATE_localStoreApplyRemoteEventToLocalCache(n2.localStore, t2);
        t2.targetChanges.forEach((e3, t3) => {
          const r2 = n2.Ka.get(t3);
          r2 && // Since this is a limbo resolution lookup, it's for a single document
          // and it could be added, modified, or removed, but not a combination.
          (__PRIVATE_hardAssert(e3.addedDocuments.size + e3.modifiedDocuments.size + e3.removedDocuments.size <= 1), e3.addedDocuments.size > 0 ? r2.Ba = true : e3.modifiedDocuments.size > 0 ? __PRIVATE_hardAssert(r2.Ba) : e3.removedDocuments.size > 0 && (__PRIVATE_hardAssert(r2.Ba), r2.Ba = false));
        }), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n2, e2, t2);
      } catch (e2) {
        await __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);
      }
    }
    __name(__PRIVATE_syncEngineApplyRemoteEvent, "__PRIVATE_syncEngineApplyRemoteEvent");
    function __PRIVATE_syncEngineApplyOnlineStateChange(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e);
      if (r2.isPrimaryClient && 0 === n2 || !r2.isPrimaryClient && 1 === n2) {
        const e2 = [];
        r2.ka.forEach((n3, r3) => {
          const i = r3.view.sa(t2);
          i.snapshot && e2.push(i.snapshot);
        }), (/* @__PURE__ */ __name(function __PRIVATE_eventManagerOnOnlineStateChange(e3, t3) {
          const n3 = __PRIVATE_debugCast(e3);
          n3.onlineState = t3;
          let r3 = false;
          n3.queries.forEach((e4, n4) => {
            for (const e5 of n4.ta)
              e5.sa(t3) && (r3 = true);
          }), r3 && __PRIVATE_raiseSnapshotsInSyncEvent(n3);
        }, "__PRIVATE_eventManagerOnOnlineStateChange"))(r2.eventManager, t2), e2.length && r2.La.p_(e2), r2.onlineState = t2, r2.isPrimaryClient && r2.sharedClientState.setOnlineState(t2);
      }
    }
    __name(__PRIVATE_syncEngineApplyOnlineStateChange, "__PRIVATE_syncEngineApplyOnlineStateChange");
    async function __PRIVATE_syncEngineRejectListen(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e);
      r2.sharedClientState.updateQueryState(t2, "rejected", n2);
      const i = r2.Ka.get(t2), s2 = i && i.key;
      if (s2) {
        let e2 = new SortedMap(DocumentKey.comparator);
        e2 = e2.insert(s2, MutableDocument.newNoDocument(s2, SnapshotVersion.min()));
        const n3 = __PRIVATE_documentKeySet().add(s2), i2 = new RemoteEvent(
          SnapshotVersion.min(),
          /* targetChanges= */
          /* @__PURE__ */ new Map(),
          /* targetMismatches= */
          new SortedMap(__PRIVATE_primitiveComparator),
          e2,
          n3
        );
        await __PRIVATE_syncEngineApplyRemoteEvent(r2, i2), // Since this query failed, we won't want to manually unlisten to it.
        // We only remove it from bookkeeping after we successfully applied the
        // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
        // this query when the RemoteStore restarts the Watch stream, which should
        // re-trigger the target failure.
        r2.$a = r2.$a.remove(s2), r2.Ka.delete(t2), __PRIVATE_pumpEnqueuedLimboResolutions(r2);
      } else
        await __PRIVATE_localStoreReleaseTarget(
          r2.localStore,
          t2,
          /* keepPersistedTargetData */
          false
        ).then(() => __PRIVATE_removeAndCleanupTarget(r2, t2, n2)).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
    }
    __name(__PRIVATE_syncEngineRejectListen, "__PRIVATE_syncEngineRejectListen");
    async function __PRIVATE_syncEngineApplySuccessfulWrite(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = t2.batch.batchId;
      try {
        const e2 = await __PRIVATE_localStoreAcknowledgeBatch(n2.localStore, t2);
        __PRIVATE_processUserCallback(
          n2,
          r2,
          /*error=*/
          null
        ), __PRIVATE_triggerPendingWritesCallbacks(n2, r2), n2.sharedClientState.updateMutationState(r2, "acknowledged"), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n2, e2);
      } catch (e2) {
        await __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);
      }
    }
    __name(__PRIVATE_syncEngineApplySuccessfulWrite, "__PRIVATE_syncEngineApplySuccessfulWrite");
    async function __PRIVATE_syncEngineRejectFailedWrite(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e);
      try {
        const e2 = await (/* @__PURE__ */ __name(function __PRIVATE_localStoreRejectBatch(e3, t3) {
          const n3 = __PRIVATE_debugCast(e3);
          return n3.persistence.runTransaction("Reject batch", "readwrite-primary", (e4) => {
            let r3;
            return n3.mutationQueue.lookupMutationBatch(e4, t3).next((t4) => (__PRIVATE_hardAssert(null !== t4), r3 = t4.keys(), n3.mutationQueue.removeMutationBatch(e4, t4))).next(() => n3.mutationQueue.performConsistencyCheck(e4)).next(() => n3.documentOverlayCache.removeOverlaysForBatchId(e4, r3, t3)).next(() => n3.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e4, r3)).next(() => n3.localDocuments.getDocuments(e4, r3));
          });
        }, "__PRIVATE_localStoreRejectBatch"))(r2.localStore, t2);
        __PRIVATE_processUserCallback(r2, t2, n2), __PRIVATE_triggerPendingWritesCallbacks(r2, t2), r2.sharedClientState.updateMutationState(t2, "rejected", n2), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r2, e2);
      } catch (n3) {
        await __PRIVATE_ignoreIfPrimaryLeaseLoss(n3);
      }
    }
    __name(__PRIVATE_syncEngineRejectFailedWrite, "__PRIVATE_syncEngineRejectFailedWrite");
    async function __PRIVATE_syncEngineRegisterPendingWritesCallback(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      __PRIVATE_canUseNetwork(n2.remoteStore) || __PRIVATE_logDebug(Jt, "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
      try {
        const e2 = await (/* @__PURE__ */ __name(function __PRIVATE_localStoreGetHighestUnacknowledgedBatchId(e3) {
          const t3 = __PRIVATE_debugCast(e3);
          return t3.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (e4) => t3.mutationQueue.getHighestUnacknowledgedBatchId(e4));
        }, "__PRIVATE_localStoreGetHighestUnacknowledgedBatchId"))(n2.localStore);
        if (e2 === Q)
          return void t2.resolve();
        const r2 = n2.Ga.get(e2) || [];
        r2.push(t2), n2.Ga.set(e2, r2);
      } catch (e2) {
        const n3 = __PRIVATE_wrapInUserErrorIfRecoverable(e2, "Initialization of waitForPendingWrites() operation failed");
        t2.reject(n3);
      }
    }
    __name(__PRIVATE_syncEngineRegisterPendingWritesCallback, "__PRIVATE_syncEngineRegisterPendingWritesCallback");
    function __PRIVATE_triggerPendingWritesCallbacks(e, t2) {
      (e.Ga.get(t2) || []).forEach((e2) => {
        e2.resolve();
      }), e.Ga.delete(t2);
    }
    __name(__PRIVATE_triggerPendingWritesCallbacks, "__PRIVATE_triggerPendingWritesCallbacks");
    function __PRIVATE_processUserCallback(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e);
      let i = r2.Wa[r2.currentUser.toKey()];
      if (i) {
        const e2 = i.get(t2);
        e2 && (n2 ? e2.reject(n2) : e2.resolve(), i = i.remove(t2)), r2.Wa[r2.currentUser.toKey()] = i;
      }
    }
    __name(__PRIVATE_processUserCallback, "__PRIVATE_processUserCallback");
    function __PRIVATE_removeAndCleanupTarget(e, t2, n2 = null) {
      e.sharedClientState.removeLocalQueryTarget(t2);
      for (const r2 of e.qa.get(t2))
        e.ka.delete(r2), n2 && e.La.Ja(r2, n2);
      if (e.qa.delete(t2), e.isPrimaryClient) {
        e.Ua.br(t2).forEach((t3) => {
          e.Ua.containsKey(t3) || // We removed the last reference for this key
          __PRIVATE_removeLimboTarget(e, t3);
        });
      }
    }
    __name(__PRIVATE_removeAndCleanupTarget, "__PRIVATE_removeAndCleanupTarget");
    function __PRIVATE_removeLimboTarget(e, t2) {
      e.Qa.delete(t2.path.canonicalString());
      const n2 = e.$a.get(t2);
      null !== n2 && (__PRIVATE_remoteStoreUnlisten(e.remoteStore, n2), e.$a = e.$a.remove(t2), e.Ka.delete(n2), __PRIVATE_pumpEnqueuedLimboResolutions(e));
    }
    __name(__PRIVATE_removeLimboTarget, "__PRIVATE_removeLimboTarget");
    function __PRIVATE_updateTrackedLimbos(e, t2, n2) {
      for (const r2 of n2)
        if (r2 instanceof __PRIVATE_AddedLimboDocument)
          e.Ua.addReference(r2.key, t2), __PRIVATE_trackLimboChange(e, r2);
        else if (r2 instanceof __PRIVATE_RemovedLimboDocument) {
          __PRIVATE_logDebug(Jt, "Document no longer in limbo: " + r2.key), e.Ua.removeReference(r2.key, t2);
          e.Ua.containsKey(r2.key) || // We removed the last reference for this key
          __PRIVATE_removeLimboTarget(e, r2.key);
        } else
          fail();
    }
    __name(__PRIVATE_updateTrackedLimbos, "__PRIVATE_updateTrackedLimbos");
    function __PRIVATE_trackLimboChange(e, t2) {
      const n2 = t2.key, r2 = n2.path.canonicalString();
      e.$a.get(n2) || e.Qa.has(r2) || (__PRIVATE_logDebug(Jt, "New document in limbo: " + n2), e.Qa.add(r2), __PRIVATE_pumpEnqueuedLimboResolutions(e));
    }
    __name(__PRIVATE_trackLimboChange, "__PRIVATE_trackLimboChange");
    function __PRIVATE_pumpEnqueuedLimboResolutions(e) {
      for (; e.Qa.size > 0 && e.$a.size < e.maxConcurrentLimboResolutions; ) {
        const t2 = e.Qa.values().next().value;
        e.Qa.delete(t2);
        const n2 = new DocumentKey(ResourcePath.fromString(t2)), r2 = e.za.next();
        e.Ka.set(r2, new LimboResolution(n2)), e.$a = e.$a.insert(n2, r2), __PRIVATE_remoteStoreListen(e.remoteStore, new TargetData(__PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(n2.path)), r2, "TargetPurposeLimboResolution", __PRIVATE_ListenSequence.ae));
      }
    }
    __name(__PRIVATE_pumpEnqueuedLimboResolutions, "__PRIVATE_pumpEnqueuedLimboResolutions");
    async function __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e), i = [], s2 = [], o2 = [];
      r2.ka.isEmpty() || (r2.ka.forEach((e2, _) => {
        o2.push(r2.Ha(_, t2, n2).then((e3) => {
          var t3;
          if ((e3 || n2) && r2.isPrimaryClient) {
            const i2 = e3 ? !e3.fromCache : null === (t3 = null == n2 ? void 0 : n2.targetChanges.get(_.targetId)) || void 0 === t3 ? void 0 : t3.current;
            r2.sharedClientState.updateQueryState(_.targetId, i2 ? "current" : "not-current");
          }
          if (e3) {
            i.push(e3);
            const t4 = __PRIVATE_LocalViewChanges.Yi(_.targetId, e3);
            s2.push(t4);
          }
        }));
      }), await Promise.all(o2), r2.La.p_(i), await (/* @__PURE__ */ __name(async function __PRIVATE_localStoreNotifyLocalViewChanges(e2, t3) {
        const n3 = __PRIVATE_debugCast(e2);
        try {
          await n3.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (e3) => PersistencePromise.forEach(t3, (t4) => PersistencePromise.forEach(t4.Hi, (r3) => n3.persistence.referenceDelegate.addReference(e3, t4.targetId, r3)).next(() => PersistencePromise.forEach(t4.Ji, (r3) => n3.persistence.referenceDelegate.removeReference(e3, t4.targetId, r3)))));
        } catch (e3) {
          if (!__PRIVATE_isIndexedDbTransactionError(e3))
            throw e3;
          __PRIVATE_logDebug(Ot, "Failed to update sequence numbers: " + e3);
        }
        for (const e3 of t3) {
          const t4 = e3.targetId;
          if (!e3.fromCache) {
            const e4 = n3.Ts.get(t4), r3 = e4.snapshotVersion, i2 = e4.withLastLimboFreeSnapshotVersion(r3);
            n3.Ts = n3.Ts.insert(t4, i2);
          }
        }
      }, "__PRIVATE_localStoreNotifyLocalViewChanges"))(r2.localStore, s2));
    }
    __name(__PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore, "__PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore");
    async function __PRIVATE_syncEngineHandleCredentialChange(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      if (!n2.currentUser.isEqual(t2)) {
        __PRIVATE_logDebug(Jt, "User change. New user:", t2.toKey());
        const e2 = await __PRIVATE_localStoreHandleUserChange(n2.localStore, t2);
        n2.currentUser = t2, // Fails tasks waiting for pending writes requested by previous user.
        (/* @__PURE__ */ __name(function __PRIVATE_rejectOutstandingPendingWritesCallbacks(e3, t3) {
          e3.Ga.forEach((e4) => {
            e4.forEach((e5) => {
              e5.reject(new FirestoreError(C.CANCELLED, t3));
            });
          }), e3.Ga.clear();
        }, "__PRIVATE_rejectOutstandingPendingWritesCallbacks"))(n2, "'waitForPendingWrites' promise is rejected due to a user change."), // TODO(b/114226417): Consider calling this only in the primary tab.
        n2.sharedClientState.handleUserChange(t2, e2.removedBatchIds, e2.addedBatchIds), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n2, e2.Rs);
      }
    }
    __name(__PRIVATE_syncEngineHandleCredentialChange, "__PRIVATE_syncEngineHandleCredentialChange");
    function __PRIVATE_syncEngineGetRemoteKeysForTarget(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = n2.Ka.get(t2);
      if (r2 && r2.Ba)
        return __PRIVATE_documentKeySet().add(r2.key);
      {
        let e2 = __PRIVATE_documentKeySet();
        const r3 = n2.qa.get(t2);
        if (!r3)
          return e2;
        for (const t3 of r3) {
          const r4 = n2.ka.get(t3);
          e2 = e2.unionWith(r4.view.Sa);
        }
        return e2;
      }
    }
    __name(__PRIVATE_syncEngineGetRemoteKeysForTarget, "__PRIVATE_syncEngineGetRemoteKeysForTarget");
    async function __PRIVATE_synchronizeViewAndComputeSnapshot(e, t2) {
      const n2 = __PRIVATE_debugCast(e), r2 = await __PRIVATE_localStoreExecuteQuery(
        n2.localStore,
        t2.query,
        /* usePreviousResults= */
        true
      ), i = t2.view.Oa(r2);
      return n2.isPrimaryClient && __PRIVATE_updateTrackedLimbos(n2, t2.targetId, i.Ma), i;
    }
    __name(__PRIVATE_synchronizeViewAndComputeSnapshot, "__PRIVATE_synchronizeViewAndComputeSnapshot");
    async function __PRIVATE_syncEngineSynchronizeWithChangedDocuments(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      return __PRIVATE_localStoreGetNewDocumentChanges(n2.localStore, t2).then((e2) => __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n2, e2));
    }
    __name(__PRIVATE_syncEngineSynchronizeWithChangedDocuments, "__PRIVATE_syncEngineSynchronizeWithChangedDocuments");
    async function __PRIVATE_syncEngineApplyBatchState(e, t2, n2, r2) {
      const i = __PRIVATE_debugCast(e), s2 = await (/* @__PURE__ */ __name(function __PRIVATE_localStoreLookupMutationDocuments(e2, t3) {
        const n3 = __PRIVATE_debugCast(e2), r3 = __PRIVATE_debugCast(n3.mutationQueue);
        return n3.persistence.runTransaction("Lookup mutation documents", "readonly", (e3) => r3.Ln(e3, t3).next((t4) => t4 ? n3.localDocuments.getDocuments(e3, t4) : PersistencePromise.resolve(null)));
      }, "__PRIVATE_localStoreLookupMutationDocuments"))(i.localStore, t2);
      null !== s2 ? ("pending" === n2 ? (
        // If we are the primary client, we need to send this write to the
        // backend. Secondary clients will ignore these writes since their remote
        // connection is disabled.
        await __PRIVATE_fillWritePipeline(i.remoteStore)
      ) : "acknowledged" === n2 || "rejected" === n2 ? (
        // NOTE: Both these methods are no-ops for batches that originated from
        // other clients.
        (__PRIVATE_processUserCallback(i, t2, r2 || null), __PRIVATE_triggerPendingWritesCallbacks(i, t2), (/* @__PURE__ */ __name(function __PRIVATE_localStoreRemoveCachedMutationBatchMetadata(e2, t3) {
          __PRIVATE_debugCast(__PRIVATE_debugCast(e2).mutationQueue).qn(t3);
        }, "__PRIVATE_localStoreRemoveCachedMutationBatchMetadata"))(i.localStore, t2))
      ) : fail(), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(i, s2)) : (
        // A throttled tab may not have seen the mutation before it was completed
        // and removed from the mutation queue, in which case we won't have cached
        // the affected documents. In this case we can safely ignore the update
        // since that means we didn't apply the mutation locally at all (if we
        // had, we would have cached the affected documents), and so we will just
        // see any resulting document changes via normal remote document updates
        // as applicable.
        __PRIVATE_logDebug(Jt, "Cannot apply mutation batch with id: " + t2)
      );
    }
    __name(__PRIVATE_syncEngineApplyBatchState, "__PRIVATE_syncEngineApplyBatchState");
    async function __PRIVATE_syncEngineApplyPrimaryState(e, t2) {
      const n2 = __PRIVATE_debugCast(e);
      if (__PRIVATE_ensureWatchCallbacks(n2), __PRIVATE_syncEngineEnsureWriteCallbacks(n2), true === t2 && true !== n2.ja) {
        const e2 = n2.sharedClientState.getAllActiveQueryTargets(), t3 = await __PRIVATE_synchronizeQueryViewsAndRaiseSnapshots(n2, e2.toArray());
        n2.ja = true, await __PRIVATE_remoteStoreApplyPrimaryState(n2.remoteStore, true);
        for (const e3 of t3)
          __PRIVATE_remoteStoreListen(n2.remoteStore, e3);
      } else if (false === t2 && false !== n2.ja) {
        const e2 = [];
        let t3 = Promise.resolve();
        n2.qa.forEach((r2, i) => {
          n2.sharedClientState.isLocalQueryTarget(i) ? e2.push(i) : t3 = t3.then(() => (__PRIVATE_removeAndCleanupTarget(n2, i), __PRIVATE_localStoreReleaseTarget(
            n2.localStore,
            i,
            /*keepPersistedTargetData=*/
            true
          ))), __PRIVATE_remoteStoreUnlisten(n2.remoteStore, i);
        }), await t3, await __PRIVATE_synchronizeQueryViewsAndRaiseSnapshots(n2, e2), // PORTING NOTE: Multi-Tab only.
        (/* @__PURE__ */ __name(function __PRIVATE_resetLimboDocuments(e3) {
          const t4 = __PRIVATE_debugCast(e3);
          t4.Ka.forEach((e4, n3) => {
            __PRIVATE_remoteStoreUnlisten(t4.remoteStore, n3);
          }), t4.Ua.Dr(), t4.Ka = /* @__PURE__ */ new Map(), t4.$a = new SortedMap(DocumentKey.comparator);
        }, "__PRIVATE_resetLimboDocuments"))(n2), n2.ja = false, await __PRIVATE_remoteStoreApplyPrimaryState(n2.remoteStore, false);
      }
    }
    __name(__PRIVATE_syncEngineApplyPrimaryState, "__PRIVATE_syncEngineApplyPrimaryState");
    async function __PRIVATE_synchronizeQueryViewsAndRaiseSnapshots(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e), i = [], s2 = [];
      for (const e2 of t2) {
        let t3;
        const n3 = r2.qa.get(e2);
        if (n3 && 0 !== n3.length) {
          t3 = await __PRIVATE_localStoreAllocateTarget(r2.localStore, __PRIVATE_queryToTarget(n3[0]));
          for (const e3 of n3) {
            const t4 = r2.ka.get(e3), n4 = await __PRIVATE_synchronizeViewAndComputeSnapshot(r2, t4);
            n4.snapshot && s2.push(n4.snapshot);
          }
        } else {
          const n4 = await __PRIVATE_localStoreGetCachedTarget(r2.localStore, e2);
          t3 = await __PRIVATE_localStoreAllocateTarget(r2.localStore, n4), await __PRIVATE_initializeViewAndComputeSnapshot(
            r2,
            __PRIVATE_synthesizeTargetToQuery(n4),
            e2,
            /*current=*/
            false,
            t3.resumeToken
          );
        }
        i.push(t3);
      }
      return r2.La.p_(s2), i;
    }
    __name(__PRIVATE_synchronizeQueryViewsAndRaiseSnapshots, "__PRIVATE_synchronizeQueryViewsAndRaiseSnapshots");
    function __PRIVATE_synthesizeTargetToQuery(e) {
      return __PRIVATE_newQuery(e.path, e.collectionGroup, e.orderBy, e.filters, e.limit, "F", e.startAt, e.endAt);
    }
    __name(__PRIVATE_synthesizeTargetToQuery, "__PRIVATE_synthesizeTargetToQuery");
    function __PRIVATE_syncEngineGetActiveClients(e) {
      return (/* @__PURE__ */ __name(function __PRIVATE_localStoreGetActiveClients(e2) {
        return __PRIVATE_debugCast(__PRIVATE_debugCast(e2).persistence).zi();
      }, "__PRIVATE_localStoreGetActiveClients"))(__PRIVATE_debugCast(e).localStore);
    }
    __name(__PRIVATE_syncEngineGetActiveClients, "__PRIVATE_syncEngineGetActiveClients");
    async function __PRIVATE_syncEngineApplyTargetState(e, t2, n2, r2) {
      const i = __PRIVATE_debugCast(e);
      if (i.ja)
        return void __PRIVATE_logDebug(Jt, "Ignoring unexpected query state notification.");
      const s2 = i.qa.get(t2);
      if (s2 && s2.length > 0)
        switch (n2) {
          case "current":
          case "not-current": {
            const e2 = await __PRIVATE_localStoreGetNewDocumentChanges(i.localStore, __PRIVATE_queryCollectionGroup(s2[0])), r3 = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(t2, "current" === n2, ByteString.EMPTY_BYTE_STRING);
            await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(i, e2, r3);
            break;
          }
          case "rejected":
            await __PRIVATE_localStoreReleaseTarget(
              i.localStore,
              t2,
              /* keepPersistedTargetData */
              true
            ), __PRIVATE_removeAndCleanupTarget(i, t2, r2);
            break;
          default:
            fail();
        }
    }
    __name(__PRIVATE_syncEngineApplyTargetState, "__PRIVATE_syncEngineApplyTargetState");
    async function __PRIVATE_syncEngineApplyActiveTargetsChange(e, t2, n2) {
      const r2 = __PRIVATE_ensureWatchCallbacks(e);
      if (r2.ja) {
        for (const e2 of t2) {
          if (r2.qa.has(e2) && r2.sharedClientState.isActiveQueryTarget(e2)) {
            __PRIVATE_logDebug(Jt, "Adding an already active target " + e2);
            continue;
          }
          const t3 = await __PRIVATE_localStoreGetCachedTarget(r2.localStore, e2), n3 = await __PRIVATE_localStoreAllocateTarget(r2.localStore, t3);
          await __PRIVATE_initializeViewAndComputeSnapshot(
            r2,
            __PRIVATE_synthesizeTargetToQuery(t3),
            n3.targetId,
            /*current=*/
            false,
            n3.resumeToken
          ), __PRIVATE_remoteStoreListen(r2.remoteStore, n3);
        }
        for (const e2 of n2)
          r2.qa.has(e2) && // Release queries that are still active.
          await __PRIVATE_localStoreReleaseTarget(
            r2.localStore,
            e2,
            /* keepPersistedTargetData */
            false
          ).then(() => {
            __PRIVATE_remoteStoreUnlisten(r2.remoteStore, e2), __PRIVATE_removeAndCleanupTarget(r2, e2);
          }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
      }
    }
    __name(__PRIVATE_syncEngineApplyActiveTargetsChange, "__PRIVATE_syncEngineApplyActiveTargetsChange");
    function __PRIVATE_ensureWatchCallbacks(e) {
      const t2 = __PRIVATE_debugCast(e);
      return t2.remoteStore.remoteSyncer.applyRemoteEvent = __PRIVATE_syncEngineApplyRemoteEvent.bind(null, t2), t2.remoteStore.remoteSyncer.getRemoteKeysForTarget = __PRIVATE_syncEngineGetRemoteKeysForTarget.bind(null, t2), t2.remoteStore.remoteSyncer.rejectListen = __PRIVATE_syncEngineRejectListen.bind(null, t2), t2.La.p_ = __PRIVATE_eventManagerOnWatchChange.bind(null, t2.eventManager), t2.La.Ja = __PRIVATE_eventManagerOnWatchError.bind(null, t2.eventManager), t2;
    }
    __name(__PRIVATE_ensureWatchCallbacks, "__PRIVATE_ensureWatchCallbacks");
    function __PRIVATE_syncEngineEnsureWriteCallbacks(e) {
      const t2 = __PRIVATE_debugCast(e);
      return t2.remoteStore.remoteSyncer.applySuccessfulWrite = __PRIVATE_syncEngineApplySuccessfulWrite.bind(null, t2), t2.remoteStore.remoteSyncer.rejectFailedWrite = __PRIVATE_syncEngineRejectFailedWrite.bind(null, t2), t2;
    }
    __name(__PRIVATE_syncEngineEnsureWriteCallbacks, "__PRIVATE_syncEngineEnsureWriteCallbacks");
    function __PRIVATE_syncEngineLoadBundle(e, t2, n2) {
      const r2 = __PRIVATE_debugCast(e);
      /** Loads a bundle and returns the list of affected collection groups. */
      (/* @__PURE__ */ __name(async function __PRIVATE_loadBundleImpl(e2, t3, n3) {
        try {
          const r3 = await t3.getMetadata();
          if (await (/* @__PURE__ */ __name(function __PRIVATE_localStoreHasNewerBundle(e3, t4) {
            const n4 = __PRIVATE_debugCast(e3), r4 = __PRIVATE_fromVersion(t4.createTime);
            return n4.persistence.runTransaction("hasNewerBundle", "readonly", (e4) => n4.Yr.getBundleMetadata(e4, t4.id)).then((e4) => !!e4 && e4.createTime.compareTo(r4) >= 0);
          }, "__PRIVATE_localStoreHasNewerBundle"))(e2.localStore, r3))
            return await t3.close(), n3._completeWith((/* @__PURE__ */ __name(function __PRIVATE_bundleSuccessProgress(e3) {
              return {
                taskState: "Success",
                documentsLoaded: e3.totalDocuments,
                bytesLoaded: e3.totalBytes,
                totalDocuments: e3.totalDocuments,
                totalBytes: e3.totalBytes
              };
            }, "__PRIVATE_bundleSuccessProgress"))(r3)), Promise.resolve(/* @__PURE__ */ new Set());
          n3._updateProgress(__PRIVATE_bundleInitialProgress(r3));
          const i = new __PRIVATE_BundleLoader(r3, e2.localStore, t3.serializer);
          let s2 = await t3.Ya();
          for (; s2; ) {
            const e3 = await i.Aa(s2);
            e3 && n3._updateProgress(e3), s2 = await t3.Ya();
          }
          const o2 = await i.complete();
          return await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(
            e2,
            o2.ma,
            /* remoteEvent */
            void 0
          ), // Save metadata, so loading the same bundle will skip.
          await (/* @__PURE__ */ __name(function __PRIVATE_localStoreSaveBundle(e3, t4) {
            const n4 = __PRIVATE_debugCast(e3);
            return n4.persistence.runTransaction("Save bundle", "readwrite", (e4) => n4.Yr.saveBundleMetadata(e4, t4));
          }, "__PRIVATE_localStoreSaveBundle"))(e2.localStore, r3), n3._completeWith(o2.progress), Promise.resolve(o2.Va);
        } catch (e3) {
          return __PRIVATE_logWarn(Jt, `Loading bundle failed with ${e3}`), n3._failWith(e3), Promise.resolve(/* @__PURE__ */ new Set());
        }
      }, "__PRIVATE_loadBundleImpl"))(r2, t2, n2).then((e2) => {
        r2.sharedClientState.notifyBundleLoaded(e2);
      });
    }
    __name(__PRIVATE_syncEngineLoadBundle, "__PRIVATE_syncEngineLoadBundle");
    var __PRIVATE_MemoryOfflineComponentProvider = class {
      constructor() {
        this.kind = "memory", this.synchronizeTabs = false;
      }
      async initialize(e) {
        this.serializer = __PRIVATE_newSerializer(e.databaseInfo.databaseId), this.sharedClientState = this.Za(e), this.persistence = this.Xa(e), await this.persistence.start(), this.localStore = this.eu(e), this.gcScheduler = this.tu(e, this.localStore), this.indexBackfillerScheduler = this.nu(e, this.localStore);
      }
      tu(e, t2) {
        return null;
      }
      nu(e, t2) {
        return null;
      }
      eu(e) {
        return __PRIVATE_newLocalStore(this.persistence, new __PRIVATE_QueryEngine(), e.initialUser, this.serializer);
      }
      Xa(e) {
        return new __PRIVATE_MemoryPersistence(__PRIVATE_MemoryEagerDelegate.ri, this.serializer);
      }
      Za(e) {
        return new __PRIVATE_MemorySharedClientState();
      }
      async terminate() {
        var e, t2;
        null === (e = this.gcScheduler) || void 0 === e || e.stop(), null === (t2 = this.indexBackfillerScheduler) || void 0 === t2 || t2.stop(), this.sharedClientState.shutdown(), await this.persistence.shutdown();
      }
    };
    __name(__PRIVATE_MemoryOfflineComponentProvider, "__PRIVATE_MemoryOfflineComponentProvider");
    __PRIVATE_MemoryOfflineComponentProvider.provider = {
      build: () => new __PRIVATE_MemoryOfflineComponentProvider()
    };
    var __PRIVATE_LruGcMemoryOfflineComponentProvider = class extends __PRIVATE_MemoryOfflineComponentProvider {
      constructor(e) {
        super(), this.cacheSizeBytes = e;
      }
      tu(e, t2) {
        __PRIVATE_hardAssert(this.persistence.referenceDelegate instanceof __PRIVATE_MemoryLruDelegate);
        const n2 = this.persistence.referenceDelegate.garbageCollector;
        return new __PRIVATE_LruScheduler(n2, e.asyncQueue, t2);
      }
      Xa(e) {
        const t2 = void 0 !== this.cacheSizeBytes ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;
        return new __PRIVATE_MemoryPersistence((e2) => __PRIVATE_MemoryLruDelegate.ri(e2, t2), this.serializer);
      }
    };
    __name(__PRIVATE_LruGcMemoryOfflineComponentProvider, "__PRIVATE_LruGcMemoryOfflineComponentProvider");
    var __PRIVATE_IndexedDbOfflineComponentProvider = class extends __PRIVATE_MemoryOfflineComponentProvider {
      constructor(e, t2, n2) {
        super(), this.ru = e, this.cacheSizeBytes = t2, this.forceOwnership = n2, this.kind = "persistent", this.synchronizeTabs = false;
      }
      async initialize(e) {
        await super.initialize(e), await this.ru.initialize(this, e), // Enqueue writes from a previous session
        await __PRIVATE_syncEngineEnsureWriteCallbacks(this.ru.syncEngine), await __PRIVATE_fillWritePipeline(this.ru.remoteStore), // NOTE: This will immediately call the listener, so we make sure to
        // set it after localStore / remoteStore are started.
        await this.persistence.Ci(() => (this.gcScheduler && !this.gcScheduler.started && this.gcScheduler.start(), this.indexBackfillerScheduler && !this.indexBackfillerScheduler.started && this.indexBackfillerScheduler.start(), Promise.resolve()));
      }
      eu(e) {
        return __PRIVATE_newLocalStore(this.persistence, new __PRIVATE_QueryEngine(), e.initialUser, this.serializer);
      }
      tu(e, t2) {
        const n2 = this.persistence.referenceDelegate.garbageCollector;
        return new __PRIVATE_LruScheduler(n2, e.asyncQueue, t2);
      }
      nu(e, t2) {
        const n2 = new __PRIVATE_IndexBackfiller(t2, this.persistence);
        return new __PRIVATE_IndexBackfillerScheduler(e.asyncQueue, n2);
      }
      Xa(e) {
        const t2 = __PRIVATE_indexedDbStoragePrefix(e.databaseInfo.databaseId, e.databaseInfo.persistenceKey), n2 = void 0 !== this.cacheSizeBytes ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;
        return new __PRIVATE_IndexedDbPersistence(this.synchronizeTabs, t2, e.clientId, n2, e.asyncQueue, __PRIVATE_getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);
      }
      Za(e) {
        return new __PRIVATE_MemorySharedClientState();
      }
    };
    __name(__PRIVATE_IndexedDbOfflineComponentProvider, "__PRIVATE_IndexedDbOfflineComponentProvider");
    var __PRIVATE_MultiTabOfflineComponentProvider = class extends __PRIVATE_IndexedDbOfflineComponentProvider {
      constructor(e, t2) {
        super(
          e,
          t2,
          /* forceOwnership= */
          false
        ), this.ru = e, this.cacheSizeBytes = t2, this.synchronizeTabs = true;
      }
      async initialize(e) {
        await super.initialize(e);
        const t2 = this.ru.syncEngine;
        this.sharedClientState instanceof __PRIVATE_WebStorageSharedClientState && (this.sharedClientState.syncEngine = {
          uo: __PRIVATE_syncEngineApplyBatchState.bind(null, t2),
          co: __PRIVATE_syncEngineApplyTargetState.bind(null, t2),
          lo: __PRIVATE_syncEngineApplyActiveTargetsChange.bind(null, t2),
          zi: __PRIVATE_syncEngineGetActiveClients.bind(null, t2),
          ao: __PRIVATE_syncEngineSynchronizeWithChangedDocuments.bind(null, t2)
        }, await this.sharedClientState.start()), // NOTE: This will immediately call the listener, so we make sure to
        // set it after localStore / remoteStore are started.
        await this.persistence.Ci(async (e2) => {
          await __PRIVATE_syncEngineApplyPrimaryState(this.ru.syncEngine, e2), this.gcScheduler && (e2 && !this.gcScheduler.started ? this.gcScheduler.start() : e2 || this.gcScheduler.stop()), this.indexBackfillerScheduler && (e2 && !this.indexBackfillerScheduler.started ? this.indexBackfillerScheduler.start() : e2 || this.indexBackfillerScheduler.stop());
        });
      }
      Za(e) {
        const t2 = __PRIVATE_getWindow();
        if (!__PRIVATE_WebStorageSharedClientState.D(t2))
          throw new FirestoreError(C.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
        const n2 = __PRIVATE_indexedDbStoragePrefix(e.databaseInfo.databaseId, e.databaseInfo.persistenceKey);
        return new __PRIVATE_WebStorageSharedClientState(t2, e.asyncQueue, n2, e.clientId, e.initialUser);
      }
    };
    __name(__PRIVATE_MultiTabOfflineComponentProvider, "__PRIVATE_MultiTabOfflineComponentProvider");
    var OnlineComponentProvider = class {
      async initialize(e, t2) {
        this.localStore || (this.localStore = e.localStore, this.sharedClientState = e.sharedClientState, this.datastore = this.createDatastore(t2), this.remoteStore = this.createRemoteStore(t2), this.eventManager = this.createEventManager(t2), this.syncEngine = this.createSyncEngine(
          t2,
          /* startAsPrimary=*/
          !e.synchronizeTabs
        ), this.sharedClientState.onlineStateHandler = (e2) => __PRIVATE_syncEngineApplyOnlineStateChange(
          this.syncEngine,
          e2,
          1
          /* OnlineStateSource.SharedClientState */
        ), this.remoteStore.remoteSyncer.handleCredentialChange = __PRIVATE_syncEngineHandleCredentialChange.bind(null, this.syncEngine), await __PRIVATE_remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient));
      }
      createEventManager(e) {
        return (/* @__PURE__ */ __name(function __PRIVATE_newEventManager() {
          return new __PRIVATE_EventManagerImpl();
        }, "__PRIVATE_newEventManager"))();
      }
      createDatastore(e) {
        const t2 = __PRIVATE_newSerializer(e.databaseInfo.databaseId), n2 = (/* @__PURE__ */ __name(function __PRIVATE_newConnection(e2) {
          return new __PRIVATE_WebChannelConnection(e2);
        }, "__PRIVATE_newConnection"))(e.databaseInfo);
        return (/* @__PURE__ */ __name(function __PRIVATE_newDatastore(e2, t3, n3, r2) {
          return new __PRIVATE_DatastoreImpl(e2, t3, n3, r2);
        }, "__PRIVATE_newDatastore"))(e.authCredentials, e.appCheckCredentials, n2, t2);
      }
      createRemoteStore(e) {
        return (/* @__PURE__ */ __name(function __PRIVATE_newRemoteStore(e2, t2, n2, r2, i) {
          return new __PRIVATE_RemoteStoreImpl(e2, t2, n2, r2, i);
        }, "__PRIVATE_newRemoteStore"))(this.localStore, this.datastore, e.asyncQueue, (e2) => __PRIVATE_syncEngineApplyOnlineStateChange(
          this.syncEngine,
          e2,
          0
          /* OnlineStateSource.RemoteStore */
        ), (/* @__PURE__ */ __name(function __PRIVATE_newConnectivityMonitor() {
          return __PRIVATE_BrowserConnectivityMonitor.D() ? new __PRIVATE_BrowserConnectivityMonitor() : new __PRIVATE_NoopConnectivityMonitor();
        }, "__PRIVATE_newConnectivityMonitor"))());
      }
      createSyncEngine(e, t2) {
        return (/* @__PURE__ */ __name(function __PRIVATE_newSyncEngine(e2, t3, n2, r2, i, s2, o2) {
          const _ = new __PRIVATE_SyncEngineImpl(e2, t3, n2, r2, i, s2);
          return o2 && (_.ja = true), _;
        }, "__PRIVATE_newSyncEngine"))(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, e.initialUser, e.maxConcurrentLimboResolutions, t2);
      }
      async terminate() {
        var e, t2;
        await (/* @__PURE__ */ __name(async function __PRIVATE_remoteStoreShutdown(e2) {
          const t3 = __PRIVATE_debugCast(e2);
          __PRIVATE_logDebug(zt, "RemoteStore shutting down."), t3.W_.add(
            5
            /* OfflineCause.Shutdown */
          ), await __PRIVATE_disableNetworkInternal(t3), t3.z_.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
          // triggering spurious listener events with cached data, etc.
          t3.j_.set(
            "Unknown"
            /* OnlineState.Unknown */
          );
        }, "__PRIVATE_remoteStoreShutdown"))(this.remoteStore), null === (e = this.datastore) || void 0 === e || e.terminate(), null === (t2 = this.eventManager) || void 0 === t2 || t2.terminate();
      }
    };
    __name(OnlineComponentProvider, "OnlineComponentProvider");
    OnlineComponentProvider.provider = {
      build: () => new OnlineComponentProvider()
    };
    function __PRIVATE_toByteStreamReaderHelper(e, t2 = 10240) {
      let n2 = 0;
      return {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        async read() {
          if (n2 < e.byteLength) {
            const r2 = {
              value: e.slice(n2, n2 + t2),
              done: false
            };
            return n2 += t2, r2;
          }
          return {
            done: true
          };
        },
        async cancel() {
        },
        releaseLock() {
        },
        closed: Promise.resolve()
      };
    }
    __name(__PRIVATE_toByteStreamReaderHelper, "__PRIVATE_toByteStreamReaderHelper");
    var __PRIVATE_AsyncObserver = class {
      constructor(e) {
        this.observer = e, /**
         * When set to true, will not raise future events. Necessary to deal with
         * async detachment of listener.
         */
        this.muted = false;
      }
      next(e) {
        this.muted || this.observer.next && this.iu(this.observer.next, e);
      }
      error(e) {
        this.muted || (this.observer.error ? this.iu(this.observer.error, e) : __PRIVATE_logError("Uncaught Error in snapshot listener:", e.toString()));
      }
      su() {
        this.muted = true;
      }
      iu(e, t2) {
        setTimeout(() => {
          this.muted || e(t2);
        }, 0);
      }
    };
    __name(__PRIVATE_AsyncObserver, "__PRIVATE_AsyncObserver");
    var __PRIVATE_BundleReaderImpl = class {
      constructor(e, t2) {
        this.ou = e, this.serializer = t2, /** Cached bundle metadata. */
        this.metadata = new __PRIVATE_Deferred(), /**
         * Internal buffer to hold bundle content, accumulating incomplete element
         * content.
         */
        this.buffer = new Uint8Array(), this._u = (/* @__PURE__ */ __name(function __PRIVATE_newTextDecoder() {
          return new TextDecoder("utf-8");
        }, "__PRIVATE_newTextDecoder"))(), // Read the metadata (which is the first element).
        this.au().then((e2) => {
          e2 && e2.Ea() ? this.metadata.resolve(e2.Ia.metadata) : this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is
             ${JSON.stringify(null == e2 ? void 0 : e2.Ia)}`));
        }, (e2) => this.metadata.reject(e2));
      }
      close() {
        return this.ou.cancel();
      }
      async getMetadata() {
        return this.metadata.promise;
      }
      async Ya() {
        return await this.getMetadata(), this.au();
      }
      /**
       * Reads from the head of internal buffer, and pulling more data from
       * underlying stream if a complete element cannot be found, until an
       * element(including the prefixed length and the JSON string) is found.
       *
       * Once a complete element is read, it is dropped from internal buffer.
       *
       * Returns either the bundled element, or null if we have reached the end of
       * the stream.
       */
      async au() {
        const e = await this.uu();
        if (null === e)
          return null;
        const t2 = this._u.decode(e), n2 = Number(t2);
        isNaN(n2) && this.cu(`length string (${t2}) is not valid number`);
        const r2 = await this.lu(n2);
        return new __PRIVATE_SizedBundleElement(JSON.parse(r2), e.length + n2);
      }
      /** First index of '{' from the underlying buffer. */
      hu() {
        return this.buffer.findIndex((e) => e === "{".charCodeAt(0));
      }
      /**
       * Reads from the beginning of the internal buffer, until the first '{', and
       * return the content.
       *
       * If reached end of the stream, returns a null.
       */
      async uu() {
        for (; this.hu() < 0; ) {
          if (await this.Pu())
            break;
        }
        if (0 === this.buffer.length)
          return null;
        const e = this.hu();
        e < 0 && this.cu("Reached the end of bundle when a length string is expected.");
        const t2 = this.buffer.slice(0, e);
        return this.buffer = this.buffer.slice(e), t2;
      }
      /**
       * Reads from a specified position from the internal buffer, for a specified
       * number of bytes, pulling more data from the underlying stream if needed.
       *
       * Returns a string decoded from the read bytes.
       */
      async lu(e) {
        for (; this.buffer.length < e; ) {
          await this.Pu() && this.cu("Reached the end of bundle when more is expected.");
        }
        const t2 = this._u.decode(this.buffer.slice(0, e));
        return this.buffer = this.buffer.slice(e), t2;
      }
      cu(e) {
        throw this.ou.cancel(), new Error(`Invalid bundle format: ${e}`);
      }
      /**
       * Pulls more data from underlying stream to internal buffer.
       * Returns a boolean indicating whether the stream is finished.
       */
      async Pu() {
        const e = await this.ou.read();
        if (!e.done) {
          const t2 = new Uint8Array(this.buffer.length + e.value.length);
          t2.set(this.buffer), t2.set(e.value, this.buffer.length), this.buffer = t2;
        }
        return e.done;
      }
    };
    __name(__PRIVATE_BundleReaderImpl, "__PRIVATE_BundleReaderImpl");
    var Transaction$2 = class {
      constructor(e) {
        this.datastore = e, // The version of each document that was read during this transaction.
        this.readVersions = /* @__PURE__ */ new Map(), this.mutations = [], this.committed = false, /**
         * A deferred usage error that occurred previously in this transaction that
         * will cause the transaction to fail once it actually commits.
         */
        this.lastTransactionError = null, /**
         * Set of documents that have been written in the transaction.
         *
         * When there's more than one write to the same key in a transaction, any
         * writes after the first are handled differently.
         */
        this.writtenDocs = /* @__PURE__ */ new Set();
      }
      async lookup(e) {
        if (this.ensureCommitNotCalled(), this.mutations.length > 0)
          throw this.lastTransactionError = new FirestoreError(C.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes."), this.lastTransactionError;
        const t2 = await (/* @__PURE__ */ __name(async function __PRIVATE_invokeBatchGetDocumentsRpc(e2, t3) {
          const n2 = __PRIVATE_debugCast(e2), r2 = {
            documents: t3.map((e3) => __PRIVATE_toName(n2.serializer, e3))
          }, i = await n2.Co("BatchGetDocuments", n2.serializer.databaseId, ResourcePath.emptyPath(), r2, t3.length), s2 = /* @__PURE__ */ new Map();
          i.forEach((e3) => {
            const t4 = __PRIVATE_fromBatchGetDocumentsResponse(n2.serializer, e3);
            s2.set(t4.key.toString(), t4);
          });
          const o2 = [];
          return t3.forEach((e3) => {
            const t4 = s2.get(e3.toString());
            __PRIVATE_hardAssert(!!t4), o2.push(t4);
          }), o2;
        }, "__PRIVATE_invokeBatchGetDocumentsRpc"))(this.datastore, e);
        return t2.forEach((e2) => this.recordVersion(e2)), t2;
      }
      set(e, t2) {
        this.write(t2.toMutation(e, this.precondition(e))), this.writtenDocs.add(e.toString());
      }
      update(e, t2) {
        try {
          this.write(t2.toMutation(e, this.preconditionForUpdate(e)));
        } catch (e2) {
          this.lastTransactionError = e2;
        }
        this.writtenDocs.add(e.toString());
      }
      delete(e) {
        this.write(new __PRIVATE_DeleteMutation(e, this.precondition(e))), this.writtenDocs.add(e.toString());
      }
      async commit() {
        if (this.ensureCommitNotCalled(), this.lastTransactionError)
          throw this.lastTransactionError;
        const e = this.readVersions;
        this.mutations.forEach((t2) => {
          e.delete(t2.key.toString());
        }), // For each document that was read but not written to, we want to perform
        // a `verify` operation.
        e.forEach((e2, t2) => {
          const n2 = DocumentKey.fromPath(t2);
          this.mutations.push(new __PRIVATE_VerifyMutation(n2, this.precondition(n2)));
        }), await (/* @__PURE__ */ __name(async function __PRIVATE_invokeCommitRpc(e2, t2) {
          const n2 = __PRIVATE_debugCast(e2), r2 = {
            writes: t2.map((e3) => toMutation(n2.serializer, e3))
          };
          await n2.So("Commit", n2.serializer.databaseId, ResourcePath.emptyPath(), r2);
        }, "__PRIVATE_invokeCommitRpc"))(this.datastore, this.mutations), this.committed = true;
      }
      recordVersion(e) {
        let t2;
        if (e.isFoundDocument())
          t2 = e.version;
        else {
          if (!e.isNoDocument())
            throw fail();
          t2 = SnapshotVersion.min();
        }
        const n2 = this.readVersions.get(e.key.toString());
        if (n2) {
          if (!t2.isEqual(n2))
            throw new FirestoreError(C.ABORTED, "Document version changed between two reads.");
        } else
          this.readVersions.set(e.key.toString(), t2);
      }
      /**
       * Returns the version of this document when it was read in this transaction,
       * as a precondition, or no precondition if it was not read.
       */
      precondition(e) {
        const t2 = this.readVersions.get(e.toString());
        return !this.writtenDocs.has(e.toString()) && t2 ? t2.isEqual(SnapshotVersion.min()) ? Precondition.exists(false) : Precondition.updateTime(t2) : Precondition.none();
      }
      /**
       * Returns the precondition for a document if the operation is an update.
       */
      preconditionForUpdate(e) {
        const t2 = this.readVersions.get(e.toString());
        if (!this.writtenDocs.has(e.toString()) && t2) {
          if (t2.isEqual(SnapshotVersion.min()))
            throw new FirestoreError(C.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
          return Precondition.updateTime(t2);
        }
        return Precondition.exists(true);
      }
      write(e) {
        this.ensureCommitNotCalled(), this.mutations.push(e);
      }
      ensureCommitNotCalled() {
      }
    };
    __name(Transaction$2, "Transaction$2");
    var __PRIVATE_TransactionRunner = class {
      constructor(e, t2, n2, r2, i) {
        this.asyncQueue = e, this.datastore = t2, this.options = n2, this.updateFunction = r2, this.deferred = i, this.Tu = n2.maxAttempts, this.a_ = new __PRIVATE_ExponentialBackoff(
          this.asyncQueue,
          "transaction_retry"
          /* TimerId.TransactionRetry */
        );
      }
      /** Runs the transaction and sets the result on deferred. */
      Iu() {
        this.Tu -= 1, this.Eu();
      }
      Eu() {
        this.a_.Xo(async () => {
          const e = new Transaction$2(this.datastore), t2 = this.du(e);
          t2 && t2.then((t3) => {
            this.asyncQueue.enqueueAndForget(() => e.commit().then(() => {
              this.deferred.resolve(t3);
            }).catch((e2) => {
              this.Au(e2);
            }));
          }).catch((e2) => {
            this.Au(e2);
          });
        });
      }
      du(e) {
        try {
          const t2 = this.updateFunction(e);
          return !__PRIVATE_isNullOrUndefined(t2) && t2.catch && t2.then ? t2 : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
        } catch (e2) {
          return this.deferred.reject(e2), null;
        }
      }
      Au(e) {
        this.Tu > 0 && this.Ru(e) ? (this.Tu -= 1, this.asyncQueue.enqueueAndForget(() => (this.Eu(), Promise.resolve()))) : this.deferred.reject(e);
      }
      Ru(e) {
        if ("FirebaseError" === e.name) {
          const t2 = e.code;
          return "aborted" === t2 || "failed-precondition" === t2 || "already-exists" === t2 || !__PRIVATE_isPermanentError(t2);
        }
        return false;
      }
    };
    __name(__PRIVATE_TransactionRunner, "__PRIVATE_TransactionRunner");
    var Yt = "FirestoreClient";
    var FirestoreClient = class {
      constructor(e, t2, n2, r2, i) {
        this.authCredentials = e, this.appCheckCredentials = t2, this.asyncQueue = n2, this.databaseInfo = r2, this.user = User.UNAUTHENTICATED, this.clientId = __PRIVATE_AutoId.newId(), this.authCredentialListener = () => Promise.resolve(), this.appCheckCredentialListener = () => Promise.resolve(), this._uninitializedComponentsProvider = i, this.authCredentials.start(n2, async (e2) => {
          __PRIVATE_logDebug(Yt, "Received user=", e2.uid), await this.authCredentialListener(e2), this.user = e2;
        }), this.appCheckCredentials.start(n2, (e2) => (__PRIVATE_logDebug(Yt, "Received new app check token=", e2), this.appCheckCredentialListener(e2, this.user)));
      }
      get configuration() {
        return {
          asyncQueue: this.asyncQueue,
          databaseInfo: this.databaseInfo,
          clientId: this.clientId,
          authCredentials: this.authCredentials,
          appCheckCredentials: this.appCheckCredentials,
          initialUser: this.user,
          maxConcurrentLimboResolutions: 100
        };
      }
      setCredentialChangeListener(e) {
        this.authCredentialListener = e;
      }
      setAppCheckTokenChangeListener(e) {
        this.appCheckCredentialListener = e;
      }
      terminate() {
        this.asyncQueue.enterRestrictedMode();
        const e = new __PRIVATE_Deferred();
        return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {
          try {
            this._onlineComponents && await this._onlineComponents.terminate(), this._offlineComponents && await this._offlineComponents.terminate(), // The credentials provider must be terminated after shutting down the
            // RemoteStore as it will prevent the RemoteStore from retrieving auth
            // tokens.
            this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), e.resolve();
          } catch (t2) {
            const n2 = __PRIVATE_wrapInUserErrorIfRecoverable(t2, "Failed to shutdown persistence");
            e.reject(n2);
          }
        }), e.promise;
      }
    };
    __name(FirestoreClient, "FirestoreClient");
    async function __PRIVATE_setOfflineComponentProvider(e, t2) {
      e.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(Yt, "Initializing OfflineComponentProvider");
      const n2 = e.configuration;
      await t2.initialize(n2);
      let r2 = n2.initialUser;
      e.setCredentialChangeListener(async (e2) => {
        r2.isEqual(e2) || (await __PRIVATE_localStoreHandleUserChange(t2.localStore, e2), r2 = e2);
      }), // When a user calls clearPersistence() in one client, all other clients
      // need to be terminated to allow the delete to succeed.
      t2.persistence.setDatabaseDeletedListener(() => e.terminate()), e._offlineComponents = t2;
    }
    __name(__PRIVATE_setOfflineComponentProvider, "__PRIVATE_setOfflineComponentProvider");
    async function __PRIVATE_setOnlineComponentProvider(e, t2) {
      e.asyncQueue.verifyOperationInProgress();
      const n2 = await __PRIVATE_ensureOfflineComponents(e);
      __PRIVATE_logDebug(Yt, "Initializing OnlineComponentProvider"), await t2.initialize(n2, e.configuration), // The CredentialChangeListener of the online component provider takes
      // precedence over the offline component provider.
      e.setCredentialChangeListener((e2) => __PRIVATE_remoteStoreHandleCredentialChange(t2.remoteStore, e2)), e.setAppCheckTokenChangeListener((e2, n3) => __PRIVATE_remoteStoreHandleCredentialChange(t2.remoteStore, n3)), e._onlineComponents = t2;
    }
    __name(__PRIVATE_setOnlineComponentProvider, "__PRIVATE_setOnlineComponentProvider");
    async function __PRIVATE_ensureOfflineComponents(e) {
      if (!e._offlineComponents)
        if (e._uninitializedComponentsProvider) {
          __PRIVATE_logDebug(Yt, "Using user provided OfflineComponentProvider");
          try {
            await __PRIVATE_setOfflineComponentProvider(e, e._uninitializedComponentsProvider._offline);
          } catch (t2) {
            const n2 = t2;
            if (!(/* @__PURE__ */ __name(function __PRIVATE_canFallbackFromIndexedDbError(e2) {
              return "FirebaseError" === e2.name ? e2.code === C.FAILED_PRECONDITION || e2.code === C.UNIMPLEMENTED : !("undefined" != typeof DOMException && e2 instanceof DOMException) || // When the browser is out of quota we could get either quota exceeded
              // or an aborted error depending on whether the error happened during
              // schema migration.
              22 === e2.code || 20 === e2.code || // Firefox Private Browsing mode disables IndexedDb and returns
              // INVALID_STATE for any usage.
              11 === e2.code;
            }, "__PRIVATE_canFallbackFromIndexedDbError"))(n2))
              throw n2;
            __PRIVATE_logWarn("Error using user provided cache. Falling back to memory cache: " + n2), await __PRIVATE_setOfflineComponentProvider(e, new __PRIVATE_MemoryOfflineComponentProvider());
          }
        } else
          __PRIVATE_logDebug(Yt, "Using default OfflineComponentProvider"), await __PRIVATE_setOfflineComponentProvider(e, new __PRIVATE_LruGcMemoryOfflineComponentProvider(void 0));
      return e._offlineComponents;
    }
    __name(__PRIVATE_ensureOfflineComponents, "__PRIVATE_ensureOfflineComponents");
    async function __PRIVATE_ensureOnlineComponents(e) {
      return e._onlineComponents || (e._uninitializedComponentsProvider ? (__PRIVATE_logDebug(Yt, "Using user provided OnlineComponentProvider"), await __PRIVATE_setOnlineComponentProvider(e, e._uninitializedComponentsProvider._online)) : (__PRIVATE_logDebug(Yt, "Using default OnlineComponentProvider"), await __PRIVATE_setOnlineComponentProvider(e, new OnlineComponentProvider()))), e._onlineComponents;
    }
    __name(__PRIVATE_ensureOnlineComponents, "__PRIVATE_ensureOnlineComponents");
    function __PRIVATE_getPersistence(e) {
      return __PRIVATE_ensureOfflineComponents(e).then((e2) => e2.persistence);
    }
    __name(__PRIVATE_getPersistence, "__PRIVATE_getPersistence");
    function __PRIVATE_getLocalStore(e) {
      return __PRIVATE_ensureOfflineComponents(e).then((e2) => e2.localStore);
    }
    __name(__PRIVATE_getLocalStore, "__PRIVATE_getLocalStore");
    function __PRIVATE_getRemoteStore(e) {
      return __PRIVATE_ensureOnlineComponents(e).then((e2) => e2.remoteStore);
    }
    __name(__PRIVATE_getRemoteStore, "__PRIVATE_getRemoteStore");
    function __PRIVATE_getSyncEngine(e) {
      return __PRIVATE_ensureOnlineComponents(e).then((e2) => e2.syncEngine);
    }
    __name(__PRIVATE_getSyncEngine, "__PRIVATE_getSyncEngine");
    function __PRIVATE_getDatastore(e) {
      return __PRIVATE_ensureOnlineComponents(e).then((e2) => e2.datastore);
    }
    __name(__PRIVATE_getDatastore, "__PRIVATE_getDatastore");
    async function __PRIVATE_getEventManager(e) {
      const t2 = await __PRIVATE_ensureOnlineComponents(e), n2 = t2.eventManager;
      return n2.onListen = __PRIVATE_syncEngineListen.bind(null, t2.syncEngine), n2.onUnlisten = __PRIVATE_syncEngineUnlisten.bind(null, t2.syncEngine), n2.onFirstRemoteStoreListen = __PRIVATE_triggerRemoteStoreListen.bind(null, t2.syncEngine), n2.onLastRemoteStoreUnlisten = __PRIVATE_triggerRemoteStoreUnlisten.bind(null, t2.syncEngine), n2;
    }
    __name(__PRIVATE_getEventManager, "__PRIVATE_getEventManager");
    function __PRIVATE_firestoreClientEnableNetwork(e) {
      return e.asyncQueue.enqueue(async () => {
        const t2 = await __PRIVATE_getPersistence(e), n2 = await __PRIVATE_getRemoteStore(e);
        return t2.setNetworkEnabled(true), (/* @__PURE__ */ __name(function __PRIVATE_remoteStoreEnableNetwork(e2) {
          const t3 = __PRIVATE_debugCast(e2);
          return t3.W_.delete(
            0
            /* OfflineCause.UserDisabled */
          ), __PRIVATE_enableNetworkInternal(t3);
        }, "__PRIVATE_remoteStoreEnableNetwork"))(n2);
      });
    }
    __name(__PRIVATE_firestoreClientEnableNetwork, "__PRIVATE_firestoreClientEnableNetwork");
    function __PRIVATE_firestoreClientDisableNetwork(e) {
      return e.asyncQueue.enqueue(async () => {
        const t2 = await __PRIVATE_getPersistence(e), n2 = await __PRIVATE_getRemoteStore(e);
        return t2.setNetworkEnabled(false), (/* @__PURE__ */ __name(async function __PRIVATE_remoteStoreDisableNetwork(e2) {
          const t3 = __PRIVATE_debugCast(e2);
          t3.W_.add(
            0
            /* OfflineCause.UserDisabled */
          ), await __PRIVATE_disableNetworkInternal(t3), // Set the OnlineState to Offline so get()s return from cache, etc.
          t3.j_.set(
            "Offline"
            /* OnlineState.Offline */
          );
        }, "__PRIVATE_remoteStoreDisableNetwork"))(n2);
      });
    }
    __name(__PRIVATE_firestoreClientDisableNetwork, "__PRIVATE_firestoreClientDisableNetwork");
    function __PRIVATE_firestoreClientGetDocumentFromLocalCache(e, t2) {
      const n2 = new __PRIVATE_Deferred();
      return e.asyncQueue.enqueueAndForget(async () => (/* @__PURE__ */ __name(async function __PRIVATE_readDocumentFromCache(e2, t3, n3) {
        try {
          const r2 = await (/* @__PURE__ */ __name(function __PRIVATE_localStoreReadDocument(e3, t4) {
            const n4 = __PRIVATE_debugCast(e3);
            return n4.persistence.runTransaction("read document", "readonly", (e4) => n4.localDocuments.getDocument(e4, t4));
          }, "__PRIVATE_localStoreReadDocument"))(e2, t3);
          r2.isFoundDocument() ? n3.resolve(r2) : r2.isNoDocument() ? n3.resolve(null) : n3.reject(new FirestoreError(C.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
        } catch (e3) {
          const r2 = __PRIVATE_wrapInUserErrorIfRecoverable(e3, `Failed to get document '${t3} from cache`);
          n3.reject(r2);
        }
      }, "__PRIVATE_readDocumentFromCache"))(await __PRIVATE_getLocalStore(e), t2, n2)), n2.promise;
    }
    __name(__PRIVATE_firestoreClientGetDocumentFromLocalCache, "__PRIVATE_firestoreClientGetDocumentFromLocalCache");
    function __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(e, t2, n2 = {}) {
      const r2 = new __PRIVATE_Deferred();
      return e.asyncQueue.enqueueAndForget(async () => (/* @__PURE__ */ __name(function __PRIVATE_readDocumentViaSnapshotListener(e2, t3, n3, r3, i) {
        const s2 = new __PRIVATE_AsyncObserver({
          next: (_) => {
            s2.su(), t3.enqueueAndForget(() => __PRIVATE_eventManagerUnlisten(e2, o2));
            const a2 = _.docs.has(n3);
            !a2 && _.fromCache ? (
              // TODO(dimond): If we're online and the document doesn't
              // exist then we resolve with a doc.exists set to false. If
              // we're offline however, we reject the Promise in this
              // case. Two options: 1) Cache the negative response from
              // the server so we can deliver that even when you're
              // offline 2) Actually reject the Promise in the online case
              // if the document doesn't exist.
              i.reject(new FirestoreError(C.UNAVAILABLE, "Failed to get document because the client is offline."))
            ) : a2 && _.fromCache && r3 && "server" === r3.source ? i.reject(new FirestoreError(C.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(_);
          },
          error: (e3) => i.reject(e3)
        }), o2 = new __PRIVATE_QueryListener(__PRIVATE_newQueryForPath(n3.path), s2, {
          includeMetadataChanges: true,
          Ta: true
        });
        return __PRIVATE_eventManagerListen(e2, o2);
      }, "__PRIVATE_readDocumentViaSnapshotListener"))(await __PRIVATE_getEventManager(e), e.asyncQueue, t2, n2, r2)), r2.promise;
    }
    __name(__PRIVATE_firestoreClientGetDocumentViaSnapshotListener, "__PRIVATE_firestoreClientGetDocumentViaSnapshotListener");
    function __PRIVATE_firestoreClientGetDocumentsFromLocalCache(e, t2) {
      const n2 = new __PRIVATE_Deferred();
      return e.asyncQueue.enqueueAndForget(async () => (/* @__PURE__ */ __name(async function __PRIVATE_executeQueryFromCache(e2, t3, n3) {
        try {
          const r2 = await __PRIVATE_localStoreExecuteQuery(
            e2,
            t3,
            /* usePreviousResults= */
            true
          ), i = new __PRIVATE_View(t3, r2.gs), s2 = i.ba(r2.documents), o2 = i.applyChanges(
            s2,
            /* limboResolutionEnabled= */
            false
          );
          n3.resolve(o2.snapshot);
        } catch (e3) {
          const r2 = __PRIVATE_wrapInUserErrorIfRecoverable(e3, `Failed to execute query '${t3} against cache`);
          n3.reject(r2);
        }
      }, "__PRIVATE_executeQueryFromCache"))(await __PRIVATE_getLocalStore(e), t2, n2)), n2.promise;
    }
    __name(__PRIVATE_firestoreClientGetDocumentsFromLocalCache, "__PRIVATE_firestoreClientGetDocumentsFromLocalCache");
    function __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(e, t2, n2 = {}) {
      const r2 = new __PRIVATE_Deferred();
      return e.asyncQueue.enqueueAndForget(async () => (/* @__PURE__ */ __name(function __PRIVATE_executeQueryViaSnapshotListener(e2, t3, n3, r3, i) {
        const s2 = new __PRIVATE_AsyncObserver({
          next: (n4) => {
            s2.su(), t3.enqueueAndForget(() => __PRIVATE_eventManagerUnlisten(e2, o2)), n4.fromCache && "server" === r3.source ? i.reject(new FirestoreError(C.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n4);
          },
          error: (e3) => i.reject(e3)
        }), o2 = new __PRIVATE_QueryListener(n3, s2, {
          includeMetadataChanges: true,
          Ta: true
        });
        return __PRIVATE_eventManagerListen(e2, o2);
      }, "__PRIVATE_executeQueryViaSnapshotListener"))(await __PRIVATE_getEventManager(e), e.asyncQueue, t2, n2, r2)), r2.promise;
    }
    __name(__PRIVATE_firestoreClientGetDocumentsViaSnapshotListener, "__PRIVATE_firestoreClientGetDocumentsViaSnapshotListener");
    function __PRIVATE_firestoreClientRunAggregateQuery(e, t2, n2) {
      const r2 = new __PRIVATE_Deferred();
      return e.asyncQueue.enqueueAndForget(async () => {
        try {
          const i = await __PRIVATE_getDatastore(e);
          r2.resolve((/* @__PURE__ */ __name(async function __PRIVATE_invokeRunAggregationQueryRpc(e2, t3, n3) {
            var r3;
            const i2 = __PRIVATE_debugCast(e2), { request: s2, Pt: o2, parent: _ } = __PRIVATE_toRunAggregationQueryRequest(i2.serializer, __PRIVATE_queryToAggregateTarget(t3), n3);
            i2.connection.fo || delete s2.parent;
            const a2 = (await i2.Co(
              "RunAggregationQuery",
              i2.serializer.databaseId,
              _,
              s2,
              /*expectedResponseCount=*/
              1
            )).filter((e3) => !!e3.result);
            __PRIVATE_hardAssert(1 === a2.length);
            const u2 = null === (r3 = a2[0].result) || void 0 === r3 ? void 0 : r3.aggregateFields;
            return Object.keys(u2).reduce((e3, t4) => (e3[o2[t4]] = u2[t4], e3), {});
          }, "__PRIVATE_invokeRunAggregationQueryRpc"))(i, t2, n2));
        } catch (e2) {
          r2.reject(e2);
        }
      }), r2.promise;
    }
    __name(__PRIVATE_firestoreClientRunAggregateQuery, "__PRIVATE_firestoreClientRunAggregateQuery");
    function __PRIVATE_firestoreClientAddSnapshotsInSyncListener(e, t2) {
      const n2 = new __PRIVATE_AsyncObserver(t2);
      return e.asyncQueue.enqueueAndForget(async () => (/* @__PURE__ */ __name(function __PRIVATE_addSnapshotsInSyncListener(e2, t3) {
        __PRIVATE_debugCast(e2).ia.add(t3), // Immediately fire an initial event, indicating all existing listeners
        // are in-sync.
        t3.next();
      }, "__PRIVATE_addSnapshotsInSyncListener"))(await __PRIVATE_getEventManager(e), n2)), () => {
        n2.su(), e.asyncQueue.enqueueAndForget(async () => (/* @__PURE__ */ __name(function __PRIVATE_removeSnapshotsInSyncListener(e2, t3) {
          __PRIVATE_debugCast(e2).ia.delete(t3);
        }, "__PRIVATE_removeSnapshotsInSyncListener"))(await __PRIVATE_getEventManager(e), n2));
      };
    }
    __name(__PRIVATE_firestoreClientAddSnapshotsInSyncListener, "__PRIVATE_firestoreClientAddSnapshotsInSyncListener");
    function __PRIVATE_firestoreClientLoadBundle(e, t2, n2, r2) {
      const i = (/* @__PURE__ */ __name(function __PRIVATE_createBundleReader(e2, t3) {
        let n3;
        n3 = "string" == typeof e2 ? __PRIVATE_newTextEncoder().encode(e2) : e2;
        return (/* @__PURE__ */ __name(function __PRIVATE_newBundleReader(e3, t4) {
          return new __PRIVATE_BundleReaderImpl(e3, t4);
        }, "__PRIVATE_newBundleReader"))((/* @__PURE__ */ __name(function __PRIVATE_toByteStreamReader(e3, t4) {
          if (e3 instanceof Uint8Array)
            return __PRIVATE_toByteStreamReaderHelper(e3, t4);
          if (e3 instanceof ArrayBuffer)
            return __PRIVATE_toByteStreamReaderHelper(new Uint8Array(e3), t4);
          if (e3 instanceof ReadableStream)
            return e3.getReader();
          throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
        }, "__PRIVATE_toByteStreamReader"))(n3), t3);
      }, "__PRIVATE_createBundleReader"))(n2, __PRIVATE_newSerializer(t2));
      e.asyncQueue.enqueueAndForget(async () => {
        __PRIVATE_syncEngineLoadBundle(await __PRIVATE_getSyncEngine(e), i, r2);
      });
    }
    __name(__PRIVATE_firestoreClientLoadBundle, "__PRIVATE_firestoreClientLoadBundle");
    function __PRIVATE_firestoreClientGetNamedQuery(e, t2) {
      return e.asyncQueue.enqueue(async () => (/* @__PURE__ */ __name(function __PRIVATE_localStoreGetNamedQuery(e2, t3) {
        const n2 = __PRIVATE_debugCast(e2);
        return n2.persistence.runTransaction("Get named query", "readonly", (e3) => n2.Yr.getNamedQuery(e3, t3));
      }, "__PRIVATE_localStoreGetNamedQuery"))(await __PRIVATE_getLocalStore(e), t2));
    }
    __name(__PRIVATE_firestoreClientGetNamedQuery, "__PRIVATE_firestoreClientGetNamedQuery");
    function __PRIVATE_firestoreClientSetIndexConfiguration(e, t2) {
      return e.asyncQueue.enqueue(async () => (/* @__PURE__ */ __name(async function __PRIVATE_localStoreConfigureFieldIndexes(e2, t3) {
        const n2 = __PRIVATE_debugCast(e2), r2 = n2.indexManager, i = [];
        return n2.persistence.runTransaction("Configure indexes", "readwrite", (e3) => r2.getFieldIndexes(e3).next((n3) => (
          /**
          * @license
          * Copyright 2017 Google LLC
          *
          * Licensed under the Apache License, Version 2.0 (the "License");
          * you may not use this file except in compliance with the License.
          * You may obtain a copy of the License at
          *
          *   http://www.apache.org/licenses/LICENSE-2.0
          *
          * Unless required by applicable law or agreed to in writing, software
          * distributed under the License is distributed on an "AS IS" BASIS,
          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          * See the License for the specific language governing permissions and
          * limitations under the License.
          */
          /**
          * Compares two array for equality using comparator. The method computes the
          * intersection and invokes `onAdd` for every element that is in `after` but not
          * `before`. `onRemove` is invoked for every element in `before` but missing
          * from `after`.
          *
          * The method creates a copy of both `before` and `after` and runs in O(n log
          * n), where n is the size of the two lists.
          *
          * @param before - The elements that exist in the original array.
          * @param after - The elements to diff against the original array.
          * @param comparator - The comparator for the elements in before and after.
          * @param onAdd - A function to invoke for every element that is part of `
          * after` but not `before`.
          * @param onRemove - A function to invoke for every element that is part of
          * `before` but not `after`.
          */
          (/* @__PURE__ */ __name(function __PRIVATE_diffArrays(e4, t4, n4, r3, i2) {
            e4 = [...e4], t4 = [...t4], e4.sort(n4), t4.sort(n4);
            const s2 = e4.length, o2 = t4.length;
            let _ = 0, a2 = 0;
            for (; _ < o2 && a2 < s2; ) {
              const s3 = n4(e4[a2], t4[_]);
              s3 < 0 ? (
                // The element was removed if the next element in our ordered
                // walkthrough is only in `before`.
                i2(e4[a2++])
              ) : s3 > 0 ? (
                // The element was added if the next element in our ordered walkthrough
                // is only in `after`.
                r3(t4[_++])
              ) : (_++, a2++);
            }
            for (; _ < o2; )
              r3(t4[_++]);
            for (; a2 < s2; )
              i2(e4[a2++]);
          }, "__PRIVATE_diffArrays"))(n3, t3, __PRIVATE_fieldIndexSemanticComparator, (t4) => {
            i.push(r2.addFieldIndex(e3, t4));
          }, (t4) => {
            i.push(r2.deleteFieldIndex(e3, t4));
          })
        )).next(() => PersistencePromise.waitFor(i)));
      }, "__PRIVATE_localStoreConfigureFieldIndexes"))(await __PRIVATE_getLocalStore(e), t2));
    }
    __name(__PRIVATE_firestoreClientSetIndexConfiguration, "__PRIVATE_firestoreClientSetIndexConfiguration");
    function __PRIVATE_firestoreClientSetPersistentCacheIndexAutoCreationEnabled(e, t2) {
      return e.asyncQueue.enqueue(async () => (/* @__PURE__ */ __name(function __PRIVATE_localStoreSetIndexAutoCreationEnabled(e2, t3) {
        __PRIVATE_debugCast(e2).Ps.Xi = t3;
      }, "__PRIVATE_localStoreSetIndexAutoCreationEnabled"))(await __PRIVATE_getLocalStore(e), t2));
    }
    __name(__PRIVATE_firestoreClientSetPersistentCacheIndexAutoCreationEnabled, "__PRIVATE_firestoreClientSetPersistentCacheIndexAutoCreationEnabled");
    function __PRIVATE_firestoreClientDeleteAllFieldIndexes(e) {
      return e.asyncQueue.enqueue(async () => (/* @__PURE__ */ __name(function __PRIVATE_localStoreDeleteAllFieldIndexes(e2) {
        const t2 = __PRIVATE_debugCast(e2), n2 = t2.indexManager;
        return t2.persistence.runTransaction("Delete All Indexes", "readwrite", (e3) => n2.deleteAllFieldIndexes(e3));
      }, "__PRIVATE_localStoreDeleteAllFieldIndexes"))(await __PRIVATE_getLocalStore(e)));
    }
    __name(__PRIVATE_firestoreClientDeleteAllFieldIndexes, "__PRIVATE_firestoreClientDeleteAllFieldIndexes");
    function __PRIVATE_cloneLongPollingOptions(e) {
      const t2 = {};
      return void 0 !== e.timeoutSeconds && (t2.timeoutSeconds = e.timeoutSeconds), t2;
    }
    __name(__PRIVATE_cloneLongPollingOptions, "__PRIVATE_cloneLongPollingOptions");
    var Zt = /* @__PURE__ */ new Map();
    function __PRIVATE_validateNonEmptyArgument(e, t2, n2) {
      if (!n2)
        throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${e}() cannot be called with an empty ${t2}.`);
    }
    __name(__PRIVATE_validateNonEmptyArgument, "__PRIVATE_validateNonEmptyArgument");
    function __PRIVATE_validateIsNotUsedTogether(e, t2, n2, r2) {
      if (true === t2 && true === r2)
        throw new FirestoreError(C.INVALID_ARGUMENT, `${e} and ${n2} cannot be used together.`);
    }
    __name(__PRIVATE_validateIsNotUsedTogether, "__PRIVATE_validateIsNotUsedTogether");
    function __PRIVATE_validateDocumentPath(e) {
      if (!DocumentKey.isDocumentKey(e))
        throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`);
    }
    __name(__PRIVATE_validateDocumentPath, "__PRIVATE_validateDocumentPath");
    function __PRIVATE_validateCollectionPath(e) {
      if (DocumentKey.isDocumentKey(e))
        throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${e} has ${e.length}.`);
    }
    __name(__PRIVATE_validateCollectionPath, "__PRIVATE_validateCollectionPath");
    function __PRIVATE_valueDescription(e) {
      if (void 0 === e)
        return "undefined";
      if (null === e)
        return "null";
      if ("string" == typeof e)
        return e.length > 20 && (e = `${e.substring(0, 20)}...`), JSON.stringify(e);
      if ("number" == typeof e || "boolean" == typeof e)
        return "" + e;
      if ("object" == typeof e) {
        if (e instanceof Array)
          return "an array";
        {
          const t2 = (
            /** try to get the constructor name for an object. */
            (/* @__PURE__ */ __name(function __PRIVATE_tryGetCustomObjectType(e2) {
              if (e2.constructor)
                return e2.constructor.name;
              return null;
            }, "__PRIVATE_tryGetCustomObjectType"))(e)
          );
          return t2 ? `a custom ${t2} object` : "an object";
        }
      }
      return "function" == typeof e ? "a function" : fail();
    }
    __name(__PRIVATE_valueDescription, "__PRIVATE_valueDescription");
    function __PRIVATE_cast(e, t2) {
      if ("_delegate" in e && // Unwrap Compat types
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (e = e._delegate), !(e instanceof t2)) {
        if (t2.name === e.constructor.name)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
        {
          const n2 = __PRIVATE_valueDescription(e);
          throw new FirestoreError(C.INVALID_ARGUMENT, `Expected type '${t2.name}', but it was: ${n2}`);
        }
      }
      return e;
    }
    __name(__PRIVATE_cast, "__PRIVATE_cast");
    function __PRIVATE_validatePositiveNumber(e, t2) {
      if (t2 <= 0)
        throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${e}() requires a positive number, but it was: ${t2}.`);
    }
    __name(__PRIVATE_validatePositiveNumber, "__PRIVATE_validatePositiveNumber");
    var Xt = "firestore.googleapis.com";
    var en = true;
    var FirestoreSettingsImpl = class {
      constructor(e) {
        var t2, n2;
        if (void 0 === e.host) {
          if (void 0 !== e.ssl)
            throw new FirestoreError(C.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
          this.host = Xt, this.ssl = en;
        } else
          this.host = e.host, this.ssl = null !== (t2 = e.ssl) && void 0 !== t2 ? t2 : en;
        if (this.credentials = e.credentials, this.ignoreUndefinedProperties = !!e.ignoreUndefinedProperties, this.localCache = e.localCache, void 0 === e.cacheSizeBytes)
          this.cacheSizeBytes = St;
        else {
          if (-1 !== e.cacheSizeBytes && e.cacheSizeBytes < Dt)
            throw new FirestoreError(C.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
          this.cacheSizeBytes = e.cacheSizeBytes;
        }
        __PRIVATE_validateIsNotUsedTogether("experimentalForceLongPolling", e.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", e.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!e.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = false : void 0 === e.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : (
          // For backwards compatibility, coerce the value to boolean even though
          // the TypeScript compiler has narrowed the type to boolean already.
          // noinspection PointlessBooleanExpressionJS
          this.experimentalAutoDetectLongPolling = !!e.experimentalAutoDetectLongPolling
        ), this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (n2 = e.experimentalLongPollingOptions) && void 0 !== n2 ? n2 : {}), (/* @__PURE__ */ __name(function __PRIVATE_validateLongPollingOptions(e2) {
          if (void 0 !== e2.timeoutSeconds) {
            if (isNaN(e2.timeoutSeconds))
              throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e2.timeoutSeconds} (must not be NaN)`);
            if (e2.timeoutSeconds < 5)
              throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e2.timeoutSeconds} (minimum allowed value is 5)`);
            if (e2.timeoutSeconds > 30)
              throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e2.timeoutSeconds} (maximum allowed value is 30)`);
          }
        }, "__PRIVATE_validateLongPollingOptions"))(this.experimentalLongPollingOptions), this.useFetchStreams = !!e.useFetchStreams;
      }
      isEqual(e) {
        return this.host === e.host && this.ssl === e.ssl && this.credentials === e.credentials && this.cacheSizeBytes === e.cacheSizeBytes && this.experimentalForceLongPolling === e.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === e.experimentalAutoDetectLongPolling && (/* @__PURE__ */ __name(function __PRIVATE_longPollingOptionsEqual(e2, t2) {
          return e2.timeoutSeconds === t2.timeoutSeconds;
        }, "__PRIVATE_longPollingOptionsEqual"))(this.experimentalLongPollingOptions, e.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === e.ignoreUndefinedProperties && this.useFetchStreams === e.useFetchStreams;
      }
    };
    __name(FirestoreSettingsImpl, "FirestoreSettingsImpl");
    var Firestore$1 = class {
      /** @hideconstructor */
      constructor(e, t2, n2, r2) {
        this._authCredentials = e, this._appCheckCredentials = t2, this._databaseId = n2, this._app = r2, /**
         * Whether it's a Firestore or Firestore Lite instance.
         */
        this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new FirestoreSettingsImpl({}), this._settingsFrozen = false, // A task that is assigned when the terminate() is invoked and resolved when
        // all components have shut down. Otherwise, Firestore is not terminated,
        // which can mean either the FirestoreClient is in the process of starting,
        // or restarting.
        this._terminateTask = "notTerminated";
      }
      /**
       * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
       * instance.
       */
      get app() {
        if (!this._app)
          throw new FirestoreError(C.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this._app;
      }
      get _initialized() {
        return this._settingsFrozen;
      }
      get _terminated() {
        return "notTerminated" !== this._terminateTask;
      }
      _setSettings(e) {
        if (this._settingsFrozen)
          throw new FirestoreError(C.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
        this._settings = new FirestoreSettingsImpl(e), void 0 !== e.credentials && (this._authCredentials = (/* @__PURE__ */ __name(function __PRIVATE_makeAuthCredentialsProvider(e2) {
          if (!e2)
            return new __PRIVATE_EmptyAuthCredentialsProvider();
          switch (e2.type) {
            case "firstParty":
              return new __PRIVATE_FirstPartyAuthCredentialsProvider(e2.sessionIndex || "0", e2.iamToken || null, e2.authTokenFactory || null);
            case "provider":
              return e2.client;
            default:
              throw new FirestoreError(C.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
          }
        }, "__PRIVATE_makeAuthCredentialsProvider"))(e.credentials));
      }
      _getSettings() {
        return this._settings;
      }
      _freezeSettings() {
        return this._settingsFrozen = true, this._settings;
      }
      _delete() {
        return "notTerminated" === this._terminateTask && (this._terminateTask = this._terminate()), this._terminateTask;
      }
      async _restart() {
        "notTerminated" === this._terminateTask ? await this._terminate() : this._terminateTask = "notTerminated";
      }
      /** Returns a JSON-serializable representation of this `Firestore` instance. */
      toJSON() {
        return {
          app: this._app,
          databaseId: this._databaseId,
          settings: this._settings
        };
      }
      /**
       * Terminates all components used by this client. Subclasses can override
       * this method to clean up their own dependencies, but must also call this
       * method.
       *
       * Only ever called once.
       */
      _terminate() {
        return (/* @__PURE__ */ __name(function __PRIVATE_removeComponents(e) {
          const t2 = Zt.get(e);
          t2 && (__PRIVATE_logDebug("ComponentProvider", "Removing Datastore"), Zt.delete(e), t2.terminate());
        }, "__PRIVATE_removeComponents"))(this), Promise.resolve();
      }
    };
    __name(Firestore$1, "Firestore$1");
    function connectFirestoreEmulator(e, t2, n2, r2 = {}) {
      var i;
      const s2 = (e = __PRIVATE_cast(e, Firestore$1))._getSettings(), o2 = `${t2}:${n2}`;
      if (s2.host !== Xt && s2.host !== o2 && __PRIVATE_logWarn("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."), e._setSettings(Object.assign(Object.assign({}, s2), {
        host: o2,
        ssl: false
      })), r2.mockUserToken) {
        let t3, n3;
        if ("string" == typeof r2.mockUserToken)
          t3 = r2.mockUserToken, n3 = User.MOCK_USER;
        else {
          t3 = util.createMockUserToken(r2.mockUserToken, null === (i = e._app) || void 0 === i ? void 0 : i.options.projectId);
          const s3 = r2.mockUserToken.sub || r2.mockUserToken.user_id;
          if (!s3)
            throw new FirestoreError(C.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
          n3 = new User(s3);
        }
        e._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(t3, n3));
      }
    }
    __name(connectFirestoreEmulator, "connectFirestoreEmulator");
    var Query2 = class {
      // This is the lite version of the Query class in the main SDK.
      /** @hideconstructor protected */
      constructor(e, t2, n2) {
        this.converter = t2, this._query = n2, /** The type of this Firestore reference. */
        this.type = "query", this.firestore = e;
      }
      withConverter(e) {
        return new Query2(this.firestore, e, this._query);
      }
    };
    __name(Query2, "Query");
    var DocumentReference = class {
      /** @hideconstructor */
      constructor(e, t2, n2) {
        this.converter = t2, this._key = n2, /** The type of this Firestore reference. */
        this.type = "document", this.firestore = e;
      }
      get _path() {
        return this._key.path;
      }
      /**
       * The document's identifier within its collection.
       */
      get id() {
        return this._key.path.lastSegment();
      }
      /**
       * A string representing the path of the referenced document (relative
       * to the root of the database).
       */
      get path() {
        return this._key.path.canonicalString();
      }
      /**
       * The collection this `DocumentReference` belongs to.
       */
      get parent() {
        return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());
      }
      withConverter(e) {
        return new DocumentReference(this.firestore, e, this._key);
      }
    };
    __name(DocumentReference, "DocumentReference");
    var CollectionReference = class extends Query2 {
      /** @hideconstructor */
      constructor(e, t2, n2) {
        super(e, t2, __PRIVATE_newQueryForPath(n2)), this._path = n2, /** The type of this Firestore reference. */
        this.type = "collection";
      }
      /** The collection's identifier. */
      get id() {
        return this._query.path.lastSegment();
      }
      /**
       * A string representing the path of the referenced collection (relative
       * to the root of the database).
       */
      get path() {
        return this._query.path.canonicalString();
      }
      /**
       * A reference to the containing `DocumentReference` if this is a
       * subcollection. If this isn't a subcollection, the reference is null.
       */
      get parent() {
        const e = this._path.popLast();
        return e.isEmpty() ? null : new DocumentReference(
          this.firestore,
          /* converter= */
          null,
          new DocumentKey(e)
        );
      }
      withConverter(e) {
        return new CollectionReference(this.firestore, e, this._path);
      }
    };
    __name(CollectionReference, "CollectionReference");
    function collection(e, t2, ...n2) {
      if (e = util.getModularInstance(e), __PRIVATE_validateNonEmptyArgument("collection", "path", t2), e instanceof Firestore$1) {
        const r2 = ResourcePath.fromString(t2, ...n2);
        return __PRIVATE_validateCollectionPath(r2), new CollectionReference(
          e,
          /* converter= */
          null,
          r2
        );
      }
      {
        if (!(e instanceof DocumentReference || e instanceof CollectionReference))
          throw new FirestoreError(C.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const r2 = e._path.child(ResourcePath.fromString(t2, ...n2));
        return __PRIVATE_validateCollectionPath(r2), new CollectionReference(
          e.firestore,
          /* converter= */
          null,
          r2
        );
      }
    }
    __name(collection, "collection");
    function collectionGroup(e, t2) {
      if (e = __PRIVATE_cast(e, Firestore$1), __PRIVATE_validateNonEmptyArgument("collectionGroup", "collection id", t2), t2.indexOf("/") >= 0)
        throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid collection ID '${t2}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
      return new Query2(
        e,
        /* converter= */
        null,
        (/* @__PURE__ */ __name(function __PRIVATE_newQueryForCollectionGroup(e2) {
          return new __PRIVATE_QueryImpl(ResourcePath.emptyPath(), e2);
        }, "__PRIVATE_newQueryForCollectionGroup"))(t2)
      );
    }
    __name(collectionGroup, "collectionGroup");
    function doc(e, t2, ...n2) {
      if (e = util.getModularInstance(e), // We allow omission of 'pathString' but explicitly prohibit passing in both
      // 'undefined' and 'null'.
      1 === arguments.length && (t2 = __PRIVATE_AutoId.newId()), __PRIVATE_validateNonEmptyArgument("doc", "path", t2), e instanceof Firestore$1) {
        const r2 = ResourcePath.fromString(t2, ...n2);
        return __PRIVATE_validateDocumentPath(r2), new DocumentReference(
          e,
          /* converter= */
          null,
          new DocumentKey(r2)
        );
      }
      {
        if (!(e instanceof DocumentReference || e instanceof CollectionReference))
          throw new FirestoreError(C.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const r2 = e._path.child(ResourcePath.fromString(t2, ...n2));
        return __PRIVATE_validateDocumentPath(r2), new DocumentReference(e.firestore, e instanceof CollectionReference ? e.converter : null, new DocumentKey(r2));
      }
    }
    __name(doc, "doc");
    function refEqual(e, t2) {
      return e = util.getModularInstance(e), t2 = util.getModularInstance(t2), (e instanceof DocumentReference || e instanceof CollectionReference) && (t2 instanceof DocumentReference || t2 instanceof CollectionReference) && (e.firestore === t2.firestore && e.path === t2.path && e.converter === t2.converter);
    }
    __name(refEqual, "refEqual");
    function queryEqual(e, t2) {
      return e = util.getModularInstance(e), t2 = util.getModularInstance(t2), e instanceof Query2 && t2 instanceof Query2 && (e.firestore === t2.firestore && __PRIVATE_queryEquals(e._query, t2._query) && e.converter === t2.converter);
    }
    __name(queryEqual, "queryEqual");
    var tn = "AsyncQueue";
    var __PRIVATE_AsyncQueueImpl = class {
      constructor(e = Promise.resolve()) {
        this.Vu = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this.mu = false, // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.fu = [], // visible for testing
        this.gu = null, // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.pu = false, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
        this.yu = false, // List of TimerIds to fast-forward delays for.
        this.wu = [], // Backoff timer used to schedule retries for retryable operations
        this.a_ = new __PRIVATE_ExponentialBackoff(
          this,
          "async_queue_retry"
          /* TimerId.AsyncQueueRetry */
        ), // Visibility handler that triggers an immediate retry of all retryable
        // operations. Meant to speed up recovery when we regain file system access
        // after page comes into foreground.
        this.Su = () => {
          const e2 = getDocument();
          e2 && __PRIVATE_logDebug(tn, "Visibility state changed to " + e2.visibilityState), this.a_.t_();
        }, this.bu = e;
        const t2 = getDocument();
        t2 && "function" == typeof t2.addEventListener && t2.addEventListener("visibilitychange", this.Su);
      }
      get isShuttingDown() {
        return this.mu;
      }
      /**
       * Adds a new operation to the queue without waiting for it to complete (i.e.
       * we ignore the Promise result).
       */
      enqueueAndForget(e) {
        this.enqueue(e);
      }
      enqueueAndForgetEvenWhileRestricted(e) {
        this.Du(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.vu(e);
      }
      enterRestrictedMode(e) {
        if (!this.mu) {
          this.mu = true, this.yu = e || false;
          const t2 = getDocument();
          t2 && "function" == typeof t2.removeEventListener && t2.removeEventListener("visibilitychange", this.Su);
        }
      }
      enqueue(e) {
        if (this.Du(), this.mu)
          return new Promise(() => {
          });
        const t2 = new __PRIVATE_Deferred();
        return this.vu(() => this.mu && this.yu ? Promise.resolve() : (e().then(t2.resolve, t2.reject), t2.promise)).then(() => t2.promise);
      }
      enqueueRetryable(e) {
        this.enqueueAndForget(() => (this.Vu.push(e), this.Cu()));
      }
      /**
       * Runs the next operation from the retryable queue. If the operation fails,
       * reschedules with backoff.
       */
      async Cu() {
        if (0 !== this.Vu.length) {
          try {
            await this.Vu[0](), this.Vu.shift(), this.a_.reset();
          } catch (e) {
            if (!__PRIVATE_isIndexedDbTransactionError(e))
              throw e;
            __PRIVATE_logDebug(tn, "Operation failed with retryable error: " + e);
          }
          this.Vu.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
          // This is necessary to run retryable operations that failed during
          // their initial attempt since we don't know whether they are already
          // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
          // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
          // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
          // call scheduled here.
          // Since `backoffAndRun()` cancels an existing backoff and schedules a
          // new backoff on every call, there is only ever a single additional
          // operation in the queue.
          this.a_.Xo(() => this.Cu());
        }
      }
      vu(e) {
        const t2 = this.bu.then(() => (this.pu = true, e().catch((e2) => {
          this.gu = e2, this.pu = false;
          const t3 = (
            /**
            * Chrome includes Error.message in Error.stack. Other browsers do not.
            * This returns expected output of message + stack when available.
            * @param error - Error or FirestoreError
            */
            (/* @__PURE__ */ __name(function __PRIVATE_getMessageOrStack(e3) {
              let t4 = e3.message || "";
              e3.stack && (t4 = e3.stack.includes(e3.message) ? e3.stack : e3.message + "\n" + e3.stack);
              return t4;
            }, "__PRIVATE_getMessageOrStack"))(e2)
          );
          throw __PRIVATE_logError("INTERNAL UNHANDLED ERROR: ", t3), e2;
        }).then((e2) => (this.pu = false, e2))));
        return this.bu = t2, t2;
      }
      enqueueAfterDelay(e, t2, n2) {
        this.Du(), // Fast-forward delays for timerIds that have been overridden.
        this.wu.indexOf(e) > -1 && (t2 = 0);
        const r2 = DelayedOperation.createAndSchedule(this, e, t2, n2, (e2) => this.Fu(e2));
        return this.fu.push(r2), r2;
      }
      Du() {
        this.gu && fail();
      }
      verifyOperationInProgress() {
      }
      /**
       * Waits until all currently queued tasks are finished executing. Delayed
       * operations are not run.
       */
      async Mu() {
        let e;
        do {
          e = this.bu, await e;
        } while (e !== this.bu);
      }
      /**
       * For Tests: Determine if a delayed operation with a particular TimerId
       * exists.
       */
      xu(e) {
        for (const t2 of this.fu)
          if (t2.timerId === e)
            return true;
        return false;
      }
      /**
       * For Tests: Runs some or all delayed operations early.
       *
       * @param lastTimerId - Delayed operations up to and including this TimerId
       * will be drained. Pass TimerId.All to run all delayed operations.
       * @returns a Promise that resolves once all operations have been run.
       */
      Ou(e) {
        return this.Mu().then(() => {
          this.fu.sort((e2, t2) => e2.targetTimeMs - t2.targetTimeMs);
          for (const t2 of this.fu)
            if (t2.skipDelay(), "all" !== e && t2.timerId === e)
              break;
          return this.Mu();
        });
      }
      /**
       * For Tests: Skip all subsequent delays for a timer id.
       */
      Nu(e) {
        this.wu.push(e);
      }
      /** Called once a DelayedOperation is run or canceled. */
      Fu(e) {
        const t2 = this.fu.indexOf(e);
        this.fu.splice(t2, 1);
      }
    };
    __name(__PRIVATE_AsyncQueueImpl, "__PRIVATE_AsyncQueueImpl");
    function __PRIVATE_isPartialObserver(e) {
      return (/* @__PURE__ */ __name(function __PRIVATE_implementsAnyMethods(e2, t2) {
        if ("object" != typeof e2 || null === e2)
          return false;
        const n2 = e2;
        for (const e3 of t2)
          if (e3 in n2 && "function" == typeof n2[e3])
            return true;
        return false;
      }, "__PRIVATE_implementsAnyMethods"))(e, ["next", "error", "complete"]);
    }
    __name(__PRIVATE_isPartialObserver, "__PRIVATE_isPartialObserver");
    var LoadBundleTask = class {
      constructor() {
        this._progressObserver = {}, this._taskCompletionResolver = new __PRIVATE_Deferred(), this._lastProgress = {
          taskState: "Running",
          totalBytes: 0,
          totalDocuments: 0,
          bytesLoaded: 0,
          documentsLoaded: 0
        };
      }
      /**
       * Registers functions to listen to bundle loading progress events.
       * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
       *   each time a Firestore document is loaded from the bundle.
       * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
       *   error, and there should be no more updates after this.
       * @param complete - Called when the loading task is complete.
       */
      onProgress(e, t2, n2) {
        this._progressObserver = {
          next: e,
          error: t2,
          complete: n2
        };
      }
      /**
       * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
       *
       * @param onRejected - Called when an error occurs during bundle loading.
       */
      catch(e) {
        return this._taskCompletionResolver.promise.catch(e);
      }
      /**
       * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
       *
       * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
       *   The update will always have its `taskState` set to `"Success"`.
       * @param onRejected - Called when an error occurs during bundle loading.
       */
      then(e, t2) {
        return this._taskCompletionResolver.promise.then(e, t2);
      }
      /**
       * Notifies all observers that bundle loading has completed, with a provided
       * `LoadBundleTaskProgress` object.
       *
       * @private
       */
      _completeWith(e) {
        this._updateProgress(e), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(e);
      }
      /**
       * Notifies all observers that bundle loading has failed, with a provided
       * `Error` as the reason.
       *
       * @private
       */
      _failWith(e) {
        this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(e), this._taskCompletionResolver.reject(e);
      }
      /**
       * Notifies a progress update of loading a bundle.
       * @param progress - The new progress.
       *
       * @private
       */
      _updateProgress(e) {
        this._lastProgress = e, this._progressObserver.next && this._progressObserver.next(e);
      }
    };
    __name(LoadBundleTask, "LoadBundleTask");
    var nn = -1;
    var Firestore = class extends Firestore$1 {
      /** @hideconstructor */
      constructor(e, t2, n2, r2) {
        super(e, t2, n2, r2), /**
         * Whether it's a {@link Firestore} or Firestore Lite instance.
         */
        this.type = "firestore", this._queue = new __PRIVATE_AsyncQueueImpl(), this._persistenceKey = (null == r2 ? void 0 : r2.name) || "[DEFAULT]";
      }
      async _terminate() {
        if (this._firestoreClient) {
          const e = this._firestoreClient.terminate();
          this._queue = new __PRIVATE_AsyncQueueImpl(e), this._firestoreClient = void 0, await e;
        }
      }
    };
    __name(Firestore, "Firestore");
    function initializeFirestore(e, t2, n2) {
      n2 || (n2 = rt);
      const r2 = app._getProvider(e, "firestore");
      if (r2.isInitialized(n2)) {
        const e2 = r2.getImmediate({
          identifier: n2
        }), i = r2.getOptions(n2);
        if (util.deepEqual(i, t2))
          return e2;
        throw new FirestoreError(C.FAILED_PRECONDITION, "initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.");
      }
      if (void 0 !== t2.cacheSizeBytes && void 0 !== t2.localCache)
        throw new FirestoreError(C.INVALID_ARGUMENT, "cache and cacheSizeBytes cannot be specified at the same time as cacheSizeBytes willbe deprecated. Instead, specify the cache size in the cache object");
      if (void 0 !== t2.cacheSizeBytes && -1 !== t2.cacheSizeBytes && t2.cacheSizeBytes < Dt)
        throw new FirestoreError(C.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
      return r2.initialize({
        options: t2,
        instanceIdentifier: n2
      });
    }
    __name(initializeFirestore, "initializeFirestore");
    function getFirestore(e, n2) {
      const r2 = "object" == typeof e ? e : app.getApp(), i = "string" == typeof e ? e : n2 || rt, s2 = app._getProvider(r2, "firestore").getImmediate({
        identifier: i
      });
      if (!s2._initialized) {
        const e2 = util.getDefaultEmulatorHostnameAndPort("firestore");
        e2 && connectFirestoreEmulator(s2, ...e2);
      }
      return s2;
    }
    __name(getFirestore, "getFirestore");
    function ensureFirestoreConfigured(e) {
      if (e._terminated)
        throw new FirestoreError(C.FAILED_PRECONDITION, "The client has already been terminated.");
      return e._firestoreClient || __PRIVATE_configureFirestore(e), e._firestoreClient;
    }
    __name(ensureFirestoreConfigured, "ensureFirestoreConfigured");
    function __PRIVATE_configureFirestore(e) {
      var t2, n2, r2;
      const i = e._freezeSettings(), s2 = (/* @__PURE__ */ __name(function __PRIVATE_makeDatabaseInfo(e2, t3, n3, r3) {
        return new DatabaseInfo(e2, t3, n3, r3.host, r3.ssl, r3.experimentalForceLongPolling, r3.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(r3.experimentalLongPollingOptions), r3.useFetchStreams);
      }, "__PRIVATE_makeDatabaseInfo"))(e._databaseId, (null === (t2 = e._app) || void 0 === t2 ? void 0 : t2.options.appId) || "", e._persistenceKey, i);
      e._componentsProvider || (null === (n2 = i.localCache) || void 0 === n2 ? void 0 : n2._offlineComponentProvider) && (null === (r2 = i.localCache) || void 0 === r2 ? void 0 : r2._onlineComponentProvider) && (e._componentsProvider = {
        _offline: i.localCache._offlineComponentProvider,
        _online: i.localCache._onlineComponentProvider
      }), e._firestoreClient = new FirestoreClient(e._authCredentials, e._appCheckCredentials, e._queue, s2, e._componentsProvider && (/* @__PURE__ */ __name(function __PRIVATE_buildComponentProvider(e2) {
        const t3 = null == e2 ? void 0 : e2._online.build();
        return {
          _offline: null == e2 ? void 0 : e2._offline.build(t3),
          _online: t3
        };
      }, "__PRIVATE_buildComponentProvider"))(e._componentsProvider));
    }
    __name(__PRIVATE_configureFirestore, "__PRIVATE_configureFirestore");
    function enableIndexedDbPersistence(e, t2) {
      __PRIVATE_logWarn("enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.");
      const n2 = e._freezeSettings();
      return __PRIVATE_setPersistenceProviders(e, OnlineComponentProvider.provider, {
        build: (e2) => new __PRIVATE_IndexedDbOfflineComponentProvider(e2, n2.cacheSizeBytes, null == t2 ? void 0 : t2.forceOwnership)
      }), Promise.resolve();
    }
    __name(enableIndexedDbPersistence, "enableIndexedDbPersistence");
    async function enableMultiTabIndexedDbPersistence(e) {
      __PRIVATE_logWarn("enableMultiTabIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.");
      const t2 = e._freezeSettings();
      __PRIVATE_setPersistenceProviders(e, OnlineComponentProvider.provider, {
        build: (e2) => new __PRIVATE_MultiTabOfflineComponentProvider(e2, t2.cacheSizeBytes)
      });
    }
    __name(enableMultiTabIndexedDbPersistence, "enableMultiTabIndexedDbPersistence");
    function __PRIVATE_setPersistenceProviders(e, t2, n2) {
      if ((e = __PRIVATE_cast(e, Firestore))._firestoreClient || e._terminated)
        throw new FirestoreError(C.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
      if (e._componentsProvider || e._getSettings().localCache)
        throw new FirestoreError(C.FAILED_PRECONDITION, "SDK cache is already specified.");
      e._componentsProvider = {
        _online: t2,
        _offline: n2
      }, __PRIVATE_configureFirestore(e);
    }
    __name(__PRIVATE_setPersistenceProviders, "__PRIVATE_setPersistenceProviders");
    function clearIndexedDbPersistence(e) {
      if (e._initialized && !e._terminated)
        throw new FirestoreError(C.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
      const t2 = new __PRIVATE_Deferred();
      return e._queue.enqueueAndForgetEvenWhileRestricted(async () => {
        try {
          await (/* @__PURE__ */ __name(async function __PRIVATE_indexedDbClearPersistence(e2) {
            if (!__PRIVATE_SimpleDb.D())
              return Promise.resolve();
            const t3 = e2 + xt;
            await __PRIVATE_SimpleDb.delete(t3);
          }, "__PRIVATE_indexedDbClearPersistence"))(__PRIVATE_indexedDbStoragePrefix(e._databaseId, e._persistenceKey)), t2.resolve();
        } catch (e2) {
          t2.reject(e2);
        }
      }), t2.promise;
    }
    __name(clearIndexedDbPersistence, "clearIndexedDbPersistence");
    function waitForPendingWrites(e) {
      return (/* @__PURE__ */ __name(function __PRIVATE_firestoreClientWaitForPendingWrites(e2) {
        const t2 = new __PRIVATE_Deferred();
        return e2.asyncQueue.enqueueAndForget(async () => __PRIVATE_syncEngineRegisterPendingWritesCallback(await __PRIVATE_getSyncEngine(e2), t2)), t2.promise;
      }, "__PRIVATE_firestoreClientWaitForPendingWrites"))(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)));
    }
    __name(waitForPendingWrites, "waitForPendingWrites");
    function enableNetwork(e) {
      return __PRIVATE_firestoreClientEnableNetwork(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)));
    }
    __name(enableNetwork, "enableNetwork");
    function disableNetwork(e) {
      return __PRIVATE_firestoreClientDisableNetwork(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)));
    }
    __name(disableNetwork, "disableNetwork");
    function terminate(e) {
      return app._removeServiceInstance(e.app, "firestore", e._databaseId.database), e._delete();
    }
    __name(terminate, "terminate");
    function loadBundle(e, t2) {
      const n2 = ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), r2 = new LoadBundleTask();
      return __PRIVATE_firestoreClientLoadBundle(n2, e._databaseId, t2, r2), r2;
    }
    __name(loadBundle, "loadBundle");
    function namedQuery(e, t2) {
      return __PRIVATE_firestoreClientGetNamedQuery(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), t2).then((t3) => t3 ? new Query2(e, null, t3.query) : null);
    }
    __name(namedQuery, "namedQuery");
    var AggregateField = class {
      /**
       * Create a new AggregateField<T>
       * @param aggregateType Specifies the type of aggregation operation to perform.
       * @param _internalFieldPath Optionally specifies the field that is aggregated.
       * @internal
       */
      constructor(e = "count", t2) {
        this._internalFieldPath = t2, /** A type string to uniquely identify instances of this class. */
        this.type = "AggregateField", this.aggregateType = e;
      }
    };
    __name(AggregateField, "AggregateField");
    var AggregateQuerySnapshot = class {
      /** @hideconstructor */
      constructor(e, t2, n2) {
        this._userDataWriter = t2, this._data = n2, /** A type string to uniquely identify instances of this class. */
        this.type = "AggregateQuerySnapshot", this.query = e;
      }
      /**
       * Returns the results of the aggregations performed over the underlying
       * query.
       *
       * The keys of the returned object will be the same as those of the
       * `AggregateSpec` object specified to the aggregation method, and the values
       * will be the corresponding aggregation result.
       *
       * @returns The results of the aggregations performed over the underlying
       * query.
       */
      data() {
        return this._userDataWriter.convertObjectMap(this._data);
      }
    };
    __name(AggregateQuerySnapshot, "AggregateQuerySnapshot");
    var Bytes = class {
      /** @hideconstructor */
      constructor(e) {
        this._byteString = e;
      }
      /**
       * Creates a new `Bytes` object from the given Base64 string, converting it to
       * bytes.
       *
       * @param base64 - The Base64 string used to create the `Bytes` object.
       */
      static fromBase64String(e) {
        try {
          return new Bytes(ByteString.fromBase64String(e));
        } catch (e2) {
          throw new FirestoreError(C.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e2);
        }
      }
      /**
       * Creates a new `Bytes` object from the given Uint8Array.
       *
       * @param array - The Uint8Array used to create the `Bytes` object.
       */
      static fromUint8Array(e) {
        return new Bytes(ByteString.fromUint8Array(e));
      }
      /**
       * Returns the underlying bytes as a Base64-encoded string.
       *
       * @returns The Base64-encoded string created from the `Bytes` object.
       */
      toBase64() {
        return this._byteString.toBase64();
      }
      /**
       * Returns the underlying bytes in a new `Uint8Array`.
       *
       * @returns The Uint8Array created from the `Bytes` object.
       */
      toUint8Array() {
        return this._byteString.toUint8Array();
      }
      /**
       * Returns a string representation of the `Bytes` object.
       *
       * @returns A string representation of the `Bytes` object.
       */
      toString() {
        return "Bytes(base64: " + this.toBase64() + ")";
      }
      /**
       * Returns true if this `Bytes` object is equal to the provided one.
       *
       * @param other - The `Bytes` object to compare against.
       * @returns true if this `Bytes` object is equal to the provided one.
       */
      isEqual(e) {
        return this._byteString.isEqual(e._byteString);
      }
    };
    __name(Bytes, "Bytes");
    var FieldPath = class {
      /**
       * Creates a `FieldPath` from the provided field names. If more than one field
       * name is provided, the path will point to a nested field in a document.
       *
       * @param fieldNames - A list of field names.
       */
      constructor(...e) {
        for (let t2 = 0; t2 < e.length; ++t2)
          if (0 === e[t2].length)
            throw new FirestoreError(C.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this._internalPath = new FieldPath$1(e);
      }
      /**
       * Returns true if this `FieldPath` is equal to the provided one.
       *
       * @param other - The `FieldPath` to compare against.
       * @returns true if this `FieldPath` is equal to the provided one.
       */
      isEqual(e) {
        return this._internalPath.isEqual(e._internalPath);
      }
    };
    __name(FieldPath, "FieldPath");
    function documentId() {
      return new FieldPath(x);
    }
    __name(documentId, "documentId");
    var FieldValue = class {
      /**
       * @param _methodName - The public API endpoint that returns this class.
       * @hideconstructor
       */
      constructor(e) {
        this._methodName = e;
      }
    };
    __name(FieldValue, "FieldValue");
    var GeoPoint2 = class {
      /**
       * Creates a new immutable `GeoPoint` object with the provided latitude and
       * longitude values.
       * @param latitude - The latitude as number between -90 and 90.
       * @param longitude - The longitude as number between -180 and 180.
       */
      constructor(e, t2) {
        if (!isFinite(e) || e < -90 || e > 90)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + e);
        if (!isFinite(t2) || t2 < -180 || t2 > 180)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + t2);
        this._lat = e, this._long = t2;
      }
      /**
       * The latitude of this `GeoPoint` instance.
       */
      get latitude() {
        return this._lat;
      }
      /**
       * The longitude of this `GeoPoint` instance.
       */
      get longitude() {
        return this._long;
      }
      /**
       * Returns true if this `GeoPoint` is equal to the provided one.
       *
       * @param other - The `GeoPoint` to compare against.
       * @returns true if this `GeoPoint` is equal to the provided one.
       */
      isEqual(e) {
        return this._lat === e._lat && this._long === e._long;
      }
      /** Returns a JSON-serializable representation of this GeoPoint. */
      toJSON() {
        return {
          latitude: this._lat,
          longitude: this._long
        };
      }
      /**
       * Actually private to JS consumers of our API, so this function is prefixed
       * with an underscore.
       */
      _compareTo(e) {
        return __PRIVATE_primitiveComparator(this._lat, e._lat) || __PRIVATE_primitiveComparator(this._long, e._long);
      }
    };
    __name(GeoPoint2, "GeoPoint");
    var VectorValue = class {
      /**
       * @private
       * @internal
       */
      constructor(e) {
        this._values = (e || []).map((e2) => e2);
      }
      /**
       * Returns a copy of the raw number array form of the vector.
       */
      toArray() {
        return this._values.map((e) => e);
      }
      /**
       * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.
       */
      isEqual(e) {
        return (/* @__PURE__ */ __name(function __PRIVATE_isPrimitiveArrayEqual(e2, t2) {
          if (e2.length !== t2.length)
            return false;
          for (let n2 = 0; n2 < e2.length; ++n2)
            if (e2[n2] !== t2[n2])
              return false;
          return true;
        }, "__PRIVATE_isPrimitiveArrayEqual"))(this._values, e._values);
      }
    };
    __name(VectorValue, "VectorValue");
    var rn = /^__.*__$/;
    var ParsedSetData = class {
      constructor(e, t2, n2) {
        this.data = e, this.fieldMask = t2, this.fieldTransforms = n2;
      }
      toMutation(e, t2) {
        return null !== this.fieldMask ? new __PRIVATE_PatchMutation(e, this.data, this.fieldMask, t2, this.fieldTransforms) : new __PRIVATE_SetMutation(e, this.data, t2, this.fieldTransforms);
      }
    };
    __name(ParsedSetData, "ParsedSetData");
    var ParsedUpdateData = class {
      constructor(e, t2, n2) {
        this.data = e, this.fieldMask = t2, this.fieldTransforms = n2;
      }
      toMutation(e, t2) {
        return new __PRIVATE_PatchMutation(e, this.data, this.fieldMask, t2, this.fieldTransforms);
      }
    };
    __name(ParsedUpdateData, "ParsedUpdateData");
    function __PRIVATE_isWrite(e) {
      switch (e) {
        case 0:
        case 2:
        case 1:
          return true;
        case 3:
        case 4:
          return false;
        default:
          throw fail();
      }
    }
    __name(__PRIVATE_isWrite, "__PRIVATE_isWrite");
    var __PRIVATE_ParseContextImpl = class {
      /**
       * Initializes a ParseContext with the given source and path.
       *
       * @param settings - The settings for the parser.
       * @param databaseId - The database ID of the Firestore instance.
       * @param serializer - The serializer to use to generate the Value proto.
       * @param ignoreUndefinedProperties - Whether to ignore undefined properties
       * rather than throw.
       * @param fieldTransforms - A mutable list of field transforms encountered
       * while parsing the data.
       * @param fieldMask - A mutable list of field paths encountered while parsing
       * the data.
       *
       * TODO(b/34871131): We don't support array paths right now, so path can be
       * null to indicate the context represents any location within an array (in
       * which case certain features will not work and errors will be somewhat
       * compromised).
       */
      constructor(e, t2, n2, r2, i, s2) {
        this.settings = e, this.databaseId = t2, this.serializer = n2, this.ignoreUndefinedProperties = r2, // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        void 0 === i && this.Bu(), this.fieldTransforms = i || [], this.fieldMask = s2 || [];
      }
      get path() {
        return this.settings.path;
      }
      get Lu() {
        return this.settings.Lu;
      }
      /** Returns a new context with the specified settings overwritten. */
      ku(e) {
        return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
      }
      qu(e) {
        var t2;
        const n2 = null === (t2 = this.path) || void 0 === t2 ? void 0 : t2.child(e), r2 = this.ku({
          path: n2,
          Qu: false
        });
        return r2.$u(e), r2;
      }
      Ku(e) {
        var t2;
        const n2 = null === (t2 = this.path) || void 0 === t2 ? void 0 : t2.child(e), r2 = this.ku({
          path: n2,
          Qu: false
        });
        return r2.Bu(), r2;
      }
      Uu(e) {
        return this.ku({
          path: void 0,
          Qu: true
        });
      }
      Wu(e) {
        return __PRIVATE_createError(e, this.settings.methodName, this.settings.Gu || false, this.path, this.settings.zu);
      }
      /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
      contains(e) {
        return void 0 !== this.fieldMask.find((t2) => e.isPrefixOf(t2)) || void 0 !== this.fieldTransforms.find((t2) => e.isPrefixOf(t2.field));
      }
      Bu() {
        if (this.path)
          for (let e = 0; e < this.path.length; e++)
            this.$u(this.path.get(e));
      }
      $u(e) {
        if (0 === e.length)
          throw this.Wu("Document fields must not be empty");
        if (__PRIVATE_isWrite(this.Lu) && rn.test(e))
          throw this.Wu('Document fields cannot begin and end with "__"');
      }
    };
    __name(__PRIVATE_ParseContextImpl, "__PRIVATE_ParseContextImpl");
    var __PRIVATE_UserDataReader = class {
      constructor(e, t2, n2) {
        this.databaseId = e, this.ignoreUndefinedProperties = t2, this.serializer = n2 || __PRIVATE_newSerializer(e);
      }
      /** Creates a new top-level parse context. */
      ju(e, t2, n2, r2 = false) {
        return new __PRIVATE_ParseContextImpl({
          Lu: e,
          methodName: t2,
          zu: n2,
          path: FieldPath$1.emptyPath(),
          Qu: false,
          Gu: r2
        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
      }
    };
    __name(__PRIVATE_UserDataReader, "__PRIVATE_UserDataReader");
    function __PRIVATE_newUserDataReader(e) {
      const t2 = e._freezeSettings(), n2 = __PRIVATE_newSerializer(e._databaseId);
      return new __PRIVATE_UserDataReader(e._databaseId, !!t2.ignoreUndefinedProperties, n2);
    }
    __name(__PRIVATE_newUserDataReader, "__PRIVATE_newUserDataReader");
    function __PRIVATE_parseSetData(e, t2, n2, r2, i, s2 = {}) {
      const o2 = e.ju(s2.merge || s2.mergeFields ? 2 : 0, t2, n2, i);
      __PRIVATE_validatePlainObject("Data must be an object, but it was:", o2, r2);
      const _ = __PRIVATE_parseObject(r2, o2);
      let a2, u2;
      if (s2.merge)
        a2 = new FieldMask(o2.fieldMask), u2 = o2.fieldTransforms;
      else if (s2.mergeFields) {
        const e2 = [];
        for (const r3 of s2.mergeFields) {
          const i2 = __PRIVATE_fieldPathFromArgument$1(t2, r3, n2);
          if (!o2.contains(i2))
            throw new FirestoreError(C.INVALID_ARGUMENT, `Field '${i2}' is specified in your field mask but missing from your input data.`);
          __PRIVATE_fieldMaskContains(e2, i2) || e2.push(i2);
        }
        a2 = new FieldMask(e2), u2 = o2.fieldTransforms.filter((e3) => a2.covers(e3.field));
      } else
        a2 = null, u2 = o2.fieldTransforms;
      return new ParsedSetData(new ObjectValue(_), a2, u2);
    }
    __name(__PRIVATE_parseSetData, "__PRIVATE_parseSetData");
    var __PRIVATE_DeleteFieldValueImpl = class extends FieldValue {
      _toFieldTransform(e) {
        if (2 !== e.Lu)
          throw 1 === e.Lu ? e.Wu(`${this._methodName}() can only appear at the top level of your update data`) : e.Wu(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
        return e.fieldMask.push(e.path), null;
      }
      isEqual(e) {
        return e instanceof __PRIVATE_DeleteFieldValueImpl;
      }
    };
    __name(__PRIVATE_DeleteFieldValueImpl, "__PRIVATE_DeleteFieldValueImpl");
    function __PRIVATE_createSentinelChildContext(e, t2, n2) {
      return new __PRIVATE_ParseContextImpl({
        Lu: 3,
        zu: t2.settings.zu,
        methodName: e._methodName,
        Qu: n2
      }, t2.databaseId, t2.serializer, t2.ignoreUndefinedProperties);
    }
    __name(__PRIVATE_createSentinelChildContext, "__PRIVATE_createSentinelChildContext");
    var __PRIVATE_ServerTimestampFieldValueImpl = class extends FieldValue {
      _toFieldTransform(e) {
        return new FieldTransform(e.path, new __PRIVATE_ServerTimestampTransform());
      }
      isEqual(e) {
        return e instanceof __PRIVATE_ServerTimestampFieldValueImpl;
      }
    };
    __name(__PRIVATE_ServerTimestampFieldValueImpl, "__PRIVATE_ServerTimestampFieldValueImpl");
    var __PRIVATE_ArrayUnionFieldValueImpl = class extends FieldValue {
      constructor(e, t2) {
        super(e), this.Hu = t2;
      }
      _toFieldTransform(e) {
        const t2 = __PRIVATE_createSentinelChildContext(
          this,
          e,
          /*array=*/
          true
        ), n2 = this.Hu.map((e2) => __PRIVATE_parseData(e2, t2)), r2 = new __PRIVATE_ArrayUnionTransformOperation(n2);
        return new FieldTransform(e.path, r2);
      }
      isEqual(e) {
        return e instanceof __PRIVATE_ArrayUnionFieldValueImpl && util.deepEqual(this.Hu, e.Hu);
      }
    };
    __name(__PRIVATE_ArrayUnionFieldValueImpl, "__PRIVATE_ArrayUnionFieldValueImpl");
    var __PRIVATE_ArrayRemoveFieldValueImpl = class extends FieldValue {
      constructor(e, t2) {
        super(e), this.Hu = t2;
      }
      _toFieldTransform(e) {
        const t2 = __PRIVATE_createSentinelChildContext(
          this,
          e,
          /*array=*/
          true
        ), n2 = this.Hu.map((e2) => __PRIVATE_parseData(e2, t2)), r2 = new __PRIVATE_ArrayRemoveTransformOperation(n2);
        return new FieldTransform(e.path, r2);
      }
      isEqual(e) {
        return e instanceof __PRIVATE_ArrayRemoveFieldValueImpl && util.deepEqual(this.Hu, e.Hu);
      }
    };
    __name(__PRIVATE_ArrayRemoveFieldValueImpl, "__PRIVATE_ArrayRemoveFieldValueImpl");
    var __PRIVATE_NumericIncrementFieldValueImpl = class extends FieldValue {
      constructor(e, t2) {
        super(e), this.Ju = t2;
      }
      _toFieldTransform(e) {
        const t2 = new __PRIVATE_NumericIncrementTransformOperation(e.serializer, toNumber(e.serializer, this.Ju));
        return new FieldTransform(e.path, t2);
      }
      isEqual(e) {
        return e instanceof __PRIVATE_NumericIncrementFieldValueImpl && this.Ju === e.Ju;
      }
    };
    __name(__PRIVATE_NumericIncrementFieldValueImpl, "__PRIVATE_NumericIncrementFieldValueImpl");
    function __PRIVATE_parseUpdateData(e, t2, n2, r2) {
      const i = e.ju(1, t2, n2);
      __PRIVATE_validatePlainObject("Data must be an object, but it was:", i, r2);
      const s2 = [], o2 = ObjectValue.empty();
      forEach(r2, (e2, r3) => {
        const _2 = __PRIVATE_fieldPathFromDotSeparatedString(t2, e2, n2);
        r3 = util.getModularInstance(r3);
        const a2 = i.Ku(_2);
        if (r3 instanceof __PRIVATE_DeleteFieldValueImpl)
          s2.push(_2);
        else {
          const e3 = __PRIVATE_parseData(r3, a2);
          null != e3 && (s2.push(_2), o2.set(_2, e3));
        }
      });
      const _ = new FieldMask(s2);
      return new ParsedUpdateData(o2, _, i.fieldTransforms);
    }
    __name(__PRIVATE_parseUpdateData, "__PRIVATE_parseUpdateData");
    function __PRIVATE_parseUpdateVarargs(e, t2, n2, r2, i, s2) {
      const o2 = e.ju(1, t2, n2), _ = [__PRIVATE_fieldPathFromArgument$1(t2, r2, n2)], a2 = [i];
      if (s2.length % 2 != 0)
        throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${t2}() needs to be called with an even number of arguments that alternate between field names and values.`);
      for (let e2 = 0; e2 < s2.length; e2 += 2)
        _.push(__PRIVATE_fieldPathFromArgument$1(t2, s2[e2])), a2.push(s2[e2 + 1]);
      const u2 = [], c2 = ObjectValue.empty();
      for (let e2 = _.length - 1; e2 >= 0; --e2)
        if (!__PRIVATE_fieldMaskContains(u2, _[e2])) {
          const t3 = _[e2];
          let n3 = a2[e2];
          n3 = util.getModularInstance(n3);
          const r3 = o2.Ku(t3);
          if (n3 instanceof __PRIVATE_DeleteFieldValueImpl)
            u2.push(t3);
          else {
            const e3 = __PRIVATE_parseData(n3, r3);
            null != e3 && (u2.push(t3), c2.set(t3, e3));
          }
        }
      const l = new FieldMask(u2);
      return new ParsedUpdateData(c2, l, o2.fieldTransforms);
    }
    __name(__PRIVATE_parseUpdateVarargs, "__PRIVATE_parseUpdateVarargs");
    function __PRIVATE_parseQueryValue(e, t2, n2, r2 = false) {
      return __PRIVATE_parseData(n2, e.ju(r2 ? 4 : 3, t2));
    }
    __name(__PRIVATE_parseQueryValue, "__PRIVATE_parseQueryValue");
    function __PRIVATE_parseData(e, t2) {
      if (__PRIVATE_looksLikeJsonObject(
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        e = util.getModularInstance(e)
      ))
        return __PRIVATE_validatePlainObject("Unsupported field value:", t2, e), __PRIVATE_parseObject(e, t2);
      if (e instanceof FieldValue)
        return (/* @__PURE__ */ __name(function __PRIVATE_parseSentinelFieldValue(e2, t3) {
          if (!__PRIVATE_isWrite(t3.Lu))
            throw t3.Wu(`${e2._methodName}() can only be used with update() and set()`);
          if (!t3.path)
            throw t3.Wu(`${e2._methodName}() is not currently supported inside arrays`);
          const n2 = e2._toFieldTransform(t3);
          n2 && t3.fieldTransforms.push(n2);
        }, "__PRIVATE_parseSentinelFieldValue"))(e, t2), null;
      if (void 0 === e && t2.ignoreUndefinedProperties)
        return null;
      if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        t2.path && t2.fieldMask.push(t2.path), e instanceof Array
      ) {
        if (t2.settings.Qu && 4 !== t2.Lu)
          throw t2.Wu("Nested arrays are not supported");
        return (/* @__PURE__ */ __name(function __PRIVATE_parseArray(e2, t3) {
          const n2 = [];
          let r2 = 0;
          for (const i of e2) {
            let e3 = __PRIVATE_parseData(i, t3.Uu(r2));
            null == e3 && // Just include nulls in the array for fields being replaced with a
            // sentinel.
            (e3 = {
              nullValue: "NULL_VALUE"
            }), n2.push(e3), r2++;
          }
          return {
            arrayValue: {
              values: n2
            }
          };
        }, "__PRIVATE_parseArray"))(e, t2);
      }
      return (/* @__PURE__ */ __name(function __PRIVATE_parseScalarValue(e2, t3) {
        if (null === (e2 = util.getModularInstance(e2)))
          return {
            nullValue: "NULL_VALUE"
          };
        if ("number" == typeof e2)
          return toNumber(t3.serializer, e2);
        if ("boolean" == typeof e2)
          return {
            booleanValue: e2
          };
        if ("string" == typeof e2)
          return {
            stringValue: e2
          };
        if (e2 instanceof Date) {
          const n2 = Timestamp.fromDate(e2);
          return {
            timestampValue: toTimestamp(t3.serializer, n2)
          };
        }
        if (e2 instanceof Timestamp) {
          const n2 = new Timestamp(e2.seconds, 1e3 * Math.floor(e2.nanoseconds / 1e3));
          return {
            timestampValue: toTimestamp(t3.serializer, n2)
          };
        }
        if (e2 instanceof GeoPoint2)
          return {
            geoPointValue: {
              latitude: e2.latitude,
              longitude: e2.longitude
            }
          };
        if (e2 instanceof Bytes)
          return {
            bytesValue: __PRIVATE_toBytes(t3.serializer, e2._byteString)
          };
        if (e2 instanceof DocumentReference) {
          const n2 = t3.databaseId, r2 = e2.firestore._databaseId;
          if (!r2.isEqual(n2))
            throw t3.Wu(`Document reference is for database ${r2.projectId}/${r2.database} but should be for database ${n2.projectId}/${n2.database}`);
          return {
            referenceValue: __PRIVATE_toResourceName(e2.firestore._databaseId || t3.databaseId, e2._key.path)
          };
        }
        if (e2 instanceof VectorValue)
          return (/* @__PURE__ */ __name(function __PRIVATE_parseVectorValue(e3, t4) {
            const n2 = {
              fields: {
                [it]: {
                  stringValue: _t
                },
                [at]: {
                  arrayValue: {
                    values: e3.toArray().map((e4) => {
                      if ("number" != typeof e4)
                        throw t4.Wu("VectorValues must only contain numeric values.");
                      return __PRIVATE_toDouble(t4.serializer, e4);
                    })
                  }
                }
              }
            };
            return {
              mapValue: n2
            };
          }, "__PRIVATE_parseVectorValue"))(e2, t3);
        throw t3.Wu(`Unsupported field value: ${__PRIVATE_valueDescription(e2)}`);
      }, "__PRIVATE_parseScalarValue"))(e, t2);
    }
    __name(__PRIVATE_parseData, "__PRIVATE_parseData");
    function __PRIVATE_parseObject(e, t2) {
      const n2 = {};
      return isEmpty(e) ? (
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        t2.path && t2.path.length > 0 && t2.fieldMask.push(t2.path)
      ) : forEach(e, (e2, r2) => {
        const i = __PRIVATE_parseData(r2, t2.qu(e2));
        null != i && (n2[e2] = i);
      }), {
        mapValue: {
          fields: n2
        }
      };
    }
    __name(__PRIVATE_parseObject, "__PRIVATE_parseObject");
    function __PRIVATE_looksLikeJsonObject(e) {
      return !("object" != typeof e || null === e || e instanceof Array || e instanceof Date || e instanceof Timestamp || e instanceof GeoPoint2 || e instanceof Bytes || e instanceof DocumentReference || e instanceof FieldValue || e instanceof VectorValue);
    }
    __name(__PRIVATE_looksLikeJsonObject, "__PRIVATE_looksLikeJsonObject");
    function __PRIVATE_validatePlainObject(e, t2, n2) {
      if (!__PRIVATE_looksLikeJsonObject(n2) || !(/* @__PURE__ */ __name(function __PRIVATE_isPlainObject(e2) {
        return "object" == typeof e2 && null !== e2 && (Object.getPrototypeOf(e2) === Object.prototype || null === Object.getPrototypeOf(e2));
      }, "__PRIVATE_isPlainObject"))(n2)) {
        const r2 = __PRIVATE_valueDescription(n2);
        throw "an object" === r2 ? t2.Wu(e + " a custom object") : t2.Wu(e + " " + r2);
      }
    }
    __name(__PRIVATE_validatePlainObject, "__PRIVATE_validatePlainObject");
    function __PRIVATE_fieldPathFromArgument$1(e, t2, n2) {
      if (
        // If required, replace the FieldPath Compat class with the firestore-exp
        // FieldPath.
        (t2 = util.getModularInstance(t2)) instanceof FieldPath
      )
        return t2._internalPath;
      if ("string" == typeof t2)
        return __PRIVATE_fieldPathFromDotSeparatedString(e, t2);
      throw __PRIVATE_createError(
        "Field path arguments must be of type string or ",
        e,
        /* hasConverter= */
        false,
        /* path= */
        void 0,
        n2
      );
    }
    __name(__PRIVATE_fieldPathFromArgument$1, "__PRIVATE_fieldPathFromArgument$1");
    var sn = new RegExp("[~\\*/\\[\\]]");
    function __PRIVATE_fieldPathFromDotSeparatedString(e, t2, n2) {
      if (t2.search(sn) >= 0)
        throw __PRIVATE_createError(
          `Invalid field path (${t2}). Paths must not contain '~', '*', '/', '[', or ']'`,
          e,
          /* hasConverter= */
          false,
          /* path= */
          void 0,
          n2
        );
      try {
        return new FieldPath(...t2.split("."))._internalPath;
      } catch (r2) {
        throw __PRIVATE_createError(
          `Invalid field path (${t2}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,
          e,
          /* hasConverter= */
          false,
          /* path= */
          void 0,
          n2
        );
      }
    }
    __name(__PRIVATE_fieldPathFromDotSeparatedString, "__PRIVATE_fieldPathFromDotSeparatedString");
    function __PRIVATE_createError(e, t2, n2, r2, i) {
      const s2 = r2 && !r2.isEmpty(), o2 = void 0 !== i;
      let _ = `Function ${t2}() called with invalid data`;
      n2 && (_ += " (via `toFirestore()`)"), _ += ". ";
      let a2 = "";
      return (s2 || o2) && (a2 += " (found", s2 && (a2 += ` in field ${r2}`), o2 && (a2 += ` in document ${i}`), a2 += ")"), new FirestoreError(C.INVALID_ARGUMENT, _ + e + a2);
    }
    __name(__PRIVATE_createError, "__PRIVATE_createError");
    function __PRIVATE_fieldMaskContains(e, t2) {
      return e.some((e2) => e2.isEqual(t2));
    }
    __name(__PRIVATE_fieldMaskContains, "__PRIVATE_fieldMaskContains");
    var DocumentSnapshot$1 = class {
      // Note: This class is stripped down version of the DocumentSnapshot in
      // the legacy SDK. The changes are:
      // - No support for SnapshotMetadata.
      // - No support for SnapshotOptions.
      /** @hideconstructor protected */
      constructor(e, t2, n2, r2, i) {
        this._firestore = e, this._userDataWriter = t2, this._key = n2, this._document = r2, this._converter = i;
      }
      /** Property of the `DocumentSnapshot` that provides the document's ID. */
      get id() {
        return this._key.path.lastSegment();
      }
      /**
       * The `DocumentReference` for the document included in the `DocumentSnapshot`.
       */
      get ref() {
        return new DocumentReference(this._firestore, this._converter, this._key);
      }
      /**
       * Signals whether or not the document at the snapshot's location exists.
       *
       * @returns true if the document exists.
       */
      exists() {
        return null !== this._document;
      }
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * @returns An `Object` containing all fields in the document or `undefined`
       * if the document doesn't exist.
       */
      data() {
        if (this._document) {
          if (this._converter) {
            const e = new QueryDocumentSnapshot$1(
              this._firestore,
              this._userDataWriter,
              this._key,
              this._document,
              /* converter= */
              null
            );
            return this._converter.fromFirestore(e);
          }
          return this._userDataWriter.convertValue(this._document.data.value);
        }
      }
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      get(e) {
        if (this._document) {
          const t2 = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e));
          if (null !== t2)
            return this._userDataWriter.convertValue(t2);
        }
      }
    };
    __name(DocumentSnapshot$1, "DocumentSnapshot$1");
    var QueryDocumentSnapshot$1 = class extends DocumentSnapshot$1 {
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * @override
       * @returns An `Object` containing all fields in the document.
       */
      data() {
        return super.data();
      }
    };
    __name(QueryDocumentSnapshot$1, "QueryDocumentSnapshot$1");
    function __PRIVATE_fieldPathFromArgument(e, t2) {
      return "string" == typeof t2 ? __PRIVATE_fieldPathFromDotSeparatedString(e, t2) : t2 instanceof FieldPath ? t2._internalPath : t2._delegate._internalPath;
    }
    __name(__PRIVATE_fieldPathFromArgument, "__PRIVATE_fieldPathFromArgument");
    function __PRIVATE_validateHasExplicitOrderByForLimitToLast(e) {
      if ("L" === e.limitType && 0 === e.explicitOrderBy.length)
        throw new FirestoreError(C.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }
    __name(__PRIVATE_validateHasExplicitOrderByForLimitToLast, "__PRIVATE_validateHasExplicitOrderByForLimitToLast");
    var AppliableConstraint = class {
    };
    __name(AppliableConstraint, "AppliableConstraint");
    var QueryConstraint = class extends AppliableConstraint {
    };
    __name(QueryConstraint, "QueryConstraint");
    function query(e, t2, ...n2) {
      let r2 = [];
      t2 instanceof AppliableConstraint && r2.push(t2), r2 = r2.concat(n2), (/* @__PURE__ */ __name(function __PRIVATE_validateQueryConstraintArray(e2) {
        const t3 = e2.filter((e3) => e3 instanceof QueryCompositeFilterConstraint).length, n3 = e2.filter((e3) => e3 instanceof QueryFieldFilterConstraint).length;
        if (t3 > 1 || t3 > 0 && n3 > 0)
          throw new FirestoreError(C.INVALID_ARGUMENT, "InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.");
      }, "__PRIVATE_validateQueryConstraintArray"))(r2);
      for (const t3 of r2)
        e = t3._apply(e);
      return e;
    }
    __name(query, "query");
    var QueryFieldFilterConstraint = class extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e, t2, n2) {
        super(), this._field = e, this._op = t2, this._value = n2, /** The type of this query constraint */
        this.type = "where";
      }
      static _create(e, t2, n2) {
        return new QueryFieldFilterConstraint(e, t2, n2);
      }
      _apply(e) {
        const t2 = this._parse(e);
        return __PRIVATE_validateNewFieldFilter(e._query, t2), new Query2(e.firestore, e.converter, __PRIVATE_queryWithAddedFilter(e._query, t2));
      }
      _parse(e) {
        const t2 = __PRIVATE_newUserDataReader(e.firestore), n2 = (/* @__PURE__ */ __name(function __PRIVATE_newQueryFilter(e2, t3, n3, r2, i, s2, o2) {
          let _;
          if (i.isKeyField()) {
            if ("array-contains" === s2 || "array-contains-any" === s2)
              throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid Query. You can't perform '${s2}' queries on documentId().`);
            if ("in" === s2 || "not-in" === s2) {
              __PRIVATE_validateDisjunctiveFilterElements(o2, s2);
              const t4 = [];
              for (const n4 of o2)
                t4.push(__PRIVATE_parseDocumentIdValue(r2, e2, n4));
              _ = {
                arrayValue: {
                  values: t4
                }
              };
            } else
              _ = __PRIVATE_parseDocumentIdValue(r2, e2, o2);
          } else
            "in" !== s2 && "not-in" !== s2 && "array-contains-any" !== s2 || __PRIVATE_validateDisjunctiveFilterElements(o2, s2), _ = __PRIVATE_parseQueryValue(
              n3,
              t3,
              o2,
              /* allowArrays= */
              "in" === s2 || "not-in" === s2
            );
          const a2 = FieldFilter.create(i, s2, _);
          return a2;
        }, "__PRIVATE_newQueryFilter"))(e._query, "where", t2, e.firestore._databaseId, this._field, this._op, this._value);
        return n2;
      }
    };
    __name(QueryFieldFilterConstraint, "QueryFieldFilterConstraint");
    function where(e, t2, n2) {
      const r2 = t2, i = __PRIVATE_fieldPathFromArgument("where", e);
      return QueryFieldFilterConstraint._create(i, r2, n2);
    }
    __name(where, "where");
    var QueryCompositeFilterConstraint = class extends AppliableConstraint {
      /**
       * @internal
       */
      constructor(e, t2) {
        super(), this.type = e, this._queryConstraints = t2;
      }
      static _create(e, t2) {
        return new QueryCompositeFilterConstraint(e, t2);
      }
      _parse(e) {
        const t2 = this._queryConstraints.map((t3) => t3._parse(e)).filter((e2) => e2.getFilters().length > 0);
        return 1 === t2.length ? t2[0] : CompositeFilter.create(t2, this._getOperator());
      }
      _apply(e) {
        const t2 = this._parse(e);
        return 0 === t2.getFilters().length ? e : ((/* @__PURE__ */ __name(function __PRIVATE_validateNewFilter(e2, t3) {
          let n2 = e2;
          const r2 = t3.getFlattenedFilters();
          for (const e3 of r2)
            __PRIVATE_validateNewFieldFilter(n2, e3), n2 = __PRIVATE_queryWithAddedFilter(n2, e3);
        }, "__PRIVATE_validateNewFilter"))(e._query, t2), new Query2(e.firestore, e.converter, __PRIVATE_queryWithAddedFilter(e._query, t2)));
      }
      _getQueryConstraints() {
        return this._queryConstraints;
      }
      _getOperator() {
        return "and" === this.type ? "and" : "or";
      }
    };
    __name(QueryCompositeFilterConstraint, "QueryCompositeFilterConstraint");
    function or(...e) {
      return e.forEach((e2) => __PRIVATE_validateQueryFilterConstraint("or", e2)), QueryCompositeFilterConstraint._create("or", e);
    }
    __name(or, "or");
    function and(...e) {
      return e.forEach((e2) => __PRIVATE_validateQueryFilterConstraint("and", e2)), QueryCompositeFilterConstraint._create("and", e);
    }
    __name(and, "and");
    var QueryOrderByConstraint = class extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e, t2) {
        super(), this._field = e, this._direction = t2, /** The type of this query constraint */
        this.type = "orderBy";
      }
      static _create(e, t2) {
        return new QueryOrderByConstraint(e, t2);
      }
      _apply(e) {
        const t2 = (/* @__PURE__ */ __name(function __PRIVATE_newQueryOrderBy(e2, t3, n2) {
          if (null !== e2.startAt)
            throw new FirestoreError(C.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
          if (null !== e2.endAt)
            throw new FirestoreError(C.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
          const r2 = new OrderBy(t3, n2);
          return r2;
        }, "__PRIVATE_newQueryOrderBy"))(e._query, this._field, this._direction);
        return new Query2(e.firestore, e.converter, (/* @__PURE__ */ __name(function __PRIVATE_queryWithAddedOrderBy(e2, t3) {
          const n2 = e2.explicitOrderBy.concat([t3]);
          return new __PRIVATE_QueryImpl(e2.path, e2.collectionGroup, n2, e2.filters.slice(), e2.limit, e2.limitType, e2.startAt, e2.endAt);
        }, "__PRIVATE_queryWithAddedOrderBy"))(e._query, t2));
      }
    };
    __name(QueryOrderByConstraint, "QueryOrderByConstraint");
    function orderBy(e, t2 = "asc") {
      const n2 = t2, r2 = __PRIVATE_fieldPathFromArgument("orderBy", e);
      return QueryOrderByConstraint._create(r2, n2);
    }
    __name(orderBy, "orderBy");
    var QueryLimitConstraint = class extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e, t2, n2) {
        super(), this.type = e, this._limit = t2, this._limitType = n2;
      }
      static _create(e, t2, n2) {
        return new QueryLimitConstraint(e, t2, n2);
      }
      _apply(e) {
        return new Query2(e.firestore, e.converter, __PRIVATE_queryWithLimit(e._query, this._limit, this._limitType));
      }
    };
    __name(QueryLimitConstraint, "QueryLimitConstraint");
    function limit(e) {
      return __PRIVATE_validatePositiveNumber("limit", e), QueryLimitConstraint._create(
        "limit",
        e,
        "F"
        /* LimitType.First */
      );
    }
    __name(limit, "limit");
    function limitToLast(e) {
      return __PRIVATE_validatePositiveNumber("limitToLast", e), QueryLimitConstraint._create(
        "limitToLast",
        e,
        "L"
        /* LimitType.Last */
      );
    }
    __name(limitToLast, "limitToLast");
    var QueryStartAtConstraint = class extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e, t2, n2) {
        super(), this.type = e, this._docOrFields = t2, this._inclusive = n2;
      }
      static _create(e, t2, n2) {
        return new QueryStartAtConstraint(e, t2, n2);
      }
      _apply(e) {
        const t2 = __PRIVATE_newQueryBoundFromDocOrFields(e, this.type, this._docOrFields, this._inclusive);
        return new Query2(e.firestore, e.converter, (/* @__PURE__ */ __name(function __PRIVATE_queryWithStartAt(e2, t3) {
          return new __PRIVATE_QueryImpl(e2.path, e2.collectionGroup, e2.explicitOrderBy.slice(), e2.filters.slice(), e2.limit, e2.limitType, t3, e2.endAt);
        }, "__PRIVATE_queryWithStartAt"))(e._query, t2));
      }
    };
    __name(QueryStartAtConstraint, "QueryStartAtConstraint");
    function startAt(...e) {
      return QueryStartAtConstraint._create(
        "startAt",
        e,
        /*inclusive=*/
        true
      );
    }
    __name(startAt, "startAt");
    function startAfter(...e) {
      return QueryStartAtConstraint._create(
        "startAfter",
        e,
        /*inclusive=*/
        false
      );
    }
    __name(startAfter, "startAfter");
    var QueryEndAtConstraint = class extends QueryConstraint {
      /**
       * @internal
       */
      constructor(e, t2, n2) {
        super(), this.type = e, this._docOrFields = t2, this._inclusive = n2;
      }
      static _create(e, t2, n2) {
        return new QueryEndAtConstraint(e, t2, n2);
      }
      _apply(e) {
        const t2 = __PRIVATE_newQueryBoundFromDocOrFields(e, this.type, this._docOrFields, this._inclusive);
        return new Query2(e.firestore, e.converter, (/* @__PURE__ */ __name(function __PRIVATE_queryWithEndAt(e2, t3) {
          return new __PRIVATE_QueryImpl(e2.path, e2.collectionGroup, e2.explicitOrderBy.slice(), e2.filters.slice(), e2.limit, e2.limitType, e2.startAt, t3);
        }, "__PRIVATE_queryWithEndAt"))(e._query, t2));
      }
    };
    __name(QueryEndAtConstraint, "QueryEndAtConstraint");
    function endBefore(...e) {
      return QueryEndAtConstraint._create(
        "endBefore",
        e,
        /*inclusive=*/
        false
      );
    }
    __name(endBefore, "endBefore");
    function endAt(...e) {
      return QueryEndAtConstraint._create(
        "endAt",
        e,
        /*inclusive=*/
        true
      );
    }
    __name(endAt, "endAt");
    function __PRIVATE_newQueryBoundFromDocOrFields(e, t2, n2, r2) {
      if (n2[0] = util.getModularInstance(n2[0]), n2[0] instanceof DocumentSnapshot$1)
        return (/* @__PURE__ */ __name(function __PRIVATE_newQueryBoundFromDocument(e2, t3, n3, r3, i) {
          if (!r3)
            throw new FirestoreError(C.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ${n3}().`);
          const s2 = [];
          for (const n4 of __PRIVATE_queryNormalizedOrderBy(e2))
            if (n4.field.isKeyField())
              s2.push(__PRIVATE_refValue(t3, r3.key));
            else {
              const e3 = r3.data.field(n4.field);
              if (__PRIVATE_isServerTimestamp(e3))
                throw new FirestoreError(C.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + n4.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
              if (null === e3) {
                const e4 = n4.field.canonicalString();
                throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${e4}' (used as the orderBy) does not exist.`);
              }
              s2.push(e3);
            }
          return new Bound(s2, i);
        }, "__PRIVATE_newQueryBoundFromDocument"))(e._query, e.firestore._databaseId, t2, n2[0]._document, r2);
      {
        const i = __PRIVATE_newUserDataReader(e.firestore);
        return (/* @__PURE__ */ __name(function __PRIVATE_newQueryBoundFromFields(e2, t3, n3, r3, i2, s2) {
          const o2 = e2.explicitOrderBy;
          if (i2.length > o2.length)
            throw new FirestoreError(C.INVALID_ARGUMENT, `Too many arguments provided to ${r3}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
          const _ = [];
          for (let s3 = 0; s3 < i2.length; s3++) {
            const a2 = i2[s3];
            if (o2[s3].field.isKeyField()) {
              if ("string" != typeof a2)
                throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${r3}(), but got a ${typeof a2}`);
              if (!__PRIVATE_isCollectionGroupQuery(e2) && -1 !== a2.indexOf("/"))
                throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r3}() must be a plain document ID, but '${a2}' contains a slash.`);
              const n4 = e2.path.child(ResourcePath.fromString(a2));
              if (!DocumentKey.isDocumentKey(n4))
                throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r3}() must result in a valid document path, but '${n4}' is not because it contains an odd number of segments.`);
              const i3 = new DocumentKey(n4);
              _.push(__PRIVATE_refValue(t3, i3));
            } else {
              const e3 = __PRIVATE_parseQueryValue(n3, r3, a2);
              _.push(e3);
            }
          }
          return new Bound(_, s2);
        }, "__PRIVATE_newQueryBoundFromFields"))(e._query, e.firestore._databaseId, i, t2, n2, r2);
      }
    }
    __name(__PRIVATE_newQueryBoundFromDocOrFields, "__PRIVATE_newQueryBoundFromDocOrFields");
    function __PRIVATE_parseDocumentIdValue(e, t2, n2) {
      if ("string" == typeof (n2 = util.getModularInstance(n2))) {
        if ("" === n2)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
        if (!__PRIVATE_isCollectionGroupQuery(t2) && -1 !== n2.indexOf("/"))
          throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n2}' contains a '/' character.`);
        const r2 = t2.path.child(ResourcePath.fromString(n2));
        if (!DocumentKey.isDocumentKey(r2))
          throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r2}' is not because it has an odd number of segments (${r2.length}).`);
        return __PRIVATE_refValue(e, new DocumentKey(r2));
      }
      if (n2 instanceof DocumentReference)
        return __PRIVATE_refValue(e, n2._key);
      throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(n2)}.`);
    }
    __name(__PRIVATE_parseDocumentIdValue, "__PRIVATE_parseDocumentIdValue");
    function __PRIVATE_validateDisjunctiveFilterElements(e, t2) {
      if (!Array.isArray(e) || 0 === e.length)
        throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${t2.toString()}' filters.`);
    }
    __name(__PRIVATE_validateDisjunctiveFilterElements, "__PRIVATE_validateDisjunctiveFilterElements");
    function __PRIVATE_validateNewFieldFilter(e, t2) {
      const n2 = (/* @__PURE__ */ __name(function __PRIVATE_findOpInsideFilters(e2, t3) {
        for (const n3 of e2)
          for (const e3 of n3.getFlattenedFilters())
            if (t3.indexOf(e3.op) >= 0)
              return e3.op;
        return null;
      }, "__PRIVATE_findOpInsideFilters"))(e.filters, (/* @__PURE__ */ __name(function __PRIVATE_conflictingOps(e2) {
        switch (e2) {
          case "!=":
            return [
              "!=",
              "not-in"
              /* Operator.NOT_IN */
            ];
          case "array-contains-any":
          case "in":
            return [
              "not-in"
              /* Operator.NOT_IN */
            ];
          case "not-in":
            return [
              "array-contains-any",
              "in",
              "not-in",
              "!="
              /* Operator.NOT_EQUAL */
            ];
          default:
            return [];
        }
      }, "__PRIVATE_conflictingOps"))(t2.op));
      if (null !== n2)
        throw n2 === t2.op ? new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${t2.op.toString()}' filter.`) : new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. You cannot use '${t2.op.toString()}' filters with '${n2.toString()}' filters.`);
    }
    __name(__PRIVATE_validateNewFieldFilter, "__PRIVATE_validateNewFieldFilter");
    function __PRIVATE_validateQueryFilterConstraint(e, t2) {
      if (!(t2 instanceof QueryFieldFilterConstraint || t2 instanceof QueryCompositeFilterConstraint))
        throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${e}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);
    }
    __name(__PRIVATE_validateQueryFilterConstraint, "__PRIVATE_validateQueryFilterConstraint");
    var AbstractUserDataWriter = class {
      convertValue(e, t2 = "none") {
        switch (__PRIVATE_typeOrder(e)) {
          case 0:
            return null;
          case 1:
            return e.booleanValue;
          case 2:
            return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);
          case 3:
            return this.convertTimestamp(e.timestampValue);
          case 4:
            return this.convertServerTimestamp(e, t2);
          case 5:
            return e.stringValue;
          case 6:
            return this.convertBytes(__PRIVATE_normalizeByteString(e.bytesValue));
          case 7:
            return this.convertReference(e.referenceValue);
          case 8:
            return this.convertGeoPoint(e.geoPointValue);
          case 9:
            return this.convertArray(e.arrayValue, t2);
          case 11:
            return this.convertObject(e.mapValue, t2);
          case 10:
            return this.convertVectorValue(e.mapValue);
          default:
            throw fail();
        }
      }
      convertObject(e, t2) {
        return this.convertObjectMap(e.fields, t2);
      }
      /**
       * @internal
       */
      convertObjectMap(e, t2 = "none") {
        const n2 = {};
        return forEach(e, (e2, r2) => {
          n2[e2] = this.convertValue(r2, t2);
        }), n2;
      }
      /**
       * @internal
       */
      convertVectorValue(e) {
        var t2, n2, r2;
        const i = null === (r2 = null === (n2 = null === (t2 = e.fields) || void 0 === t2 ? void 0 : t2[at].arrayValue) || void 0 === n2 ? void 0 : n2.values) || void 0 === r2 ? void 0 : r2.map((e2) => __PRIVATE_normalizeNumber(e2.doubleValue));
        return new VectorValue(i);
      }
      convertGeoPoint(e) {
        return new GeoPoint2(__PRIVATE_normalizeNumber(e.latitude), __PRIVATE_normalizeNumber(e.longitude));
      }
      convertArray(e, t2) {
        return (e.values || []).map((e2) => this.convertValue(e2, t2));
      }
      convertServerTimestamp(e, t2) {
        switch (t2) {
          case "previous":
            const n2 = __PRIVATE_getPreviousValue(e);
            return null == n2 ? null : this.convertValue(n2, t2);
          case "estimate":
            return this.convertTimestamp(__PRIVATE_getLocalWriteTime(e));
          default:
            return null;
        }
      }
      convertTimestamp(e) {
        const t2 = __PRIVATE_normalizeTimestamp(e);
        return new Timestamp(t2.seconds, t2.nanos);
      }
      convertDocumentKey(e, t2) {
        const n2 = ResourcePath.fromString(e);
        __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(n2));
        const r2 = new DatabaseId(n2.get(1), n2.get(3)), i = new DocumentKey(n2.popFirst(5));
        return r2.isEqual(t2) || // TODO(b/64130202): Somehow support foreign references.
        __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${r2.projectId}/${r2.database}) which is not supported. It will be treated as a reference in the current database (${t2.projectId}/${t2.database}) instead.`), i;
      }
    };
    __name(AbstractUserDataWriter, "AbstractUserDataWriter");
    function __PRIVATE_applyFirestoreDataConverter(e, t2, n2) {
      let r2;
      return r2 = e ? n2 && (n2.merge || n2.mergeFields) ? e.toFirestore(t2, n2) : e.toFirestore(t2) : t2, r2;
    }
    __name(__PRIVATE_applyFirestoreDataConverter, "__PRIVATE_applyFirestoreDataConverter");
    var __PRIVATE_LiteUserDataWriter = class extends AbstractUserDataWriter {
      constructor(e) {
        super(), this.firestore = e;
      }
      convertBytes(e) {
        return new Bytes(e);
      }
      convertReference(e) {
        const t2 = this.convertDocumentKey(e, this.firestore._databaseId);
        return new DocumentReference(
          this.firestore,
          /* converter= */
          null,
          t2
        );
      }
    };
    __name(__PRIVATE_LiteUserDataWriter, "__PRIVATE_LiteUserDataWriter");
    function sum(e) {
      return new AggregateField("sum", __PRIVATE_fieldPathFromArgument$1("sum", e));
    }
    __name(sum, "sum");
    function average(e) {
      return new AggregateField("avg", __PRIVATE_fieldPathFromArgument$1("average", e));
    }
    __name(average, "average");
    function count() {
      return new AggregateField("count");
    }
    __name(count, "count");
    function aggregateFieldEqual(e, t2) {
      var n2, r2;
      return e instanceof AggregateField && t2 instanceof AggregateField && e.aggregateType === t2.aggregateType && (null === (n2 = e._internalFieldPath) || void 0 === n2 ? void 0 : n2.canonicalString()) === (null === (r2 = t2._internalFieldPath) || void 0 === r2 ? void 0 : r2.canonicalString());
    }
    __name(aggregateFieldEqual, "aggregateFieldEqual");
    function aggregateQuerySnapshotEqual(e, t2) {
      return queryEqual(e.query, t2.query) && util.deepEqual(e.data(), t2.data());
    }
    __name(aggregateQuerySnapshotEqual, "aggregateQuerySnapshotEqual");
    var SnapshotMetadata = class {
      /** @hideconstructor */
      constructor(e, t2) {
        this.hasPendingWrites = e, this.fromCache = t2;
      }
      /**
       * Returns true if this `SnapshotMetadata` is equal to the provided one.
       *
       * @param other - The `SnapshotMetadata` to compare against.
       * @returns true if this `SnapshotMetadata` is equal to the provided one.
       */
      isEqual(e) {
        return this.hasPendingWrites === e.hasPendingWrites && this.fromCache === e.fromCache;
      }
    };
    __name(SnapshotMetadata, "SnapshotMetadata");
    var DocumentSnapshot = class extends DocumentSnapshot$1 {
      /** @hideconstructor protected */
      constructor(e, t2, n2, r2, i, s2) {
        super(e, t2, n2, r2, s2), this._firestore = e, this._firestoreImpl = e, this.metadata = i;
      }
      /**
       * Returns whether or not the data exists. True if the document exists.
       */
      exists() {
        return super.exists();
      }
      /**
       * Retrieves all fields in the document as an `Object`. Returns `undefined` if
       * the document doesn't exist.
       *
       * By default, `serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document or `undefined` if
       * the document doesn't exist.
       */
      data(e = {}) {
        if (this._document) {
          if (this._converter) {
            const t2 = new QueryDocumentSnapshot(
              this._firestore,
              this._userDataWriter,
              this._key,
              this._document,
              this.metadata,
              /* converter= */
              null
            );
            return this._converter.fromFirestore(t2, e);
          }
          return this._userDataWriter.convertValue(this._document.data.value, e.serverTimestamps);
        }
      }
      /**
       * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
       * document or field doesn't exist.
       *
       * By default, a `serverTimestamp()` that has not yet been set to
       * its final value will be returned as `null`. You can override this by
       * passing an options object.
       *
       * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
       * field.
       * @param options - An options object to configure how the field is retrieved
       * from the snapshot (for example the desired behavior for server timestamps
       * that have not yet been set to their final value).
       * @returns The data at the specified field location or undefined if no such
       * field exists in the document.
       */
      // We are using `any` here to avoid an explicit cast by our users.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      get(e, t2 = {}) {
        if (this._document) {
          const n2 = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e));
          if (null !== n2)
            return this._userDataWriter.convertValue(n2, t2.serverTimestamps);
        }
      }
    };
    __name(DocumentSnapshot, "DocumentSnapshot");
    var QueryDocumentSnapshot = class extends DocumentSnapshot {
      /**
       * Retrieves all fields in the document as an `Object`.
       *
       * By default, `serverTimestamp()` values that have not yet been
       * set to their final value will be returned as `null`. You can override
       * this by passing an options object.
       *
       * @override
       * @param options - An options object to configure how data is retrieved from
       * the snapshot (for example the desired behavior for server timestamps that
       * have not yet been set to their final value).
       * @returns An `Object` containing all fields in the document.
       */
      data(e = {}) {
        return super.data(e);
      }
    };
    __name(QueryDocumentSnapshot, "QueryDocumentSnapshot");
    var QuerySnapshot = class {
      /** @hideconstructor */
      constructor(e, t2, n2, r2) {
        this._firestore = e, this._userDataWriter = t2, this._snapshot = r2, this.metadata = new SnapshotMetadata(r2.hasPendingWrites, r2.fromCache), this.query = n2;
      }
      /** An array of all the documents in the `QuerySnapshot`. */
      get docs() {
        const e = [];
        return this.forEach((t2) => e.push(t2)), e;
      }
      /** The number of documents in the `QuerySnapshot`. */
      get size() {
        return this._snapshot.docs.size;
      }
      /** True if there are no documents in the `QuerySnapshot`. */
      get empty() {
        return 0 === this.size;
      }
      /**
       * Enumerates all of the documents in the `QuerySnapshot`.
       *
       * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
       * each document in the snapshot.
       * @param thisArg - The `this` binding for the callback.
       */
      forEach(e, t2) {
        this._snapshot.docs.forEach((n2) => {
          e.call(t2, new QueryDocumentSnapshot(this._firestore, this._userDataWriter, n2.key, n2, new SnapshotMetadata(this._snapshot.mutatedKeys.has(n2.key), this._snapshot.fromCache), this.query.converter));
        });
      }
      /**
       * Returns an array of the documents changes since the last snapshot. If this
       * is the first snapshot, all documents will be in the list as 'added'
       * changes.
       *
       * @param options - `SnapshotListenOptions` that control whether metadata-only
       * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
       * snapshot events.
       */
      docChanges(e = {}) {
        const t2 = !!e.includeMetadataChanges;
        if (t2 && this._snapshot.excludesMetadataChanges)
          throw new FirestoreError(C.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === t2 || (this._cachedChanges = /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
        (/* @__PURE__ */ __name(function __PRIVATE_changesFromSnapshot(e2, t3) {
          if (e2._snapshot.oldDocs.isEmpty()) {
            let t4 = 0;
            return e2._snapshot.docChanges.map((n2) => {
              const r2 = new QueryDocumentSnapshot(e2._firestore, e2._userDataWriter, n2.doc.key, n2.doc, new SnapshotMetadata(e2._snapshot.mutatedKeys.has(n2.doc.key), e2._snapshot.fromCache), e2.query.converter);
              return n2.doc, {
                type: "added",
                doc: r2,
                oldIndex: -1,
                newIndex: t4++
              };
            });
          }
          {
            let n2 = e2._snapshot.oldDocs;
            return e2._snapshot.docChanges.filter((e3) => t3 || 3 !== e3.type).map((t4) => {
              const r2 = new QueryDocumentSnapshot(e2._firestore, e2._userDataWriter, t4.doc.key, t4.doc, new SnapshotMetadata(e2._snapshot.mutatedKeys.has(t4.doc.key), e2._snapshot.fromCache), e2.query.converter);
              let i = -1, s2 = -1;
              return 0 !== t4.type && (i = n2.indexOf(t4.doc.key), n2 = n2.delete(t4.doc.key)), 1 !== t4.type && (n2 = n2.add(t4.doc), s2 = n2.indexOf(t4.doc.key)), {
                type: __PRIVATE_resultChangeType(t4.type),
                doc: r2,
                oldIndex: i,
                newIndex: s2
              };
            });
          }
        }, "__PRIVATE_changesFromSnapshot"))(this, t2), this._cachedChangesIncludeMetadataChanges = t2), this._cachedChanges;
      }
    };
    __name(QuerySnapshot, "QuerySnapshot");
    function __PRIVATE_resultChangeType(e) {
      switch (e) {
        case 0:
          return "added";
        case 2:
        case 3:
          return "modified";
        case 1:
          return "removed";
        default:
          return fail();
      }
    }
    __name(__PRIVATE_resultChangeType, "__PRIVATE_resultChangeType");
    function snapshotEqual(e, t2) {
      return e instanceof DocumentSnapshot && t2 instanceof DocumentSnapshot ? e._firestore === t2._firestore && e._key.isEqual(t2._key) && (null === e._document ? null === t2._document : e._document.isEqual(t2._document)) && e._converter === t2._converter : e instanceof QuerySnapshot && t2 instanceof QuerySnapshot && (e._firestore === t2._firestore && queryEqual(e.query, t2.query) && e.metadata.isEqual(t2.metadata) && e._snapshot.isEqual(t2._snapshot));
    }
    __name(snapshotEqual, "snapshotEqual");
    function getDoc(e) {
      e = __PRIVATE_cast(e, DocumentReference);
      const t2 = __PRIVATE_cast(e.firestore, Firestore);
      return __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(ensureFirestoreConfigured(t2), e._key).then((n2) => __PRIVATE_convertToDocSnapshot(t2, e, n2));
    }
    __name(getDoc, "getDoc");
    var __PRIVATE_ExpUserDataWriter = class extends AbstractUserDataWriter {
      constructor(e) {
        super(), this.firestore = e;
      }
      convertBytes(e) {
        return new Bytes(e);
      }
      convertReference(e) {
        const t2 = this.convertDocumentKey(e, this.firestore._databaseId);
        return new DocumentReference(
          this.firestore,
          /* converter= */
          null,
          t2
        );
      }
    };
    __name(__PRIVATE_ExpUserDataWriter, "__PRIVATE_ExpUserDataWriter");
    function getDocFromCache(e) {
      e = __PRIVATE_cast(e, DocumentReference);
      const t2 = __PRIVATE_cast(e.firestore, Firestore), n2 = ensureFirestoreConfigured(t2), r2 = new __PRIVATE_ExpUserDataWriter(t2);
      return __PRIVATE_firestoreClientGetDocumentFromLocalCache(n2, e._key).then((n3) => new DocumentSnapshot(t2, r2, e._key, n3, new SnapshotMetadata(
        null !== n3 && n3.hasLocalMutations,
        /* fromCache= */
        true
      ), e.converter));
    }
    __name(getDocFromCache, "getDocFromCache");
    function getDocFromServer(e) {
      e = __PRIVATE_cast(e, DocumentReference);
      const t2 = __PRIVATE_cast(e.firestore, Firestore);
      return __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(ensureFirestoreConfigured(t2), e._key, {
        source: "server"
      }).then((n2) => __PRIVATE_convertToDocSnapshot(t2, e, n2));
    }
    __name(getDocFromServer, "getDocFromServer");
    function getDocs(e) {
      e = __PRIVATE_cast(e, Query2);
      const t2 = __PRIVATE_cast(e.firestore, Firestore), n2 = ensureFirestoreConfigured(t2), r2 = new __PRIVATE_ExpUserDataWriter(t2);
      return __PRIVATE_validateHasExplicitOrderByForLimitToLast(e._query), __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(n2, e._query).then((n3) => new QuerySnapshot(t2, r2, e, n3));
    }
    __name(getDocs, "getDocs");
    function getDocsFromCache(e) {
      e = __PRIVATE_cast(e, Query2);
      const t2 = __PRIVATE_cast(e.firestore, Firestore), n2 = ensureFirestoreConfigured(t2), r2 = new __PRIVATE_ExpUserDataWriter(t2);
      return __PRIVATE_firestoreClientGetDocumentsFromLocalCache(n2, e._query).then((n3) => new QuerySnapshot(t2, r2, e, n3));
    }
    __name(getDocsFromCache, "getDocsFromCache");
    function getDocsFromServer(e) {
      e = __PRIVATE_cast(e, Query2);
      const t2 = __PRIVATE_cast(e.firestore, Firestore), n2 = ensureFirestoreConfigured(t2), r2 = new __PRIVATE_ExpUserDataWriter(t2);
      return __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(n2, e._query, {
        source: "server"
      }).then((n3) => new QuerySnapshot(t2, r2, e, n3));
    }
    __name(getDocsFromServer, "getDocsFromServer");
    function setDoc(e, t2, n2) {
      e = __PRIVATE_cast(e, DocumentReference);
      const r2 = __PRIVATE_cast(e.firestore, Firestore), i = __PRIVATE_applyFirestoreDataConverter(e.converter, t2, n2);
      return executeWrite(r2, [__PRIVATE_parseSetData(__PRIVATE_newUserDataReader(r2), "setDoc", e._key, i, null !== e.converter, n2).toMutation(e._key, Precondition.none())]);
    }
    __name(setDoc, "setDoc");
    function updateDoc(e, t2, n2, ...r2) {
      e = __PRIVATE_cast(e, DocumentReference);
      const i = __PRIVATE_cast(e.firestore, Firestore), s2 = __PRIVATE_newUserDataReader(i);
      let o2;
      o2 = "string" == typeof // For Compat types, we have to "extract" the underlying types before
      // performing validation.
      (t2 = util.getModularInstance(t2)) || t2 instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(s2, "updateDoc", e._key, t2, n2, r2) : __PRIVATE_parseUpdateData(s2, "updateDoc", e._key, t2);
      return executeWrite(i, [o2.toMutation(e._key, Precondition.exists(true))]);
    }
    __name(updateDoc, "updateDoc");
    function deleteDoc(e) {
      return executeWrite(__PRIVATE_cast(e.firestore, Firestore), [new __PRIVATE_DeleteMutation(e._key, Precondition.none())]);
    }
    __name(deleteDoc, "deleteDoc");
    function addDoc(e, t2) {
      const n2 = __PRIVATE_cast(e.firestore, Firestore), r2 = doc(e), i = __PRIVATE_applyFirestoreDataConverter(e.converter, t2);
      return executeWrite(n2, [__PRIVATE_parseSetData(__PRIVATE_newUserDataReader(e.firestore), "addDoc", r2._key, i, null !== e.converter, {}).toMutation(r2._key, Precondition.exists(false))]).then(() => r2);
    }
    __name(addDoc, "addDoc");
    function onSnapshot(e, ...t2) {
      var n2, r2, i;
      e = util.getModularInstance(e);
      let s2 = {
        includeMetadataChanges: false,
        source: "default"
      }, o2 = 0;
      "object" != typeof t2[o2] || __PRIVATE_isPartialObserver(t2[o2]) || (s2 = t2[o2], o2++);
      const _ = {
        includeMetadataChanges: s2.includeMetadataChanges,
        source: s2.source
      };
      if (__PRIVATE_isPartialObserver(t2[o2])) {
        const e2 = t2[o2];
        t2[o2] = null === (n2 = e2.next) || void 0 === n2 ? void 0 : n2.bind(e2), t2[o2 + 1] = null === (r2 = e2.error) || void 0 === r2 ? void 0 : r2.bind(e2), t2[o2 + 2] = null === (i = e2.complete) || void 0 === i ? void 0 : i.bind(e2);
      }
      let a2, u2, c2;
      if (e instanceof DocumentReference)
        u2 = __PRIVATE_cast(e.firestore, Firestore), c2 = __PRIVATE_newQueryForPath(e._key.path), a2 = {
          next: (n3) => {
            t2[o2] && t2[o2](__PRIVATE_convertToDocSnapshot(u2, e, n3));
          },
          error: t2[o2 + 1],
          complete: t2[o2 + 2]
        };
      else {
        const n3 = __PRIVATE_cast(e, Query2);
        u2 = __PRIVATE_cast(n3.firestore, Firestore), c2 = n3._query;
        const r3 = new __PRIVATE_ExpUserDataWriter(u2);
        a2 = {
          next: (e2) => {
            t2[o2] && t2[o2](new QuerySnapshot(u2, r3, n3, e2));
          },
          error: t2[o2 + 1],
          complete: t2[o2 + 2]
        }, __PRIVATE_validateHasExplicitOrderByForLimitToLast(e._query);
      }
      return (/* @__PURE__ */ __name(function __PRIVATE_firestoreClientListen(e2, t3, n3, r3) {
        const i2 = new __PRIVATE_AsyncObserver(r3), s3 = new __PRIVATE_QueryListener(t3, i2, n3);
        return e2.asyncQueue.enqueueAndForget(async () => __PRIVATE_eventManagerListen(await __PRIVATE_getEventManager(e2), s3)), () => {
          i2.su(), e2.asyncQueue.enqueueAndForget(async () => __PRIVATE_eventManagerUnlisten(await __PRIVATE_getEventManager(e2), s3));
        };
      }, "__PRIVATE_firestoreClientListen"))(ensureFirestoreConfigured(u2), c2, _, a2);
    }
    __name(onSnapshot, "onSnapshot");
    function onSnapshotsInSync(e, t2) {
      return __PRIVATE_firestoreClientAddSnapshotsInSyncListener(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), __PRIVATE_isPartialObserver(t2) ? t2 : {
        next: t2
      });
    }
    __name(onSnapshotsInSync, "onSnapshotsInSync");
    function executeWrite(e, t2) {
      return (/* @__PURE__ */ __name(function __PRIVATE_firestoreClientWrite(e2, t3) {
        const n2 = new __PRIVATE_Deferred();
        return e2.asyncQueue.enqueueAndForget(async () => __PRIVATE_syncEngineWrite(await __PRIVATE_getSyncEngine(e2), t3, n2)), n2.promise;
      }, "__PRIVATE_firestoreClientWrite"))(ensureFirestoreConfigured(e), t2);
    }
    __name(executeWrite, "executeWrite");
    function __PRIVATE_convertToDocSnapshot(e, t2, n2) {
      const r2 = n2.docs.get(t2._key), i = new __PRIVATE_ExpUserDataWriter(e);
      return new DocumentSnapshot(e, i, t2._key, r2, new SnapshotMetadata(n2.hasPendingWrites, n2.fromCache), t2.converter);
    }
    __name(__PRIVATE_convertToDocSnapshot, "__PRIVATE_convertToDocSnapshot");
    function getCountFromServer(e) {
      return getAggregateFromServer(e, {
        count: count()
      });
    }
    __name(getCountFromServer, "getCountFromServer");
    function getAggregateFromServer(e, t2) {
      const n2 = __PRIVATE_cast(e.firestore, Firestore), r2 = ensureFirestoreConfigured(n2), i = __PRIVATE_mapToArray(t2, (e2, t3) => new __PRIVATE_AggregateImpl(t3, e2.aggregateType, e2._internalFieldPath));
      return __PRIVATE_firestoreClientRunAggregateQuery(r2, e._query, i).then((t3) => (
        /**
        * Converts the core aggregation result to an `AggregateQuerySnapshot`
        * that can be returned to the consumer.
        * @param query
        * @param aggregateResult Core aggregation result
        * @internal
        */
        (/* @__PURE__ */ __name(function __PRIVATE_convertToAggregateQuerySnapshot(e2, t4, n3) {
          const r3 = new __PRIVATE_ExpUserDataWriter(e2), i2 = new AggregateQuerySnapshot(t4, r3, n3);
          return i2;
        }, "__PRIVATE_convertToAggregateQuerySnapshot"))(n2, e, t3)
      ));
    }
    __name(getAggregateFromServer, "getAggregateFromServer");
    var __PRIVATE_MemoryLocalCacheImpl = class {
      constructor(e) {
        this.kind = "memory", this._onlineComponentProvider = OnlineComponentProvider.provider, (null == e ? void 0 : e.garbageCollector) ? this._offlineComponentProvider = e.garbageCollector._offlineComponentProvider : this._offlineComponentProvider = {
          build: () => new __PRIVATE_LruGcMemoryOfflineComponentProvider(void 0)
        };
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
    };
    __name(__PRIVATE_MemoryLocalCacheImpl, "__PRIVATE_MemoryLocalCacheImpl");
    var __PRIVATE_PersistentLocalCacheImpl = class {
      constructor(e) {
        let t2;
        this.kind = "persistent", (null == e ? void 0 : e.tabManager) ? (e.tabManager._initialize(e), t2 = e.tabManager) : (t2 = persistentSingleTabManager(void 0), t2._initialize(e)), this._onlineComponentProvider = t2._onlineComponentProvider, this._offlineComponentProvider = t2._offlineComponentProvider;
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
    };
    __name(__PRIVATE_PersistentLocalCacheImpl, "__PRIVATE_PersistentLocalCacheImpl");
    var __PRIVATE_MemoryEagerGarbageCollectorImpl = class {
      constructor() {
        this.kind = "memoryEager", this._offlineComponentProvider = __PRIVATE_MemoryOfflineComponentProvider.provider;
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
    };
    __name(__PRIVATE_MemoryEagerGarbageCollectorImpl, "__PRIVATE_MemoryEagerGarbageCollectorImpl");
    var __PRIVATE_MemoryLruGarbageCollectorImpl = class {
      constructor(e) {
        this.kind = "memoryLru", this._offlineComponentProvider = {
          build: () => new __PRIVATE_LruGcMemoryOfflineComponentProvider(e)
        };
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
    };
    __name(__PRIVATE_MemoryLruGarbageCollectorImpl, "__PRIVATE_MemoryLruGarbageCollectorImpl");
    function memoryEagerGarbageCollector() {
      return new __PRIVATE_MemoryEagerGarbageCollectorImpl();
    }
    __name(memoryEagerGarbageCollector, "memoryEagerGarbageCollector");
    function memoryLruGarbageCollector(e) {
      return new __PRIVATE_MemoryLruGarbageCollectorImpl(null == e ? void 0 : e.cacheSizeBytes);
    }
    __name(memoryLruGarbageCollector, "memoryLruGarbageCollector");
    function memoryLocalCache(e) {
      return new __PRIVATE_MemoryLocalCacheImpl(e);
    }
    __name(memoryLocalCache, "memoryLocalCache");
    function persistentLocalCache(e) {
      return new __PRIVATE_PersistentLocalCacheImpl(e);
    }
    __name(persistentLocalCache, "persistentLocalCache");
    var __PRIVATE_SingleTabManagerImpl = class {
      constructor(e) {
        this.forceOwnership = e, this.kind = "persistentSingleTab";
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
      /**
       * @internal
       */
      _initialize(e) {
        this._onlineComponentProvider = OnlineComponentProvider.provider, this._offlineComponentProvider = {
          build: (t2) => new __PRIVATE_IndexedDbOfflineComponentProvider(t2, null == e ? void 0 : e.cacheSizeBytes, this.forceOwnership)
        };
      }
    };
    __name(__PRIVATE_SingleTabManagerImpl, "__PRIVATE_SingleTabManagerImpl");
    var __PRIVATE_MultiTabManagerImpl = class {
      constructor() {
        this.kind = "PersistentMultipleTab";
      }
      toJSON() {
        return {
          kind: this.kind
        };
      }
      /**
       * @internal
       */
      _initialize(e) {
        this._onlineComponentProvider = OnlineComponentProvider.provider, this._offlineComponentProvider = {
          build: (t2) => new __PRIVATE_MultiTabOfflineComponentProvider(t2, null == e ? void 0 : e.cacheSizeBytes)
        };
      }
    };
    __name(__PRIVATE_MultiTabManagerImpl, "__PRIVATE_MultiTabManagerImpl");
    function persistentSingleTabManager(e) {
      return new __PRIVATE_SingleTabManagerImpl(null == e ? void 0 : e.forceOwnership);
    }
    __name(persistentSingleTabManager, "persistentSingleTabManager");
    function persistentMultipleTabManager() {
      return new __PRIVATE_MultiTabManagerImpl();
    }
    __name(persistentMultipleTabManager, "persistentMultipleTabManager");
    var on = {
      maxAttempts: 5
    };
    var WriteBatch = class {
      /** @hideconstructor */
      constructor(e, t2) {
        this._firestore = e, this._commitHandler = t2, this._mutations = [], this._committed = false, this._dataReader = __PRIVATE_newUserDataReader(e);
      }
      set(e, t2, n2) {
        this._verifyNotCommitted();
        const r2 = __PRIVATE_validateReference(e, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(r2.converter, t2, n2), s2 = __PRIVATE_parseSetData(this._dataReader, "WriteBatch.set", r2._key, i, null !== r2.converter, n2);
        return this._mutations.push(s2.toMutation(r2._key, Precondition.none())), this;
      }
      update(e, t2, n2, ...r2) {
        this._verifyNotCommitted();
        const i = __PRIVATE_validateReference(e, this._firestore);
        let s2;
        return s2 = "string" == typeof (t2 = util.getModularInstance(t2)) || t2 instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, "WriteBatch.update", i._key, t2, n2, r2) : __PRIVATE_parseUpdateData(this._dataReader, "WriteBatch.update", i._key, t2), this._mutations.push(s2.toMutation(i._key, Precondition.exists(true))), this;
      }
      /**
       * Deletes the document referred to by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be deleted.
       * @returns This `WriteBatch` instance. Used for chaining method calls.
       */
      delete(e) {
        this._verifyNotCommitted();
        const t2 = __PRIVATE_validateReference(e, this._firestore);
        return this._mutations = this._mutations.concat(new __PRIVATE_DeleteMutation(t2._key, Precondition.none())), this;
      }
      /**
       * Commits all of the writes in this write batch as a single atomic unit.
       *
       * The result of these writes will only be reflected in document reads that
       * occur after the returned promise resolves. If the client is offline, the
       * write fails. If you would like to see local modifications or buffer writes
       * until the client is online, use the full Firestore SDK.
       *
       * @returns A `Promise` resolved once all of the writes in the batch have been
       * successfully written to the backend as an atomic unit (note that it won't
       * resolve while you're offline).
       */
      commit() {
        return this._verifyNotCommitted(), this._committed = true, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
      }
      _verifyNotCommitted() {
        if (this._committed)
          throw new FirestoreError(C.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
      }
    };
    __name(WriteBatch, "WriteBatch");
    function __PRIVATE_validateReference(e, t2) {
      if ((e = util.getModularInstance(e)).firestore !== t2)
        throw new FirestoreError(C.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
      return e;
    }
    __name(__PRIVATE_validateReference, "__PRIVATE_validateReference");
    var Transaction$1 = class {
      /** @hideconstructor */
      constructor(e, t2) {
        this._firestore = e, this._transaction = t2, this._dataReader = __PRIVATE_newUserDataReader(e);
      }
      /**
       * Reads the document referenced by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be read.
       * @returns A `DocumentSnapshot` with the read data.
       */
      get(e) {
        const t2 = __PRIVATE_validateReference(e, this._firestore), n2 = new __PRIVATE_LiteUserDataWriter(this._firestore);
        return this._transaction.lookup([t2._key]).then((e2) => {
          if (!e2 || 1 !== e2.length)
            return fail();
          const r2 = e2[0];
          if (r2.isFoundDocument())
            return new DocumentSnapshot$1(this._firestore, n2, r2.key, r2, t2.converter);
          if (r2.isNoDocument())
            return new DocumentSnapshot$1(this._firestore, n2, t2._key, null, t2.converter);
          throw fail();
        });
      }
      set(e, t2, n2) {
        const r2 = __PRIVATE_validateReference(e, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(r2.converter, t2, n2), s2 = __PRIVATE_parseSetData(this._dataReader, "Transaction.set", r2._key, i, null !== r2.converter, n2);
        return this._transaction.set(r2._key, s2), this;
      }
      update(e, t2, n2, ...r2) {
        const i = __PRIVATE_validateReference(e, this._firestore);
        let s2;
        return s2 = "string" == typeof (t2 = util.getModularInstance(t2)) || t2 instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, "Transaction.update", i._key, t2, n2, r2) : __PRIVATE_parseUpdateData(this._dataReader, "Transaction.update", i._key, t2), this._transaction.update(i._key, s2), this;
      }
      /**
       * Deletes the document referred to by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be deleted.
       * @returns This `Transaction` instance. Used for chaining method calls.
       */
      delete(e) {
        const t2 = __PRIVATE_validateReference(e, this._firestore);
        return this._transaction.delete(t2._key), this;
      }
    };
    __name(Transaction$1, "Transaction$1");
    var Transaction2 = class extends Transaction$1 {
      // This class implements the same logic as the Transaction API in the Lite SDK
      // but is subclassed in order to return its own DocumentSnapshot types.
      /** @hideconstructor */
      constructor(e, t2) {
        super(e, t2), this._firestore = e;
      }
      /**
       * Reads the document referenced by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be read.
       * @returns A `DocumentSnapshot` with the read data.
       */
      get(e) {
        const t2 = __PRIVATE_validateReference(e, this._firestore), n2 = new __PRIVATE_ExpUserDataWriter(this._firestore);
        return super.get(e).then((e2) => new DocumentSnapshot(this._firestore, n2, t2._key, e2._document, new SnapshotMetadata(
          /* hasPendingWrites= */
          false,
          /* fromCache= */
          false
        ), t2.converter));
      }
    };
    __name(Transaction2, "Transaction");
    function runTransaction(e, t2, n2) {
      e = __PRIVATE_cast(e, Firestore);
      const r2 = Object.assign(Object.assign({}, on), n2);
      !(/* @__PURE__ */ __name(function __PRIVATE_validateTransactionOptions(e2) {
        if (e2.maxAttempts < 1)
          throw new FirestoreError(C.INVALID_ARGUMENT, "Max attempts must be at least 1");
      }, "__PRIVATE_validateTransactionOptions"))(r2);
      return (/* @__PURE__ */ __name(function __PRIVATE_firestoreClientTransaction(e2, t3, n3) {
        const r3 = new __PRIVATE_Deferred();
        return e2.asyncQueue.enqueueAndForget(async () => {
          const i = await __PRIVATE_getDatastore(e2);
          new __PRIVATE_TransactionRunner(e2.asyncQueue, i, n3, t3, r3).Iu();
        }), r3.promise;
      }, "__PRIVATE_firestoreClientTransaction"))(ensureFirestoreConfigured(e), (n3) => t2(new Transaction2(e, n3)), r2);
    }
    __name(runTransaction, "runTransaction");
    function deleteField() {
      return new __PRIVATE_DeleteFieldValueImpl("deleteField");
    }
    __name(deleteField, "deleteField");
    function serverTimestamp() {
      return new __PRIVATE_ServerTimestampFieldValueImpl("serverTimestamp");
    }
    __name(serverTimestamp, "serverTimestamp");
    function arrayUnion(...e) {
      return new __PRIVATE_ArrayUnionFieldValueImpl("arrayUnion", e);
    }
    __name(arrayUnion, "arrayUnion");
    function arrayRemove(...e) {
      return new __PRIVATE_ArrayRemoveFieldValueImpl("arrayRemove", e);
    }
    __name(arrayRemove, "arrayRemove");
    function increment(e) {
      return new __PRIVATE_NumericIncrementFieldValueImpl("increment", e);
    }
    __name(increment, "increment");
    function vector(e) {
      return new VectorValue(e);
    }
    __name(vector, "vector");
    function writeBatch(e) {
      return ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), new WriteBatch(e, (t2) => executeWrite(e, t2));
    }
    __name(writeBatch, "writeBatch");
    function setIndexConfiguration(e, t2) {
      const n2 = ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore));
      if (!n2._uninitializedComponentsProvider || "memory" === n2._uninitializedComponentsProvider._offline.kind)
        return __PRIVATE_logWarn("Cannot enable indexes when persistence is disabled"), Promise.resolve();
      const r2 = (/* @__PURE__ */ __name(function __PRIVATE_parseIndexes(e2) {
        const t3 = "string" == typeof e2 ? (/* @__PURE__ */ __name(function __PRIVATE_tryParseJson(e3) {
          try {
            return JSON.parse(e3);
          } catch (e4) {
            throw new FirestoreError(C.INVALID_ARGUMENT, "Failed to parse JSON: " + (null == e4 ? void 0 : e4.message));
          }
        }, "__PRIVATE_tryParseJson"))(e2) : e2, n3 = [];
        if (Array.isArray(t3.indexes))
          for (const e3 of t3.indexes) {
            const t4 = __PRIVATE_tryGetString(e3, "collectionGroup"), r3 = [];
            if (Array.isArray(e3.fields))
              for (const t5 of e3.fields) {
                const e4 = __PRIVATE_fieldPathFromDotSeparatedString("setIndexConfiguration", __PRIVATE_tryGetString(t5, "fieldPath"));
                "CONTAINS" === t5.arrayConfig ? r3.push(new IndexSegment(
                  e4,
                  2
                  /* IndexKind.CONTAINS */
                )) : "ASCENDING" === t5.order ? r3.push(new IndexSegment(
                  e4,
                  0
                  /* IndexKind.ASCENDING */
                )) : "DESCENDING" === t5.order && r3.push(new IndexSegment(
                  e4,
                  1
                  /* IndexKind.DESCENDING */
                ));
              }
            n3.push(new FieldIndex(FieldIndex.UNKNOWN_ID, t4, r3, IndexState.empty()));
          }
        return n3;
      }, "__PRIVATE_parseIndexes"))(t2);
      return __PRIVATE_firestoreClientSetIndexConfiguration(n2, r2);
    }
    __name(setIndexConfiguration, "setIndexConfiguration");
    function __PRIVATE_tryGetString(e, t2) {
      if ("string" != typeof e[t2])
        throw new FirestoreError(C.INVALID_ARGUMENT, "Missing string value for: " + t2);
      return e[t2];
    }
    __name(__PRIVATE_tryGetString, "__PRIVATE_tryGetString");
    var PersistentCacheIndexManager = class {
      /** @hideconstructor */
      constructor(e) {
        this._firestore = e, /** A type string to uniquely identify instances of this class. */
        this.type = "PersistentCacheIndexManager";
      }
    };
    __name(PersistentCacheIndexManager, "PersistentCacheIndexManager");
    function getPersistentCacheIndexManager(e) {
      var t2;
      e = __PRIVATE_cast(e, Firestore);
      const n2 = _n.get(e);
      if (n2)
        return n2;
      if ("persistent" !== (null === (t2 = ensureFirestoreConfigured(e)._uninitializedComponentsProvider) || void 0 === t2 ? void 0 : t2._offline.kind))
        return null;
      const r2 = new PersistentCacheIndexManager(e);
      return _n.set(e, r2), r2;
    }
    __name(getPersistentCacheIndexManager, "getPersistentCacheIndexManager");
    function enablePersistentCacheIndexAutoCreation(e) {
      __PRIVATE_setPersistentCacheIndexAutoCreationEnabled(e, true);
    }
    __name(enablePersistentCacheIndexAutoCreation, "enablePersistentCacheIndexAutoCreation");
    function disablePersistentCacheIndexAutoCreation(e) {
      __PRIVATE_setPersistentCacheIndexAutoCreationEnabled(e, false);
    }
    __name(disablePersistentCacheIndexAutoCreation, "disablePersistentCacheIndexAutoCreation");
    function deleteAllPersistentCacheIndexes(e) {
      __PRIVATE_firestoreClientDeleteAllFieldIndexes(ensureFirestoreConfigured(e._firestore)).then((e2) => __PRIVATE_logDebug("deleting all persistent cache indexes succeeded")).catch((e2) => __PRIVATE_logWarn("deleting all persistent cache indexes failed", e2));
    }
    __name(deleteAllPersistentCacheIndexes, "deleteAllPersistentCacheIndexes");
    function __PRIVATE_setPersistentCacheIndexAutoCreationEnabled(e, t2) {
      __PRIVATE_firestoreClientSetPersistentCacheIndexAutoCreationEnabled(ensureFirestoreConfigured(e._firestore), t2).then((e2) => __PRIVATE_logDebug(`setting persistent cache index auto creation isEnabled=${t2} succeeded`)).catch((e2) => __PRIVATE_logWarn(`setting persistent cache index auto creation isEnabled=${t2} failed`, e2));
    }
    __name(__PRIVATE_setPersistentCacheIndexAutoCreationEnabled, "__PRIVATE_setPersistentCacheIndexAutoCreationEnabled");
    var _n = /* @__PURE__ */ new WeakMap();
    function _internalQueryToProtoQueryTarget(e) {
      var t2;
      const n2 = null === (t2 = ensureFirestoreConfigured(__PRIVATE_cast(e.firestore, Firestore))._onlineComponents) || void 0 === t2 ? void 0 : t2.datastore.serializer;
      return void 0 === n2 ? null : __PRIVATE_toQueryTarget(n2, __PRIVATE_queryToTarget(e._query)).ht;
    }
    __name(_internalQueryToProtoQueryTarget, "_internalQueryToProtoQueryTarget");
    function _internalAggregationQueryToProtoRunAggregationQueryRequest(e, t2) {
      var n2;
      const r2 = __PRIVATE_mapToArray(t2, (e2, t3) => new __PRIVATE_AggregateImpl(t3, e2.aggregateType, e2._internalFieldPath)), i = null === (n2 = ensureFirestoreConfigured(__PRIVATE_cast(e.firestore, Firestore))._onlineComponents) || void 0 === n2 ? void 0 : n2.datastore.serializer;
      return void 0 === i ? null : __PRIVATE_toRunAggregationQueryRequest(
        i,
        __PRIVATE_queryToAggregateTarget(e._query),
        r2,
        /* skipAliasing= */
        true
      ).request;
    }
    __name(_internalAggregationQueryToProtoRunAggregationQueryRequest, "_internalAggregationQueryToProtoRunAggregationQueryRequest");
    var TestingHooks = class {
      constructor() {
        throw new Error("instances of this class should not be created");
      }
      /**
       * Registers a callback to be notified when an existence filter mismatch
       * occurs in the Watch listen stream.
       *
       * The relative order in which callbacks are notified is unspecified; do not
       * rely on any particular ordering. If a given callback is registered multiple
       * times then it will be notified multiple times, once per registration.
       *
       * @param callback the callback to invoke upon existence filter mismatch.
       *
       * @return a function that, when called, unregisters the given callback; only
       * the first invocation of the returned function does anything; all subsequent
       * invocations do nothing.
       */
      static onExistenceFilterMismatch(e) {
        return __PRIVATE_TestingHooksSpiImpl.instance.onExistenceFilterMismatch(e);
      }
    };
    __name(TestingHooks, "TestingHooks");
    var __PRIVATE_TestingHooksSpiImpl = class {
      constructor() {
        this.Yu = /* @__PURE__ */ new Map();
      }
      static get instance() {
        return an || (an = new __PRIVATE_TestingHooksSpiImpl(), (/* @__PURE__ */ __name(function __PRIVATE_setTestingHooksSpi(e) {
          if (At)
            throw new Error("a TestingHooksSpi instance is already set");
          At = e;
        }, "__PRIVATE_setTestingHooksSpi"))(an)), an;
      }
      rt(e) {
        this.Yu.forEach((t2) => t2(e));
      }
      onExistenceFilterMismatch(e) {
        const t2 = Symbol(), n2 = this.Yu;
        return n2.set(t2, e), () => n2.delete(t2);
      }
    };
    __name(__PRIVATE_TestingHooksSpiImpl, "__PRIVATE_TestingHooksSpiImpl");
    var an = null;
    !(/* @__PURE__ */ __name(function __PRIVATE_registerFirestore(e, t2 = true) {
      !(/* @__PURE__ */ __name(function __PRIVATE_setSDKVersion(e2) {
        D = e2;
      }, "__PRIVATE_setSDKVersion"))(app.SDK_VERSION), app._registerComponent(new component.Component("firestore", (e2, { instanceIdentifier: n2, options: r2 }) => {
        const i = e2.getProvider("app").getImmediate(), s2 = new Firestore(new __PRIVATE_FirebaseAuthCredentialsProvider(e2.getProvider("auth-internal")), new __PRIVATE_FirebaseAppCheckTokenProvider(i, e2.getProvider("app-check-internal")), (/* @__PURE__ */ __name(function __PRIVATE_databaseIdFromApp(e3, t3) {
          if (!Object.prototype.hasOwnProperty.apply(e3.options, ["projectId"]))
            throw new FirestoreError(C.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
          return new DatabaseId(e3.options.projectId, t3);
        }, "__PRIVATE_databaseIdFromApp"))(i, n2), i);
        return r2 = Object.assign({
          useFetchStreams: t2
        }, r2), s2._setSettings(r2), s2;
      }, "PUBLIC").setMultipleInstances(true)), app.registerVersion(S, b, e), // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
      app.registerVersion(S, b, "cjs2017");
    }, "__PRIVATE_registerFirestore"))();
    exports.AbstractUserDataWriter = AbstractUserDataWriter;
    exports.AggregateField = AggregateField;
    exports.AggregateQuerySnapshot = AggregateQuerySnapshot;
    exports.Bytes = Bytes;
    exports.CACHE_SIZE_UNLIMITED = nn;
    exports.CollectionReference = CollectionReference;
    exports.DocumentReference = DocumentReference;
    exports.DocumentSnapshot = DocumentSnapshot;
    exports.FieldPath = FieldPath;
    exports.FieldValue = FieldValue;
    exports.Firestore = Firestore;
    exports.FirestoreError = FirestoreError;
    exports.GeoPoint = GeoPoint2;
    exports.LoadBundleTask = LoadBundleTask;
    exports.PersistentCacheIndexManager = PersistentCacheIndexManager;
    exports.Query = Query2;
    exports.QueryCompositeFilterConstraint = QueryCompositeFilterConstraint;
    exports.QueryConstraint = QueryConstraint;
    exports.QueryDocumentSnapshot = QueryDocumentSnapshot;
    exports.QueryEndAtConstraint = QueryEndAtConstraint;
    exports.QueryFieldFilterConstraint = QueryFieldFilterConstraint;
    exports.QueryLimitConstraint = QueryLimitConstraint;
    exports.QueryOrderByConstraint = QueryOrderByConstraint;
    exports.QuerySnapshot = QuerySnapshot;
    exports.QueryStartAtConstraint = QueryStartAtConstraint;
    exports.SnapshotMetadata = SnapshotMetadata;
    exports.Timestamp = Timestamp;
    exports.Transaction = Transaction2;
    exports.VectorValue = VectorValue;
    exports.WriteBatch = WriteBatch;
    exports._AutoId = __PRIVATE_AutoId;
    exports._ByteString = ByteString;
    exports._DatabaseId = DatabaseId;
    exports._DocumentKey = DocumentKey;
    exports._EmptyAppCheckTokenProvider = __PRIVATE_EmptyAppCheckTokenProvider;
    exports._EmptyAuthCredentialsProvider = __PRIVATE_EmptyAuthCredentialsProvider;
    exports._FieldPath = FieldPath$1;
    exports._TestingHooks = TestingHooks;
    exports._cast = __PRIVATE_cast;
    exports._debugAssert = __PRIVATE_debugAssert;
    exports._internalAggregationQueryToProtoRunAggregationQueryRequest = _internalAggregationQueryToProtoRunAggregationQueryRequest;
    exports._internalQueryToProtoQueryTarget = _internalQueryToProtoQueryTarget;
    exports._isBase64Available = __PRIVATE_isBase64Available;
    exports._logWarn = __PRIVATE_logWarn;
    exports._validateIsNotUsedTogether = __PRIVATE_validateIsNotUsedTogether;
    exports.addDoc = addDoc;
    exports.aggregateFieldEqual = aggregateFieldEqual;
    exports.aggregateQuerySnapshotEqual = aggregateQuerySnapshotEqual;
    exports.and = and;
    exports.arrayRemove = arrayRemove;
    exports.arrayUnion = arrayUnion;
    exports.average = average;
    exports.clearIndexedDbPersistence = clearIndexedDbPersistence;
    exports.collection = collection;
    exports.collectionGroup = collectionGroup;
    exports.connectFirestoreEmulator = connectFirestoreEmulator;
    exports.count = count;
    exports.deleteAllPersistentCacheIndexes = deleteAllPersistentCacheIndexes;
    exports.deleteDoc = deleteDoc;
    exports.deleteField = deleteField;
    exports.disableNetwork = disableNetwork;
    exports.disablePersistentCacheIndexAutoCreation = disablePersistentCacheIndexAutoCreation;
    exports.doc = doc;
    exports.documentId = documentId;
    exports.enableIndexedDbPersistence = enableIndexedDbPersistence;
    exports.enableMultiTabIndexedDbPersistence = enableMultiTabIndexedDbPersistence;
    exports.enableNetwork = enableNetwork;
    exports.enablePersistentCacheIndexAutoCreation = enablePersistentCacheIndexAutoCreation;
    exports.endAt = endAt;
    exports.endBefore = endBefore;
    exports.ensureFirestoreConfigured = ensureFirestoreConfigured;
    exports.executeWrite = executeWrite;
    exports.getAggregateFromServer = getAggregateFromServer;
    exports.getCountFromServer = getCountFromServer;
    exports.getDoc = getDoc;
    exports.getDocFromCache = getDocFromCache;
    exports.getDocFromServer = getDocFromServer;
    exports.getDocs = getDocs;
    exports.getDocsFromCache = getDocsFromCache;
    exports.getDocsFromServer = getDocsFromServer;
    exports.getFirestore = getFirestore;
    exports.getPersistentCacheIndexManager = getPersistentCacheIndexManager;
    exports.increment = increment;
    exports.initializeFirestore = initializeFirestore;
    exports.limit = limit;
    exports.limitToLast = limitToLast;
    exports.loadBundle = loadBundle;
    exports.memoryEagerGarbageCollector = memoryEagerGarbageCollector;
    exports.memoryLocalCache = memoryLocalCache;
    exports.memoryLruGarbageCollector = memoryLruGarbageCollector;
    exports.namedQuery = namedQuery;
    exports.onSnapshot = onSnapshot;
    exports.onSnapshotsInSync = onSnapshotsInSync;
    exports.or = or;
    exports.orderBy = orderBy;
    exports.persistentLocalCache = persistentLocalCache;
    exports.persistentMultipleTabManager = persistentMultipleTabManager;
    exports.persistentSingleTabManager = persistentSingleTabManager;
    exports.query = query;
    exports.queryEqual = queryEqual;
    exports.refEqual = refEqual;
    exports.runTransaction = runTransaction;
    exports.serverTimestamp = serverTimestamp;
    exports.setDoc = setDoc;
    exports.setIndexConfiguration = setIndexConfiguration;
    exports.setLogLevel = setLogLevel;
    exports.snapshotEqual = snapshotEqual;
    exports.startAfter = startAfter;
    exports.startAt = startAt;
    exports.sum = sum;
    exports.terminate = terminate;
    exports.updateDoc = updateDoc;
    exports.vector = vector;
    exports.waitForPendingWrites = waitForPendingWrites;
    exports.where = where;
    exports.writeBatch = writeBatch;
  }
});

// node_modules/firebase/firestore/dist/index.cjs.js
var require_index_cjs6 = __commonJS({
  "node_modules/firebase/firestore/dist/index.cjs.js"(exports) {
    "use strict";
    init_checked_fetch();
    init_modules_watch_stub();
    Object.defineProperty(exports, "__esModule", { value: true });
    var firestore = require_index_cjs5();
    Object.keys(firestore).forEach(function(k) {
      if (k !== "default" && !exports.hasOwnProperty(k))
        Object.defineProperty(exports, k, {
          enumerable: true,
          get: function() {
            return firestore[k];
          }
        });
    });
  }
});

// database/rest.js
var require_rest = __commonJS({
  "database/rest.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var { collection, addDoc, getDocs, doc, query, where } = require_index_cjs6();
    module.exports = {
      write: async (database2, itemId, user, type) => {
        try {
          const ref = database2.ref("recipies");
          const newRef = await ref.add({
            itemId,
            user,
            type
          });
          console.log("Document written with ID: ", newRef.id);
        } catch (e) {
          console.error("Error adding document: ", e);
        }
      },
      exists: async (database2, itemId, user) => {
        try {
          const ref = database2.ref("recipies");
          const query2 = ref.query({
            where: [["itemId", "==", itemId], ["user", "==", user]]
          });
          const results = await query2.run();
          return results.length > 0;
        } catch (e) {
          console.error(`Error adding document: '${itemId}' for user '${user}'`, e);
        }
      },
      getCrafters: async (database2, itemId) => {
        try {
          const ref = database2.ref("recipies");
          console.log(itemId);
          const query2 = ref.query({
            where: [["itemId", "==", itemId]]
          });
          const results = await query2.run();
          return results.map((e) => e.user);
        } catch (e) {
          console.error(`Error getting crafters for item: '${itemId}'`, e);
        }
      },
      getAllRecipies: async (database2) => {
        try {
          const q = database2.ref("recipies");
          const querySnapshot = await q.list();
          return querySnapshot.documents;
        } catch (e) {
          console.error(`Error getting all crafters for all recipies'`, e);
        }
      }
    };
  }
});

// commands/utility/formatting.js
var require_formatting = __commonJS({
  "commands/utility/formatting.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    module.exports = {
      bold: (content) => `**${content}**`,
      italic: (content) => `_${content}_`,
      underscore: (content) => `__${content}__`,
      mention: (userId) => `<@${userId}>`
    };
  }
});

// data/blacksmithing.json
var require_blacksmithing = __commonJS({
  "data/blacksmithing.json"(exports, module) {
    module.exports = [
      {
        cat: 11,
        colors: [1, 15, 35, 55],
        creates: [2862, 1, 1],
        id: 2660,
        learnedat: 1,
        level: 0,
        name: "Rough Sharpening Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[2835, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [35, 75, 95, 115],
        creates: [2851, 1, 1],
        id: 2661,
        learnedat: 35,
        level: 0,
        name: "Copper Chain Belt",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 6]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [1, 50, 70, 90],
        creates: [2852, 1, 1],
        id: 2662,
        learnedat: 1,
        level: 0,
        name: "Copper Chain Pants",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 4]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [1, 20, 40, 60],
        creates: [2853, 1, 1],
        id: 2663,
        learnedat: 1,
        level: 0,
        name: "Copper Bracers",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [90, 115, 127, 140],
        creates: [2854, 1, 1],
        id: 2664,
        learnedat: 90,
        level: 0,
        name: "Runed Copper Bracers",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 10], [3470, 3]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [65, 65, 72, 80],
        creates: [2863, 1, 1],
        id: 2665,
        learnedat: 65,
        level: 0,
        name: "Coarse Sharpening Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[2836, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [70, 110, 130, 150],
        creates: [2857, 1, 1],
        id: 2666,
        learnedat: 70,
        level: 0,
        name: "Runed Copper Belt",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 10]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [80, 120, 140, 160],
        creates: [2864, 1, 1],
        id: 2667,
        learnedat: 80,
        level: 0,
        name: "Runed Copper Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[2840, 12], [1210, 1], [3470, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [105, 145, 160, 175],
        creates: [2865, 1, 1],
        id: 2668,
        learnedat: 105,
        level: 0,
        name: "Rough Bronze Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 6]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [105, 145, 160, 175],
        creates: [2866, 1, 1],
        id: 2670,
        learnedat: 105,
        level: 0,
        name: "Rough Bronze Cuirass",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 7]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [120, 150, 165, 180],
        creates: [2868, 1, 1],
        id: 2672,
        learnedat: 120,
        level: 0,
        name: "Patterned Bronze Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 5], [3478, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [125, 125, 132, 140],
        creates: [2871, 1, 1],
        id: 2674,
        learnedat: 125,
        level: 0,
        name: "Heavy Sharpening Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[2838, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [145, 175, 190, 205],
        creates: [2870, 1, 1],
        id: 2675,
        learnedat: 145,
        level: 0,
        name: "Shining Silver Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[2841, 20], [1206, 2], [1705, 2], [5500, 2], [2842, 4]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [15, 55, 75, 95],
        creates: [2844, 1, 1],
        id: 2737,
        learnedat: 15,
        level: 0,
        name: "Copper Mace",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 6], [2880, 1], [2589, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [110, 140, 155, 170],
        creates: [2848, 1, 1],
        id: 2740,
        learnedat: 110,
        level: 0,
        name: "Bronze Mace",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 6], [2880, 4], [2319, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [115, 145, 160, 175],
        creates: [2849, 1, 1],
        id: 2741,
        learnedat: 115,
        level: 0,
        name: "Bronze Axe",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 7], [2880, 4], [2319, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [20, 60, 80, 100],
        creates: [2845, 1, 1],
        id: 2738,
        learnedat: 20,
        level: 0,
        name: "Copper Axe",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 6], [2880, 1], [2589, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [25, 65, 85, 105],
        creates: [2847, 1, 1],
        id: 2739,
        learnedat: 25,
        level: 0,
        name: "Copper Shortsword",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 6], [2880, 1], [2589, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [120, 150, 165, 180],
        creates: [2850, 1, 1],
        id: 2742,
        learnedat: 120,
        level: 0,
        name: "Bronze Shortsword",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 5], [2880, 4], [2319, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [1, 15, 35, 55],
        creates: [3239, 1, 1],
        id: 3115,
        learnedat: 1,
        level: 0,
        name: "Rough Weightstone",
        nskillup: 1,
        quality: 1,
        reagents: [[2835, 1], [2589, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [125, 125, 132, 140],
        creates: [3241, 1, 1],
        id: 3117,
        learnedat: 125,
        level: 0,
        name: "Heavy Weightstone",
        nskillup: 1,
        quality: 1,
        reagents: [[2838, 1], [2592, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [65, 65, 72, 80],
        creates: [3240, 1, 1],
        id: 3116,
        learnedat: 65,
        level: 0,
        name: "Coarse Weightstone",
        nskillup: 1,
        quality: 1,
        reagents: [[2836, 1], [2592, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [95, 135, 155, 175],
        creates: [3487, 1, 1],
        id: 3292,
        learnedat: 95,
        level: 0,
        name: "Heavy Copper Broadsword",
        nskillup: 1,
        quality: 2,
        reagents: [[2840, 14], [2880, 2], [818, 2], [2319, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [35, 75, 95, 115],
        creates: [3488, 1, 1],
        id: 3293,
        learnedat: 35,
        level: 0,
        name: "Copper Battle Axe",
        nskillup: 1,
        quality: 2,
        reagents: [[2840, 12], [2880, 2], [774, 2], [3470, 2], [2318, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [70, 110, 130, 150],
        creates: [3489, 1, 1],
        id: 3294,
        learnedat: 70,
        level: 0,
        name: "Thick War Axe",
        nskillup: 1,
        quality: 2,
        reagents: [[2840, 10], [2880, 2], [2842, 2], [3470, 2], [2318, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [125, 155, 170, 185],
        creates: [3490, 1, 1],
        id: 3295,
        learnedat: 125,
        level: 0,
        name: "Deadly Bronze Poniard",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 4], [3466, 1], [2459, 1], [1210, 2], [3478, 2], [2319, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [130, 160, 175, 190],
        creates: [3491, 1, 1],
        id: 3296,
        learnedat: 130,
        level: 0,
        name: "Heavy Bronze Mace",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 8], [3466, 1], [1206, 1], [1210, 1], [3478, 2], [2319, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [145, 175, 190, 205],
        creates: [3492, 1, 1],
        id: 3297,
        learnedat: 145,
        level: 0,
        name: "Mighty Iron Hammer",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 6], [3466, 2], [3391, 1], [1705, 2], [3478, 2], [2319, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [20, 60, 80, 100],
        creates: [3469, 1, 1],
        id: 3319,
        learnedat: 20,
        level: 0,
        name: "Copper Chain Boots",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 8]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [25, 45, 65, 85],
        creates: [3470, 1, 1],
        id: 3320,
        learnedat: 25,
        level: 0,
        name: "Rough Grinding Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[2835, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [35, 75, 95, 115],
        creates: [3471, 1, 1],
        id: 3321,
        learnedat: 35,
        level: 0,
        name: "Copper Chain Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[2840, 8], [774, 1], [3470, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [40, 80, 100, 120],
        creates: [3472, 1, 1],
        id: 3323,
        learnedat: 40,
        level: 0,
        name: "Runed Copper Gauntlets",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 8], [3470, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [45, 85, 105, 125],
        creates: [3473, 1, 1],
        id: 3324,
        learnedat: 45,
        level: 0,
        name: "Runed Copper Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[2840, 8], [2321, 2], [3470, 3]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [60, 100, 120, 140],
        creates: [3474, 1, 1],
        id: 3325,
        learnedat: 60,
        level: 0,
        name: "Gemmed Copper Gauntlets",
        nskillup: 1,
        quality: 2,
        reagents: [[2840, 8], [818, 1], [774, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [75, 75, 87, 100],
        creates: [3478, 1, 1],
        id: 3326,
        learnedat: 75,
        level: 0,
        name: "Coarse Grinding Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[2836, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [110, 140, 155, 170],
        creates: [3480, 1, 1],
        id: 3328,
        learnedat: 110,
        level: 0,
        name: "Rough Bronze Shoulders",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 5], [1210, 1], [3478, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [125, 155, 170, 185],
        creates: [3481, 1, 1],
        id: 3330,
        learnedat: 125,
        level: 0,
        name: "Silvered Bronze Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 8], [2842, 2], [3478, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [130, 160, 175, 190],
        creates: [3482, 1, 1],
        id: 3331,
        learnedat: 130,
        level: 0,
        name: "Silvered Bronze Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 6], [2842, 1], [3478, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [135, 165, 180, 195],
        creates: [3483, 1, 1],
        id: 3333,
        learnedat: 135,
        level: 0,
        name: "Silvered Bronze Gauntlets",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 8], [2842, 1], [3478, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [145, 175, 190, 205],
        creates: [3484, 1, 1],
        id: 3334,
        learnedat: 145,
        level: 0,
        name: "Green Iron Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 4], [1705, 2], [3478, 2], [2605, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [150, 180, 195, 210],
        creates: [3485, 1, 1],
        id: 3336,
        learnedat: 150,
        level: 0,
        name: "Green Iron Gauntlets",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 4], [5498, 2], [3478, 2], [2605, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [125, 125, 137, 150],
        creates: [3486, 1, 1],
        id: 3337,
        learnedat: 125,
        level: 0,
        name: "Heavy Grinding Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[2838, 3]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [105, 135, 150, 165],
        creates: [3848, 1, 1],
        id: 3491,
        learnedat: 105,
        level: 0,
        name: "Big Bronze Knife",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 6], [2880, 4], [3470, 2], [818, 1], [2319, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 600
      },
      {
        cat: 11,
        colors: [160, 185, 197, 210],
        creates: [3849, 1, 1],
        id: 3492,
        learnedat: 160,
        level: 0,
        name: "Hardened Iron Shortsword",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 6], [3466, 2], [3486, 1], [1705, 2], [4234, 3]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [175, 200, 212, 225],
        creates: [3850, 1, 1],
        id: 3493,
        learnedat: 175,
        level: 0,
        name: "Jade Serpentblade",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 8], [3466, 2], [3486, 2], [1529, 2], [4234, 3]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [155, 180, 192, 205],
        creates: [3851, 1, 1],
        id: 3494,
        learnedat: 155,
        level: 0,
        name: "Solid Iron Maul",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 8], [3466, 2], [3486, 1], [2842, 4], [4234, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [170, 195, 207, 220],
        creates: [3852, 1, 1],
        id: 3495,
        learnedat: 170,
        level: 0,
        name: "Golden Iron Destroyer",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 10], [3577, 4], [1705, 2], [3466, 2], [4234, 2], [3486, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [180, 205, 217, 230],
        creates: [3853, 1, 1],
        id: 3496,
        learnedat: 180,
        level: 0,
        name: "Moonsteel Broadsword",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 8], [3466, 2], [3486, 2], [1705, 3], [4234, 3]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [200, 225, 237, 250],
        creates: [3854, 1, 1],
        id: 3497,
        learnedat: 200,
        level: 0,
        name: "Frost Tiger Blade",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 8], [3466, 2], [3486, 2], [1529, 2], [3829, 1], [4234, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [185, 210, 222, 235],
        creates: [3855, 1, 1],
        id: 3498,
        learnedat: 185,
        level: 0,
        name: "Massive Iron Axe",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 14], [3466, 2], [3486, 2], [3577, 4], [4234, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [200, 225, 237, 250],
        creates: [3856, 1, 1],
        id: 3500,
        learnedat: 200,
        level: 0,
        name: "Shadow Crescent Axe",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 10], [3466, 2], [3486, 3], [3864, 2], [3824, 1], [4234, 3]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [165, 190, 202, 215],
        creates: [3835, 1, 1],
        id: 3501,
        learnedat: 165,
        level: 0,
        name: "Green Iron Bracers",
        nskillup: 1,
        quality: 1,
        reagents: [[3575, 6], [2605, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [170, 195, 207, 220],
        creates: [3836, 1, 1],
        id: 3502,
        learnedat: 170,
        level: 0,
        name: "Green Iron Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 12], [3864, 1], [2605, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1250
      },
      {
        cat: 11,
        colors: [190, 215, 227, 240],
        creates: [3837, 1, 1],
        id: 3503,
        learnedat: 190,
        level: 0,
        name: "Golden Scale Coif",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 8], [3577, 2], [3486, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [160, 185, 197, 210],
        creates: [3840, 1, 1],
        id: 3504,
        learnedat: 160,
        level: 0,
        name: "Green Iron Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 7], [3486, 1], [2605, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [175, 200, 212, 225],
        creates: [3841, 1, 1],
        id: 3505,
        learnedat: 175,
        level: 0,
        name: "Golden Scale Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 6], [3577, 2], [3486, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [155, 180, 192, 205],
        creates: [3842, 1, 1],
        id: 3506,
        learnedat: 155,
        level: 0,
        name: "Green Iron Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 8], [3486, 1], [2605, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [170, 195, 207, 220],
        creates: [3843, 1, 1],
        id: 3507,
        learnedat: 170,
        level: 0,
        name: "Golden Scale Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 10], [3577, 2], [3486, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [180, 205, 217, 230],
        creates: [3844, 1, 1],
        id: 3508,
        learnedat: 180,
        level: 0,
        name: "Green Iron Hauberk",
        nskillup: 1,
        quality: 3,
        reagents: [[3575, 20], [3486, 4], [1529, 2], [1206, 2], [4255, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 7500
      },
      {
        cat: 11,
        colors: [195, 220, 232, 245],
        creates: [3845, 1, 1],
        id: 3511,
        learnedat: 195,
        level: 0,
        name: "Golden Scale Cuirass",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 12], [3577, 2], [3486, 4], [1529, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [185, 210, 222, 235],
        creates: [3846, 1, 1],
        id: 3513,
        learnedat: 185,
        level: 0,
        name: "Polished Steel Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 8], [3864, 1], [1705, 1], [3486, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [200, 225, 237, 250],
        creates: [3847, 1, 1],
        id: 3515,
        learnedat: 200,
        level: 0,
        name: "Golden Scale Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 10], [3577, 4], [3486, 4], [3864, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [140, 170, 185, 200],
        creates: [5541, 1, 1],
        id: 6518,
        learnedat: 140,
        level: 0,
        name: "Iridescent Hammer",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 10], [3466, 1], [5500, 1], [3478, 2], [2319, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [110, 140, 155, 170],
        creates: [5540, 1, 1],
        id: 6517,
        learnedat: 110,
        level: 0,
        name: "Pearl-handled Dagger",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 6], [3466, 1], [5498, 2], [3478, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 800
      },
      {
        cat: 0,
        creates: [2867, 1, 1],
        id: 2671,
        level: 0,
        name: "Rough Bronze Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [130, 160, 175, 190],
        creates: [2869, 1, 1],
        id: 2673,
        learnedat: 130,
        level: 0,
        name: "Silvered Bronze Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 10], [2842, 2], [3478, 2], [1705, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [190, 215, 227, 240],
        creates: [6041, 1, 1],
        id: 7224,
        learnedat: 190,
        level: 0,
        name: "Steel Weapon Chain",
        nskillup: 1,
        quality: 1,
        reagents: [[3859, 8], [3486, 2], [4234, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [185, 210, 222, 235],
        creates: [6040, 1, 1],
        id: 7223,
        learnedat: 185,
        level: 0,
        name: "Golden Scale Bracers",
        nskillup: 1,
        quality: 1,
        reagents: [[3859, 5], [3486, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [150, 180, 195, 210],
        creates: [6042, 1, 1],
        id: 7221,
        learnedat: 150,
        level: 0,
        name: "Iron Shield Spike",
        nskillup: 1,
        quality: 1,
        reagents: [[3575, 6], [3478, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [165, 190, 202, 215],
        creates: [6043, 1, 1],
        id: 7222,
        learnedat: 165,
        level: 0,
        name: "Iron Counterweight",
        nskillup: 1,
        quality: 1,
        reagents: [[3575, 4], [3478, 2], [1705, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [65, 105, 125, 145],
        creates: [6214, 1, 1],
        id: 7408,
        learnedat: 65,
        level: 0,
        name: "Heavy Copper Maul",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 12], [2880, 2], [2318, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [95, 125, 140, 155],
        creates: [6350, 1, 1],
        id: 7817,
        learnedat: 95,
        level: 0,
        name: "Rough Bronze Boots",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 6], [3470, 6]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [100, 105, 107, 110],
        creates: [6338, 1, 1],
        id: 7818,
        learnedat: 100,
        level: 0,
        name: "Silver Rod",
        nskillup: 1,
        quality: 1,
        reagents: [[2842, 1], [3470, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 0,
        creates: [6730, 1, 1],
        id: 8366,
        level: 0,
        name: "Ironforge Chain",
        nskillup: 1,
        quality: 2,
        reagents: [[2840, 12], [774, 2], [3470, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [100, 140, 160, 180],
        creates: [6731, 1, 1],
        id: 8367,
        learnedat: 100,
        level: 0,
        name: "Ironforge Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[2840, 16], [818, 2], [3470, 3]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 0,
        creates: [6733, 1, 1],
        id: 8368,
        level: 0,
        name: "Ironforge Gauntlets",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 8], [1210, 3], [3478, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [150, 150, 152, 155],
        creates: [7071, 2, 2],
        id: 8768,
        learnedat: 150,
        level: 0,
        name: "Iron Buckle",
        nskillup: 1,
        quality: 1,
        reagents: [[3575, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [30, 70, 90, 110],
        creates: [7166, 1, 1],
        id: 8880,
        learnedat: 30,
        level: 0,
        name: "Copper Dagger",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 6], [2880, 1], [3470, 1], [2318, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [160, 185, 197, 210],
        creates: [7913, 1, 1],
        id: 9811,
        learnedat: 160,
        level: 0,
        name: "Barbaric Iron Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 8], [5635, 4], [1210, 2], [3486, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [160, 185, 197, 210],
        creates: [7914, 1, 1],
        id: 9813,
        learnedat: 160,
        level: 0,
        name: "Barbaric Iron Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 20], [3486, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [175, 200, 212, 225],
        creates: [7915, 1, 1],
        id: 9814,
        learnedat: 175,
        level: 0,
        name: "Barbaric Iron Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 10], [5637, 2], [5635, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [180, 205, 217, 230],
        creates: [7916, 1, 1],
        id: 9818,
        learnedat: 180,
        level: 0,
        name: "Barbaric Iron Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 12], [5637, 4], [818, 4], [3486, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [185, 210, 222, 235],
        creates: [7917, 1, 1],
        id: 9820,
        learnedat: 185,
        level: 0,
        name: "Barbaric Iron Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[3575, 14], [3486, 3], [5637, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [200, 225, 237, 250],
        creates: [7963, 1, 1],
        id: 9916,
        learnedat: 200,
        level: 0,
        name: "Steel Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 16], [3486, 3]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [200, 200, 205, 210],
        creates: [7964, 1, 1],
        id: 9918,
        learnedat: 200,
        level: 0,
        name: "Solid Sharpening Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[7912, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [200, 200, 205, 210],
        creates: [7965, 1, 1],
        id: 9921,
        learnedat: 200,
        level: 0,
        name: "Solid Weightstone",
        nskillup: 1,
        quality: 1,
        reagents: [[7912, 1], [4306, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [200, 200, 205, 210],
        creates: [7966, 1, 1],
        id: 9920,
        learnedat: 200,
        level: 0,
        name: "Solid Grinding Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[7912, 4]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [7918, 1, 1],
        id: 9926,
        learnedat: 205,
        level: 0,
        name: "Heavy Mithril Shoulder",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 8], [4234, 6]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [7919, 1, 1],
        id: 9928,
        learnedat: 205,
        level: 0,
        name: "Heavy Mithril Gauntlet",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 6], [4338, 4]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [210, 230, 240, 250],
        creates: [7920, 1, 1],
        id: 9931,
        learnedat: 210,
        level: 0,
        name: "Mithril Scale Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 12]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [210, 230, 240, 250],
        creates: [7921, 1, 1],
        id: 9933,
        learnedat: 210,
        level: 0,
        name: "Heavy Mithril Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 10], [1705, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [215, 235, 245, 255],
        creates: [7922, 1, 1],
        id: 9935,
        learnedat: 215,
        level: 0,
        name: "Steel Plate Helm",
        nskillup: 1,
        quality: 1,
        reagents: [[3859, 14], [7966, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [215, 235, 245, 255],
        creates: [7924, 1, 1],
        id: 9937,
        learnedat: 215,
        level: 0,
        name: "Mithril Scale Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 8], [3864, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [215, 235, 245, 255],
        creates: [7967, 1, 1],
        id: 9939,
        learnedat: 215,
        level: 0,
        name: "Mithril Shield Spike",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 4], [6037, 2], [7966, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 0,
        creates: [7925, 1, 1],
        id: 9942,
        level: 0,
        name: "Mithril Scale Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 8], [4234, 6], [4338, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [220, 240, 250, 260],
        creates: [7926, 1, 1],
        id: 9945,
        learnedat: 220,
        level: 0,
        name: "Ornate Mithril Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 12], [6037, 1], [7966, 1], [7909, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [220, 240, 250, 260],
        creates: [7927, 1, 1],
        id: 9950,
        learnedat: 220,
        level: 0,
        name: "Ornate Mithril Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 10], [4338, 6], [6037, 1], [7966, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [7928, 1, 1],
        id: 9952,
        learnedat: 225,
        level: 0,
        name: "Ornate Mithril Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 12], [6037, 1], [4304, 6]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [7938, 1, 1],
        id: 9954,
        learnedat: 225,
        level: 0,
        name: "Truesilver Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[3860, 10], [6037, 8], [7909, 3], [3864, 3], [5966, 1], [7966, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        specialization: 9788,
        trainingcost: 9e3
      },
      {
        cat: 11,
        colors: [230, 250, 260, 270],
        creates: [7929, 1, 1],
        id: 9957,
        learnedat: 230,
        level: 0,
        name: "Orcish War Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 12], [7067, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [230, 250, 260, 270],
        creates: [7930, 1, 1],
        id: 9959,
        learnedat: 230,
        level: 0,
        name: "Heavy Mithril Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 16]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 15e3
      },
      {
        cat: 11,
        colors: [230, 250, 260, 270],
        creates: [7931, 1, 1],
        id: 9961,
        learnedat: 230,
        level: 0,
        name: "Mithril Coif",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 10], [4338, 6]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 15e3
      },
      {
        cat: 11,
        colors: [235, 255, 265, 275],
        creates: [7969, 1, 1],
        id: 9964,
        learnedat: 235,
        level: 0,
        name: "Mithril Spurs",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 4], [7966, 3]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [235, 255, 265, 275],
        creates: [7932, 1, 1],
        id: 9966,
        learnedat: 235,
        level: 0,
        name: "Mithril Scale Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 14], [4304, 4], [3864, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [235, 255, 265, 275],
        creates: [7933, 1, 1],
        id: 9968,
        learnedat: 235,
        level: 0,
        name: "Heavy Mithril Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 14], [4304, 4]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 2e4
      },
      {
        cat: 11,
        colors: [245, 255, 265, 275],
        creates: [7934, 1, 1],
        id: 9970,
        learnedat: 245,
        level: 0,
        name: "Heavy Mithril Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 14], [7909, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [240, 260, 270, 280],
        creates: [7935, 1, 1],
        id: 9972,
        learnedat: 240,
        level: 0,
        name: "Ornate Mithril Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 16], [6037, 6], [7077, 1], [7966, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [245, 265, 275, 285],
        creates: [7939, 1, 1],
        id: 9974,
        learnedat: 245,
        level: 0,
        name: "Truesilver Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[3860, 12], [6037, 24], [7910, 4], [7971, 4], [7966, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        specialization: 9788,
        trainingcost: 9e3
      },
      {
        cat: 11,
        colors: [245, 265, 275, 285],
        creates: [7936, 1, 1],
        id: 9979,
        learnedat: 245,
        level: 0,
        name: "Ornate Mithril Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 14], [6037, 2], [4304, 4], [7966, 1], [7909, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [245, 265, 275, 285],
        creates: [7937, 1, 1],
        id: 9980,
        learnedat: 245,
        level: 0,
        name: "Ornate Mithril Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 16], [6037, 2], [7971, 1], [7966, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [30, 70, 90, 110],
        creates: [7955, 1, 1],
        id: 9983,
        learnedat: 30,
        level: 0,
        name: "Copper Claymore",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 10], [2880, 2], [3470, 1], [2318, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [125, 155, 170, 185],
        creates: [7956, 1, 1],
        id: 9985,
        learnedat: 125,
        level: 0,
        name: "Bronze Warhammer",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 8], [3466, 1], [2319, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [130, 160, 175, 190],
        creates: [7957, 1, 1],
        id: 9986,
        learnedat: 130,
        level: 0,
        name: "Bronze Greatsword",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 12], [3466, 2], [2319, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [135, 165, 180, 195],
        creates: [7958, 1, 1],
        id: 9987,
        learnedat: 135,
        level: 0,
        name: "Bronze Battle Axe",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 14], [3466, 1], [2319, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [210, 235, 247, 260],
        creates: [7941, 1, 1],
        id: 9993,
        learnedat: 210,
        level: 0,
        name: "Heavy Mithril Axe",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 12], [3864, 2], [7966, 1], [4234, 4]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [220, 245, 257, 270],
        creates: [7942, 1, 1],
        id: 9995,
        learnedat: 220,
        level: 0,
        name: "Blue Glittering Axe",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 16], [7909, 2], [7966, 1], [4304, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [225, 250, 262, 275],
        creates: [7943, 1, 1],
        id: 9997,
        learnedat: 225,
        level: 0,
        name: "Wicked Mithril Blade",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 14], [6037, 4], [7966, 1], [4304, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [230, 255, 267, 280],
        creates: [7945, 1, 1],
        id: 10001,
        learnedat: 230,
        level: 0,
        name: "Big Black Mace",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 16], [7971, 1], [1210, 4], [7966, 1], [4304, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 15e3
      },
      {
        cat: 11,
        colors: [235, 260, 272, 285],
        creates: [7954, 1, 1],
        id: 10003,
        learnedat: 235,
        level: 0,
        name: "The Shatterer",
        nskillup: 1,
        quality: 3,
        reagents: [[3860, 24], [7075, 4], [6037, 6], [3864, 5], [1529, 5], [7966, 4], [4304, 4]],
        schools: 1,
        skill: [164],
        source: [6],
        specialization: 9787,
        trainingcost: 13500
      },
      {
        cat: 11,
        colors: [240, 265, 277, 290],
        creates: [7944, 1, 1],
        id: 10005,
        learnedat: 240,
        level: 0,
        name: "Dazzling Mithril Rapier",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 14], [7909, 1], [1705, 2], [1206, 2], [7966, 1], [4338, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [245, 270, 282, 295],
        creates: [7961, 1, 1],
        id: 10007,
        learnedat: 245,
        level: 0,
        name: "Phantom Blade",
        nskillup: 1,
        quality: 3,
        reagents: [[3860, 28], [7081, 6], [6037, 8], [3823, 2], [7909, 6], [7966, 4], [4304, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        specialization: 9787,
        trainingcost: 13500
      },
      {
        cat: 11,
        colors: [245, 270, 282, 295],
        creates: [7946, 1, 1],
        id: 10009,
        learnedat: 245,
        level: 0,
        name: "Runed Mithril Hammer",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 18], [7075, 2], [7966, 1], [4304, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [250, 275, 287, 300],
        creates: [7959, 1, 1],
        id: 10011,
        learnedat: 250,
        level: 0,
        name: "Blight",
        nskillup: 1,
        quality: 3,
        reagents: [[3860, 28], [7972, 10], [6037, 10], [7966, 6], [4304, 6]],
        schools: 1,
        skill: [164],
        source: [6],
        specialization: 9787,
        trainingcost: 13500
      },
      {
        cat: 11,
        colors: [255, 280, 292, 305],
        creates: [7947, 1, 1],
        id: 10013,
        learnedat: 255,
        level: 0,
        name: "Ebon Shiv",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 12], [6037, 6], [7910, 2], [7966, 1], [4304, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [260, 285, 297, 310],
        creates: [7960, 1, 1],
        id: 10015,
        learnedat: 260,
        level: 0,
        name: "Truesilver Champion",
        nskillup: 1,
        quality: 3,
        reagents: [[3860, 30], [6037, 16], [7910, 6], [7081, 4], [7966, 8], [4304, 6]],
        schools: 1,
        skill: [164],
        source: [6],
        specialization: 9787,
        trainingcost: 13500
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [9366, 1, 1],
        id: 11643,
        learnedat: 205,
        level: 0,
        name: "Golden Scale Gauntlets",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 10], [3577, 4], [3486, 4], [3864, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [1, 15, 35, 55],
        creates: [10421, 1, 1],
        id: 12260,
        learnedat: 1,
        level: 0,
        name: "Rough Copper Vest",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [155, 180, 192, 205],
        creates: [10423, 1, 1],
        id: 12259,
        learnedat: 155,
        level: 0,
        name: "Silvered Bronze Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 12], [2842, 4], [3478, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [200, 225, 237, 250],
        creates: [9060, 1, 1],
        id: 11454,
        learnedat: 200,
        level: 0,
        name: "Inlaid Mithril Cylinder",
        nskillup: 1,
        quality: 1,
        reagents: [[3860, 5], [3577, 1], [6037, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [150, 155, 157, 160],
        creates: [11128, 1, 1],
        id: 14379,
        learnedat: 150,
        level: 0,
        name: "Golden Rod",
        nskillup: 1,
        quality: 1,
        reagents: [[3577, 1], [3478, 2]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [200, 205, 207, 210],
        creates: [11144, 1, 1],
        id: 14380,
        learnedat: 200,
        level: 0,
        name: "Truesilver Rod",
        nskillup: 1,
        quality: 1,
        reagents: [[6037, 1], [3486, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [11604, 1, 1],
        id: 15296,
        learnedat: 285,
        level: 0,
        name: "Dark Iron Plate",
        nskillup: 1,
        quality: 3,
        reagents: [[11371, 20], [7077, 8]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [11606, 1, 1],
        id: 15293,
        learnedat: 270,
        level: 0,
        name: "Dark Iron Mail",
        nskillup: 1,
        quality: 2,
        reagents: [[11371, 10], [7077, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [265, 285, 295, 305],
        creates: [11608, 1, 1],
        id: 15292,
        learnedat: 265,
        level: 0,
        name: "Dark Iron Pulverizer",
        nskillup: 1,
        quality: 3,
        reagents: [[11371, 18], [7077, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [11607, 1, 1],
        id: 15294,
        learnedat: 275,
        level: 0,
        name: "Dark Iron Sunderer",
        nskillup: 1,
        quality: 3,
        reagents: [[11371, 26], [7077, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [280, 300, 310, 320],
        creates: [11605, 1, 1],
        id: 15295,
        learnedat: 280,
        level: 0,
        name: "Dark Iron Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[11371, 6], [7077, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [180, 205, 217, 230],
        creates: [12259, 1, 1],
        id: 15972,
        learnedat: 180,
        level: 0,
        name: "Glinting Steel Dagger",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 10], [3466, 2], [1206, 1], [7067, 1], [4234, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 7500
      },
      {
        cat: 11,
        colors: [190, 215, 227, 240],
        creates: [12260, 1, 1],
        id: 15973,
        learnedat: 190,
        level: 0,
        name: "Searing Golden Blade",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 10], [3577, 4], [7068, 2], [4234, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [250, 255, 257, 260],
        creates: [12404, 1, 1],
        id: 16641,
        learnedat: 250,
        level: 0,
        name: "Dense Sharpening Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[12365, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [250, 255, 257, 260],
        creates: [12643, 1, 1],
        id: 16640,
        learnedat: 250,
        level: 0,
        name: "Dense Weightstone",
        nskillup: 1,
        quality: 1,
        reagents: [[12365, 1], [14047, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [250, 255, 257, 260],
        creates: [12644, 1, 1],
        id: 16639,
        learnedat: 250,
        level: 0,
        name: "Dense Grinding Stone",
        nskillup: 1,
        quality: 1,
        reagents: [[12365, 4]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [250, 270, 280, 290],
        creates: [12405, 1, 1],
        id: 16642,
        learnedat: 250,
        level: 0,
        name: "Thorium Armor",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 16], [12361, 1], [11188, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [250, 270, 280, 290],
        creates: [12406, 1, 1],
        id: 16643,
        learnedat: 250,
        level: 0,
        name: "Thorium Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 12], [11186, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [255, 275, 285, 295],
        creates: [12408, 1, 1],
        id: 16644,
        learnedat: 255,
        level: 0,
        name: "Thorium Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 12], [11184, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [260, 280, 290, 300],
        creates: [12416, 1, 1],
        id: 16645,
        learnedat: 260,
        level: 0,
        name: "Radiant Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 10], [7077, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [265, 285, 295, 305],
        creates: [12428, 1, 1],
        id: 16646,
        learnedat: 265,
        level: 0,
        name: "Imperial Plate Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 24], [8170, 6], [3864, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [265, 285, 295, 305],
        creates: [12424, 1, 1],
        id: 16647,
        learnedat: 265,
        level: 0,
        name: "Imperial Plate Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 22], [8170, 6], [7909, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [12415, 1, 1],
        id: 16648,
        learnedat: 270,
        level: 0,
        name: "Radiant Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 18], [7077, 2], [7910, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [12425, 1, 1],
        id: 16649,
        learnedat: 270,
        level: 0,
        name: "Imperial Plate Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 20], [7910, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [12624, 1, 1],
        id: 16650,
        learnedat: 270,
        level: 0,
        name: "Wildthorn Mail",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 40], [12655, 2], [12803, 4], [8153, 4], [12364, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [12645, 1, 1],
        id: 16651,
        learnedat: 275,
        level: 0,
        name: "Thorium Shield Spike",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 4], [12644, 4], [7076, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [280, 300, 310, 320],
        creates: [12409, 1, 1],
        id: 16652,
        learnedat: 280,
        level: 0,
        name: "Thorium Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 20], [8170, 8], [11185, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [280, 300, 310, 320],
        creates: [12410, 1, 1],
        id: 16653,
        learnedat: 280,
        level: 0,
        name: "Thorium Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 24], [7910, 1], [11188, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [12418, 1, 1],
        id: 16654,
        learnedat: 285,
        level: 0,
        name: "Radiant Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 18], [7077, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [12628, 1, 1],
        id: 16667,
        learnedat: 285,
        level: 0,
        name: "Demon Forged Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 40], [12662, 10], [12361, 4], [7910, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [12419, 1, 1],
        id: 16656,
        learnedat: 290,
        level: 0,
        name: "Radiant Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 14], [7077, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [12625, 1, 1],
        id: 16660,
        learnedat: 290,
        level: 0,
        name: "Dawnbringer Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 20], [12360, 4], [12364, 2], [7080, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [12631, 1, 1],
        id: 16655,
        learnedat: 290,
        level: 0,
        name: "Fiery Plate Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 20], [12655, 6], [7078, 2], [7910, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [12426, 1, 1],
        id: 16657,
        learnedat: 295,
        level: 0,
        name: "Imperial Plate Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 34], [7910, 1], [7909, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [12427, 1, 1],
        id: 16658,
        learnedat: 295,
        level: 0,
        name: "Imperial Plate Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 34], [7910, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [12417, 1, 1],
        id: 16659,
        learnedat: 295,
        level: 0,
        name: "Radiant Circlet",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 18], [7077, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12414, 1, 1],
        id: 16662,
        learnedat: 300,
        level: 0,
        name: "Thorium Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 26], [11186, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12422, 1, 1],
        id: 16663,
        learnedat: 300,
        level: 0,
        name: "Imperial Plate Chest",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 40], [7910, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12610, 1, 1],
        id: 16664,
        learnedat: 300,
        level: 0,
        name: "Runic Plate Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 20], [12360, 2], [3577, 6]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12611, 1, 1],
        id: 16665,
        learnedat: 300,
        level: 0,
        name: "Runic Plate Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 20], [12360, 2], [2842, 10]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12633, 1, 1],
        id: 16724,
        learnedat: 300,
        level: 0,
        name: "Whitesoul Helm",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 20], [12655, 4], [6037, 6], [3577, 6], [12800, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12420, 1, 1],
        id: 16725,
        learnedat: 300,
        level: 0,
        name: "Radiant Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 20], [7077, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12612, 1, 1],
        id: 16726,
        learnedat: 300,
        level: 0,
        name: "Runic Plate Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 30], [12360, 2], [6037, 2], [12364, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12429, 1, 1],
        id: 16730,
        learnedat: 300,
        level: 0,
        name: "Imperial Plate Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 44], [7910, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12636, 1, 1],
        id: 16728,
        learnedat: 300,
        level: 0,
        name: "Helm of the Great Chief",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 40], [12655, 4], [8168, 60], [12799, 6], [12364, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12640, 1, 1],
        id: 16729,
        learnedat: 300,
        level: 0,
        name: "Lionheart Helm",
        nskillup: 1,
        quality: 4,
        reagents: [[12359, 80], [12360, 12], [8146, 40], [12361, 10], [12800, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12613, 1, 1],
        id: 16731,
        learnedat: 300,
        level: 0,
        name: "Runic Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 40], [12360, 2], [7910, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12614, 1, 1],
        id: 16732,
        learnedat: 300,
        level: 0,
        name: "Runic Plate Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 40], [12360, 2], [7910, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12639, 1, 1],
        id: 16741,
        learnedat: 300,
        level: 0,
        name: "Stronghold Gauntlets",
        nskillup: 1,
        quality: 4,
        reagents: [[12360, 15], [12655, 20], [7076, 10], [12361, 4], [12799, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12620, 1, 1],
        id: 16742,
        learnedat: 300,
        level: 0,
        name: "Enchanted Thorium Helm",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 6], [12655, 16], [7076, 6], [12799, 2], [12800, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12619, 1, 1],
        id: 16744,
        learnedat: 300,
        level: 0,
        name: "Enchanted Thorium Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 10], [12655, 20], [7080, 6], [12361, 2], [12364, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12618, 1, 1],
        id: 16745,
        learnedat: 300,
        level: 0,
        name: "Enchanted Thorium Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 8], [12655, 24], [7076, 4], [7080, 4], [12364, 2], [12800, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12641, 1, 1],
        id: 16746,
        learnedat: 300,
        level: 0,
        name: "Invulnerable Mail",
        nskillup: 1,
        quality: 4,
        reagents: [[12360, 30], [12655, 30], [12364, 6], [12800, 6]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 0,
        creates: [12764, 1, 1],
        id: 16960,
        level: 0,
        name: "Thorium Greatsword",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 16], [12644, 2], [8170, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 0,
        creates: [12769, 1, 1],
        id: 16965,
        level: 0,
        name: "Bleakwood Hew",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 30], [12803, 6], [8153, 6], [12799, 6], [12644, 2], [8170, 8]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 0,
        creates: [12772, 1, 1],
        id: 16967,
        level: 0,
        name: "Inlaid Thorium Hammer",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 30], [3577, 4], [6037, 2], [12361, 2], [8170, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [275, 300, 312, 325],
        creates: [12773, 1, 1],
        id: 16969,
        learnedat: 275,
        level: 0,
        name: "Ornate Thorium Handaxe",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 20], [12799, 2], [12644, 2], [8170, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [275, 300, 312, 325],
        creates: [12774, 1, 1],
        id: 16970,
        learnedat: 275,
        level: 0,
        name: "Dawn's Edge",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 30], [12655, 4], [7910, 4], [12361, 4], [12644, 2], [8170, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [280, 305, 317, 330],
        creates: [12775, 1, 1],
        id: 16971,
        learnedat: 280,
        level: 0,
        name: "Huge Thorium Battleaxe",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 40], [12644, 6], [8170, 6]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [280, 305, 317, 330],
        creates: [12776, 1, 1],
        id: 16973,
        learnedat: 280,
        level: 0,
        name: "Enchanted Battlehammer",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 20], [12655, 6], [12364, 2], [12804, 4], [8170, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [280, 305, 317, 330],
        creates: [12777, 1, 1],
        id: 16978,
        learnedat: 280,
        level: 0,
        name: "Blazing Rapier",
        nskillup: 1,
        quality: 3,
        reagents: [[12655, 10], [7078, 4], [7077, 4], [12800, 2], [12644, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 0,
        creates: [12779, 1, 1],
        id: 16980,
        level: 0,
        name: "Rune Edge",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 30], [12799, 2], [12644, 2], [8170, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [285, 310, 322, 335],
        creates: [12781, 1, 1],
        id: 16983,
        learnedat: 285,
        level: 0,
        name: "Serenity",
        nskillup: 1,
        quality: 3,
        reagents: [[12655, 6], [12360, 2], [12804, 4], [12799, 2], [12361, 2], [12364, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [290, 315, 327, 340],
        creates: [12792, 1, 1],
        id: 16984,
        learnedat: 290,
        level: 0,
        name: "Volcanic Hammer",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 30], [7077, 4], [7910, 4], [8170, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [290, 315, 327, 340],
        creates: [12782, 1, 1],
        id: 16985,
        learnedat: 290,
        level: 0,
        name: "Corruption",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 40], [12360, 2], [12662, 16], [12808, 8], [12361, 2], [12644, 2], [8170, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 0,
        creates: [12795, 1, 1],
        id: 16986,
        level: 0,
        name: "Blood Talon",
        nskillup: 1,
        quality: 3,
        reagents: [[12655, 10], [12360, 10], [12662, 8], [7910, 10], [12644, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 0,
        creates: [12802, 1, 1],
        id: 16987,
        level: 0,
        name: "Darkspear",
        nskillup: 1,
        quality: 3,
        reagents: [[12655, 20], [12804, 20], [12364, 2], [12800, 2], [12644, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12796, 1, 1],
        id: 16988,
        learnedat: 300,
        level: 0,
        name: "Hammer of the Titans",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 50], [12360, 15], [12809, 4], [12810, 6], [7076, 10]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12790, 1, 1],
        id: 16990,
        learnedat: 300,
        level: 0,
        name: "Arcanite Champion",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 15], [12800, 8], [12811, 1], [12799, 4], [12810, 8], [12644, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12798, 1, 1],
        id: 16991,
        learnedat: 300,
        level: 0,
        name: "Annihilator",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 40], [12360, 12], [12808, 10], [12364, 8], [12644, 2], [12810, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12797, 1, 1],
        id: 16992,
        learnedat: 300,
        level: 0,
        name: "Frostguard",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 18], [12361, 8], [12800, 8], [7080, 4], [12644, 2], [12810, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12794, 1, 1],
        id: 16993,
        learnedat: 300,
        level: 0,
        name: "Masterwork Stormhammer",
        nskillup: 1,
        quality: 3,
        reagents: [[12655, 20], [12364, 8], [12799, 8], [7076, 6], [12810, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12784, 1, 1],
        id: 16994,
        learnedat: 300,
        level: 0,
        name: "Arcanite Reaper",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 20], [12810, 6], [12644, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [12783, 1, 1],
        id: 16995,
        learnedat: 300,
        level: 0,
        name: "Heartseeker",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 10], [12655, 10], [12810, 2], [7910, 6], [12800, 6], [12799, 6], [12644, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [12632, 1, 1],
        id: 16661,
        learnedat: 295,
        level: 0,
        name: "Storm Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 20], [12655, 4], [7080, 4], [12361, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [100, 100, 110, 120],
        creates: [15869, 2, 2],
        id: 19666,
        learnedat: 100,
        level: 0,
        name: "Silver Skeleton Key",
        nskillup: 1,
        quality: 2,
        reagents: [[2842, 1], [3470, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [150, 150, 160, 170],
        creates: [15870, 2, 2],
        id: 19667,
        learnedat: 150,
        level: 0,
        name: "Golden Skeleton Key",
        nskillup: 1,
        quality: 2,
        reagents: [[3577, 1], [3486, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [200, 200, 210, 220],
        creates: [15871, 2, 2],
        id: 19668,
        learnedat: 200,
        level: 0,
        name: "Truesilver Skeleton Key",
        nskillup: 1,
        quality: 2,
        reagents: [[6037, 1], [7966, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [275, 275, 280, 285],
        creates: [15872, 2, 2],
        id: 19669,
        learnedat: 275,
        level: 0,
        name: "Arcanite Skeleton Key",
        nskillup: 1,
        quality: 2,
        reagents: [[12360, 1], [12644, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [275, 275, 280, 285],
        creates: [16206, 1, 1],
        id: 20201,
        learnedat: 275,
        level: 0,
        name: "Arcanite Rod",
        nskillup: 1,
        quality: 1,
        reagents: [[12360, 3], [12644, 1]],
        schools: 1,
        skill: [164],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [17014, 1, 1],
        id: 20874,
        learnedat: 295,
        level: 0,
        name: "Dark Iron Bracers",
        nskillup: 1,
        quality: 4,
        reagents: [[11371, 4], [17010, 2], [17011, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [16989, 1, 1],
        id: 20872,
        learnedat: 295,
        level: 0,
        name: "Fiery Chain Girdle",
        nskillup: 1,
        quality: 4,
        reagents: [[11371, 6], [17010, 3], [17011, 3]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [17013, 1, 1],
        id: 20876,
        learnedat: 300,
        level: 0,
        name: "Dark Iron Leggings",
        nskillup: 1,
        quality: 4,
        reagents: [[11371, 16], [17010, 4], [17011, 6]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [16988, 1, 1],
        id: 20873,
        learnedat: 300,
        level: 0,
        name: "Fiery Chain Shoulders",
        nskillup: 1,
        quality: 4,
        reagents: [[11371, 16], [17010, 4], [17011, 5]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [17016, 1, 1],
        id: 20897,
        learnedat: 300,
        level: 0,
        name: "Dark Iron Destroyer",
        nskillup: 1,
        quality: 3,
        reagents: [[11371, 18], [17011, 12], [11382, 2], [12810, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [17015, 1, 1],
        id: 20890,
        learnedat: 300,
        level: 0,
        name: "Dark Iron Reaver",
        nskillup: 1,
        quality: 3,
        reagents: [[11371, 16], [17010, 12], [11382, 2], [12810, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 325, 337, 350],
        creates: [17193, 1, 1],
        id: 21161,
        learnedat: 300,
        level: 0,
        name: "Sulfuron Hammer",
        nskillup: 1,
        quality: 4,
        reagents: [[17203, 8], [11371, 20], [12360, 50], [7078, 25], [11382, 10], [17011, 10], [17010, 10]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [190, 215, 227, 240],
        creates: [17704, 1, 1],
        id: 21913,
        learnedat: 190,
        level: 0,
        name: "Edge of Winter",
        nskillup: 1,
        quality: 2,
        reagents: [[3859, 10], [3829, 1], [7070, 2], [7069, 2], [4234, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 300, 310, 320],
        creates: [18262, 1, 1],
        id: 22757,
        learnedat: 300,
        level: 0,
        name: "Elemental Sharpening Stone",
        nskillup: 1,
        quality: 2,
        reagents: [[7067, 2], [12365, 3]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [19043, 1, 1],
        id: 23628,
        learnedat: 290,
        level: 0,
        name: "Heavy Timbermaw Belt",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 12], [7076, 3], [12803, 3]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19048, 1, 1],
        id: 23629,
        learnedat: 300,
        level: 0,
        name: "Heavy Timbermaw Boots",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 4], [7076, 6], [12803, 6]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [19051, 1, 1],
        id: 23632,
        learnedat: 290,
        level: 0,
        name: "Girdle of the Dawn",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 8], [6037, 6], [12811, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19057, 1, 1],
        id: 23633,
        learnedat: 300,
        level: 0,
        name: "Gloves of the Dawn",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 2], [6037, 10], [12811, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19148, 1, 1],
        id: 23636,
        learnedat: 300,
        level: 0,
        name: "Dark Iron Helm",
        nskillup: 1,
        quality: 4,
        reagents: [[17011, 4], [17010, 2], [11371, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19164, 1, 1],
        id: 23637,
        learnedat: 300,
        level: 0,
        name: "Dark Iron Gauntlets",
        nskillup: 1,
        quality: 4,
        reagents: [[17011, 3], [17010, 5], [17012, 4], [11371, 4], [11382, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19166, 1, 1],
        id: 23638,
        learnedat: 300,
        level: 0,
        name: "Black Amnesty",
        nskillup: 1,
        quality: 4,
        reagents: [[17011, 3], [17010, 6], [12360, 12], [11382, 1], [11371, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19167, 1, 1],
        id: 23639,
        learnedat: 300,
        level: 0,
        name: "Blackfury",
        nskillup: 1,
        quality: 4,
        reagents: [[17011, 5], [17010, 2], [12360, 16], [11371, 6]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19170, 1, 1],
        id: 23650,
        learnedat: 300,
        level: 0,
        name: "Ebon Hand",
        nskillup: 1,
        quality: 4,
        reagents: [[17011, 4], [17010, 7], [12360, 12], [11371, 8], [12800, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19168, 1, 1],
        id: 23652,
        learnedat: 300,
        level: 0,
        name: "Blackguard",
        nskillup: 1,
        quality: 4,
        reagents: [[17011, 6], [17010, 6], [12360, 10], [11371, 6], [12809, 12]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19169, 1, 1],
        id: 23653,
        learnedat: 300,
        level: 0,
        name: "Nightfall",
        nskillup: 1,
        quality: 4,
        reagents: [[17011, 8], [17010, 5], [12360, 10], [11371, 12], [12364, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19690, 1, 1],
        id: 24136,
        learnedat: 300,
        level: 0,
        name: "Bloodsoul Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 20], [19774, 10], [19726, 2], [7910, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19692, 1, 1],
        id: 24138,
        learnedat: 300,
        level: 0,
        name: "Bloodsoul Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 12], [19774, 6], [19726, 2], [12810, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19691, 1, 1],
        id: 24137,
        learnedat: 300,
        level: 0,
        name: "Bloodsoul Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 16], [19774, 8], [19726, 2], [7910, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19693, 1, 1],
        id: 24139,
        learnedat: 300,
        level: 0,
        name: "Darksoul Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 20], [19774, 14], [12799, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19694, 1, 1],
        id: 24140,
        learnedat: 300,
        level: 0,
        name: "Darksoul Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 18], [19774, 12], [12799, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19695, 1, 1],
        id: 24141,
        learnedat: 300,
        level: 0,
        name: "Darksoul Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 16], [19774, 10], [12799, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20039, 1, 1],
        id: 24399,
        learnedat: 300,
        level: 0,
        name: "Dark Iron Boots",
        nskillup: 1,
        quality: 4,
        reagents: [[17011, 3], [17010, 3], [17012, 4], [11371, 6]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20550, 1, 1],
        id: 24914,
        learnedat: 300,
        level: 0,
        name: "Darkrune Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 20], [20520, 10], [6037, 10]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20549, 1, 1],
        id: 24912,
        learnedat: 300,
        level: 0,
        name: "Darkrune Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 12], [20520, 6], [6037, 6], [12810, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20551, 1, 1],
        id: 24913,
        learnedat: 300,
        level: 0,
        name: "Darkrune Helm",
        nskillup: 1,
        quality: 3,
        reagents: [[12359, 16], [20520, 8], [6037, 8], [11754, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22197, 1, 1],
        id: 27585,
        learnedat: 300,
        level: 0,
        name: "Heavy Obsidian Belt",
        nskillup: 1,
        quality: 3,
        reagents: [[22202, 14], [12655, 4], [7076, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22195, 1, 1],
        id: 27588,
        learnedat: 300,
        level: 0,
        name: "Light Obsidian Belt",
        nskillup: 1,
        quality: 3,
        reagents: [[22202, 14], [12810, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22198, 1, 1],
        id: 27586,
        learnedat: 300,
        level: 0,
        name: "Jagged Obsidian Shield",
        nskillup: 1,
        quality: 4,
        reagents: [[22203, 8], [22202, 24], [12655, 8], [7076, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22194, 1, 1],
        id: 27589,
        learnedat: 300,
        level: 0,
        name: "Black Grasp of the Destroyer",
        nskillup: 1,
        quality: 4,
        reagents: [[22203, 8], [22202, 24], [12810, 8], [13512, 1]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22191, 1, 1],
        id: 27590,
        learnedat: 300,
        level: 0,
        name: "Obsidian Mail Tunic",
        nskillup: 1,
        quality: 4,
        reagents: [[22203, 15], [22202, 36], [12810, 12], [12809, 10], [12800, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22196, 1, 1],
        id: 27587,
        learnedat: 300,
        level: 0,
        name: "Thick Obsidian Breastplate",
        nskillup: 1,
        quality: 4,
        reagents: [[22203, 18], [22202, 40], [12655, 12], [7076, 10], [12364, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22384, 1, 1],
        id: 27830,
        learnedat: 300,
        level: 0,
        name: "Persuader",
        nskillup: 1,
        quality: 4,
        reagents: [[12360, 15], [11371, 10], [12808, 20], [20520, 20], [15417, 10], [12753, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22385, 1, 1],
        id: 27829,
        learnedat: 300,
        level: 0,
        name: "Titanic Leggings",
        nskillup: 1,
        quality: 4,
        reagents: [[12360, 12], [12655, 20], [7076, 10], [13510, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22383, 1, 1],
        id: 27832,
        learnedat: 300,
        level: 0,
        name: "Sageblade",
        nskillup: 1,
        quality: 4,
        reagents: [[12360, 12], [20725, 2], [13512, 2], [12810, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22671, 1, 1],
        id: 28244,
        learnedat: 300,
        level: 0,
        name: "Icebane Bracers",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 4], [12359, 12], [12360, 2], [7080, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22669, 1, 1],
        id: 28242,
        learnedat: 300,
        level: 0,
        name: "Icebane Breastplate",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 7], [12359, 16], [12360, 2], [7080, 4]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22670, 1, 1],
        id: 28243,
        learnedat: 300,
        level: 0,
        name: "Icebane Gauntlets",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 5], [12359, 12], [12360, 2], [7080, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22762, 1, 1],
        id: 28461,
        learnedat: 300,
        level: 0,
        name: "Ironvine Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[12655, 12], [19726, 2], [12360, 2], [12803, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22763, 1, 1],
        id: 28462,
        learnedat: 300,
        level: 0,
        name: "Ironvine Gloves",
        nskillup: 1,
        quality: 3,
        reagents: [[12655, 8], [19726, 1], [12803, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22764, 1, 1],
        id: 28463,
        learnedat: 300,
        level: 0,
        name: "Ironvine Belt",
        nskillup: 1,
        quality: 3,
        reagents: [[12655, 6], [12803, 2]],
        schools: 1,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 140, 150, 160],
        creates: [210773, 1, 1],
        id: 427061,
        learnedat: 140,
        level: 0,
        name: "Mantle of the Second War",
        nskillup: 1,
        phaseId: 1,
        quality: 3,
        reagents: [[2841, 20], [1206, 2], [1705, 2], [5500, 2], [2842, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 175, 190, 205],
        creates: [210794, 1, 1],
        id: 429348,
        learnedat: 175,
        level: 0,
        name: "Shifting Silver Breastplate",
        nskillup: 1,
        phaseId: 1,
        quality: 4,
        reagents: [[2870, 1], [211422, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 100, 110, 120],
        creates: [211845, 1, 1],
        id: 430397,
        learnedat: 100,
        level: 0,
        name: "Blackfathom Sharpening Stone",
        nskillup: 1,
        phaseId: 1,
        quality: 2,
        reagents: [[2863, 1], [10938, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 200, 210, 220],
        creates: [213376, 1, 1],
        id: 435910,
        learnedat: 200,
        level: 0,
        name: "Low-Background Truesilver Plates",
        nskillup: 1,
        phaseId: 2,
        quality: 3,
        reagents: [[6037, 1], [213373, 5]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215161, 1, 1],
        id: 435908,
        learnedat: 225,
        level: 0,
        name: "Tempered Interference-Negating Helmet",
        nskillup: 1,
        phaseId: 2,
        quality: 4,
        reagents: [[3860, 25], [213376, 4], [213379, 1], [213369, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215167, 1, 1],
        id: 435906,
        learnedat: 225,
        level: 0,
        name: "Reflective Truesilver Braincage",
        nskillup: 1,
        phaseId: 2,
        quality: 4,
        reagents: [[3860, 25], [213376, 4], [213379, 2], [213383, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 225, 235, 245],
        creates: [217273, 1, 1],
        id: 439120,
        learnedat: 225,
        level: 0,
        name: "Golden Scale Gauntlets",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[3859, 10], [3577, 4], [3486, 4], [3864, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 225, 237, 250],
        creates: [217275, 1, 1],
        id: 439122,
        learnedat: 225,
        level: 0,
        name: "Golden Scale Boots",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[3859, 10], [3577, 4], [3486, 4], [3864, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 220, 232, 245],
        creates: [217277, 1, 1],
        id: 439124,
        learnedat: 220,
        level: 0,
        name: "Golden Scale Cuirass",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[3859, 12], [3577, 2], [3486, 4], [1529, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 215, 227, 240],
        creates: [217279, 1, 1],
        id: 439126,
        learnedat: 215,
        level: 0,
        name: "Golden Scale Coif",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[3859, 8], [3577, 2], [3486, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 200, 212, 225],
        creates: [217283, 1, 1],
        id: 439130,
        learnedat: 200,
        level: 0,
        name: "Golden Scale Shoulders",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[3859, 6], [3577, 2], [3486, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 195, 207, 220],
        creates: [217285, 1, 1],
        id: 439132,
        learnedat: 195,
        level: 0,
        name: "Golden Scale Leggings",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[3575, 10], [3577, 2], [3486, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 205, 217, 230],
        creates: [217281, 1, 1],
        id: 439128,
        learnedat: 205,
        level: 0,
        name: "Moonsteel Broadsword",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[3859, 8], [3466, 2], [3486, 2], [1705, 3], [4234, 3]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220739, 1, 1],
        id: 446191,
        learnedat: 250,
        level: 0,
        name: "Baleful Pauldrons",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220740, 1, 1],
        id: 446188,
        learnedat: 250,
        level: 0,
        name: "Fearmonger's Shoulderguards",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220738, 1, 1],
        id: 446179,
        learnedat: 250,
        level: 0,
        name: "Shoulderplates of Dread",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 325, 337, 350],
        creates: [227684, 1, 1],
        id: 460460,
        learnedat: 325,
        level: 0,
        name: "Sulfuron Hammer",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[17203, 8], [11371, 20], [12360, 50], [7078, 25], [11382, 10], [17011, 10], [17010, 10]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 305, 315, 325],
        creates: [227871, 1, 1],
        id: 461667,
        learnedat: 305,
        level: 0,
        name: "Tempered Dark Iron Plate",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[11371, 20], [7077, 8]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227886, 1, 1],
        id: 461647,
        learnedat: 320,
        level: 0,
        name: "Skyrider's Masterwork Stormhammer",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[12794, 1], [18262, 10], [12360, 15]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 310, 320, 330],
        creates: [227865, 1, 1],
        id: 461651,
        learnedat: 310,
        level: 0,
        name: "Fiery Plate Gauntlets of the Hidden Technique",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[12359, 20], [12655, 6], [7078, 2], [7910, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [228230, 1, 1],
        id: 461712,
        learnedat: 320,
        level: 0,
        name: "Refined Hammer of the Titans",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[12796, 1], [18262, 10]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 315, 327, 340],
        creates: [227857, 1, 1],
        id: 461714,
        learnedat: 315,
        level: 0,
        name: "Desecration",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[12359, 40], [12360, 2], [12662, 16], [12808, 8], [12361, 2], [12644, 2], [8170, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227884, 1, 1],
        id: 461716,
        learnedat: 320,
        level: 0,
        name: "Deadly Heartseeker",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[12360, 10], [12655, 10], [12810, 2], [7910, 6], [12800, 6], [12799, 6], [12644, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 310, 322, 335],
        creates: [227881, 1, 1],
        id: 461718,
        learnedat: 310,
        level: 0,
        name: "Tranquility",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[12655, 6], [12360, 2], [12804, 4], [12799, 2], [12361, 2], [12364, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227845, 1, 1],
        id: 461675,
        learnedat: 320,
        level: 0,
        name: "Refined Arcanite Reaper",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[12784, 1], [18262, 10]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [228125, 1, 1],
        id: 461669,
        learnedat: 320,
        level: 0,
        name: "Refined Arcanite Champion",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[12790, 1], [18262, 10]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227887, 1, 1],
        id: 461730,
        learnedat: 320,
        level: 0,
        name: "Hardened Frostguard",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[12797, 1], [18262, 10]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 305, 317, 330],
        creates: [227880, 1, 1],
        id: 461733,
        learnedat: 305,
        level: 0,
        name: "Finely-Enchanted Battlehammer",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[12359, 20], [12655, 6], [12364, 2], [12804, 4], [8170, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227876, 1, 1],
        id: 461735,
        learnedat: 320,
        level: 0,
        name: "Invincible Mail",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[12360, 30], [12655, 30], [12364, 6], [12800, 6]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227885, 1, 1],
        id: 461671,
        learnedat: 320,
        level: 0,
        name: "Stronger-hold Gauntlets",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[12360, 15], [12655, 20], [7076, 10], [12361, 4], [12799, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 315, 325, 335],
        creates: [227870, 1, 1],
        id: 461737,
        learnedat: 315,
        level: 0,
        name: "Tempest Gauntlets",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[12359, 20], [12655, 4], [7080, 4], [12361, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227872, 1, 1],
        id: 461739,
        learnedat: 320,
        level: 0,
        name: "Warcrest of the Great Chief",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[12359, 40], [12655, 4], [8168, 60], [12799, 6], [12364, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227850, 1, 1],
        id: 461743,
        learnedat: 320,
        level: 0,
        name: "Sageblade of the Archmagus",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[12360, 12], [20725, 2], [13512, 2], [12810, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234288, 1, 1],
        id: 1213709,
        learnedat: 320,
        level: 0,
        name: "Ironvine Belt",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12655, 8], [12803, 4], [19726, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234290, 1, 1],
        id: 1213711,
        learnedat: 320,
        level: 0,
        name: "Ironvine Gloves",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12655, 12], [19726, 4], [12803, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234292, 1, 1],
        id: 1213715,
        learnedat: 320,
        level: 0,
        name: "Ironvine Breastplate",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12655, 14], [19726, 8], [12360, 8], [12803, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234321, 1, 1],
        id: 1213748,
        learnedat: 320,
        level: 0,
        name: "Light Obsidian Belt",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[22202, 14], [12810, 6], [19726, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234319, 1, 1],
        id: 1213746,
        learnedat: 320,
        level: 0,
        name: "Heavy Obsidian Belt",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[22202, 14], [12655, 4], [7076, 2], [19726, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233795, 1, 1],
        id: 1213481,
        learnedat: 320,
        level: 0,
        name: "Razorspike Headcage",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 15], [234003, 3], [12810, 4], [8146, 10], [234006, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233793, 1, 1],
        id: 1213484,
        learnedat: 320,
        level: 0,
        name: "Razorspike Shoulderplate",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 15], [234003, 3], [12810, 4], [8146, 10], [234006, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233492, 1, 1],
        id: 1213490,
        learnedat: 320,
        level: 0,
        name: "Razorspike Battleplate",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 20], [234003, 4], [12810, 4], [8146, 10], [234006, 8]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233491, 1, 1],
        id: 1213492,
        learnedat: 320,
        level: 0,
        name: "Obsidian Reaver",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 40], [234003, 10], [12810, 8], [234004, 6], [20873, 4], [20882, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 315, 322, 330],
        creates: [234004, 1, 1],
        id: 1213643,
        learnedat: 315,
        level: 0,
        name: "Obsidian Grinding Stone",
        nskillup: 1,
        phaseId: 6,
        quality: 1,
        reagents: [[22202, 5]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233490, 1, 1],
        id: 1213498,
        learnedat: 320,
        level: 0,
        name: "Obsidian Champion",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 40], [234003, 10], [12810, 8], [234004, 6], [20872, 4], [20879, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233796, 1, 1],
        id: 1213500,
        learnedat: 320,
        level: 0,
        name: "Obsidian Destroyer",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 40], [234003, 10], [234004, 8], [20873, 4], [20872, 4], [20875, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233797, 1, 1],
        id: 1213502,
        learnedat: 320,
        level: 0,
        name: "Obsidian Stormhammer",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 30], [234003, 8], [12810, 5], [234004, 6], [20871, 3], [20878, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233798, 1, 1],
        id: 1213504,
        learnedat: 320,
        level: 0,
        name: "Obsidian Sageblade",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 30], [234003, 8], [20725, 3], [234004, 3], [20871, 3], [20877, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233801, 1, 1],
        id: 1213506,
        learnedat: 320,
        level: 0,
        name: "Obsidian Defender",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 30], [234003, 8], [234004, 6], [20872, 3], [20871, 3], [20874, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234428, 1, 1],
        id: 1214137,
        learnedat: 320,
        level: 0,
        name: "Obsidian Heartseeker",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 30], [234003, 8], [234004, 6], [20871, 3], [20867, 3], [20876, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234086, 1, 1],
        id: 1214257,
        learnedat: 320,
        level: 0,
        name: "Black Grasp of the Destroyer",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[22203, 8], [22202, 24], [12810, 8], [13512, 1]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234459, 1, 1],
        id: 1214270,
        learnedat: 320,
        level: 0,
        name: "Jagged Obsidian Shield",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[22203, 8], [22202, 24], [12655, 8], [7076, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234460, 1, 1],
        id: 1214274,
        learnedat: 320,
        level: 0,
        name: "Obsidian Mail Tunic",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[22203, 15], [22202, 36], [12810, 12], [12809, 10], [12800, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234487, 1, 1],
        id: 1214309,
        learnedat: 320,
        level: 0,
        name: "Dreamscale Visor",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 20], [12810, 4], [8146, 8], [20381, 8], [12803, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [235040, 1, 1],
        id: 1215507,
        learnedat: 320,
        level: 0,
        name: "Thick Obsidian Breastplate",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[22203, 18], [22202, 40], [12655, 12], [7076, 10], [12364, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [236695, 1, 1],
        id: 1223787,
        learnedat: 320,
        level: 0,
        name: "Icebane Breastplate",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 7], [12359, 16], [12360, 2], [7080, 4]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [236697, 1, 1],
        id: 1223789,
        learnedat: 320,
        level: 0,
        name: "Icebane Gauntlets",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 5], [12359, 12], [12360, 2], [7080, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [236696, 1, 1],
        id: 1223791,
        learnedat: 320,
        level: 0,
        name: "Icebane Bracers",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 4], [12359, 12], [12360, 2], [7080, 2]],
        schools: 1,
        seasonId: 2,
        skill: [164]
      }
    ];
  }
});

// data/enchanting.json
var require_enchanting = __commonJS({
  "data/enchanting.json"(exports, module) {
    module.exports = [
      {
        cat: 11,
        colors: [0, 70, 90, 110],
        id: 7418,
        learnedat: 70,
        level: 0,
        name: "Enchant Bracer - Minor Health",
        nskillup: 1,
        reagents: [[10940, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [15, 70, 90, 110],
        id: 7420,
        learnedat: 15,
        level: 0,
        name: "Enchant Chest - Minor Health",
        nskillup: 1,
        reagents: [[10940, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [1, 5, 7, 10],
        creates: [6218, 1, 1],
        id: 7421,
        learnedat: 1,
        level: 0,
        name: "Runed Copper Rod",
        nskillup: 1,
        quality: 1,
        reagents: [[6217, 1], [10940, 1], [10938, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [40, 90, 110, 130],
        id: 7426,
        learnedat: 40,
        level: 0,
        name: "Enchant Chest - Minor Absorption",
        nskillup: 1,
        reagents: [[10940, 2], [10938, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [0, 80, 100, 120],
        id: 7428,
        learnedat: 80,
        level: 5,
        name: "Enchant Bracer - Minor Deflect",
        nskillup: 1,
        reagents: [[10938, 1], [10940, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [20, 80, 100, 120],
        id: 7443,
        learnedat: 20,
        level: 0,
        name: "Enchant Chest - Minor Mana",
        nskillup: 1,
        reagents: [[10938, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [45, 95, 115, 135],
        id: 7454,
        learnedat: 45,
        level: 0,
        name: "Enchant Cloak - Minor Resistance",
        nskillup: 1,
        reagents: [[10940, 1], [10938, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [50, 100, 120, 140],
        id: 7457,
        learnedat: 50,
        level: 0,
        name: "Enchant Bracer - Minor Stamina",
        nskillup: 1,
        reagents: [[10940, 3]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [60, 105, 125, 145],
        id: 7748,
        learnedat: 60,
        level: 0,
        name: "Enchant Chest - Lesser Health",
        nskillup: 1,
        reagents: [[10940, 2], [10938, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [60, 105, 125, 145],
        id: 7766,
        learnedat: 60,
        level: 0,
        name: "Enchant Bracer - Minor Spirit",
        nskillup: 1,
        reagents: [[10938, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [70, 110, 130, 150],
        id: 7771,
        learnedat: 70,
        level: 0,
        name: "Enchant Cloak - Minor Protection",
        nskillup: 1,
        reagents: [[10940, 3], [10939, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [80, 115, 135, 155],
        id: 7776,
        learnedat: 80,
        level: 0,
        name: "Enchant Chest - Lesser Mana",
        nskillup: 1,
        reagents: [[10939, 1], [10938, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [80, 115, 135, 155],
        id: 7779,
        learnedat: 80,
        level: 0,
        name: "Enchant Bracer - Minor Agility",
        nskillup: 1,
        reagents: [[10940, 2], [10939, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 400
      },
      {
        cat: 11,
        colors: [80, 115, 135, 155],
        id: 7782,
        learnedat: 80,
        level: 0,
        name: "Enchant Bracer - Minor Strength",
        nskillup: 1,
        reagents: [[10940, 5]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [90, 120, 140, 160],
        id: 7786,
        learnedat: 90,
        level: 0,
        name: "Enchant Weapon - Minor Beastslayer",
        nskillup: 1,
        reagents: [[10940, 4], [10939, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [90, 120, 140, 160],
        id: 7788,
        learnedat: 90,
        level: 0,
        name: "Enchant Weapon - Minor Striking",
        nskillup: 1,
        reagents: [[10940, 2], [10939, 1], [10978, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [100, 130, 150, 170],
        id: 7745,
        learnedat: 100,
        level: 0,
        name: "Enchant 2H Weapon - Minor Impact",
        nskillup: 1,
        reagents: [[10940, 4], [10978, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [100, 130, 150, 170],
        id: 7793,
        learnedat: 100,
        level: 0,
        name: "Enchant 2H Weapon - Lesser Intellect",
        nskillup: 1,
        reagents: [[10939, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [100, 130, 150, 170],
        creates: [6339, 1, 1],
        id: 7795,
        learnedat: 100,
        level: 0,
        name: "Runed Silver Rod",
        nskillup: 1,
        quality: 1,
        reagents: [[6338, 1], [10940, 6], [10939, 3], [1210, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [120, 145, 165, 185],
        id: 7857,
        learnedat: 120,
        level: 0,
        name: "Enchant Chest - Health",
        nskillup: 1,
        reagents: [[10940, 4], [10998, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [120, 145, 165, 185],
        id: 7859,
        learnedat: 120,
        level: 0,
        name: "Enchant Bracer - Lesser Spirit",
        nskillup: 1,
        reagents: [[10998, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [125, 150, 170, 190],
        id: 7861,
        learnedat: 125,
        level: 0,
        name: "Enchant Cloak - Lesser Fire Resistance",
        nskillup: 1,
        reagents: [[6371, 1], [10998, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 1250
      },
      {
        cat: 11,
        colors: [125, 150, 170, 190],
        id: 7863,
        learnedat: 125,
        level: 0,
        name: "Enchant Boots - Minor Stamina",
        nskillup: 1,
        reagents: [[10940, 8]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 1400
      },
      {
        cat: 11,
        colors: [125, 150, 170, 190],
        id: 7867,
        learnedat: 125,
        level: 0,
        name: "Enchant Boots - Minor Agility",
        nskillup: 1,
        reagents: [[10940, 6], [10998, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [105, 130, 150, 170],
        id: 13378,
        learnedat: 105,
        level: 0,
        name: "Enchant Shield - Minor Stamina",
        nskillup: 1,
        reagents: [[10998, 1], [10940, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 600
      },
      {
        cat: 11,
        colors: [110, 135, 155, 175],
        id: 13380,
        learnedat: 110,
        level: 0,
        name: "Enchant 2H Weapon - Lesser Spirit",
        nskillup: 1,
        reagents: [[10998, 1], [10940, 6]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [110, 135, 155, 175],
        id: 13419,
        learnedat: 110,
        level: 0,
        name: "Enchant Cloak - Minor Agility",
        nskillup: 1,
        reagents: [[10998, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [115, 140, 160, 180],
        id: 13421,
        learnedat: 115,
        level: 0,
        name: "Enchant Cloak - Lesser Protection",
        nskillup: 1,
        reagents: [[10940, 6], [10978, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 800
      },
      {
        cat: 11,
        colors: [115, 140, 160, 180],
        id: 13464,
        learnedat: 115,
        level: 0,
        name: "Enchant Shield - Lesser Protection",
        nskillup: 1,
        reagents: [[10998, 1], [10940, 1], [10978, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [130, 155, 175, 195],
        id: 13485,
        learnedat: 130,
        level: 0,
        name: "Enchant Shield - Lesser Spirit",
        nskillup: 1,
        reagents: [[10998, 2], [10940, 4]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 1500
      },
      {
        cat: 11,
        colors: [130, 155, 175, 195],
        id: 13501,
        learnedat: 130,
        level: 0,
        name: "Enchant Bracer - Lesser Stamina",
        nskillup: 1,
        reagents: [[11083, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 1500
      },
      {
        cat: 11,
        colors: [140, 165, 185, 205],
        id: 13503,
        learnedat: 140,
        level: 0,
        name: "Enchant Weapon - Lesser Striking",
        nskillup: 1,
        reagents: [[11083, 2], [11084, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2e3
      },
      {
        cat: 11,
        colors: [135, 160, 180, 200],
        id: 13522,
        learnedat: 135,
        level: 0,
        name: "Enchant Cloak - Lesser Shadow Resistance",
        nskillup: 1,
        reagents: [[11082, 1], [6048, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [145, 170, 190, 210],
        id: 13529,
        learnedat: 145,
        level: 0,
        name: "Enchant 2H Weapon - Lesser Impact",
        nskillup: 1,
        reagents: [[11083, 3], [11084, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2400
      },
      {
        cat: 11,
        colors: [140, 165, 185, 205],
        id: 13536,
        learnedat: 140,
        level: 0,
        name: "Enchant Bracer - Lesser Strength",
        nskillup: 1,
        reagents: [[11083, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [140, 165, 185, 205],
        id: 13538,
        learnedat: 140,
        level: 0,
        name: "Enchant Chest - Lesser Absorption",
        nskillup: 1,
        reagents: [[10940, 2], [11082, 1], [11084, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [145, 170, 190, 210],
        id: 13607,
        learnedat: 145,
        level: 0,
        name: "Enchant Chest - Mana",
        nskillup: 1,
        reagents: [[11082, 1], [10998, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2400
      },
      {
        cat: 11,
        colors: [145, 170, 190, 210],
        id: 13612,
        learnedat: 145,
        level: 0,
        name: "Enchant Gloves - Mining",
        nskillup: 1,
        reagents: [[11083, 1], [2772, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [145, 170, 190, 210],
        id: 13617,
        learnedat: 145,
        level: 0,
        name: "Enchant Gloves - Herbalism",
        nskillup: 1,
        reagents: [[11083, 1], [3356, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [145, 170, 190, 210],
        id: 13620,
        learnedat: 145,
        level: 0,
        name: "Enchant Gloves - Fishing",
        nskillup: 1,
        reagents: [[11083, 1], [6370, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [150, 175, 195, 215],
        id: 13622,
        learnedat: 150,
        level: 0,
        name: "Enchant Bracer - Lesser Intellect",
        nskillup: 1,
        reagents: [[11082, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [150, 175, 195, 215],
        id: 13626,
        learnedat: 150,
        level: 0,
        name: "Enchant Chest - Minor Stats",
        nskillup: 1,
        reagents: [[11082, 1], [11083, 1], [11084, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [150, 175, 195, 215],
        creates: [11130, 1, 1],
        id: 13628,
        learnedat: 150,
        level: 0,
        name: "Runed Golden Rod",
        nskillup: 1,
        quality: 1,
        reagents: [[11128, 1], [5500, 1], [11082, 2], [11083, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2500
      },
      {
        cat: 11,
        colors: [155, 175, 195, 215],
        id: 13631,
        learnedat: 155,
        level: 0,
        name: "Enchant Shield - Lesser Stamina",
        nskillup: 1,
        reagents: [[11134, 1], [11083, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2600
      },
      {
        cat: 11,
        colors: [155, 175, 195, 215],
        id: 13635,
        learnedat: 155,
        level: 0,
        name: "Enchant Cloak - Defense",
        nskillup: 1,
        reagents: [[11138, 1], [11083, 3]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2600
      },
      {
        cat: 11,
        colors: [160, 180, 200, 220],
        id: 13637,
        learnedat: 160,
        level: 0,
        name: "Enchant Boots - Lesser Agility",
        nskillup: 1,
        reagents: [[11083, 1], [11134, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2800
      },
      {
        cat: 11,
        colors: [160, 180, 200, 220],
        id: 13640,
        learnedat: 160,
        level: 0,
        name: "Enchant Chest - Greater Health",
        nskillup: 1,
        reagents: [[11083, 3]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2700
      },
      {
        cat: 11,
        colors: [165, 185, 205, 225],
        id: 13642,
        learnedat: 165,
        level: 0,
        name: "Enchant Bracer - Spirit",
        nskillup: 1,
        reagents: [[11134, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2800
      },
      {
        cat: 11,
        colors: [170, 190, 210, 230],
        id: 13644,
        learnedat: 170,
        level: 0,
        name: "Enchant Boots - Lesser Stamina",
        nskillup: 1,
        reagents: [[11083, 4]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2800
      },
      {
        cat: 11,
        colors: [170, 190, 210, 230],
        id: 13646,
        learnedat: 170,
        level: 0,
        name: "Enchant Bracer - Lesser Deflection",
        nskillup: 1,
        reagents: [[11134, 1], [11083, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [170, 190, 210, 230],
        id: 13648,
        learnedat: 170,
        level: 0,
        name: "Enchant Bracer - Stamina",
        nskillup: 1,
        reagents: [[11083, 6]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2800
      },
      {
        cat: 11,
        colors: [175, 195, 215, 235],
        id: 13653,
        learnedat: 175,
        level: 0,
        name: "Enchant Weapon - Lesser Beastslayer",
        nskillup: 1,
        reagents: [[11134, 1], [5637, 2], [11138, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [175, 195, 215, 235],
        id: 13655,
        learnedat: 175,
        level: 0,
        name: "Enchant Weapon - Lesser Elemental Slayer",
        nskillup: 1,
        reagents: [[11134, 1], [7067, 1], [11138, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [175, 195, 215, 235],
        id: 13657,
        learnedat: 175,
        level: 0,
        name: "Enchant Cloak - Fire Resistance",
        nskillup: 1,
        reagents: [[11134, 1], [7068, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 3e3
      },
      {
        cat: 11,
        colors: [180, 200, 220, 240],
        id: 13659,
        learnedat: 180,
        level: 0,
        name: "Enchant Shield - Spirit",
        nskillup: 1,
        reagents: [[11135, 1], [11137, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 3200
      },
      {
        cat: 11,
        colors: [180, 200, 220, 240],
        id: 13661,
        learnedat: 180,
        level: 0,
        name: "Enchant Bracer - Strength",
        nskillup: 1,
        reagents: [[11137, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 3600
      },
      {
        cat: 11,
        colors: [185, 205, 225, 245],
        id: 13663,
        learnedat: 185,
        level: 0,
        name: "Enchant Chest - Greater Mana",
        nskillup: 1,
        reagents: [[11135, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 3800
      },
      {
        cat: 11,
        colors: [190, 210, 230, 250],
        id: 13687,
        learnedat: 190,
        level: 0,
        name: "Enchant Boots - Lesser Spirit",
        nskillup: 1,
        reagents: [[11135, 1], [11134, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [195, 215, 235, 255],
        id: 13689,
        learnedat: 195,
        level: 0,
        name: "Enchant Shield - Lesser Block",
        nskillup: 1,
        reagents: [[11135, 2], [11137, 2], [11139, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [195, 215, 235, 255],
        id: 13693,
        learnedat: 195,
        level: 0,
        name: "Enchant Weapon - Striking",
        nskillup: 1,
        reagents: [[11135, 2], [11139, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [200, 220, 240, 260],
        id: 13695,
        learnedat: 200,
        level: 0,
        name: "Enchant 2H Weapon - Impact",
        nskillup: 1,
        reagents: [[11137, 4], [11139, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [200, 220, 240, 260],
        id: 13698,
        learnedat: 200,
        level: 0,
        name: "Enchant Gloves - Skinning",
        nskillup: 1,
        reagents: [[11137, 1], [7392, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [200, 220, 240, 260],
        id: 13700,
        learnedat: 200,
        level: 0,
        name: "Enchant Chest - Lesser Stats",
        nskillup: 1,
        reagents: [[11135, 2], [11137, 2], [11139, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [200, 220, 240, 260],
        creates: [11145, 1, 1],
        id: 13702,
        learnedat: 200,
        level: 0,
        name: "Runed Truesilver Rod",
        nskillup: 1,
        quality: 1,
        reagents: [[11144, 1], [7971, 1], [11135, 2], [11137, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [205, 225, 245, 265],
        id: 13746,
        learnedat: 205,
        level: 0,
        name: "Enchant Cloak - Greater Defense",
        nskillup: 1,
        reagents: [[11137, 3]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4200
      },
      {
        cat: 11,
        colors: [205, 225, 245, 265],
        id: 13794,
        learnedat: 205,
        level: 0,
        name: "Enchant Cloak - Resistance",
        nskillup: 1,
        reagents: [[11174, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4200
      },
      {
        cat: 11,
        colors: [210, 230, 250, 270],
        id: 13815,
        learnedat: 210,
        level: 0,
        name: "Enchant Gloves - Agility",
        nskillup: 1,
        reagents: [[11174, 1], [11137, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4400
      },
      {
        cat: 11,
        colors: [210, 230, 250, 270],
        id: 13817,
        learnedat: 210,
        level: 0,
        name: "Enchant Shield - Stamina",
        nskillup: 1,
        reagents: [[11137, 5]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [210, 230, 250, 270],
        id: 13822,
        learnedat: 210,
        level: 0,
        name: "Enchant Bracer - Intellect",
        nskillup: 1,
        reagents: [[11174, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4400
      },
      {
        cat: 11,
        colors: [215, 235, 255, 275],
        id: 13836,
        learnedat: 215,
        level: 0,
        name: "Enchant Boots - Stamina",
        nskillup: 1,
        reagents: [[11137, 5]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4600
      },
      {
        cat: 11,
        colors: [215, 235, 255, 275],
        id: 13841,
        learnedat: 215,
        level: 0,
        name: "Enchant Gloves - Advanced Mining",
        nskillup: 1,
        reagents: [[11137, 3], [6037, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [220, 240, 260, 280],
        id: 13846,
        learnedat: 220,
        level: 0,
        name: "Enchant Bracer - Greater Spirit",
        nskillup: 1,
        reagents: [[11174, 3], [11137, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [220, 240, 260, 280],
        id: 13858,
        learnedat: 220,
        level: 0,
        name: "Enchant Chest - Superior Health",
        nskillup: 1,
        reagents: [[11137, 6]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 4800
      },
      {
        cat: 11,
        colors: [225, 245, 265, 285],
        id: 13868,
        learnedat: 225,
        level: 0,
        name: "Enchant Gloves - Advanced Herbalism",
        nskillup: 1,
        reagents: [[11137, 3], [8838, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [225, 245, 265, 285],
        id: 13882,
        learnedat: 225,
        level: 0,
        name: "Enchant Cloak - Lesser Agility",
        nskillup: 1,
        reagents: [[11174, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [225, 245, 265, 285],
        id: 13887,
        learnedat: 225,
        level: 0,
        name: "Enchant Gloves - Strength",
        nskillup: 1,
        reagents: [[11174, 2], [11137, 3]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [225, 245, 265, 285],
        id: 13890,
        learnedat: 225,
        level: 0,
        name: "Enchant Boots - Minor Speed",
        nskillup: 1,
        reagents: [[11177, 1], [7909, 1], [11174, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [265, 285, 305, 325],
        id: 13898,
        learnedat: 265,
        level: 0,
        name: "Enchant Weapon - Fiery Weapon",
        nskillup: 1,
        reagents: [[11177, 4], [7078, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [230, 250, 270, 290],
        id: 13905,
        learnedat: 230,
        level: 0,
        name: "Enchant Shield - Greater Spirit",
        nskillup: 1,
        reagents: [[11175, 1], [11176, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 5400
      },
      {
        cat: 11,
        colors: [230, 250, 270, 290],
        id: 13915,
        learnedat: 230,
        level: 0,
        name: "Enchant Weapon - Demonslaying",
        nskillup: 1,
        reagents: [[11177, 1], [11176, 2], [9224, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [230, 250, 270, 290],
        id: 13917,
        learnedat: 230,
        level: 0,
        name: "Enchant Chest - Superior Mana",
        nskillup: 1,
        reagents: [[11175, 1], [11174, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 5400
      },
      {
        cat: 11,
        colors: [235, 255, 275, 295],
        id: 13931,
        learnedat: 235,
        level: 0,
        name: "Enchant Bracer - Deflection",
        nskillup: 1,
        reagents: [[11175, 1], [11176, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [235, 255, 275, 295],
        id: 13933,
        learnedat: 235,
        level: 0,
        name: "Enchant Shield - Frost Resistance",
        nskillup: 1,
        reagents: [[11178, 1], [3829, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [235, 255, 275, 295],
        id: 13935,
        learnedat: 235,
        level: 0,
        name: "Enchant Boots - Agility",
        nskillup: 1,
        reagents: [[11175, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 5800
      },
      {
        cat: 11,
        colors: [240, 260, 280, 300],
        id: 13937,
        learnedat: 240,
        level: 0,
        name: "Enchant 2H Weapon - Greater Impact",
        nskillup: 1,
        reagents: [[11178, 2], [11176, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 6200
      },
      {
        cat: 11,
        colors: [240, 260, 280, 300],
        id: 13939,
        learnedat: 240,
        level: 0,
        name: "Enchant Bracer - Greater Strength",
        nskillup: 1,
        reagents: [[11176, 2], [11175, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 6200
      },
      {
        cat: 11,
        colors: [245, 265, 285, 305],
        id: 13941,
        learnedat: 245,
        level: 0,
        name: "Enchant Chest - Stats",
        nskillup: 1,
        reagents: [[11178, 1], [11176, 3], [11175, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 6200
      },
      {
        cat: 11,
        colors: [245, 265, 285, 305],
        id: 13943,
        learnedat: 245,
        level: 0,
        name: "Enchant Weapon - Greater Striking",
        nskillup: 1,
        reagents: [[11178, 2], [11175, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 6200
      },
      {
        cat: 11,
        colors: [245, 265, 285, 305],
        id: 13945,
        learnedat: 245,
        level: 0,
        name: "Enchant Bracer - Greater Stamina",
        nskillup: 1,
        reagents: [[11176, 5]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [250, 270, 290, 310],
        id: 13947,
        learnedat: 250,
        level: 0,
        name: "Enchant Gloves - Riding Skill",
        nskillup: 1,
        reagents: [[11178, 2], [11176, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [250, 270, 290, 310],
        id: 13948,
        learnedat: 250,
        level: 0,
        name: "Enchant Gloves - Minor Haste",
        nskillup: 1,
        reagents: [[11178, 2], [8153, 2]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 6500
      },
      {
        cat: 11,
        colors: [10, 75, 95, 115],
        creates: [11287, 1, 1],
        id: 14293,
        learnedat: 10,
        level: 0,
        name: "Lesser Magic Wand",
        nskillup: 1,
        quality: 2,
        reagents: [[4470, 1], [10938, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [70, 110, 130, 150],
        creates: [11288, 1, 1],
        id: 14807,
        learnedat: 70,
        level: 0,
        name: "Greater Magic Wand",
        nskillup: 1,
        quality: 2,
        reagents: [[4470, 1], [10939, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [155, 175, 195, 215],
        creates: [11289, 1, 1],
        id: 14809,
        learnedat: 155,
        level: 0,
        name: "Lesser Mystic Wand",
        nskillup: 1,
        quality: 2,
        reagents: [[11291, 1], [11134, 1], [11083, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 2600
      },
      {
        cat: 11,
        colors: [175, 195, 215, 235],
        creates: [11290, 1, 1],
        id: 14810,
        learnedat: 175,
        level: 0,
        name: "Greater Mystic Wand",
        nskillup: 1,
        quality: 2,
        reagents: [[11291, 1], [11135, 1], [11137, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 3e3
      },
      {
        cat: 11,
        colors: [265, 285, 305, 325],
        creates: [11811, 1, 1],
        id: 15596,
        learnedat: 265,
        level: 0,
        name: "Smoking Heart of the Mountain",
        nskillup: 1,
        quality: 3,
        reagents: [[11382, 1], [7078, 1], [14343, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [250, 250, 255, 260],
        creates: [12810, 1, 1],
        id: 17181,
        learnedat: 250,
        level: 0,
        name: "Enchanted Leather",
        nskillup: 1,
        quality: 1,
        reagents: [[8170, 1], [16202, 1]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [250, 250, 255, 260],
        creates: [12655, 1, 1],
        id: 17180,
        learnedat: 250,
        level: 0,
        name: "Enchanted Thorium",
        nskillup: 1,
        quality: 1,
        reagents: [[12359, 1], [11176, 3]],
        schools: 1,
        skill: [333],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [255, 275, 295, 315],
        id: 20008,
        learnedat: 255,
        level: 0,
        name: "Enchant Bracer - Greater Intellect",
        nskillup: 1,
        reagents: [[16202, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [260, 280, 300, 320],
        id: 20020,
        learnedat: 260,
        level: 0,
        name: "Enchant Boots - Greater Stamina",
        nskillup: 1,
        reagents: [[11176, 10]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [265, 285, 305, 325],
        id: 20014,
        learnedat: 265,
        level: 0,
        name: "Enchant Cloak - Greater Resistance",
        nskillup: 1,
        reagents: [[16202, 2], [7077, 1], [7075, 1], [7079, 1], [7081, 1], [7972, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [265, 285, 305, 325],
        id: 20017,
        learnedat: 265,
        level: 0,
        name: "Enchant Shield - Greater Stamina",
        nskillup: 1,
        reagents: [[11176, 10]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [270, 290, 310, 330],
        id: 20009,
        learnedat: 270,
        level: 0,
        name: "Enchant Bracer - Superior Spirit",
        nskillup: 1,
        reagents: [[16202, 3], [11176, 10]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [270, 290, 310, 330],
        id: 20012,
        learnedat: 270,
        level: 0,
        name: "Enchant Gloves - Greater Agility",
        nskillup: 1,
        reagents: [[16202, 3], [16204, 3]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [275, 295, 315, 335],
        id: 20024,
        learnedat: 275,
        level: 0,
        name: "Enchant Boots - Spirit",
        nskillup: 1,
        reagents: [[16203, 2], [16202, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [275, 295, 315, 335],
        id: 20026,
        learnedat: 275,
        level: 0,
        name: "Enchant Chest - Major Health",
        nskillup: 1,
        reagents: [[16204, 6], [14343, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [280, 300, 320, 340],
        id: 20016,
        learnedat: 280,
        level: 0,
        name: "Enchant Shield - Superior Spirit",
        nskillup: 1,
        reagents: [[16203, 2], [16204, 4]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [285, 305, 325, 345],
        id: 20029,
        learnedat: 285,
        level: 0,
        name: "Enchant Weapon - Icy Chill",
        nskillup: 1,
        reagents: [[14343, 4], [7080, 1], [7082, 1], [13467, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [285, 305, 325, 345],
        id: 20015,
        learnedat: 285,
        level: 0,
        name: "Enchant Cloak - Superior Defense",
        nskillup: 1,
        reagents: [[16204, 8]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [290, 310, 330, 350],
        id: 20028,
        learnedat: 290,
        level: 0,
        name: "Enchant Chest - Major Mana",
        nskillup: 1,
        reagents: [[16203, 3], [14343, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [290, 310, 330, 350],
        creates: [16207, 1, 1],
        id: 20051,
        learnedat: 290,
        level: 0,
        name: "Runed Arcanite Rod",
        nskillup: 1,
        quality: 1,
        reagents: [[16206, 1], [13926, 1], [16204, 10], [16203, 4], [14343, 4], [14344, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [295, 315, 335, 355],
        id: 20013,
        learnedat: 295,
        level: 0,
        name: "Enchant Gloves - Greater Strength",
        nskillup: 1,
        reagents: [[16203, 4], [16204, 4]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [295, 315, 335, 355],
        id: 20023,
        learnedat: 295,
        level: 0,
        name: "Enchant Boots - Greater Agility",
        nskillup: 1,
        reagents: [[16203, 8]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [295, 315, 335, 355],
        id: 20010,
        learnedat: 295,
        level: 0,
        name: "Enchant Bracer - Superior Strength",
        nskillup: 1,
        reagents: [[16204, 6], [16203, 6]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [295, 315, 335, 355],
        id: 20030,
        learnedat: 295,
        level: 0,
        name: "Enchant 2H Weapon - Superior Impact",
        nskillup: 1,
        reagents: [[14344, 4], [16204, 10]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [295, 315, 335, 355],
        id: 20033,
        learnedat: 295,
        level: 0,
        name: "Enchant Weapon - Unholy Weapon",
        nskillup: 1,
        reagents: [[14344, 4], [12808, 4]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 20036,
        learnedat: 300,
        level: 0,
        name: "Enchant 2H Weapon - Major Intellect",
        nskillup: 1,
        reagents: [[16203, 12], [14344, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 20031,
        learnedat: 300,
        level: 0,
        name: "Enchant Weapon - Superior Striking",
        nskillup: 1,
        reagents: [[14344, 2], [16203, 10]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 20011,
        learnedat: 300,
        level: 0,
        name: "Enchant Bracer - Superior Stamina",
        nskillup: 1,
        reagents: [[16204, 15]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 20034,
        learnedat: 300,
        level: 0,
        name: "Enchant Weapon - Crusader",
        nskillup: 1,
        reagents: [[14344, 4], [12811, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 20025,
        learnedat: 300,
        level: 0,
        name: "Enchant Chest - Greater Stats",
        nskillup: 1,
        reagents: [[14344, 4], [16204, 15], [16203, 10]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 20032,
        learnedat: 300,
        level: 0,
        name: "Enchant Weapon - Lifestealing",
        nskillup: 1,
        reagents: [[14344, 6], [12808, 6], [12803, 6]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 20035,
        learnedat: 300,
        level: 0,
        name: "Enchant 2H Weapon - Major Spirit",
        nskillup: 1,
        reagents: [[16203, 12], [14344, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [190, 210, 230, 250],
        id: 21931,
        learnedat: 190,
        level: 0,
        name: "Enchant Weapon - Winter's Might",
        nskillup: 1,
        reagents: [[11135, 3], [11137, 3], [11139, 1], [3819, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 0,
        creates: [17968, 1, 1],
        id: 22434,
        level: 0,
        name: "Charged Scale of Onyxia",
        nskillup: 1,
        quality: 3,
        reagents: [[17967, 1], [16204, 2], [16203, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 22749,
        learnedat: 300,
        level: 0,
        name: "Enchant Weapon - Spell Power",
        nskillup: 1,
        reagents: [[14344, 4], [16203, 12], [7078, 4], [7080, 4], [7082, 4], [13926, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 22750,
        learnedat: 300,
        level: 0,
        name: "Enchant Weapon - Healing Power",
        nskillup: 1,
        reagents: [[14344, 4], [16203, 8], [12803, 6], [7080, 6], [12811, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [290, 310, 330, 350],
        id: 23799,
        learnedat: 290,
        level: 0,
        name: "Enchant Weapon - Strength",
        nskillup: 1,
        reagents: [[14344, 6], [16203, 6], [16204, 4], [7076, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [290, 310, 330, 350],
        id: 23800,
        learnedat: 290,
        level: 0,
        name: "Enchant Weapon - Agility",
        nskillup: 1,
        reagents: [[14344, 6], [16203, 6], [16204, 4], [7082, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [290, 310, 330, 350],
        id: 23801,
        learnedat: 290,
        level: 0,
        name: "Enchant Bracer - Mana Regeneration",
        nskillup: 1,
        reagents: [[16204, 16], [16203, 4], [7080, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 23802,
        learnedat: 300,
        level: 0,
        name: "Enchant Bracer - Healing Power",
        nskillup: 1,
        reagents: [[14344, 2], [16204, 20], [16203, 4], [12803, 6]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 23803,
        learnedat: 300,
        level: 0,
        name: "Enchant Weapon - Mighty Spirit",
        nskillup: 1,
        reagents: [[14344, 10], [16203, 8], [16204, 15]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 23804,
        learnedat: 300,
        level: 0,
        name: "Enchant Weapon - Mighty Intellect",
        nskillup: 1,
        reagents: [[14344, 15], [16203, 12], [16204, 20]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25072,
        learnedat: 300,
        level: 0,
        name: "Enchant Gloves - Threat",
        nskillup: 1,
        reagents: [[20725, 4], [14344, 6], [18512, 8]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25073,
        learnedat: 300,
        level: 0,
        name: "Enchant Gloves - Shadow Power",
        nskillup: 1,
        reagents: [[20725, 3], [14344, 10], [12808, 6]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25074,
        learnedat: 300,
        level: 0,
        name: "Enchant Gloves - Frost Power",
        nskillup: 1,
        reagents: [[20725, 3], [14344, 10], [7080, 4]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25078,
        learnedat: 300,
        level: 0,
        name: "Enchant Gloves - Fire Power",
        nskillup: 1,
        reagents: [[20725, 2], [14344, 10], [7078, 4]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25079,
        learnedat: 300,
        level: 0,
        name: "Enchant Gloves - Healing Power",
        nskillup: 1,
        reagents: [[20725, 3], [14344, 8], [12811, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25080,
        learnedat: 300,
        level: 0,
        name: "Enchant Gloves - Superior Agility",
        nskillup: 1,
        reagents: [[20725, 3], [14344, 8], [7082, 4]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25081,
        learnedat: 300,
        level: 0,
        name: "Enchant Cloak - Greater Fire Resistance",
        nskillup: 1,
        reagents: [[20725, 3], [14344, 8], [7078, 4]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25082,
        learnedat: 300,
        level: 0,
        name: "Enchant Cloak - Greater Nature Resistance",
        nskillup: 1,
        reagents: [[20725, 2], [14344, 8], [12803, 4]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25083,
        learnedat: 300,
        level: 0,
        name: "Enchant Cloak - Stealth",
        nskillup: 1,
        reagents: [[20725, 3], [14344, 8], [13468, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25084,
        learnedat: 300,
        level: 0,
        name: "Enchant Cloak - Subtlety",
        nskillup: 1,
        reagents: [[20725, 4], [14344, 6], [11754, 2]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 320, 340, 360],
        id: 25086,
        learnedat: 300,
        level: 0,
        name: "Enchant Cloak - Dodge",
        nskillup: 1,
        reagents: [[20725, 3], [14344, 8], [12809, 8]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [45, 55, 65, 75],
        creates: [20744, 0, 0],
        id: 25124,
        learnedat: 45,
        level: 0,
        name: "Minor Wizard Oil",
        nskillup: 1,
        quality: 1,
        reagents: [[10940, 2], [17034, 1], [3371, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [150, 160, 170, 180],
        creates: [20745, 0, 0],
        id: 25125,
        learnedat: 150,
        level: 0,
        name: "Minor Mana Oil",
        nskillup: 1,
        quality: 1,
        reagents: [[11083, 3], [17034, 2], [3372, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [200, 210, 220, 230],
        creates: [20746, 0, 0],
        id: 25126,
        learnedat: 200,
        level: 0,
        name: "Lesser Wizard Oil",
        nskillup: 1,
        quality: 1,
        reagents: [[11137, 3], [17035, 2], [3372, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [250, 260, 270, 280],
        creates: [20747, 0, 0],
        id: 25127,
        learnedat: 250,
        level: 0,
        name: "Lesser Mana Oil",
        nskillup: 1,
        quality: 1,
        reagents: [[11176, 3], [8831, 2], [8925, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [275, 285, 295, 305],
        creates: [20750, 0, 0],
        id: 25128,
        learnedat: 275,
        level: 0,
        name: "Wizard Oil",
        nskillup: 1,
        quality: 1,
        reagents: [[16204, 3], [4625, 2], [8925, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 310, 320, 330],
        creates: [20749, 0, 0],
        id: 25129,
        learnedat: 300,
        level: 0,
        name: "Brilliant Wizard Oil",
        nskillup: 1,
        quality: 1,
        reagents: [[14344, 2], [4625, 3], [18256, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [300, 310, 320, 330],
        creates: [20748, 0, 0],
        id: 25130,
        learnedat: 300,
        level: 0,
        name: "Brilliant Mana Oil",
        nskillup: 1,
        quality: 1,
        reagents: [[14344, 2], [8831, 3], [18256, 1]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [290, 310, 330, 350],
        id: 27837,
        learnedat: 290,
        level: 0,
        name: "Enchant 2H Weapon - Agility",
        nskillup: 1,
        reagents: [[14344, 10], [16203, 6], [16204, 14], [7082, 4]],
        schools: 1,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 100, 110, 120],
        creates: [211848, 0, 0],
        id: 430409,
        learnedat: 100,
        level: 1,
        name: "Blackfathom Mana Oil",
        nskillup: 1,
        phaseId: 1,
        quality: 2,
        reagents: [[3372, 1], [10939, 1], [10940, 5]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 200, 217, 235],
        id: 435481,
        learnedat: 200,
        level: 0,
        name: "Enchant Weapon - Dismantle",
        nskillup: 1,
        phaseId: 2,
        reagents: [[11174, 4], [5637, 2], [11177, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 200, 220, 240],
        id: 435903,
        learnedat: 200,
        level: 0,
        name: "Enchant Chest - Retricutioner",
        nskillup: 1,
        phaseId: 2,
        reagents: [[11177, 1], [11176, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [175, 195, 215, 235],
        creates: [217287, 1, 1],
        id: 439134,
        learnedat: 175,
        level: 0,
        name: "Greater Mystic Wand",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[11291, 1], [11135, 1], [11137, 1]],
        schools: 1,
        seasonId: 2,
        skill: [333],
        source: [6],
        trainingcost: 3e3
      },
      {
        cat: 11,
        colors: [0, 225, 227, 230],
        creates: [217308, 1, 1],
        id: 439156,
        learnedat: 225,
        level: 0,
        name: "Sigil of Innovation",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[11137, 5]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [221028, 1, 1],
        id: 446243,
        learnedat: 250,
        level: 0,
        name: "Sigil of Living Dreams",
        nskillup: 1,
        phaseId: 3,
        quality: 2,
        reagents: [[11176, 5]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 120, 125, 130],
        creates: [220792, 1, 1],
        id: 448624,
        learnedat: 120,
        level: 0,
        name: "Scroll of Spatial Mending",
        nskillup: 1,
        phaseId: 3,
        quality: 2,
        reagents: [[4470, 1], [10940, 4]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 463871,
        learnedat: 320,
        level: 0,
        name: "Enchant Shield - Law of Nature",
        nskillup: 1,
        phaseId: 4,
        reagents: [[14344, 4], [16203, 12], [7078, 4], [7080, 4], [7076, 1], [12811, 1]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 285, 295, 305],
        creates: [228980, 0, 0],
        id: 463869,
        learnedat: 285,
        level: 0,
        name: "Conductive Shield Coating",
        nskillup: 1,
        phaseId: 4,
        quality: 1,
        reagents: [[16204, 2], [4625, 1], [8925, 1]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 305, 312, 320],
        creates: [228978, 1, 1],
        id: 463866,
        learnedat: 305,
        level: 0,
        name: "Sigil of Flowing Waters",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[16204, 1]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 310, 320, 330],
        creates: [232611, 0, 0],
        id: 471400,
        learnedat: 310,
        level: 0,
        name: "Magnificent Trollshine",
        nskillup: 1,
        phaseId: 6,
        quality: 1,
        reagents: [[8151, 3], [8152, 3], [14344, 2], [18256, 1]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [233990, 0, 0],
        id: 1213593,
        learnedat: 320,
        level: 0,
        name: "Speedstone",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234006, 10], [234010, 10], [20725, 6], [234004, 6], [2452, 20]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [233991, 0, 0],
        id: 1213595,
        learnedat: 320,
        level: 0,
        name: "Tear of the Dreamer",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234006, 10], [234010, 10], [20725, 4], [234003, 10], [234012, 10]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [233992, 0, 0],
        id: 1213598,
        learnedat: 320,
        level: 0,
        name: "Lodestone of Retaliation",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234007, 10], [234010, 5], [20725, 4], [234003, 10], [234011, 10]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [233993, 0, 0],
        id: 1213600,
        learnedat: 320,
        level: 0,
        name: "Enchanted Stopwatch",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234003, 3], [234005, 6], [14344, 4], [2459, 3]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [233994, 0, 0],
        id: 1213603,
        learnedat: 320,
        level: 0,
        name: "Ruby-Encrusted Broach",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234007, 10], [234010, 5], [20725, 6], [234003, 10], [234012, 10], [234011, 10]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [233995, 1, 1],
        id: 1213607,
        learnedat: 320,
        level: 0,
        name: "Scroll: Wrath of the Swarm",
        nskillup: 1,
        phaseId: 6,
        quality: 3,
        reagents: [[16203, 1], [14047, 1]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [233996, 0, 0],
        id: 1213610,
        learnedat: 320,
        level: 0,
        name: "Enchanted Repellent",
        nskillup: 1,
        phaseId: 6,
        quality: 1,
        reagents: [[234011, 3], [234012, 3], [16204, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1213616,
        learnedat: 320,
        level: 0,
        name: "Enchant Chest - Living Stats",
        nskillup: 1,
        phaseId: 6,
        reagents: [[20725, 2], [16204, 8], [16203, 5], [13458, 10], [234011, 2], [234010, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1213622,
        learnedat: 320,
        level: 0,
        name: "Enchant Gloves - Holy Power",
        nskillup: 1,
        phaseId: 6,
        reagents: [[20725, 2], [14344, 5], [13180, 5], [12735, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1213626,
        learnedat: 320,
        level: 0,
        name: "Enchant Gloves - Arcane Power",
        nskillup: 1,
        phaseId: 6,
        reagents: [[20725, 2], [14344, 5], [12753, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234e3, 0, 0],
        id: 1213628,
        learnedat: 320,
        level: 0,
        name: "Enchanted Prayer Tome",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 3], [234008, 10], [234003, 2], [12810, 4]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234001, 0, 0],
        id: 1213633,
        learnedat: 320,
        level: 0,
        name: "Enchanted Totem",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 3], [234012, 10], [234003, 2], [12810, 3]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234002, 0, 0],
        id: 1213635,
        learnedat: 320,
        level: 0,
        name: "Enchanted Mushroom",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 2], [234012, 20], [12810, 3], [234011, 4], [234010, 4]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234477, 0, 0],
        id: 1216005,
        learnedat: 320,
        level: 0,
        name: "Libram of Righteousness",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 3], [234008, 10], [234003, 2], [12810, 4]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234475, 0, 0],
        id: 1216007,
        learnedat: 320,
        level: 0,
        name: "Libram of the Exorcist",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 3], [234008, 10], [234003, 2], [12810, 4]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234476, 0, 0],
        id: 1216010,
        learnedat: 320,
        level: 0,
        name: "Libram of Sanctity",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 3], [234008, 10], [234003, 2], [12810, 4]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234480, 0, 0],
        id: 1216014,
        learnedat: 320,
        level: 0,
        name: "Totem of Pyroclastic Thunder",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 3], [234012, 10], [234003, 2], [12810, 3]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234478, 0, 0],
        id: 1216016,
        learnedat: 320,
        level: 0,
        name: "Totem of Thunderous Strikes",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 3], [234012, 10], [234003, 2], [12810, 3]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234479, 0, 0],
        id: 1216018,
        learnedat: 320,
        level: 0,
        name: "Totem of Flowing Magma",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 3], [234012, 10], [234003, 2], [12810, 3]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234474, 0, 0],
        id: 1216020,
        learnedat: 320,
        level: 0,
        name: "Idol of Sidereal Wrath",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 2], [234012, 20], [12810, 3], [234011, 4], [234010, 4]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234469, 0, 0],
        id: 1216022,
        learnedat: 320,
        level: 0,
        name: "Idol of Feline Ferocity",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 2], [234012, 20], [12810, 3], [234011, 4], [234010, 4]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        creates: [234468, 0, 0],
        id: 1216024,
        learnedat: 320,
        level: 0,
        name: "Idol of Ursin Power",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20725, 2], [234012, 20], [12810, 3], [234011, 4], [234010, 4]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1217189,
        learnedat: 320,
        level: 0,
        name: "Enchant Bracer - Spell Power",
        nskillup: 1,
        phaseId: 6,
        reagents: [[14344, 2], [16204, 20], [16203, 4], [7080, 2], [7078, 2], [7082, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1217203,
        learnedat: 320,
        level: 0,
        name: "Enchant Bracer - Agility",
        nskillup: 1,
        phaseId: 6,
        reagents: [[20725, 2], [16204, 10], [16203, 2], [7082, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1219577,
        learnedat: 320,
        level: 0,
        name: "Enchant Off-Hand - Superior Intellect",
        nskillup: 1,
        phaseId: 7,
        reagents: [[20725, 2], [16204, 18], [7082, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1219578,
        learnedat: 320,
        level: 0,
        name: "Enchant Off-Hand - Excellent Spirit",
        nskillup: 1,
        phaseId: 7,
        reagents: [[20725, 2], [16204, 18], [7080, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1219579,
        learnedat: 320,
        level: 0,
        name: "Enchant Off-Hand - Wisdom",
        nskillup: 1,
        phaseId: 7,
        reagents: [[14344, 6], [16204, 18], [7082, 1], [7080, 1]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1219580,
        learnedat: 320,
        level: 0,
        name: "Enchant 2H Weapon - Spellblasting",
        nskillup: 1,
        phaseId: 7,
        reagents: [[20725, 3], [16204, 24], [12938, 1], [8831, 6]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1219581,
        learnedat: 320,
        level: 0,
        name: "Enchant Shield - Excellent Stamina",
        nskillup: 1,
        phaseId: 7,
        reagents: [[14344, 6], [16204, 18], [7076, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1220623,
        learnedat: 320,
        level: 0,
        name: "Enchant Shield - Critical Strike",
        nskillup: 1,
        phaseId: 7,
        reagents: [[14344, 5], [16204, 15], [12938, 1]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1220624,
        learnedat: 320,
        level: 0,
        name: "Enchant Bracer - Greater Spellpower",
        nskillup: 1,
        phaseId: 7,
        reagents: [[16203, 3], [16204, 9], [12808, 12], [8831, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1219586,
        learnedat: 320,
        level: 0,
        name: "Enchant Gloves - Superior Strength",
        nskillup: 1,
        phaseId: 7,
        reagents: [[16203, 7], [16204, 21], [7078, 2]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      },
      {
        cat: 11,
        colors: [0, 320, 340, 360],
        id: 1219587,
        learnedat: 320,
        level: 0,
        name: "Enchant Cloak - Agility",
        nskillup: 1,
        phaseId: 7,
        reagents: [[16203, 3], [16204, 9], [7078, 1]],
        schools: 1,
        seasonId: 2,
        skill: [333]
      }
    ];
  }
});

// data/engineering.json
var require_engineering = __commonJS({
  "data/engineering.json"(exports, module) {
    module.exports = [
      {
        cat: 11,
        colors: [1, 20, 30, 40],
        creates: [4357, 1, 1],
        id: 3918,
        learnedat: 1,
        level: 0,
        name: "Rough Blasting Powder",
        nskillup: 1,
        quality: 1,
        reagents: [[2835, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [1, 30, 45, 60],
        creates: [4358, 2, 2],
        id: 3919,
        learnedat: 1,
        level: 0,
        name: "Rough Dynamite",
        nskillup: 1,
        quality: 1,
        reagents: [[4357, 2], [2589, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 30, 45, 60],
        creates: [8067, 200, 200],
        id: 3920,
        learnedat: 30,
        level: 0,
        name: "Crafted Light Shot",
        nskillup: 1,
        quality: 1,
        reagents: [[4357, 1], [2840, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [30, 45, 52, 60],
        creates: [4359, 1, 1],
        id: 3922,
        learnedat: 30,
        level: 0,
        name: "Handful of Copper Bolts",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 115
      },
      {
        cat: 11,
        colors: [30, 60, 75, 90],
        creates: [4360, 2, 2],
        id: 3923,
        learnedat: 30,
        level: 0,
        name: "Rough Copper Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 1], [4359, 1], [4357, 2], [2589, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 130
      },
      {
        cat: 11,
        colors: [50, 80, 95, 110],
        creates: [4361, 1, 1],
        id: 3924,
        learnedat: 50,
        level: 0,
        name: "Copper Tube",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 2], [2880, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 150
      },
      {
        cat: 11,
        colors: [50, 80, 95, 110],
        creates: [4362, 1, 1],
        id: 3925,
        learnedat: 50,
        level: 0,
        name: "Rough Boomstick",
        nskillup: 1,
        quality: 2,
        reagents: [[4361, 1], [4359, 1], [4399, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 150
      },
      {
        cat: 11,
        colors: [60, 90, 105, 120],
        creates: [4405, 1, 1],
        id: 3977,
        learnedat: 60,
        level: 0,
        name: "Crude Scope",
        nskillup: 1,
        quality: 1,
        reagents: [[4361, 1], [774, 1], [4359, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [90, 110, 125, 140],
        creates: [4404, 5, 5],
        id: 3973,
        learnedat: 90,
        level: 0,
        name: "Silver Contact",
        nskillup: 1,
        quality: 1,
        reagents: [[2842, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [65, 95, 110, 125],
        creates: [4363, 1, 1],
        id: 3926,
        learnedat: 65,
        level: 0,
        name: "Copper Modulator",
        nskillup: 1,
        quality: 1,
        reagents: [[4359, 2], [2840, 1], [2589, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 225
      },
      {
        cat: 11,
        colors: [75, 105, 120, 135],
        creates: [4401, 1, 1],
        id: 3928,
        learnedat: 75,
        level: 0,
        name: "Mechanical Squirrel",
        nskillup: 1,
        quality: 1,
        reagents: [[4363, 1], [4359, 1], [2840, 1], [774, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [75, 85, 90, 95],
        creates: [4364, 1, 1],
        id: 3929,
        learnedat: 75,
        level: 0,
        name: "Coarse Blasting Powder",
        nskillup: 1,
        quality: 1,
        reagents: [[2836, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [75, 85, 90, 95],
        creates: [8068, 200, 200],
        id: 3930,
        learnedat: 75,
        level: 0,
        name: "Crafted Heavy Shot",
        nskillup: 1,
        quality: 1,
        reagents: [[4364, 1], [2840, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [75, 90, 97, 105],
        creates: [4365, 1, 3],
        id: 3931,
        learnedat: 75,
        level: 0,
        name: "Coarse Dynamite",
        nskillup: 1,
        quality: 1,
        reagents: [[4364, 3], [2589, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [85, 115, 130, 145],
        creates: [4366, 1, 1],
        id: 3932,
        learnedat: 85,
        level: 0,
        name: "Target Dummy",
        nskillup: 1,
        quality: 1,
        reagents: [[4363, 1], [4359, 2], [2841, 1], [2592, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [100, 130, 145, 160],
        creates: [4367, 1, 1],
        id: 3933,
        learnedat: 100,
        level: 0,
        name: "Small Seaforium Charge",
        nskillup: 1,
        quality: 1,
        reagents: [[4364, 2], [4363, 1], [2318, 1], [159, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [100, 130, 145, 160],
        creates: [4368, 1, 1],
        id: 3934,
        learnedat: 100,
        level: 0,
        name: "Flying Tiger Goggles",
        nskillup: 1,
        quality: 2,
        reagents: [[2318, 6], [818, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 400
      },
      {
        cat: 11,
        colors: [105, 130, 142, 155],
        creates: [4369, 1, 1],
        id: 3936,
        learnedat: 105,
        level: 0,
        name: "Deadly Blunderbuss",
        nskillup: 1,
        quality: 2,
        reagents: [[4361, 2], [4359, 4], [4399, 1], [2319, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 420
      },
      {
        cat: 11,
        colors: [105, 105, 130, 155],
        creates: [4370, 2, 4],
        id: 3937,
        learnedat: 105,
        level: 0,
        name: "Large Copper Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 3], [4364, 4], [4404, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 450
      },
      {
        cat: 11,
        colors: [105, 105, 130, 155],
        creates: [4371, 1, 1],
        id: 3938,
        learnedat: 105,
        level: 0,
        name: "Bronze Tube",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 2], [2880, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 450
      },
      {
        cat: 11,
        colors: [110, 135, 147, 160],
        creates: [4406, 1, 1],
        id: 3978,
        learnedat: 110,
        level: 0,
        name: "Standard Scope",
        nskillup: 1,
        quality: 1,
        reagents: [[4371, 1], [1206, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 475
      },
      {
        cat: 11,
        colors: [120, 145, 157, 170],
        creates: [4372, 1, 1],
        id: 3939,
        learnedat: 120,
        level: 0,
        name: "Lovingly Crafted Boomstick",
        nskillup: 1,
        quality: 2,
        reagents: [[4371, 2], [4359, 2], [4400, 1], [1206, 3]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [120, 145, 157, 170],
        creates: [4373, 1, 1],
        id: 3940,
        learnedat: 120,
        level: 0,
        name: "Shadow Goggles",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 4], [1210, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [120, 120, 145, 170],
        creates: [4374, 1, 3],
        id: 3941,
        learnedat: 120,
        level: 0,
        name: "Small Bronze Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[4364, 4], [2841, 2], [4404, 1], [2592, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [125, 125, 150, 175],
        creates: [4375, 1, 1],
        id: 3942,
        learnedat: 125,
        level: 0,
        name: "Whirring Bronze Gizmo",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 2], [2592, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [125, 125, 150, 175],
        creates: [4376, 1, 1],
        id: 3944,
        learnedat: 125,
        level: 0,
        name: "Flame Deflector",
        nskillup: 1,
        quality: 1,
        reagents: [[4375, 1], [4402, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [125, 125, 135, 145],
        creates: [4377, 1, 1],
        id: 3945,
        learnedat: 125,
        level: 0,
        name: "Heavy Blasting Powder",
        nskillup: 1,
        quality: 1,
        reagents: [[2838, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [125, 125, 135, 145],
        creates: [4378, 1, 5],
        id: 3946,
        learnedat: 125,
        level: 0,
        name: "Heavy Dynamite",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 2], [2592, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [125, 125, 135, 145],
        creates: [8069, 200, 200],
        id: 3947,
        learnedat: 125,
        level: 0,
        name: "Crafted Solid Shot",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 1], [2841, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [130, 155, 167, 180],
        creates: [4379, 1, 1],
        id: 3949,
        learnedat: 130,
        level: 0,
        name: "Silver-plated Shotgun",
        nskillup: 1,
        quality: 2,
        reagents: [[4371, 2], [4375, 2], [4400, 1], [2842, 3]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 550
      },
      {
        cat: 11,
        colors: [140, 140, 165, 190],
        creates: [4380, 2, 4],
        id: 3950,
        learnedat: 140,
        level: 0,
        name: "Big Bronze Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 2], [2841, 3], [4404, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 600
      },
      {
        cat: 11,
        colors: [140, 165, 177, 190],
        creates: [4381, 1, 1],
        id: 3952,
        learnedat: 140,
        level: 0,
        name: "Minor Recombobulator",
        nskillup: 1,
        quality: 2,
        reagents: [[4371, 1], [4375, 2], [2319, 2], [1206, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [145, 145, 170, 195],
        creates: [4382, 1, 1],
        id: 3953,
        learnedat: 145,
        level: 0,
        name: "Bronze Framework",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 2], [2319, 1], [2592, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 600
      },
      {
        cat: 11,
        colors: [145, 170, 182, 195],
        creates: [4383, 1, 1],
        id: 3954,
        learnedat: 145,
        level: 0,
        name: "Moonsight Rifle",
        nskillup: 1,
        quality: 2,
        reagents: [[4371, 3], [4375, 3], [4400, 1], [1705, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [150, 175, 187, 200],
        creates: [4384, 1, 1],
        id: 3955,
        learnedat: 150,
        level: 0,
        name: "Explosive Sheep",
        nskillup: 1,
        quality: 1,
        reagents: [[4382, 1], [4375, 1], [4377, 2], [2592, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 750
      },
      {
        cat: 11,
        colors: [150, 175, 187, 200],
        creates: [4385, 1, 1],
        id: 3956,
        learnedat: 150,
        level: 0,
        name: "Green Tinted Goggles",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 4], [1206, 2], [4368, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 750
      },
      {
        cat: 11,
        colors: [155, 175, 185, 195],
        creates: [4386, 1, 1],
        id: 3957,
        learnedat: 155,
        level: 0,
        name: "Ice Deflector",
        nskillup: 1,
        quality: 1,
        reagents: [[4375, 1], [3829, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [160, 160, 170, 180],
        creates: [4387, 1, 1],
        id: 3958,
        learnedat: 160,
        level: 0,
        name: "Iron Strut",
        nskillup: 1,
        quality: 1,
        reagents: [[3575, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 800
      },
      {
        cat: 11,
        colors: [160, 180, 190, 200],
        creates: [4388, 1, 1],
        id: 3959,
        learnedat: 160,
        level: 0,
        name: "Discombobulator Ray",
        nskillup: 1,
        quality: 1,
        reagents: [[4375, 3], [4306, 2], [1529, 1], [4371, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [165, 185, 195, 205],
        creates: [4403, 1, 1],
        id: 3960,
        learnedat: 165,
        level: 0,
        name: "Portable Bronze Mortar",
        nskillup: 1,
        quality: 1,
        reagents: [[4371, 4], [4387, 1], [4377, 4], [2319, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [170, 170, 190, 210],
        creates: [4389, 1, 1],
        id: 3961,
        learnedat: 170,
        level: 0,
        name: "Gyrochronatom",
        nskillup: 1,
        quality: 1,
        reagents: [[3575, 1], [10558, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 900
      },
      {
        cat: 11,
        colors: [175, 175, 195, 215],
        creates: [4390, 2, 4],
        id: 3962,
        learnedat: 175,
        level: 0,
        name: "Iron Grenade",
        nskillup: 1,
        quality: 1,
        reagents: [[3575, 1], [4377, 1], [4306, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [175, 175, 195, 215],
        creates: [4391, 1, 1],
        id: 3963,
        learnedat: 175,
        level: 0,
        name: "Compact Harvest Reaper Kit",
        nskillup: 1,
        quality: 1,
        reagents: [[4387, 2], [4382, 1], [4389, 2], [4234, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [180, 200, 210, 220],
        creates: [4407, 1, 1],
        id: 3979,
        learnedat: 180,
        level: 0,
        name: "Accurate Scope",
        nskillup: 1,
        quality: 1,
        reagents: [[4371, 1], [1529, 1], [3864, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [185, 185, 205, 225],
        creates: [4392, 1, 1],
        id: 3965,
        learnedat: 185,
        level: 0,
        name: "Advanced Target Dummy",
        nskillup: 1,
        quality: 1,
        reagents: [[4387, 1], [4382, 1], [4389, 1], [4234, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1200
      },
      {
        cat: 11,
        colors: [185, 205, 215, 225],
        creates: [4393, 1, 1],
        id: 3966,
        learnedat: 185,
        level: 0,
        name: "Craftsman's Monocle",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 6], [3864, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [190, 190, 210, 230],
        creates: [4394, 2, 2],
        id: 3967,
        learnedat: 190,
        level: 0,
        name: "Big Iron Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[3575, 3], [4377, 3], [4404, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1400
      },
      {
        cat: 11,
        colors: [195, 215, 225, 235],
        creates: [4395, 1, 1],
        id: 3968,
        learnedat: 195,
        level: 0,
        name: "Goblin Land Mine",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 3], [3575, 2], [4389, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [200, 220, 230, 240],
        creates: [4396, 1, 1],
        id: 3969,
        learnedat: 200,
        level: 0,
        name: "Mechanical Dragonling",
        nskillup: 1,
        quality: 1,
        reagents: [[4382, 1], [4387, 4], [4389, 4], [3864, 2], [7191, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [200, 220, 230, 240],
        creates: [4397, 1, 1],
        id: 3971,
        learnedat: 200,
        level: 0,
        name: "Gnomish Cloaking Device",
        nskillup: 1,
        quality: 1,
        reagents: [[4389, 4], [1529, 2], [1705, 2], [3864, 2], [7191, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [200, 200, 220, 240],
        creates: [4398, 1, 1],
        id: 3972,
        learnedat: 200,
        level: 0,
        name: "Large Seaforium Charge",
        nskillup: 1,
        quality: 1,
        reagents: [[10505, 2], [4234, 2], [159, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [135, 160, 172, 185],
        creates: [5507, 1, 1],
        id: 6458,
        learnedat: 135,
        level: 0,
        name: "Ornate Spyglass",
        nskillup: 1,
        quality: 1,
        reagents: [[4371, 2], [4375, 2], [4363, 1], [1206, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 400
      },
      {
        cat: 11,
        colors: [50, 70, 80, 90],
        creates: [6219, 1, 1],
        id: 7430,
        learnedat: 50,
        level: 0,
        name: "Arclight Spanner",
        nskillup: 1,
        quality: 1,
        reagents: [[2840, 6]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 150
      },
      {
        cat: 11,
        colors: [185, 185, 205, 225],
        creates: [4852, 1, 1],
        id: 8243,
        learnedat: 185,
        level: 0,
        name: "Flash Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[4611, 1], [4377, 1], [4306, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [100, 115, 122, 130],
        creates: [6712, 1, 1],
        id: 8334,
        learnedat: 100,
        level: 0,
        name: "Practice Lock",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 1], [4359, 2], [2880, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [100, 115, 122, 130],
        creates: [6714, 1, 3],
        id: 8339,
        learnedat: 100,
        level: 0,
        name: "EZ-Thro Dynamite",
        nskillup: 1,
        quality: 1,
        reagents: [[4364, 4], [2592, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [7189, 1, 1],
        id: 8895,
        learnedat: 225,
        level: 0,
        name: "Goblin Rocket Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[10026, 1], [10559, 2], [4234, 4], [9061, 2], [10560, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 2200
      },
      {
        cat: 11,
        colors: [125, 150, 162, 175],
        creates: [7506, 1, 1],
        id: 9269,
        learnedat: 125,
        level: 0,
        name: "Gnomish Universal Remote",
        nskillup: 1,
        quality: 2,
        reagents: [[2841, 6], [4375, 1], [814, 2], [818, 1], [774, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [150, 150, 160, 170],
        creates: [6533, 3, 3],
        id: 9271,
        learnedat: 150,
        level: 0,
        name: "Aquadynamic Fish Attractor",
        nskillup: 1,
        quality: 1,
        reagents: [[2841, 2], [6530, 1], [4364, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [165, 165, 180, 200],
        creates: [7148, 1, 1],
        id: 9273,
        learnedat: 165,
        level: 0,
        name: "Goblin Jumper Cables",
        nskillup: 1,
        quality: 1,
        reagents: [[3575, 6], [4375, 2], [814, 2], [4306, 2], [1210, 2], [7191, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [150, 150, 170, 190],
        creates: [10558, 3, 3],
        id: 12584,
        learnedat: 150,
        level: 0,
        name: "Gold Power Core",
        nskillup: 1,
        quality: 1,
        reagents: [[3577, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [175, 175, 185, 195],
        creates: [10505, 1, 1],
        id: 12585,
        learnedat: 175,
        level: 0,
        name: "Solid Blasting Powder",
        nskillup: 1,
        quality: 1,
        reagents: [[7912, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [175, 175, 185, 195],
        creates: [10507, 2, 2],
        id: 12586,
        learnedat: 175,
        level: 0,
        name: "Solid Dynamite",
        nskillup: 1,
        quality: 1,
        reagents: [[10505, 1], [4306, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [175, 195, 205, 215],
        creates: [10499, 1, 1],
        id: 12587,
        learnedat: 175,
        level: 0,
        name: "Bright-Eye Goggles",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 6], [3864, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [175, 175, 195, 215],
        creates: [10498, 1, 1],
        id: 12590,
        learnedat: 175,
        level: 0,
        name: "Gyromatic Micro-Adjustor",
        nskillup: 1,
        quality: 1,
        reagents: [[3859, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [195, 195, 215, 235],
        creates: [10559, 1, 1],
        id: 12589,
        learnedat: 195,
        level: 0,
        name: "Mithril Tube",
        nskillup: 1,
        quality: 1,
        reagents: [[3860, 3]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1300
      },
      {
        cat: 11,
        colors: [200, 200, 220, 240],
        creates: [10560, 1, 1],
        id: 12591,
        learnedat: 200,
        level: 0,
        name: "Unstable Trigger",
        nskillup: 1,
        quality: 1,
        reagents: [[3860, 1], [4338, 1], [10505, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1500
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [10500, 1, 1],
        id: 12594,
        learnedat: 205,
        level: 0,
        name: "Fire Goggles",
        nskillup: 1,
        quality: 2,
        reagents: [[4385, 1], [3864, 2], [7068, 2], [4234, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1600
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [10508, 1, 1],
        id: 12595,
        learnedat: 205,
        level: 0,
        name: "Mithril Blunderbuss",
        nskillup: 1,
        quality: 2,
        reagents: [[10559, 1], [10560, 1], [4400, 1], [3860, 4], [7068, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1600
      },
      {
        cat: 11,
        colors: [210, 210, 230, 250],
        creates: [10512, 200, 200],
        id: 12596,
        learnedat: 210,
        level: 0,
        name: "Hi-Impact Mithril Slugs",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 1], [10505, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1700
      },
      {
        cat: 11,
        colors: [210, 230, 240, 250],
        creates: [10546, 1, 1],
        id: 12597,
        learnedat: 210,
        level: 0,
        name: "Deadly Scope",
        nskillup: 1,
        quality: 1,
        reagents: [[10559, 1], [7909, 2], [4304, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [215, 215, 235, 255],
        creates: [10561, 1, 1],
        id: 12599,
        learnedat: 215,
        level: 0,
        name: "Mithril Casing",
        nskillup: 1,
        quality: 1,
        reagents: [[3860, 3]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1800
      },
      {
        cat: 11,
        colors: [215, 215, 235, 255],
        creates: [10514, 3, 3],
        id: 12603,
        learnedat: 215,
        level: 0,
        name: "Mithril Frag Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 1], [10560, 1], [10505, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1800
      },
      {
        cat: 11,
        colors: [220, 240, 250, 260],
        creates: [10501, 1, 1],
        id: 12607,
        learnedat: 220,
        level: 0,
        name: "Catseye Ultra Goggles",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 4], [7909, 2], [10592, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [220, 240, 250, 260],
        creates: [10510, 1, 1],
        id: 12614,
        learnedat: 220,
        level: 0,
        name: "Mithril Heavy-bore Rifle",
        nskillup: 1,
        quality: 2,
        reagents: [[10559, 2], [10560, 1], [4400, 1], [3860, 6], [3864, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [10502, 1, 1],
        id: 12615,
        learnedat: 225,
        level: 0,
        name: "Spellpower Goggles Xtreme",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 4], [7910, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [10518, 1, 1],
        id: 12616,
        learnedat: 225,
        level: 0,
        name: "Parachute Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 4], [10285, 2], [10560, 1], [10505, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [230, 250, 260, 270],
        creates: [10506, 1, 1],
        id: 12617,
        learnedat: 230,
        level: 0,
        name: "Deepdive Helmet",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 8], [10561, 1], [6037, 1], [818, 4], [774, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [230, 250, 260, 270],
        creates: [10503, 1, 1],
        id: 12618,
        learnedat: 230,
        level: 0,
        name: "Rose Colored Goggles",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 6], [7910, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 2200
      },
      {
        cat: 11,
        colors: [235, 235, 255, 275],
        creates: [10562, 4, 4],
        id: 12619,
        learnedat: 235,
        level: 0,
        name: "Hi-Explosive Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 2], [10560, 1], [10505, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 2400
      },
      {
        cat: 11,
        colors: [240, 260, 270, 280],
        creates: [10548, 1, 1],
        id: 12620,
        learnedat: 240,
        level: 0,
        name: "Sniper Scope",
        nskillup: 1,
        quality: 1,
        reagents: [[10559, 1], [7910, 1], [6037, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [245, 245, 265, 285],
        creates: [10513, 200, 200],
        id: 12621,
        learnedat: 245,
        level: 0,
        name: "Mithril Gyro-Shot",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 2], [10505, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 2800
      },
      {
        cat: 11,
        colors: [245, 265, 275, 285],
        creates: [10504, 1, 1],
        id: 12622,
        learnedat: 245,
        level: 0,
        name: "Green Lens",
        nskillup: 1,
        quality: 3,
        reagents: [[4304, 8], [1529, 3], [7909, 3], [10286, 2], [8153, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 2800
      },
      {
        cat: 11,
        colors: [250, 270, 280, 290],
        creates: [10576, 1, 1],
        id: 12624,
        learnedat: 250,
        level: 0,
        name: "Mithril Mechanical Dragonling",
        nskillup: 1,
        quality: 1,
        reagents: [[3860, 14], [7077, 4], [6037, 4], [9060, 2], [9061, 2], [7910, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [205, 205, 205, 205],
        creates: [10644, 1, 1],
        id: 12715,
        learnedat: 205,
        level: 0,
        name: "Goblin Rocket Fuel Recipe",
        nskillup: 1,
        quality: 1,
        reagents: [[10648, 1], [10647, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [0, 225, 235, 245],
        creates: [10577, 1, 1],
        id: 12716,
        learnedat: 225,
        level: 0,
        name: "Goblin Mortar",
        nskillup: 1,
        quality: 1,
        reagents: [[10559, 2], [3860, 4], [10505, 5], [10558, 1], [7068, 1]],
        schools: 1,
        skill: [202],
        specialization: 20222
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [10542, 1, 1],
        id: 12717,
        learnedat: 205,
        level: 0,
        name: "Goblin Mining Helmet",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 8], [3864, 1], [7067, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 1500
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [10543, 1, 1],
        id: 12718,
        learnedat: 205,
        level: 0,
        name: "Goblin Construction Helmet",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 8], [3864, 1], [7068, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 1500
      },
      {
        cat: 11,
        colors: [205, 205, 225, 245],
        creates: [10646, 1, 1],
        id: 12760,
        learnedat: 205,
        level: 0,
        name: "Goblin Sapper Charge",
        nskillup: 1,
        quality: 1,
        reagents: [[4338, 1], [10505, 3], [10560, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 1500
      },
      {
        cat: 0,
        creates: [10579, 100, 100],
        id: 12719,
        level: 0,
        name: "Explosive Arrow",
        nskillup: 1,
        quality: 3,
        reagents: [[3030, 100], [10505, 2], [3860, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 0,
        creates: [10580, 1, 1],
        id: 12720,
        level: 0,
        name: 'Goblin "Boom" Box',
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 1], [10505, 2], [10558, 1], [3860, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 0,
        creates: [10585, 1, 1],
        id: 12722,
        level: 0,
        name: "Goblin Radio",
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 1], [3860, 2], [4389, 1], [10560, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [230, 230, 250, 270],
        creates: [10587, 1, 1],
        id: 12755,
        learnedat: 230,
        level: 0,
        name: "Goblin Bomb Dispenser",
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 2], [10505, 4], [6037, 6], [10560, 1], [4407, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 2400
      },
      {
        cat: 11,
        colors: [235, 235, 255, 275],
        creates: [10586, 2, 2],
        id: 12754,
        learnedat: 235,
        level: 0,
        name: "The Big One",
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 1], [9061, 1], [10507, 6], [10560, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 2600
      },
      {
        cat: 11,
        colors: [240, 260, 270, 280],
        creates: [10645, 1, 1],
        id: 12759,
        learnedat: 240,
        level: 0,
        name: "Gnomish Death Ray",
        nskillup: 1,
        quality: 1,
        reagents: [[10559, 2], [10560, 1], [12808, 1], [7972, 4], [9060, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20219,
        trainingcost: 2800
      },
      {
        cat: 11,
        colors: [245, 265, 275, 285],
        creates: [10588, 1, 1],
        id: 12758,
        learnedat: 245,
        level: 0,
        name: "Goblin Rocket Helmet",
        nskillup: 1,
        quality: 2,
        reagents: [[10543, 1], [9061, 4], [3860, 4], [10560, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 3e3
      },
      {
        cat: 11,
        colors: [205, 205, 205, 205],
        creates: [10713, 1, 1],
        id: 12895,
        learnedat: 205,
        level: 0,
        name: "Inlaid Mithril Cylinder Plans",
        nskillup: 1,
        quality: 1,
        reagents: [[10648, 1], [10647, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20219,
        trainingcost: 1500
      },
      {
        cat: 11,
        colors: [210, 230, 240, 250],
        creates: [10545, 1, 1],
        id: 12897,
        learnedat: 210,
        level: 0,
        name: "Gnomish Goggles",
        nskillup: 1,
        quality: 2,
        reagents: [[10500, 1], [10559, 1], [10558, 2], [8151, 2], [4234, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20219,
        trainingcost: 1500
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [10716, 1, 1],
        id: 12899,
        learnedat: 205,
        level: 0,
        name: "Gnomish Shrink Ray",
        nskillup: 1,
        quality: 1,
        reagents: [[10559, 1], [10560, 1], [3860, 4], [8151, 4], [1529, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20219,
        trainingcost: 1500
      },
      {
        cat: 0,
        creates: [10719, 1, 1],
        id: 12900,
        level: 0,
        name: "Mobile Alarm",
        nskillup: 1,
        quality: 1,
        reagents: [[10559, 1], [10560, 1], [3860, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [210, 230, 240, 250],
        creates: [10720, 1, 1],
        id: 12902,
        learnedat: 210,
        level: 0,
        name: "Gnomish Net-o-Matic Projector",
        nskillup: 1,
        quality: 1,
        reagents: [[10559, 1], [10285, 2], [4337, 4], [10505, 2], [3860, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20219,
        trainingcost: 1800
      },
      {
        cat: 11,
        colors: [215, 235, 245, 255],
        creates: [10721, 1, 1],
        id: 12903,
        learnedat: 215,
        level: 0,
        name: "Gnomish Harm Prevention Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[7387, 1], [3860, 4], [6037, 2], [10560, 1], [7909, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20219,
        trainingcost: 2e3
      },
      {
        cat: 0,
        creates: [10723, 1, 1],
        id: 12904,
        level: 0,
        name: "Gnomish Ham Radio",
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 1], [3860, 2], [4389, 1], [10560, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [10724, 1, 1],
        id: 12905,
        learnedat: 225,
        level: 0,
        name: "Gnomish Rocket Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[10026, 1], [10559, 2], [4234, 4], [10505, 8], [4389, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20219,
        trainingcost: 2200
      },
      {
        cat: 11,
        colors: [230, 250, 260, 270],
        creates: [10725, 1, 1],
        id: 12906,
        learnedat: 230,
        level: 0,
        name: "Gnomish Battle Chicken",
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 1], [6037, 6], [3860, 6], [9060, 2], [10558, 1], [1529, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20219,
        trainingcost: 2400
      },
      {
        cat: 11,
        colors: [235, 255, 265, 275],
        creates: [10726, 1, 1],
        id: 12907,
        learnedat: 235,
        level: 0,
        name: "Gnomish Mind Control Cap",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 10], [6037, 4], [10558, 1], [7910, 2], [4338, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20219,
        trainingcost: 2600
      },
      {
        cat: 11,
        colors: [240, 260, 270, 280],
        creates: [10727, 1, 1],
        id: 12908,
        learnedat: 240,
        level: 0,
        name: "Goblin Dragon Gun",
        nskillup: 1,
        quality: 1,
        reagents: [[10559, 2], [9061, 4], [3860, 6], [6037, 6], [10560, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 2800
      },
      {
        cat: 11,
        creates: [10577, 1, 1],
        id: 13240,
        learnedat: 205,
        level: 0,
        name: "The Mortar: Reloaded",
        nskillup: 1,
        quality: 1,
        reagents: [[10577, 1], [3860, 1], [10505, 3]],
        schools: 1,
        skill: [202],
        source: [6],
        specialization: 20222,
        trainingcost: 1500
      },
      {
        cat: 11,
        colors: [200, 200, 220, 240],
        creates: [11590, 1, 1],
        id: 15255,
        learnedat: 200,
        level: 0,
        name: "Mechanical Repair Kit",
        nskillup: 1,
        quality: 1,
        reagents: [[3860, 1], [4338, 1], [10505, 1]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 1500
      },
      {
        cat: 11,
        colors: [205, 205, 205, 205],
        creates: [11826, 1, 1],
        id: 15633,
        learnedat: 205,
        level: 0,
        name: "Lil' Smoky",
        nskillup: 1,
        quality: 1,
        reagents: [[7075, 1], [4389, 2], [7191, 1], [3860, 2], [6037, 1]],
        schools: 1,
        skill: [202],
        specialization: 20219
      },
      {
        cat: 11,
        colors: [205, 205, 205, 205],
        creates: [11825, 1, 1],
        id: 15628,
        learnedat: 205,
        level: 0,
        name: "Pet Bombling",
        nskillup: 1,
        quality: 1,
        reagents: [[4394, 1], [7077, 1], [7191, 1], [3860, 6]],
        schools: 1,
        skill: [202],
        specialization: 20222
      },
      {
        cat: 11,
        colors: [250, 270, 280, 290],
        creates: [15846, 1, 1],
        id: 19567,
        learnedat: 250,
        level: 0,
        name: "Salt Shaker",
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 1], [12359, 6], [10558, 1], [10560, 4]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [250, 250, 255, 260],
        creates: [15992, 1, 1],
        id: 19788,
        learnedat: 250,
        level: 0,
        name: "Dense Blasting Powder",
        nskillup: 1,
        quality: 1,
        reagents: [[12365, 2]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [260, 280, 290, 300],
        creates: [15993, 3, 3],
        id: 19790,
        learnedat: 260,
        level: 0,
        name: "Thorium Grenade",
        nskillup: 1,
        quality: 1,
        reagents: [[15994, 1], [12359, 3], [15992, 3], [14047, 3]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [260, 280, 290, 300],
        creates: [15995, 1, 1],
        id: 19792,
        learnedat: 260,
        level: 0,
        name: "Thorium Rifle",
        nskillup: 1,
        quality: 2,
        reagents: [[10559, 2], [10561, 2], [15994, 2], [12359, 4], [10546, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [260, 280, 290, 300],
        creates: [15994, 1, 1],
        id: 19791,
        learnedat: 260,
        level: 0,
        name: "Thorium Widget",
        nskillup: 1,
        quality: 1,
        reagents: [[12359, 3], [14047, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [265, 285, 295, 305],
        creates: [15996, 1, 1],
        id: 19793,
        learnedat: 265,
        level: 0,
        name: "Lifelike Mechanical Toad",
        nskillup: 1,
        quality: 1,
        reagents: [[12803, 1], [15994, 4], [10558, 1], [8170, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [15999, 1, 1],
        id: 19794,
        learnedat: 270,
        level: 0,
        name: "Spellpower Goggles Xtreme Plus",
        nskillup: 1,
        quality: 2,
        reagents: [[10502, 1], [7910, 4], [12810, 2], [14047, 8]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [16004, 1, 1],
        id: 19796,
        learnedat: 275,
        level: 0,
        name: "Dark Iron Rifle",
        nskillup: 1,
        quality: 3,
        reagents: [[16e3, 2], [11371, 6], [10546, 2], [12361, 2], [12799, 2], [8170, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [16023, 1, 1],
        id: 19814,
        learnedat: 275,
        level: 0,
        name: "Masterwork Target Dummy",
        nskillup: 1,
        quality: 1,
        reagents: [[10561, 1], [16e3, 1], [15994, 2], [6037, 1], [8170, 2], [14047, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [16e3, 1, 1],
        id: 19795,
        learnedat: 275,
        level: 0,
        name: "Thorium Tube",
        nskillup: 1,
        quality: 1,
        reagents: [[12359, 6]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [16006, 1, 1],
        id: 19815,
        learnedat: 285,
        level: 0,
        name: "Delicate Arcanite Converter",
        nskillup: 1,
        quality: 1,
        reagents: [[12360, 1], [14227, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [16005, 3, 3],
        id: 19799,
        learnedat: 285,
        level: 0,
        name: "Dark Iron Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[15994, 2], [11371, 1], [15992, 3], [14047, 3]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [15997, 200, 200],
        id: 19800,
        learnedat: 285,
        level: 0,
        name: "Thorium Shells",
        nskillup: 1,
        quality: 2,
        reagents: [[12359, 2], [15992, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [16009, 1, 1],
        id: 19819,
        learnedat: 290,
        level: 0,
        name: "Voice Amplification Modulator",
        nskillup: 1,
        quality: 2,
        reagents: [[16006, 2], [10558, 1], [15994, 1], [12799, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [16040, 3, 3],
        id: 19831,
        learnedat: 300,
        level: 0,
        name: "Arcane Bomb",
        nskillup: 1,
        quality: 1,
        reagents: [[16006, 1], [12359, 3], [14047, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [16022, 1, 1],
        id: 19830,
        learnedat: 300,
        level: 0,
        name: "Arcanite Dragonling",
        nskillup: 1,
        quality: 3,
        reagents: [[10576, 1], [16006, 8], [12655, 10], [15994, 6], [10558, 4], [12810, 6]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [16008, 1, 1],
        id: 19825,
        learnedat: 290,
        level: 0,
        name: "Master Engineer's Goggles",
        nskillup: 1,
        quality: 2,
        reagents: [[10500, 1], [12364, 2], [12810, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [16007, 1, 1],
        id: 19833,
        learnedat: 300,
        level: 0,
        name: "Flawless Arcanite Rifle",
        nskillup: 1,
        quality: 3,
        reagents: [[12360, 10], [16e3, 2], [7078, 2], [7076, 2], [12800, 2], [12810, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [190, 190, 210, 230],
        creates: [17716, 1, 1],
        id: 21940,
        learnedat: 190,
        level: 0,
        name: "SnowMaster 9000",
        nskillup: 1,
        quality: 1,
        reagents: [[3860, 8], [4389, 4], [17202, 4], [3829, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18232, 1, 1],
        id: 22704,
        learnedat: 300,
        level: 0,
        name: "Field Repair Bot 74A",
        nskillup: 1,
        quality: 1,
        reagents: [[12359, 12], [8170, 4], [7191, 1], [7067, 2], [7068, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18283, 1, 1],
        id: 22793,
        learnedat: 300,
        level: 0,
        name: "Biznicks 247x128 Accurascope",
        nskillup: 1,
        quality: 3,
        reagents: [[17011, 2], [7076, 2], [16006, 4], [11371, 6], [16e3, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18282, 1, 1],
        id: 22795,
        learnedat: 300,
        level: 0,
        name: "Core Marksman Rifle",
        nskillup: 1,
        quality: 4,
        reagents: [[17010, 4], [17011, 2], [12360, 6], [16006, 2], [16e3, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18168, 1, 1],
        id: 22797,
        learnedat: 300,
        level: 0,
        name: "Force Reactive Disk",
        nskillup: 1,
        quality: 4,
        reagents: [[12360, 6], [16006, 2], [7082, 8], [12803, 12], [7076, 8]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [150, 150, 162, 175],
        creates: [9318, 3, 3],
        id: 23066,
        learnedat: 150,
        level: 0,
        name: "Red Firework",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 1], [4234, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [150, 150, 162, 175],
        creates: [9313, 3, 3],
        id: 23068,
        learnedat: 150,
        level: 0,
        name: "Green Firework",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 1], [4234, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [150, 150, 162, 175],
        creates: [9312, 3, 3],
        id: 23067,
        learnedat: 150,
        level: 0,
        name: "Blue Firework",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 1], [4234, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [200, 200, 210, 220],
        creates: [18588, 1, 1],
        id: 23069,
        learnedat: 200,
        level: 0,
        name: "EZ-Thro Dynamite II",
        nskillup: 1,
        quality: 1,
        reagents: [[10505, 1], [4338, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [250, 250, 260, 270],
        creates: [18641, 2, 2],
        id: 23070,
        learnedat: 250,
        level: 0,
        name: "Dense Dynamite",
        nskillup: 1,
        quality: 1,
        reagents: [[15992, 2], [14047, 3]],
        schools: 1,
        skill: [202],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [260, 270, 275, 280],
        creates: [18631, 1, 1],
        id: 23071,
        learnedat: 260,
        level: 0,
        name: "Truesilver Transformer",
        nskillup: 1,
        quality: 1,
        reagents: [[6037, 2], [7067, 2], [7069, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [260, 280, 290, 300],
        creates: [18634, 1, 1],
        id: 23077,
        learnedat: 260,
        level: 0,
        name: "Gyrofreeze Ice Reflector",
        nskillup: 1,
        quality: 3,
        reagents: [[15994, 6], [18631, 2], [12361, 2], [7078, 4], [3829, 2], [13467, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [265, 285, 295, 305],
        creates: [18587, 1, 1],
        id: 23078,
        learnedat: 265,
        level: 0,
        name: "Goblin Jumper Cables XL",
        nskillup: 1,
        quality: 1,
        reagents: [[15994, 2], [18631, 2], [7191, 2], [14227, 2], [7910, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 285, 290, 295],
        creates: [18637, 1, 1],
        id: 23079,
        learnedat: 275,
        level: 0,
        name: "Major Recombobulator",
        nskillup: 1,
        quality: 2,
        reagents: [[16e3, 2], [18631, 1], [14047, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 275, 285, 295],
        creates: [18594, 1, 1],
        id: 23080,
        learnedat: 275,
        level: 0,
        name: "Powerful Seaforium Charge",
        nskillup: 1,
        quality: 1,
        reagents: [[15994, 2], [15992, 3], [8170, 2], [159, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [18638, 1, 1],
        id: 23081,
        learnedat: 290,
        level: 0,
        name: "Hyper-Radiant Flame Reflector",
        nskillup: 1,
        quality: 3,
        reagents: [[11371, 4], [18631, 3], [7080, 6], [7910, 4], [12800, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18639, 1, 1],
        id: 23082,
        learnedat: 300,
        level: 0,
        name: "Ultra-Flash Shadow Reflector",
        nskillup: 1,
        quality: 3,
        reagents: [[11371, 8], [18631, 4], [12803, 6], [12808, 4], [12800, 2], [12799, 2]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [265, 275, 280, 285],
        creates: [18645, 1, 1],
        id: 23096,
        learnedat: 265,
        level: 0,
        name: "Alarm-O-Bot",
        nskillup: 1,
        quality: 1,
        reagents: [[12359, 4], [15994, 2], [8170, 4], [7910, 1], [7191, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [260, 260, 265, 270],
        creates: [18660, 1, 1],
        id: 23129,
        learnedat: 260,
        level: 0,
        name: "World Enlarger",
        nskillup: 1,
        quality: 2,
        reagents: [[10561, 1], [15994, 2], [10558, 1], [10560, 1], [3864, 1]],
        schools: 1,
        skill: [202],
        specialization: 20219
      },
      {
        cat: 11,
        colors: [0, 285, 295, 305],
        creates: [18986, 1, 1],
        id: 23489,
        learnedat: 285,
        level: 0,
        name: "Ultrasafe Transporter - Gadgetzan",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 12], [18631, 2], [7075, 4], [7079, 2], [7909, 4], [9060, 1]],
        schools: 1,
        skill: [202],
        specialization: 20219
      },
      {
        cat: 11,
        colors: [0, 285, 295, 305],
        creates: [18984, 1, 1],
        id: 23486,
        learnedat: 285,
        level: 0,
        name: "Dimensional Ripper - Everlook",
        nskillup: 1,
        quality: 2,
        reagents: [[3860, 10], [18631, 1], [7077, 4], [7910, 2], [10586, 1]],
        schools: 1,
        skill: [202],
        specialization: 20222
      },
      {
        cat: 11,
        colors: [250, 250, 260, 270],
        creates: [19026, 4, 4],
        id: 23507,
        learnedat: 250,
        level: 0,
        name: "Snake Burst Firework",
        nskillup: 1,
        quality: 1,
        reagents: [[15992, 2], [14047, 2], [8150, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19999, 1, 1],
        id: 24356,
        learnedat: 300,
        level: 0,
        name: "Bloodvine Goggles",
        nskillup: 1,
        quality: 3,
        reagents: [[19726, 4], [19774, 5], [16006, 2], [12804, 8], [12810, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19998, 1, 1],
        id: 24357,
        learnedat: 300,
        level: 0,
        name: "Bloodvine Lens",
        nskillup: 1,
        quality: 3,
        reagents: [[19726, 5], [19774, 5], [16006, 1], [12804, 8], [12810, 4]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [250, 320, 330, 340],
        creates: [21277, 1, 1],
        id: 26011,
        learnedat: 250,
        level: 0,
        name: "Tranquil Mechanical Yeti",
        nskillup: 1,
        quality: 1,
        reagents: [[15407, 1], [15994, 4], [7079, 2], [18631, 2], [10558, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [125, 125, 137, 150],
        creates: [21558, 3, 3],
        id: 26416,
        learnedat: 125,
        level: 0,
        name: "Small Blue Rocket",
        nskillup: 1,
        quality: 1,
        reagents: [[4364, 1], [2319, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [125, 125, 137, 150],
        creates: [21559, 3, 3],
        id: 26417,
        learnedat: 125,
        level: 0,
        name: "Small Green Rocket",
        nskillup: 1,
        quality: 1,
        reagents: [[4364, 1], [2319, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [125, 125, 137, 150],
        creates: [21557, 3, 3],
        id: 26418,
        learnedat: 125,
        level: 0,
        name: "Small Red Rocket",
        nskillup: 1,
        quality: 1,
        reagents: [[4364, 1], [2319, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [175, 175, 187, 200],
        creates: [21589, 3, 3],
        id: 26420,
        learnedat: 175,
        level: 0,
        name: "Large Blue Rocket",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 1], [4234, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [175, 175, 187, 200],
        creates: [21590, 3, 3],
        id: 26421,
        learnedat: 175,
        level: 0,
        name: "Large Green Rocket",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 1], [4234, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [175, 175, 187, 200],
        creates: [21592, 3, 3],
        id: 26422,
        learnedat: 175,
        level: 0,
        name: "Large Red Rocket",
        nskillup: 1,
        quality: 1,
        reagents: [[4377, 1], [4234, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [225, 225, 237, 250],
        creates: [21571, 3, 3],
        id: 26423,
        learnedat: 225,
        level: 0,
        name: "Blue Rocket Cluster",
        nskillup: 1,
        quality: 1,
        reagents: [[10505, 1], [4304, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [225, 225, 237, 250],
        creates: [21574, 3, 3],
        id: 26424,
        learnedat: 225,
        level: 0,
        name: "Green Rocket Cluster",
        nskillup: 1,
        quality: 1,
        reagents: [[10505, 1], [4304, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [225, 225, 237, 250],
        creates: [21576, 3, 3],
        id: 26425,
        learnedat: 225,
        level: 0,
        name: "Red Rocket Cluster",
        nskillup: 1,
        quality: 1,
        reagents: [[10505, 1], [4304, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 275, 280, 285],
        creates: [21714, 3, 3],
        id: 26426,
        learnedat: 275,
        level: 0,
        name: "Large Blue Rocket Cluster",
        nskillup: 1,
        quality: 1,
        reagents: [[15992, 1], [8170, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 275, 280, 285],
        creates: [21716, 3, 3],
        id: 26427,
        learnedat: 275,
        level: 0,
        name: "Large Green Rocket Cluster",
        nskillup: 1,
        quality: 1,
        reagents: [[15992, 1], [8170, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 275, 280, 285],
        creates: [21718, 3, 3],
        id: 26428,
        learnedat: 275,
        level: 0,
        name: "Large Red Rocket Cluster",
        nskillup: 1,
        quality: 1,
        reagents: [[15992, 1], [8170, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [21569, 1, 1],
        id: 26442,
        learnedat: 225,
        level: 0,
        name: "Firework Launcher",
        nskillup: 1,
        quality: 1,
        reagents: [[9060, 1], [9061, 1], [10560, 1], [10561, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [21570, 1, 1],
        id: 26443,
        learnedat: 275,
        level: 0,
        name: "Firework Cluster Launcher",
        nskillup: 1,
        quality: 1,
        reagents: [[9060, 4], [9061, 4], [18631, 2], [10561, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [22728, 1, 1],
        id: 28327,
        learnedat: 275,
        level: 0,
        name: "Steam Tonk Controller",
        nskillup: 1,
        quality: 1,
        reagents: [[15994, 2], [10561, 1], [10558, 1]],
        schools: 1,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 135, 140, 145],
        creates: [210147, 1, 1],
        id: 424641,
        learnedat: 135,
        level: 0,
        name: "Shredder Autosalvage Unit",
        nskillup: 1,
        phaseId: 1,
        quality: 1,
        reagents: [[4382, 1], [4375, 2], [4234, 1]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 205, 210, 215],
        creates: [211427, 1, 1],
        id: 431362,
        learnedat: 205,
        level: 0,
        name: "Soul Vessel",
        nskillup: 1,
        phaseId: 2,
        quality: 3,
        reagents: [[1210, 4], [9262, 1], [16583, 1]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 200, 210, 220],
        creates: [213383, 1, 1],
        id: 435956,
        learnedat: 200,
        level: 0,
        name: "Polished Truesilver Gears",
        nskillup: 1,
        phaseId: 2,
        quality: 3,
        reagents: [[6037, 1], [213381, 5]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215168, 2, 5],
        id: 435966,
        learnedat: 225,
        level: 0,
        name: "Ez-Thro Radiation Bomb",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[10505, 2], [215430, 1], [3860, 2]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 225, 232, 240],
        creates: [213390, 1, 1],
        id: 435958,
        learnedat: 225,
        level: 0,
        name: "Whirling Truesilver Gearwall",
        nskillup: 1,
        phaseId: 2,
        quality: 4,
        reagents: [[213376, 3], [213383, 5], [213369, 2], [10561, 2], [4389, 2], [3860, 15]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215127, 2, 5],
        id: 435964,
        learnedat: 225,
        level: 0,
        name: "High-Yield Radiation Bomb",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[10505, 1], [215430, 1], [3860, 2]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215115, 1, 1],
        id: 435960,
        learnedat: 225,
        level: 0,
        name: "Hyperconductive Goldwap",
        nskillup: 1,
        phaseId: 2,
        quality: 4,
        reagents: [[213383, 3], [213379, 3], [213369, 1], [3577, 10]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [221025, 1, 1],
        id: 446236,
        learnedat: 250,
        level: 0,
        name: "Void-Powered Invoker's Vambraces",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [220689, 1], [10558, 2], [15994, 2]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [221027, 1, 1],
        id: 446238,
        learnedat: 250,
        level: 0,
        name: "Void-Powered Protector's Vambraces",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [220689, 1], [10558, 2], [16e3, 2]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [221026, 1, 1],
        id: 446237,
        learnedat: 250,
        level: 0,
        name: "Void-Powered Slayer's Vambraces",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [220689, 1], [15992, 3], [7910, 2]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227849, 1, 1],
        id: 461710,
        learnedat: 320,
        level: 0,
        name: "Fiery Core Sharpshooter Rifle",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[17010, 4], [17011, 2], [12360, 6], [16006, 2], [16e3, 2]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 315, 322, 330],
        creates: [233984, 5, 5],
        id: 1213573,
        learnedat: 315,
        level: 0,
        name: "Arcane Megabomb",
        nskillup: 1,
        phaseId: 6,
        quality: 1,
        reagents: [[16006, 1], [20725, 1], [14047, 1]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 315, 322, 330],
        creates: [233985, 1, 1],
        id: 1213576,
        learnedat: 315,
        level: 0,
        name: "The Fumigator",
        nskillup: 1,
        phaseId: 6,
        quality: 1,
        reagents: [[234011, 1], [234005, 2], [14047, 1]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 315, 322, 330],
        creates: [233986, 3, 3],
        id: 1213578,
        learnedat: 315,
        level: 0,
        name: "Obsidian Bomb",
        nskillup: 1,
        phaseId: 6,
        quality: 1,
        reagents: [[234005, 3], [234007, 1], [234008, 1], [12365, 1]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 315, 322, 330],
        creates: [233987, 1, 1],
        id: 1213586,
        learnedat: 315,
        level: 0,
        name: "G00 DV-1B3 Generator",
        nskillup: 1,
        phaseId: 6,
        quality: 3,
        reagents: [[234005, 20], [234012, 30], [234009, 8], [234011, 8], [234010, 8], [234007, 8]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 315, 322, 330],
        creates: [233988, 1, 1],
        id: 1213588,
        learnedat: 315,
        level: 0,
        name: "Tuned Force Reactive Disk",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[18168, 1], [234007, 4], [234003, 8], [234005, 5]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 315, 322, 330],
        creates: [234005, 1, 1],
        id: 1213646,
        learnedat: 315,
        level: 0,
        name: "Obsidian Blasting Powder",
        nskillup: 1,
        phaseId: 6,
        quality: 1,
        reagents: [[22202, 2]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234434, 1, 1],
        id: 1214145,
        learnedat: 320,
        level: 0,
        name: "Obsidian Shotgun",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12360, 30], [234003, 8], [20725, 3], [20868, 3], [20870, 3], [20881, 2]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [235529, 1, 1],
        id: 1217207,
        learnedat: 320,
        level: 0,
        name: "Obsidian Scope",
        nskillup: 1,
        phaseId: 6,
        quality: 3,
        reagents: [[16e3, 1], [12363, 1], [234003, 1]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      },
      {
        cat: 11,
        colors: [0, 275, 277, 280],
        creates: [236871, 1, 1],
        id: 1221012,
        learnedat: 275,
        level: 0,
        name: "Creepy Censor Sensors",
        nskillup: 1,
        phaseId: 7,
        quality: 3,
        reagents: [[8170, 8], [12800, 2]],
        schools: 1,
        seasonId: 2,
        skill: [202]
      }
    ];
  }
});

// data/leatherworking.json
var require_leatherworking = __commonJS({
  "data/leatherworking.json"(exports, module) {
    module.exports = [
      {
        cat: 11,
        colors: [1, 40, 55, 70],
        creates: [2302, 1, 1],
        id: 2149,
        learnedat: 1,
        level: 0,
        name: "Handstitched Leather Boots",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 2], [2320, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [15, 45, 60, 75],
        creates: [2303, 1, 1],
        id: 2153,
        learnedat: 15,
        level: 0,
        name: "Handstitched Leather Pants",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 4], [2320, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [1, 30, 45, 60],
        creates: [2304, 1, 1],
        id: 2152,
        learnedat: 1,
        level: 0,
        name: "Light Armor Kit",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [90, 120, 135, 150],
        creates: [2307, 1, 1],
        id: 2158,
        learnedat: 90,
        level: 0,
        name: "Fine Leather Boots",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 7], [2320, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [85, 105, 120, 135],
        creates: [2308, 1, 1],
        id: 2159,
        learnedat: 85,
        level: 0,
        name: "Fine Leather Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[2318, 10], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [40, 70, 85, 100],
        creates: [2300, 1, 1],
        id: 2160,
        learnedat: 40,
        level: 0,
        name: "Embossed Leather Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[2318, 8], [2320, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [55, 85, 100, 115],
        creates: [2309, 1, 1],
        id: 2161,
        learnedat: 55,
        level: 0,
        name: "Embossed Leather Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[2318, 8], [2320, 5]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [60, 90, 105, 120],
        creates: [2310, 1, 1],
        id: 2162,
        learnedat: 60,
        level: 0,
        name: "Embossed Leather Cloak",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 5], [2320, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [60, 90, 105, 120],
        creates: [2311, 1, 1],
        id: 2163,
        learnedat: 60,
        level: 0,
        name: "White Leather Jerkin",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 8], [2320, 2], [2324, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [75, 105, 120, 135],
        creates: [2312, 1, 1],
        id: 2164,
        learnedat: 75,
        level: 0,
        name: "Fine Leather Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4231, 1], [2318, 4], [2320, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [100, 115, 122, 130],
        creates: [2313, 1, 1],
        id: 2165,
        learnedat: 100,
        level: 0,
        name: "Medium Armor Kit",
        nskillup: 1,
        quality: 1,
        reagents: [[2319, 4], [2320, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [120, 145, 157, 170],
        creates: [2314, 1, 1],
        id: 2166,
        learnedat: 120,
        level: 0,
        name: "Toughened Leather Armor",
        nskillup: 1,
        quality: 1,
        reagents: [[2319, 10], [4231, 2], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 450
      },
      {
        cat: 11,
        colors: [100, 125, 137, 150],
        creates: [2315, 1, 1],
        id: 2167,
        learnedat: 100,
        level: 0,
        name: "Dark Leather Boots",
        nskillup: 1,
        quality: 1,
        reagents: [[2319, 4], [2321, 2], [4340, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 350
      },
      {
        cat: 11,
        colors: [110, 135, 147, 160],
        creates: [2316, 1, 1],
        id: 2168,
        learnedat: 110,
        level: 0,
        name: "Dark Leather Cloak",
        nskillup: 1,
        quality: 1,
        reagents: [[2319, 8], [2321, 1], [4340, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 350
      },
      {
        cat: 11,
        colors: [100, 125, 137, 150],
        creates: [2317, 1, 1],
        id: 2169,
        learnedat: 100,
        level: 0,
        name: "Dark Leather Tunic",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 6], [2321, 1], [4340, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [1, 20, 30, 40],
        creates: [2318, 1, 1],
        id: 2881,
        learnedat: 1,
        level: 0,
        name: "Light Leather",
        nskillup: 1,
        quality: 1,
        reagents: [[2934, 3]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [25, 55, 70, 85],
        creates: [4237, 1, 1],
        id: 3753,
        learnedat: 25,
        level: 0,
        name: "Handstitched Leather Belt",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 6], [2320, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 75
      },
      {
        cat: 11,
        colors: [55, 85, 100, 115],
        creates: [4239, 1, 1],
        id: 3756,
        learnedat: 55,
        level: 0,
        name: "Embossed Leather Gloves",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 3], [2320, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 150
      },
      {
        cat: 11,
        colors: [75, 105, 120, 135],
        creates: [4242, 1, 1],
        id: 3759,
        learnedat: 75,
        level: 0,
        name: "Embossed Leather Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[4231, 1], [2318, 6], [2320, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [150, 170, 180, 190],
        creates: [3719, 1, 1],
        id: 3760,
        learnedat: 150,
        level: 0,
        name: "Hillman's Cloak",
        nskillup: 1,
        quality: 1,
        reagents: [[4234, 5], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 600
      },
      {
        cat: 11,
        colors: [85, 115, 130, 145],
        creates: [4243, 1, 1],
        id: 3761,
        learnedat: 85,
        level: 0,
        name: "Fine Leather Tunic",
        nskillup: 1,
        quality: 2,
        reagents: [[4231, 3], [2318, 6], [2320, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 350
      },
      {
        cat: 11,
        colors: [100, 125, 137, 150],
        creates: [4244, 1, 1],
        id: 3762,
        learnedat: 100,
        level: 0,
        name: "Hillman's Leather Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[4243, 1], [4231, 2], [2320, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [80, 110, 125, 140],
        creates: [4246, 1, 1],
        id: 3763,
        learnedat: 80,
        level: 0,
        name: "Fine Leather Belt",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 6], [2320, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [145, 170, 182, 195],
        creates: [4247, 1, 1],
        id: 3764,
        learnedat: 145,
        level: 0,
        name: "Hillman's Leather Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 14], [2321, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [120, 155, 167, 180],
        creates: [4248, 1, 1],
        id: 3765,
        learnedat: 120,
        level: 0,
        name: "Dark Leather Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[2312, 1], [4233, 1], [2321, 1], [4340, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [125, 150, 162, 175],
        creates: [4249, 1, 1],
        id: 3766,
        learnedat: 125,
        level: 0,
        name: "Dark Leather Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4246, 1], [4233, 1], [2321, 2], [4340, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 400
      },
      {
        cat: 11,
        colors: [120, 145, 157, 170],
        creates: [4250, 1, 1],
        id: 3767,
        learnedat: 120,
        level: 0,
        name: "Hillman's Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 8], [3383, 1], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [130, 155, 167, 180],
        creates: [4251, 1, 1],
        id: 3768,
        learnedat: 130,
        level: 0,
        name: "Hillman's Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4233, 1], [2319, 4], [2321, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [140, 165, 177, 190],
        creates: [4252, 1, 1],
        id: 3769,
        learnedat: 140,
        level: 0,
        name: "Dark Leather Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 12], [3390, 1], [4340, 1], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [135, 160, 172, 185],
        creates: [4253, 1, 1],
        id: 3770,
        learnedat: 135,
        level: 0,
        name: "Toughened Leather Gloves",
        nskillup: 1,
        quality: 3,
        reagents: [[2319, 4], [4233, 2], [3389, 2], [3182, 2], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [150, 170, 180, 190],
        creates: [4254, 1, 1],
        id: 3771,
        learnedat: 150,
        level: 0,
        name: "Barbaric Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 6], [5637, 2], [2321, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [155, 175, 185, 195],
        creates: [4255, 1, 1],
        id: 3772,
        learnedat: 155,
        level: 0,
        name: "Green Leather Armor",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 9], [2605, 2], [2321, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [175, 195, 205, 215],
        creates: [4256, 1, 1],
        id: 3773,
        learnedat: 175,
        level: 0,
        name: "Guardian Armor",
        nskillup: 1,
        quality: 2,
        reagents: [[4236, 2], [4234, 12], [3824, 1], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [160, 180, 190, 200],
        creates: [4257, 1, 1],
        id: 3774,
        learnedat: 160,
        level: 0,
        name: "Green Leather Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4236, 1], [4234, 5], [2321, 1], [2605, 1], [7071, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 900
      },
      {
        cat: 11,
        colors: [170, 190, 200, 210],
        creates: [4258, 1, 1],
        id: 3775,
        learnedat: 170,
        level: 0,
        name: "Guardian Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4236, 2], [4234, 4], [2321, 1], [7071, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [180, 200, 210, 220],
        creates: [4259, 1, 1],
        id: 3776,
        learnedat: 180,
        level: 0,
        name: "Green Leather Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[4236, 2], [4234, 6], [2605, 1], [2321, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1080
      },
      {
        cat: 11,
        colors: [195, 215, 225, 235],
        creates: [4260, 1, 1],
        id: 3777,
        learnedat: 195,
        level: 0,
        name: "Guardian Leather Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 6], [4236, 2], [4291, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [185, 205, 215, 225],
        creates: [4262, 1, 1],
        id: 3778,
        learnedat: 185,
        level: 0,
        name: "Gem-studded Leather Belt",
        nskillup: 1,
        quality: 3,
        reagents: [[4236, 4], [5500, 2], [1529, 2], [3864, 1], [2321, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [200, 220, 230, 240],
        creates: [4264, 1, 1],
        id: 3779,
        learnedat: 200,
        level: 0,
        name: "Barbaric Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 6], [4236, 2], [4096, 2], [5633, 1], [4291, 1], [7071, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [35, 55, 65, 75],
        creates: [4231, 1, 1],
        id: 3816,
        learnedat: 35,
        level: 0,
        name: "Cured Light Hide",
        nskillup: 1,
        quality: 1,
        reagents: [[783, 1], [4289, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [100, 115, 122, 130],
        creates: [4233, 1, 1],
        id: 3817,
        learnedat: 100,
        level: 0,
        name: "Cured Medium Hide",
        nskillup: 1,
        quality: 1,
        reagents: [[4232, 1], [4289, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [150, 160, 165, 170],
        creates: [4236, 1, 1],
        id: 3818,
        learnedat: 150,
        level: 0,
        name: "Cured Heavy Hide",
        nskillup: 1,
        quality: 1,
        reagents: [[4235, 1], [4289, 3]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [150, 170, 180, 190],
        creates: [4265, 1, 1],
        id: 3780,
        learnedat: 150,
        level: 0,
        name: "Heavy Armor Kit",
        nskillup: 1,
        quality: 1,
        reagents: [[4234, 5], [2321, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 750
      },
      {
        cat: 11,
        colors: [165, 185, 195, 205],
        creates: [4456, 1, 1],
        id: 4097,
        learnedat: 165,
        level: 0,
        name: "Raptor Hide Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4461, 4], [4234, 4], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [165, 185, 195, 205],
        creates: [4455, 1, 1],
        id: 4096,
        learnedat: 165,
        level: 0,
        name: "Raptor Hide Harness",
        nskillup: 1,
        quality: 2,
        reagents: [[4461, 6], [4234, 4], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [40, 70, 85, 100],
        creates: [5081, 1, 1],
        id: 5244,
        learnedat: 40,
        level: 0,
        name: "Kodo Hide Bag",
        nskillup: 1,
        quality: 1,
        reagents: [[5082, 3], [2318, 4], [2320, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [190, 210, 220, 230],
        creates: [5739, 1, 1],
        id: 6661,
        learnedat: 190,
        level: 0,
        name: "Barbaric Harness",
        nskillup: 1,
        quality: 1,
        reagents: [[4234, 14], [2321, 2], [7071, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1800
      },
      {
        cat: 11,
        colors: [90, 120, 135, 150],
        creates: [5780, 1, 1],
        id: 6702,
        learnedat: 90,
        level: 0,
        name: "Murloc Scale Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[5784, 8], [2318, 6], [2321, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [190, 210, 220, 230],
        creates: [5783, 1, 1],
        id: 6705,
        learnedat: 190,
        level: 0,
        name: "Murloc Scale Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[5785, 16], [4236, 1], [4234, 14], [4291, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [95, 125, 140, 155],
        creates: [5781, 1, 1],
        id: 6703,
        learnedat: 95,
        level: 0,
        name: "Murloc Scale Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[5784, 12], [4231, 1], [2318, 8], [2321, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [170, 190, 200, 210],
        creates: [5782, 1, 1],
        id: 6704,
        learnedat: 170,
        level: 0,
        name: "Thick Murloc Armor",
        nskillup: 1,
        quality: 2,
        reagents: [[5785, 12], [4236, 1], [4234, 10], [2321, 3]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [1, 40, 55, 70],
        creates: [5957, 1, 1],
        id: 7126,
        learnedat: 1,
        level: 0,
        name: "Handstitched Leather Vest",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 3], [2320, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [105, 130, 142, 155],
        creates: [5958, 1, 1],
        id: 7133,
        learnedat: 105,
        level: 0,
        name: "Fine Leather Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 8], [2997, 1], [2321, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [115, 140, 152, 165],
        creates: [5961, 1, 1],
        id: 7135,
        learnedat: 115,
        level: 0,
        name: "Dark Leather Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 12], [4340, 1], [2321, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 400
      },
      {
        cat: 11,
        colors: [160, 180, 190, 200],
        creates: [5962, 1, 1],
        id: 7147,
        learnedat: 160,
        level: 0,
        name: "Guardian Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 12], [4305, 2], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [170, 190, 200, 210],
        creates: [5963, 1, 1],
        id: 7149,
        learnedat: 170,
        level: 0,
        name: "Barbaric Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 10], [2321, 2], [1206, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [175, 195, 205, 215],
        creates: [5964, 1, 1],
        id: 7151,
        learnedat: 175,
        level: 0,
        name: "Barbaric Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 8], [4236, 1], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1080
      },
      {
        cat: 11,
        colors: [185, 205, 215, 225],
        creates: [5965, 1, 1],
        id: 7153,
        learnedat: 185,
        level: 0,
        name: "Guardian Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 14], [4305, 2], [4291, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [190, 210, 220, 230],
        creates: [5966, 1, 1],
        id: 7156,
        learnedat: 190,
        level: 0,
        name: "Guardian Gloves",
        nskillup: 1,
        quality: 1,
        reagents: [[4234, 4], [4236, 1], [4291, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 2160
      },
      {
        cat: 11,
        colors: [115, 140, 152, 165],
        creates: [6468, 1, 1],
        id: 7955,
        learnedat: 115,
        level: 0,
        name: "Deviate Scale Belt",
        nskillup: 1,
        quality: 3,
        reagents: [[6471, 10], [6470, 10], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [90, 120, 135, 150],
        creates: [6466, 1, 1],
        id: 7953,
        learnedat: 90,
        level: 0,
        name: "Deviate Scale Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[6470, 8], [4231, 1], [2321, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [105, 130, 142, 155],
        creates: [6467, 1, 1],
        id: 7954,
        learnedat: 105,
        level: 0,
        name: "Deviate Scale Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[6471, 2], [6470, 6], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [90, 115, 130, 145],
        creates: [6709, 1, 1],
        id: 8322,
        learnedat: 90,
        level: 0,
        name: "Moonglow Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[2318, 6], [4231, 1], [2320, 4], [5498, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [1, 40, 55, 70],
        creates: [7276, 1, 1],
        id: 9058,
        learnedat: 1,
        level: 0,
        name: "Handstitched Leather Cloak",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 2], [2320, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [1, 40, 55, 70],
        creates: [7277, 1, 1],
        id: 9059,
        learnedat: 1,
        level: 0,
        name: "Handstitched Leather Bracers",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 2], [2320, 3]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [30, 60, 75, 90],
        creates: [7278, 1, 1],
        id: 9060,
        learnedat: 30,
        level: 0,
        name: "Light Leather Quiver",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 4], [2320, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [30, 60, 75, 90],
        creates: [7279, 1, 1],
        id: 9062,
        learnedat: 30,
        level: 0,
        name: "Small Leather Ammo Pouch",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 3], [2320, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [35, 65, 80, 95],
        creates: [7280, 1, 1],
        id: 9064,
        learnedat: 35,
        level: 0,
        name: "Rugged Leather Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[2318, 5], [2320, 5]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [70, 100, 115, 130],
        creates: [7281, 1, 1],
        id: 9065,
        learnedat: 70,
        level: 0,
        name: "Light Leather Bracers",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 6], [2320, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 150
      },
      {
        cat: 11,
        colors: [95, 125, 140, 155],
        creates: [7282, 1, 1],
        id: 9068,
        learnedat: 95,
        level: 0,
        name: "Light Leather Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[2318, 10], [4231, 1], [2321, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 400
      },
      {
        cat: 11,
        colors: [100, 125, 137, 150],
        creates: [7283, 1, 1],
        id: 9070,
        learnedat: 100,
        level: 0,
        name: "Black Whelp Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[7286, 12], [2319, 4], [2321, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [120, 145, 157, 170],
        creates: [7284, 1, 1],
        id: 9072,
        learnedat: 120,
        level: 0,
        name: "Red Whelp Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[7287, 6], [2319, 4], [2321, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [120, 145, 157, 170],
        creates: [7285, 1, 1],
        id: 9074,
        learnedat: 120,
        level: 0,
        name: "Nimble Leather Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[2457, 1], [2319, 6], [2321, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [125, 150, 162, 175],
        creates: [7348, 1, 1],
        id: 9145,
        learnedat: 125,
        level: 0,
        name: "Fletcher's Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 8], [5116, 4], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [135, 160, 172, 185],
        creates: [7349, 1, 1],
        id: 9146,
        learnedat: 135,
        level: 0,
        name: "Herbalist's Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 8], [3356, 4], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [135, 160, 172, 185],
        creates: [7352, 1, 1],
        id: 9147,
        learnedat: 135,
        level: 0,
        name: "Earthen Leather Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 6], [7067, 1], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [140, 165, 177, 190],
        creates: [7358, 1, 1],
        id: 9148,
        learnedat: 140,
        level: 0,
        name: "Pilferer's Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 10], [5373, 2], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [145, 170, 182, 195],
        creates: [7359, 1, 1],
        id: 9149,
        learnedat: 145,
        level: 0,
        name: "Heavy Earthen Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 12], [7067, 2], [2997, 2], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [150, 170, 180, 190],
        creates: [7371, 1, 1],
        id: 9193,
        learnedat: 150,
        level: 0,
        name: "Heavy Quiver",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 8], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [150, 170, 180, 190],
        creates: [7372, 1, 1],
        id: 9194,
        learnedat: 150,
        level: 0,
        name: "Heavy Leather Ammo Pouch",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 8], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [165, 185, 195, 205],
        creates: [7373, 1, 1],
        id: 9195,
        learnedat: 165,
        level: 0,
        name: "Dusky Leather Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 10], [2325, 1], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [175, 195, 205, 215],
        creates: [7374, 1, 1],
        id: 9196,
        learnedat: 175,
        level: 0,
        name: "Dusky Leather Armor",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 10], [3824, 1], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1350
      },
      {
        cat: 11,
        colors: [175, 195, 205, 215],
        creates: [7375, 1, 1],
        id: 9197,
        learnedat: 175,
        level: 0,
        name: "Green Whelp Armor",
        nskillup: 1,
        quality: 2,
        reagents: [[7392, 4], [4234, 10], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [180, 200, 210, 220],
        creates: [7377, 1, 1],
        id: 9198,
        learnedat: 180,
        level: 0,
        name: "Frost Leather Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 6], [7067, 2], [7070, 2], [2321, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1800
      },
      {
        cat: 11,
        colors: [185, 205, 215, 225],
        creates: [7378, 1, 1],
        id: 9201,
        learnedat: 185,
        level: 0,
        name: "Dusky Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 16], [2325, 1], [4291, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1800
      },
      {
        cat: 11,
        colors: [190, 210, 220, 230],
        creates: [7386, 1, 1],
        id: 9202,
        learnedat: 190,
        level: 0,
        name: "Green Whelp Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[7392, 6], [4234, 8], [4291, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [195, 215, 225, 235],
        creates: [7387, 1, 1],
        id: 9206,
        learnedat: 195,
        level: 0,
        name: "Dusky Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 10], [4305, 2], [2325, 2], [7071, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 2250
      },
      {
        cat: 11,
        colors: [200, 220, 230, 240],
        creates: [7390, 1, 1],
        id: 9207,
        learnedat: 200,
        level: 0,
        name: "Dusky Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 8], [7428, 2], [3824, 1], [4291, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [200, 220, 230, 240],
        creates: [7391, 1, 1],
        id: 9208,
        learnedat: 200,
        level: 0,
        name: "Swift Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 10], [2459, 2], [4337, 2], [4291, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [200, 200, 200, 200],
        creates: [8172, 1, 1],
        id: 10482,
        learnedat: 200,
        level: 0,
        name: "Cured Thick Hide",
        nskillup: 1,
        quality: 1,
        reagents: [[8169, 1], [8150, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1800
      },
      {
        cat: 11,
        colors: [200, 220, 230, 240],
        creates: [8173, 1, 1],
        id: 10487,
        learnedat: 200,
        level: 0,
        name: "Thick Armor Kit",
        nskillup: 1,
        quality: 1,
        reagents: [[4304, 5], [4291, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1800
      },
      {
        cat: 11,
        colors: [200, 220, 230, 240],
        creates: [8174, 1, 1],
        id: 10490,
        learnedat: 200,
        level: 0,
        name: "Comfortable Leather Hat",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 12], [4236, 2], [4291, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [8175, 1, 1],
        id: 10499,
        learnedat: 205,
        level: 0,
        name: "Nightscape Tunic",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 7], [4291, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 2700
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [8176, 1, 1],
        id: 10507,
        learnedat: 205,
        level: 0,
        name: "Nightscape Headband",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 5], [4291, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 2700
      },
      {
        cat: 11,
        colors: [205, 225, 235, 245],
        creates: [8187, 1, 1],
        id: 10509,
        learnedat: 205,
        level: 0,
        name: "Turtle Scale Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 6], [8167, 8], [8343, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [210, 230, 240, 250],
        creates: [8189, 1, 1],
        id: 10511,
        learnedat: 210,
        level: 0,
        name: "Turtle Scale Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 6], [8167, 12], [8343, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 3e3
      },
      {
        cat: 11,
        colors: [210, 230, 240, 250],
        creates: [8192, 1, 1],
        id: 10516,
        learnedat: 210,
        level: 0,
        name: "Nightscape Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 8], [4338, 6], [4291, 3]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [210, 230, 240, 250],
        creates: [8198, 1, 1],
        id: 10518,
        learnedat: 210,
        level: 0,
        name: "Turtle Scale Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 8], [8167, 12], [8343, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 3150
      },
      {
        cat: 11,
        colors: [215, 235, 245, 255],
        creates: [8200, 1, 1],
        id: 10520,
        learnedat: 215,
        level: 0,
        name: "Big Voodoo Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 10], [8151, 4], [8343, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [220, 240, 250, 260],
        creates: [8203, 1, 1],
        id: 10525,
        learnedat: 220,
        level: 0,
        name: "Tough Scorpid Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 12], [8154, 12], [4291, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [220, 240, 250, 260],
        creates: [8210, 1, 1],
        id: 10529,
        learnedat: 220,
        level: 0,
        name: "Wild Leather Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 10], [8153, 1], [8172, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [220, 240, 250, 260],
        creates: [8201, 1, 1],
        id: 10531,
        learnedat: 220,
        level: 0,
        name: "Big Voodoo Mask",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 8], [8151, 6], [8343, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [220, 240, 250, 260],
        creates: [8205, 1, 1],
        id: 10533,
        learnedat: 220,
        level: 0,
        name: "Tough Scorpid Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 10], [8154, 4], [4291, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [8204, 1, 1],
        id: 10542,
        learnedat: 225,
        level: 0,
        name: "Tough Scorpid Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 6], [8154, 8], [4291, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [8211, 1, 1],
        id: 10544,
        learnedat: 225,
        level: 0,
        name: "Wild Leather Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 12], [8153, 2], [8172, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [8214, 1, 1],
        id: 10546,
        learnedat: 225,
        level: 0,
        name: "Wild Leather Helmet",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 10], [8153, 2], [8172, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [8347, 1, 1],
        id: 10619,
        learnedat: 225,
        level: 0,
        name: "Dragonscale Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[4304, 24], [8165, 12], [8343, 4], [8172, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        specialization: 10656,
        trainingcost: 9e3
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [8345, 1, 1],
        id: 10621,
        learnedat: 225,
        level: 0,
        name: "Wolfshead Helm",
        nskillup: 1,
        quality: 3,
        reagents: [[4304, 18], [8368, 2], [8146, 8], [8343, 4], [8172, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        specialization: 10660,
        trainingcost: 9e3
      },
      {
        cat: 11,
        colors: [230, 250, 260, 270],
        creates: [8193, 1, 1],
        id: 10548,
        learnedat: 230,
        level: 0,
        name: "Nightscape Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 14], [4291, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 0,
        creates: [8195, 1, 1],
        id: 10550,
        level: 0,
        name: "Nightscape Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 12], [4291, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [230, 250, 260, 270],
        creates: [8191, 1, 1],
        id: 10552,
        learnedat: 230,
        level: 0,
        name: "Turtle Scale Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 14], [8167, 24], [8343, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [230, 250, 260, 270],
        creates: [8346, 1, 1],
        id: 10630,
        learnedat: 230,
        level: 0,
        name: "Gauntlets of the Sea",
        nskillup: 1,
        quality: 3,
        reagents: [[4304, 20], [7079, 8], [7075, 2], [8172, 1], [8343, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        specialization: 10658,
        trainingcost: 9e3
      },
      {
        cat: 11,
        colors: [235, 255, 265, 275],
        creates: [8209, 1, 1],
        id: 10554,
        learnedat: 235,
        level: 0,
        name: "Tough Scorpid Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 12], [8154, 12], [4291, 6]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [235, 255, 265, 275],
        creates: [8185, 1, 1],
        id: 10556,
        learnedat: 235,
        level: 0,
        name: "Turtle Scale Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 14], [8167, 28], [8343, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 4500
      },
      {
        cat: 11,
        colors: [235, 255, 265, 275],
        creates: [8197, 1, 1],
        id: 10558,
        learnedat: 235,
        level: 0,
        name: "Nightscape Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 16], [8343, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 4500
      },
      {
        cat: 11,
        colors: [240, 260, 270, 280],
        creates: [8202, 1, 1],
        id: 10560,
        learnedat: 240,
        level: 0,
        name: "Big Voodoo Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 10], [8152, 6], [8343, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [240, 260, 270, 280],
        creates: [8216, 1, 1],
        id: 10562,
        learnedat: 240,
        level: 0,
        name: "Big Voodoo Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 14], [8152, 4], [8343, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [240, 260, 270, 280],
        creates: [8207, 1, 1],
        id: 10564,
        learnedat: 240,
        level: 0,
        name: "Tough Scorpid Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 12], [8154, 16], [8343, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [245, 265, 275, 285],
        creates: [8213, 1, 1],
        id: 10566,
        learnedat: 245,
        level: 0,
        name: "Wild Leather Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 14], [8153, 4], [8172, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [245, 265, 275, 285],
        creates: [8206, 1, 1],
        id: 10568,
        learnedat: 245,
        level: 0,
        name: "Tough Scorpid Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 14], [8154, 8], [8343, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [250, 270, 280, 290],
        creates: [8208, 1, 1],
        id: 10570,
        learnedat: 250,
        level: 0,
        name: "Tough Scorpid Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 10], [8154, 20], [8343, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [250, 270, 280, 290],
        creates: [8212, 1, 1],
        id: 10572,
        learnedat: 250,
        level: 0,
        name: "Wild Leather Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 16], [8153, 6], [8172, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [250, 270, 280, 290],
        creates: [8215, 1, 1],
        id: 10574,
        learnedat: 250,
        level: 0,
        name: "Wild Leather Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 16], [8153, 6], [8172, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [250, 270, 280, 290],
        creates: [8348, 1, 1],
        id: 10632,
        learnedat: 250,
        level: 0,
        name: "Helm of Fire",
        nskillup: 1,
        quality: 3,
        reagents: [[4304, 40], [7077, 8], [7075, 4], [8172, 2], [8343, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        specialization: 10658,
        trainingcost: 9e3
      },
      {
        cat: 11,
        colors: [250, 270, 280, 290],
        creates: [8349, 1, 1],
        id: 10647,
        learnedat: 250,
        level: 0,
        name: "Feathered Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[4304, 40], [8168, 40], [7971, 2], [8172, 4], [8343, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        specialization: 10660,
        trainingcost: 9e3
      },
      {
        cat: 11,
        colors: [255, 275, 285, 295],
        creates: [8367, 1, 1],
        id: 10650,
        learnedat: 255,
        level: 0,
        name: "Dragonscale Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[4304, 40], [8165, 30], [8343, 4], [8172, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        specialization: 10656,
        trainingcost: 9e3
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [8217, 1, 1],
        id: 14930,
        learnedat: 225,
        level: 0,
        name: "Quickdraw Quiver",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 12], [8172, 1], [8949, 1], [4291, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 3240
      },
      {
        cat: 11,
        colors: [225, 245, 255, 265],
        creates: [8218, 1, 1],
        id: 14932,
        learnedat: 225,
        level: 0,
        name: "Thick Leather Ammo Pouch",
        nskillup: 1,
        quality: 2,
        reagents: [[4304, 10], [8172, 1], [8951, 1], [4291, 6]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 3240
      },
      {
        cat: 11,
        colors: [250, 250, 255, 260],
        creates: [15407, 1, 1],
        id: 19047,
        learnedat: 250,
        level: 0,
        name: "Cured Rugged Hide",
        nskillup: 1,
        quality: 1,
        reagents: [[8171, 1], [15409, 1]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [250, 250, 260, 270],
        creates: [15564, 1, 1],
        id: 19058,
        learnedat: 250,
        level: 0,
        name: "Rugged Armor Kit",
        nskillup: 1,
        quality: 1,
        reagents: [[8170, 5]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [255, 275, 285, 295],
        creates: [15077, 1, 1],
        id: 19048,
        learnedat: 255,
        level: 0,
        name: "Heavy Scorpid Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 4], [15408, 4], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [260, 280, 290, 300],
        creates: [15083, 1, 1],
        id: 19049,
        learnedat: 260,
        level: 0,
        name: "Wicked Leather Gauntlets",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 8], [2325, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [260, 280, 290, 300],
        creates: [15045, 1, 1],
        id: 19050,
        learnedat: 260,
        level: 0,
        name: "Green Dragonscale Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 20], [15412, 25], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [265, 285, 295, 305],
        creates: [15076, 1, 1],
        id: 19051,
        learnedat: 265,
        level: 0,
        name: "Heavy Scorpid Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 6], [15408, 6], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [265, 285, 295, 305],
        creates: [15084, 1, 1],
        id: 19052,
        learnedat: 265,
        level: 0,
        name: "Wicked Leather Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 8], [2325, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [265, 285, 295, 305],
        creates: [15074, 1, 1],
        id: 19053,
        learnedat: 265,
        level: 0,
        name: "Chimeric Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 6], [15423, 6], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15047, 1, 1],
        id: 19054,
        learnedat: 300,
        level: 0,
        name: "Red Dragonscale Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 40], [15414, 30], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [15091, 1, 1],
        id: 19055,
        learnedat: 270,
        level: 0,
        name: "Runic Leather Gauntlets",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 10], [14047, 6], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [15054, 1, 1],
        id: 19059,
        learnedat: 270,
        level: 0,
        name: "Volcanic Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 6], [7078, 1], [7075, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [15046, 1, 1],
        id: 19060,
        learnedat: 270,
        level: 0,
        name: "Green Dragonscale Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 20], [15412, 25], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [15061, 1, 1],
        id: 19061,
        learnedat: 270,
        level: 0,
        name: "Living Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 12], [12803, 4], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [270, 290, 300, 310],
        creates: [15067, 1, 1],
        id: 19062,
        learnedat: 270,
        level: 0,
        name: "Ironfeather Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 24], [15420, 80], [1529, 2], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [15073, 1, 1],
        id: 19063,
        learnedat: 275,
        level: 0,
        name: "Chimeric Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 4], [15423, 8], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [15078, 1, 1],
        id: 19064,
        learnedat: 275,
        level: 0,
        name: "Heavy Scorpid Gauntlets",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 6], [15408, 8], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [15092, 1, 1],
        id: 19065,
        learnedat: 275,
        level: 0,
        name: "Runic Leather Bracers",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 6], [7971, 1], [14047, 6], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [15071, 1, 1],
        id: 19066,
        learnedat: 275,
        level: 0,
        name: "Frostsaber Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 4], [15422, 6], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [15057, 1, 1],
        id: 19067,
        learnedat: 275,
        level: 0,
        name: "Stormshroud Pants",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 16], [7080, 2], [7082, 2], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [275, 295, 305, 315],
        creates: [15064, 1, 1],
        id: 19068,
        learnedat: 275,
        level: 0,
        name: "Warbear Harness",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 28], [15419, 12], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [280, 300, 310, 320],
        creates: [15082, 1, 1],
        id: 19070,
        learnedat: 280,
        level: 0,
        name: "Heavy Scorpid Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 6], [15408, 8], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [280, 300, 310, 320],
        creates: [15086, 1, 1],
        id: 19071,
        learnedat: 280,
        level: 0,
        name: "Wicked Leather Headband",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 12], [2325, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [280, 300, 310, 320],
        creates: [15093, 1, 1],
        id: 19072,
        learnedat: 280,
        level: 0,
        name: "Runic Leather Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 12], [14047, 10], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [280, 300, 310, 320],
        creates: [15072, 1, 1],
        id: 19073,
        learnedat: 280,
        level: 0,
        name: "Chimeric Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 8], [15423, 8], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [15069, 1, 1],
        id: 19074,
        learnedat: 285,
        level: 0,
        name: "Frostsaber Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 6], [15422, 8], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [15079, 1, 1],
        id: 19075,
        learnedat: 285,
        level: 0,
        name: "Heavy Scorpid Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 8], [15408, 12], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [15053, 1, 1],
        id: 19076,
        learnedat: 285,
        level: 0,
        name: "Volcanic Breastplate",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 8], [7078, 1], [7076, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [15048, 1, 1],
        id: 19077,
        learnedat: 285,
        level: 0,
        name: "Blue Dragonscale Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 28], [15415, 30], [15407, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [15060, 1, 1],
        id: 19078,
        learnedat: 285,
        level: 0,
        name: "Living Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 16], [12803, 6], [15407, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [15056, 1, 1],
        id: 19079,
        learnedat: 285,
        level: 0,
        name: "Stormshroud Armor",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 16], [7080, 3], [7082, 3], [15407, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [285, 305, 315, 325],
        creates: [15065, 1, 1],
        id: 19080,
        learnedat: 285,
        level: 0,
        name: "Warbear Woolies",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 24], [15419, 14], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [15075, 1, 1],
        id: 19081,
        learnedat: 290,
        level: 0,
        name: "Chimeric Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 10], [15423, 10], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [15050, 1, 1],
        id: 19085,
        learnedat: 290,
        level: 0,
        name: "Black Dragonscale Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 40], [15416, 60], [15407, 1], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [15063, 1, 1],
        id: 19084,
        learnedat: 290,
        level: 0,
        name: "Devilsaur Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 30], [15417, 8], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [15066, 1, 1],
        id: 19086,
        learnedat: 290,
        level: 0,
        name: "Ironfeather Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 40], [15420, 120], [1529, 1], [15407, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [15094, 1, 1],
        id: 19082,
        learnedat: 290,
        level: 0,
        name: "Runic Leather Headband",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 14], [14047, 10], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [15087, 1, 1],
        id: 19083,
        learnedat: 290,
        level: 0,
        name: "Wicked Leather Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 16], [15407, 1], [2325, 3], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [15049, 1, 1],
        id: 19089,
        learnedat: 295,
        level: 0,
        name: "Blue Dragonscale Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 28], [15415, 30], [12810, 2], [15407, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [15070, 1, 1],
        id: 19087,
        learnedat: 295,
        level: 0,
        name: "Frostsaber Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 6], [15422, 10], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [15080, 1, 1],
        id: 19088,
        learnedat: 295,
        level: 0,
        name: "Heavy Scorpid Helm",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 8], [15408, 12], [15407, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [15058, 1, 1],
        id: 19090,
        learnedat: 295,
        level: 0,
        name: "Stormshroud Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 12], [7080, 3], [7082, 3], [12810, 2], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15051, 1, 1],
        id: 19094,
        learnedat: 300,
        level: 0,
        name: "Black Dragonscale Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 44], [15416, 45], [12810, 2], [15407, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15062, 1, 1],
        id: 19097,
        learnedat: 300,
        level: 0,
        name: "Devilsaur Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 30], [15417, 14], [15407, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15059, 1, 1],
        id: 19095,
        learnedat: 300,
        level: 0,
        name: "Living Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 16], [12803, 8], [14342, 2], [15407, 1], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15138, 1, 1],
        id: 19093,
        learnedat: 300,
        level: 0,
        name: "Onyxia Scale Cloak",
        nskillup: 1,
        quality: 3,
        reagents: [[15410, 1], [14044, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15095, 1, 1],
        id: 19091,
        learnedat: 300,
        level: 0,
        name: "Runic Leather Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 18], [14047, 12], [12810, 2], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15088, 1, 1],
        id: 19092,
        learnedat: 300,
        level: 0,
        name: "Wicked Leather Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 14], [2325, 2], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15081, 1, 1],
        id: 19100,
        learnedat: 300,
        level: 0,
        name: "Heavy Scorpid Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 14], [15408, 14], [15407, 1], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15090, 1, 1],
        id: 19102,
        learnedat: 300,
        level: 0,
        name: "Runic Leather Armor",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 22], [12810, 4], [14047, 16], [15407, 1], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15055, 1, 1],
        id: 19101,
        learnedat: 300,
        level: 0,
        name: "Volcanic Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 10], [7078, 1], [7076, 1], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15085, 1, 1],
        id: 19098,
        learnedat: 300,
        level: 0,
        name: "Wicked Leather Armor",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 20], [15407, 2], [14256, 6], [2325, 4], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15052, 1, 1],
        id: 19107,
        learnedat: 300,
        level: 0,
        name: "Black Dragonscale Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 40], [15416, 60], [12810, 4], [15407, 1], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15068, 1, 1],
        id: 19104,
        learnedat: 300,
        level: 0,
        name: "Frostsaber Tunic",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 12], [15422, 12], [15407, 1], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 0,
        creates: [15141, 1, 1],
        id: 19106,
        level: 0,
        name: "Onyxia Scale Breastplate",
        nskillup: 1,
        quality: 4,
        reagents: [[8170, 40], [15410, 12], [15416, 60], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [15096, 1, 1],
        id: 19103,
        learnedat: 300,
        level: 0,
        name: "Runic Leather Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 16], [12810, 4], [14047, 18], [15407, 1], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [100, 100, 105, 110],
        creates: [2319, 1, 1],
        id: 20648,
        learnedat: 100,
        level: 0,
        name: "Medium Leather",
        nskillup: 1,
        quality: 1,
        reagents: [[2318, 4]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [150, 150, 155, 160],
        creates: [4234, 1, 1],
        id: 20649,
        learnedat: 150,
        level: 0,
        name: "Heavy Leather",
        nskillup: 1,
        quality: 1,
        reagents: [[2319, 5]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [200, 200, 202, 205],
        creates: [4304, 1, 1],
        id: 20650,
        learnedat: 200,
        level: 0,
        name: "Thick Leather",
        nskillup: 1,
        quality: 1,
        reagents: [[4234, 6]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [295, 315, 325, 335],
        creates: [16982, 1, 1],
        id: 20853,
        learnedat: 295,
        level: 0,
        name: "Corehound Boots",
        nskillup: 1,
        quality: 4,
        reagents: [[17012, 20], [17010, 6], [17011, 2], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [16983, 1, 1],
        id: 20854,
        learnedat: 300,
        level: 0,
        name: "Molten Helm",
        nskillup: 1,
        quality: 4,
        reagents: [[17012, 15], [17010, 3], [17011, 6], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [16984, 1, 1],
        id: 20855,
        learnedat: 300,
        level: 0,
        name: "Black Dragonscale Boots",
        nskillup: 1,
        quality: 4,
        reagents: [[12810, 6], [15416, 30], [17010, 4], [17011, 3], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [190, 210, 220, 230],
        creates: [17721, 1, 1],
        id: 21943,
        learnedat: 190,
        level: 0,
        name: "Gloves of the Greatfather",
        nskillup: 1,
        quality: 2,
        reagents: [[4234, 8], [7067, 4], [4291, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [250, 250, 250, 250],
        creates: [8170, 1, 1],
        id: 22331,
        learnedat: 250,
        level: 0,
        name: "Rugged Leather",
        nskillup: 1,
        quality: 1,
        reagents: [[4304, 6]],
        schools: 1,
        skill: [165],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [200, 210, 220, 230],
        creates: [18238, 1, 1],
        id: 22711,
        learnedat: 200,
        level: 0,
        name: "Shadowskin Gloves",
        nskillup: 1,
        quality: 3,
        reagents: [[4304, 6], [7428, 8], [7971, 2], [4236, 2], [1210, 4], [8343, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18251, 1, 1],
        id: 22727,
        learnedat: 300,
        level: 0,
        name: "Core Armor Kit",
        nskillup: 1,
        quality: 3,
        reagents: [[17012, 3], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 285, 290, 295],
        creates: [18258, 1, 1],
        id: 22815,
        learnedat: 285,
        level: 0,
        name: "Gordok Ogre Suit",
        nskillup: 1,
        quality: 2,
        reagents: [[8170, 4], [14048, 2], [18240, 1], [14341, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18504, 1, 1],
        id: 22921,
        learnedat: 300,
        level: 0,
        name: "Girdle of Insight",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 12], [12804, 12], [15407, 2], [14341, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18506, 1, 1],
        id: 22922,
        learnedat: 300,
        level: 0,
        name: "Mongoose Boots",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 12], [7082, 6], [11754, 4], [15407, 2], [14341, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18508, 1, 1],
        id: 22923,
        learnedat: 300,
        level: 0,
        name: "Swift Flight Bracers",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 12], [18512, 8], [15420, 60], [15407, 4], [14341, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18509, 1, 1],
        id: 22926,
        learnedat: 300,
        level: 0,
        name: "Chromatic Cloak",
        nskillup: 1,
        quality: 4,
        reagents: [[8170, 30], [12607, 12], [15416, 30], [15414, 30], [15407, 5], [14341, 8]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18510, 1, 1],
        id: 22927,
        learnedat: 300,
        level: 0,
        name: "Hide of the Wild",
        nskillup: 1,
        quality: 4,
        reagents: [[8170, 30], [12803, 12], [7080, 10], [18512, 8], [15407, 3], [14341, 8]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [18511, 1, 1],
        id: 22928,
        learnedat: 300,
        level: 0,
        name: "Shifting Cloak",
        nskillup: 1,
        quality: 4,
        reagents: [[8170, 30], [7082, 12], [12753, 4], [12809, 8], [15407, 4], [14341, 8]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [150, 150, 155, 160],
        creates: [18662, 1, 1],
        id: 23190,
        learnedat: 150,
        level: 0,
        name: "Heavy Leather Ball",
        nskillup: 1,
        quality: 1,
        reagents: [[4234, 2], [2321, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [155, 175, 185, 195],
        creates: [18948, 1, 1],
        id: 23399,
        learnedat: 155,
        level: 0,
        name: "Barbaric Bracers",
        nskillup: 1,
        quality: 3,
        reagents: [[4234, 8], [4236, 2], [5498, 4], [4461, 1], [5637, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [19044, 1, 1],
        id: 23703,
        learnedat: 290,
        level: 0,
        name: "Might of the Timbermaw",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 30], [12804, 2], [12803, 4], [15407, 2], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [290, 310, 320, 330],
        creates: [19052, 1, 1],
        id: 23705,
        learnedat: 290,
        level: 0,
        name: "Dawn Treaders",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 30], [12809, 2], [7080, 4], [15407, 2], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19049, 1, 1],
        id: 23704,
        learnedat: 300,
        level: 0,
        name: "Timbermaw Brawlers",
        nskillup: 1,
        quality: 3,
        reagents: [[12810, 8], [12804, 6], [12803, 6], [15407, 2], [14227, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19058, 1, 1],
        id: 23706,
        learnedat: 300,
        level: 0,
        name: "Golden Mantle of the Dawn",
        nskillup: 1,
        quality: 3,
        reagents: [[12810, 8], [12803, 4], [12809, 4], [15407, 2], [14341, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19149, 1, 1],
        id: 23707,
        learnedat: 300,
        level: 0,
        name: "Lava Belt",
        nskillup: 1,
        quality: 4,
        reagents: [[17011, 5], [15407, 4], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19157, 1, 1],
        id: 23708,
        learnedat: 300,
        level: 0,
        name: "Chromatic Gauntlets",
        nskillup: 1,
        quality: 4,
        reagents: [[17010, 5], [17011, 2], [17012, 4], [12607, 4], [15407, 4], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19162, 1, 1],
        id: 23709,
        learnedat: 300,
        level: 0,
        name: "Corehound Belt",
        nskillup: 1,
        quality: 4,
        reagents: [[17010, 8], [17012, 12], [12810, 10], [15407, 4], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19163, 1, 1],
        id: 23710,
        learnedat: 300,
        level: 0,
        name: "Molten Belt",
        nskillup: 1,
        quality: 4,
        reagents: [[17010, 2], [17011, 7], [7076, 6], [15407, 4], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19688, 1, 1],
        id: 24124,
        learnedat: 300,
        level: 0,
        name: "Blood Tiger Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[19768, 35], [19726, 2], [15407, 3], [14341, 3]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19689, 1, 1],
        id: 24125,
        learnedat: 300,
        level: 0,
        name: "Blood Tiger Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[19768, 25], [19726, 2], [15407, 3], [14341, 3]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19687, 1, 1],
        id: 24123,
        learnedat: 300,
        level: 0,
        name: "Primal Batskin Bracers",
        nskillup: 1,
        quality: 3,
        reagents: [[19767, 8], [15407, 3], [12803, 4], [14341, 3]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19686, 1, 1],
        id: 24122,
        learnedat: 300,
        level: 0,
        name: "Primal Batskin Gloves",
        nskillup: 1,
        quality: 3,
        reagents: [[19767, 10], [15407, 4], [12803, 4], [14341, 3]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [19685, 1, 1],
        id: 24121,
        learnedat: 300,
        level: 0,
        name: "Primal Batskin Jerkin",
        nskillup: 1,
        quality: 3,
        reagents: [[19767, 14], [15407, 5], [12803, 4], [14341, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [280, 300, 310, 320],
        creates: [20296, 1, 1],
        id: 24655,
        learnedat: 280,
        level: 0,
        name: "Green Dragonscale Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 20], [15412, 30], [15407, 1], [14341, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        specialization: 10656,
        trainingcost: 27e3
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20295, 1, 1],
        id: 24654,
        learnedat: 300,
        level: 0,
        name: "Blue Dragonscale Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[8170, 28], [15415, 36], [15407, 2], [14341, 2]],
        schools: 1,
        skill: [165],
        source: [6],
        specialization: 10656,
        trainingcost: 45e3
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20481, 1, 1],
        id: 24846,
        learnedat: 300,
        level: 0,
        name: "Spitfire Bracers",
        nskillup: 1,
        quality: 3,
        reagents: [[20500, 1], [20498, 20], [7078, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20480, 1, 1],
        id: 24847,
        learnedat: 300,
        level: 0,
        name: "Spitfire Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[20500, 2], [20498, 30], [7078, 2], [15407, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20479, 1, 1],
        id: 24848,
        learnedat: 300,
        level: 0,
        name: "Spitfire Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[20500, 3], [20498, 40], [7078, 2], [15407, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20476, 1, 1],
        id: 24849,
        learnedat: 300,
        level: 0,
        name: "Sandstalker Bracers",
        nskillup: 1,
        quality: 3,
        reagents: [[20501, 1], [20498, 20], [18512, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20477, 1, 1],
        id: 24850,
        learnedat: 300,
        level: 0,
        name: "Sandstalker Gauntlets",
        nskillup: 1,
        quality: 3,
        reagents: [[20501, 2], [20498, 30], [18512, 2], [15407, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20478, 1, 1],
        id: 24851,
        learnedat: 300,
        level: 0,
        name: "Sandstalker Breastplate",
        nskillup: 1,
        quality: 3,
        reagents: [[20501, 3], [20498, 40], [18512, 2], [15407, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [100, 125, 137, 150],
        creates: [20575, 1, 1],
        id: 24940,
        learnedat: 100,
        level: 0,
        name: "Black Whelp Tunic",
        nskillup: 1,
        quality: 2,
        reagents: [[2319, 8], [7286, 8], [4231, 1], [2321, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [20380, 1, 1],
        id: 24703,
        learnedat: 300,
        level: 0,
        name: "Dreamscale Breastplate",
        nskillup: 1,
        quality: 4,
        reagents: [[12810, 12], [20381, 6], [12803, 4], [15407, 4], [14227, 6]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [21278, 1, 1],
        id: 26279,
        learnedat: 300,
        level: 0,
        name: "Stormshroud Gloves",
        nskillup: 1,
        quality: 3,
        reagents: [[12810, 6], [7080, 4], [7082, 4], [15407, 2], [14227, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22665, 1, 1],
        id: 28224,
        learnedat: 300,
        level: 0,
        name: "Icy Scale Bracers",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 4], [15408, 16], [7080, 2], [15407, 2], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22664, 1, 1],
        id: 28222,
        learnedat: 300,
        level: 0,
        name: "Icy Scale Breastplate",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 7], [15408, 24], [7080, 2], [15407, 4], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22666, 1, 1],
        id: 28223,
        learnedat: 300,
        level: 0,
        name: "Icy Scale Gauntlets",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 5], [15408, 16], [7080, 2], [15407, 3], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22663, 1, 1],
        id: 28221,
        learnedat: 300,
        level: 0,
        name: "Polar Bracers",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 4], [12810, 12], [7080, 2], [15407, 2], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22662, 1, 1],
        id: 28220,
        learnedat: 300,
        level: 0,
        name: "Polar Gloves",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 5], [12810, 12], [7080, 2], [15407, 3], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22661, 1, 1],
        id: 28219,
        learnedat: 300,
        level: 0,
        name: "Polar Tunic",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 7], [12810, 16], [7080, 2], [15407, 4], [14227, 4]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22761, 1, 1],
        id: 28474,
        learnedat: 300,
        level: 0,
        name: "Bramblewood Belt",
        nskillup: 1,
        quality: 3,
        reagents: [[12810, 4], [12803, 2], [15407, 1]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22760, 1, 1],
        id: 28473,
        learnedat: 300,
        level: 0,
        name: "Bramblewood Boots",
        nskillup: 1,
        quality: 3,
        reagents: [[12810, 6], [18512, 2], [12803, 2], [15407, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [300, 320, 330, 340],
        creates: [22759, 1, 1],
        id: 28472,
        learnedat: 300,
        level: 0,
        name: "Bramblewood Helm",
        nskillup: 1,
        quality: 3,
        reagents: [[12810, 12], [19726, 2], [12803, 2], [15407, 2]],
        schools: 1,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 160, 172, 185],
        creates: [211423, 1, 1],
        id: 429354,
        learnedat: 160,
        level: 0,
        name: "Void-Touched Leather Gloves",
        nskillup: 1,
        phaseId: 1,
        quality: 4,
        reagents: [[211422, 1], [4253, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 160, 172, 185],
        creates: [211502, 1, 1],
        id: 429869,
        learnedat: 160,
        level: 0,
        name: "Void-Touched Leather Gauntlets",
        nskillup: 1,
        phaseId: 1,
        quality: 4,
        reagents: [[211422, 1], [4253, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 200, 210, 220],
        creates: [213369, 1, 1],
        id: 435819,
        learnedat: 200,
        level: 0,
        name: "Faintly Glowing Leather",
        nskillup: 1,
        phaseId: 2,
        quality: 3,
        reagents: [[8172, 1], [213370, 5]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215382, 1, 1],
        id: 435953,
        learnedat: 225,
        level: 0,
        name: "Rad-Resistant Scale Hood",
        nskillup: 1,
        phaseId: 2,
        quality: 4,
        reagents: [[213376, 1], [8172, 5], [213369, 5], [213372, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215166, 1, 1],
        id: 435904,
        learnedat: 225,
        level: 0,
        name: "Glowing Gneuro-Linked Cowl",
        nskillup: 1,
        phaseId: 2,
        quality: 4,
        reagents: [[213379, 1], [8172, 5], [4291, 2], [213369, 5]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215381, 1, 1],
        id: 435951,
        learnedat: 225,
        level: 0,
        name: "Gneuro-Conductive Channeler's Hood",
        nskillup: 1,
        phaseId: 2,
        quality: 4,
        reagents: [[213372, 1], [8172, 5], [213369, 5], [213379, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215114, 1, 1],
        id: 435949,
        learnedat: 225,
        level: 0,
        name: "Glowing Hyperconductive Scale Coif",
        nskillup: 1,
        phaseId: 2,
        quality: 4,
        reagents: [[213376, 1], [5785, 10], [213369, 5], [213372, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 240, 250, 260],
        creates: [217259, 1, 1],
        id: 439105,
        learnedat: 240,
        level: 0,
        name: "Big Voodoo Mask",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4304, 8], [8151, 6], [8343, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 235, 245, 255],
        creates: [217261, 1, 1],
        id: 439108,
        learnedat: 235,
        level: 0,
        name: "Big Voodoo Robe",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4304, 10], [8151, 4], [8343, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 215, 225, 235],
        creates: [217263, 1, 1],
        id: 439110,
        learnedat: 215,
        level: 0,
        name: "Guardian Leather Bracers",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4234, 6], [4236, 2], [4291, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 190, 200, 210],
        creates: [217265, 1, 1],
        id: 439112,
        learnedat: 190,
        level: 0,
        name: "Guardian Belt",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4236, 2], [4234, 4], [2321, 1], [7071, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [160, 180, 190, 200],
        creates: [217267, 1, 1],
        id: 439114,
        learnedat: 160,
        level: 0,
        name: "Guardian Pants",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4234, 12], [4305, 2], [2321, 2]],
        schools: 1,
        seasonId: 2,
        skill: [165],
        source: [6],
        trainingcost: 900
      },
      {
        cat: 11,
        colors: [210, 230, 240, 250],
        creates: [217268, 1, 1],
        id: 439116,
        learnedat: 210,
        level: 0,
        name: "Turtle Scale Breastplate",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4304, 6], [8167, 12], [8343, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165],
        source: [6],
        trainingcost: 2700
      },
      {
        cat: 11,
        colors: [0, 225, 235, 245],
        creates: [217270, 1, 1],
        id: 439118,
        learnedat: 225,
        level: 0,
        name: "Turtle Scale Gloves",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4304, 6], [8167, 8], [8343, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220743, 1, 1],
        id: 446186,
        learnedat: 250,
        level: 0,
        name: "Cacophonous Chain Shoulderguards",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [15416, 4], [8170, 10]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220745, 1, 1],
        id: 446192,
        learnedat: 250,
        level: 0,
        name: "Membrane of Dark Neurosis",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [15407, 2], [8170, 6]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220747, 1, 1],
        id: 446183,
        learnedat: 250,
        level: 0,
        name: "Paranoia Mantle",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [15423, 8], [8170, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220748, 1, 1],
        id: 446189,
        learnedat: 250,
        level: 0,
        name: "Shoulderpads of Obsession",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [7080, 1], [8170, 12]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220742, 1, 1],
        id: 446185,
        learnedat: 250,
        level: 0,
        name: "Shrieking Spaulders",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [15416, 8], [8170, 8]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220744, 1, 1],
        id: 446190,
        learnedat: 250,
        level: 0,
        name: "Wailing Chain Mantle",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [15412, 8], [8170, 8]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220741, 1, 1],
        id: 451706,
        learnedat: 250,
        level: 0,
        name: "Screaming Chain Pauldrons",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [15412, 5], [8170, 10]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 305, 315, 325],
        creates: [227875, 1, 1],
        id: 461673,
        learnedat: 305,
        level: 0,
        name: "Honed Blue Dragonscale Breastplate",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 28], [15415, 30], [15407, 1], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 315, 325, 335],
        creates: [227873, 1, 1],
        id: 461645,
        learnedat: 315,
        level: 0,
        name: "Honed Blue Dragonscale Shoulders",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 28], [15415, 30], [12810, 2], [15407, 1], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227874, 1, 1],
        id: 462227,
        learnedat: 320,
        level: 0,
        name: "Honed Blue Dragonscale Leggings",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 28], [15415, 36], [15407, 2], [14341, 2]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 300, 310, 320],
        creates: [227878, 1, 1],
        id: 461677,
        learnedat: 300,
        level: 0,
        name: "Living Green Dragonscale Gauntlets",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 20], [15412, 25], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 280, 290, 300],
        creates: [227879, 1, 1],
        id: 461720,
        learnedat: 280,
        level: 0,
        name: "Living Green Dragonscale Breastplate",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 20], [15412, 25], [14341, 2]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 290, 300, 310],
        creates: [227877, 1, 1],
        id: 461649,
        learnedat: 290,
        level: 0,
        name: "Living Green Dragonscale Leggings",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 20], [15412, 25], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 310, 320, 330],
        creates: [227851, 1, 1],
        id: 461655,
        learnedat: 310,
        level: 0,
        name: "Hardened Black Dragonscale Breastplate",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 40], [15416, 60], [15407, 1], [14341, 2]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227853, 1, 1],
        id: 461659,
        learnedat: 320,
        level: 0,
        name: "Hardened Black Dragonscale Shoulders",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 44], [15416, 45], [12810, 2], [15407, 1], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227852, 1, 1],
        id: 461657,
        learnedat: 320,
        level: 0,
        name: "Hardened Black Dragonscale Leggings",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 40], [15416, 60], [12810, 4], [15407, 1], [14341, 2]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 290, 300, 310],
        creates: [227867, 1, 1],
        id: 461665,
        learnedat: 290,
        level: 0,
        name: "Masterwork Volcanic Leggings",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 6], [7078, 1], [7075, 1], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 305, 315, 325],
        creates: [227868, 1, 1],
        id: 461661,
        learnedat: 305,
        level: 0,
        name: "Masterwork Volcanic Breastplate",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 8], [7078, 1], [7076, 1], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227866, 1, 1],
        id: 461663,
        learnedat: 320,
        level: 0,
        name: "Masterwork Volcanic Shoulders",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 10], [7078, 1], [7076, 1], [14341, 2]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227869, 1, 1],
        id: 461653,
        learnedat: 320,
        level: 0,
        name: "Brilliant Chromatic Cloak",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[8170, 30], [12607, 12], [15416, 30], [15414, 30], [15407, 5], [14341, 8]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227854, 1, 1],
        id: 461690,
        learnedat: 320,
        level: 0,
        name: "Mastercrafted Shifting Cloak",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[8170, 30], [7082, 12], [12753, 4], [12809, 8], [15407, 4], [14341, 8]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 285, 290, 295],
        creates: [227855, 1, 1],
        id: 461692,
        learnedat: 285,
        level: 0,
        name: "Synthetic Gordok Ogre Suit",
        nskillup: 1,
        phaseId: 4,
        quality: 2,
        reagents: [[8170, 4], [14048, 2], [18240, 1], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165, 197]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227882, 1, 1],
        id: 461754,
        learnedat: 320,
        level: 0,
        name: "Girdle of Arcane Insight",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[8170, 12], [12804, 12], [15407, 2], [14341, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227883, 1, 1],
        id: 461706,
        learnedat: 320,
        level: 0,
        name: "Swift Flight Vambraces",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[8170, 12], [18512, 8], [15420, 60], [15407, 4], [14341, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 310, 320, 330],
        creates: [227848, 1, 1],
        id: 461722,
        learnedat: 310,
        level: 0,
        name: "Devilcore Gauntlets",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[8170, 30], [15417, 8], [14341, 1], [7078, 8]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [227847, 1, 1],
        id: 461724,
        learnedat: 320,
        level: 0,
        name: "Devilcore Leggings",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[8170, 30], [15417, 20], [15407, 1], [14341, 1], [7078, 10]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234294, 1, 1],
        id: 1213717,
        learnedat: 320,
        level: 0,
        name: "Sandstalker Bracers",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20501, 2], [20498, 20], [18512, 4], [19726, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234296, 1, 1],
        id: 1213720,
        learnedat: 320,
        level: 0,
        name: "Sandstalker Gauntlets",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20501, 4], [20498, 30], [18512, 4], [15407, 2], [19726, 6]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234298, 1, 1],
        id: 1213723,
        learnedat: 320,
        level: 0,
        name: "Sandstalker Breastplate",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20501, 5], [20498, 40], [18512, 4], [15407, 4], [19726, 8]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234300, 1, 1],
        id: 1213726,
        learnedat: 320,
        level: 0,
        name: "Spitfire Bracers",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20500, 2], [20498, 20], [7078, 2], [19726, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234302, 1, 1],
        id: 1213728,
        learnedat: 320,
        level: 0,
        name: "Spitfire Gauntlets",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20500, 3], [20498, 30], [7078, 2], [15407, 2], [19726, 6]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234304, 1, 1],
        id: 1213731,
        learnedat: 320,
        level: 0,
        name: "Spitfire Breastplate",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[20500, 4], [20498, 40], [7078, 2], [15407, 4], [19726, 8]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234306, 1, 1],
        id: 1213734,
        learnedat: 320,
        level: 0,
        name: "Bramblewood Belt",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12810, 6], [12803, 4], [15407, 2], [19726, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234308, 1, 1],
        id: 1213736,
        learnedat: 320,
        level: 0,
        name: "Bramblewood Boots",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12810, 6], [18512, 3], [12803, 4], [15407, 4], [19726, 6]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234310, 1, 1],
        id: 1213738,
        learnedat: 320,
        level: 0,
        name: "Bramblewood Helm",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12810, 14], [19726, 7], [12803, 4], [15407, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234324, 1, 1],
        id: 1213751,
        learnedat: 320,
        level: 0,
        name: "Dreamscale Breastplate",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12810, 12], [20381, 6], [12803, 4], [15407, 4], [14227, 6]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233802, 1, 1],
        id: 1213513,
        learnedat: 320,
        level: 0,
        name: "Glowing Chitin Armor Kit",
        nskillup: 1,
        phaseId: 6,
        quality: 3,
        reagents: [[234007, 5], [14342, 3], [18251, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233803, 1, 1],
        id: 1213519,
        learnedat: 320,
        level: 0,
        name: "Sharpened Chitin Armor Kit",
        nskillup: 1,
        phaseId: 6,
        quality: 3,
        reagents: [[234007, 5], [15407, 3], [18251, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233808, 1, 1],
        id: 1213521,
        learnedat: 320,
        level: 0,
        name: "Razorbramble Cowl",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234007, 15], [12810, 8], [234009, 8], [15407, 8]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233804, 1, 1],
        id: 1213523,
        learnedat: 320,
        level: 0,
        name: "Razorbramble Shoulderpads",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234007, 15], [12810, 8], [234009, 8], [15407, 8]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233813, 1, 1],
        id: 1213525,
        learnedat: 320,
        level: 0,
        name: "Razorbramble Leathers",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234007, 22], [12810, 12], [234009, 12], [15407, 12]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234482, 1, 1],
        id: 1214303,
        learnedat: 320,
        level: 0,
        name: "Dreamscale Kilt",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[12810, 12], [20381, 6], [12803, 4], [15407, 4], [14227, 6]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [236699, 1, 1],
        id: 1223774,
        learnedat: 320,
        level: 0,
        name: "Icy Scale Breastplate",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 7], [15408, 24], [7080, 2], [15407, 4], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [236700, 1, 1],
        id: 1223776,
        learnedat: 320,
        level: 0,
        name: "Icy Scale Gauntlets",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 5], [15408, 16], [7080, 2], [15407, 3], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [236698, 1, 1],
        id: 1223778,
        learnedat: 320,
        level: 0,
        name: "Icy Scale Bracers",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 4], [15408, 16], [7080, 2], [15407, 2], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [236702, 1, 1],
        id: 1223780,
        learnedat: 320,
        level: 0,
        name: "Polar Tunic",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 7], [12810, 16], [7080, 2], [15407, 4], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [236703, 1, 1],
        id: 1223782,
        learnedat: 320,
        level: 0,
        name: "Polar Gloves",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 5], [12810, 12], [7080, 2], [15407, 3], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [236701, 1, 1],
        id: 1223784,
        learnedat: 320,
        level: 0,
        name: "Polar Bracers",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 4], [12810, 12], [7080, 2], [15407, 2], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [165]
      }
    ];
  }
});

// data/tailoring.json
var require_tailoring = __commonJS({
  "data/tailoring.json"(exports, module) {
    module.exports = [
      {
        cat: 11,
        colors: [1, 25, 37, 50],
        creates: [2996, 1, 1],
        id: 2963,
        learnedat: 1,
        level: 0,
        name: "Bolt of Linen Cloth",
        nskillup: 1,
        quality: 1,
        reagents: [[2589, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [1, 35, 47, 60],
        creates: [2570, 1, 1],
        id: 2387,
        learnedat: 1,
        level: 0,
        name: "Linen Cloak",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 1], [2320, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [10, 45, 57, 70],
        creates: [2568, 1, 1],
        id: 2385,
        learnedat: 10,
        level: 0,
        name: "Brown Linen Vest",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 1], [2320, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [40, 65, 82, 100],
        creates: [2572, 1, 1],
        id: 2389,
        learnedat: 40,
        level: 0,
        name: "Red Linen Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[2996, 3], [2320, 2], [2604, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [65, 90, 107, 125],
        creates: [2569, 1, 1],
        id: 2386,
        learnedat: 65,
        level: 0,
        name: "Linen Boots",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 3], [2320, 1], [2318, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [40, 65, 82, 100],
        creates: [2575, 1, 1],
        id: 2392,
        learnedat: 40,
        level: 0,
        name: "Red Linen Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 2], [2320, 1], [2604, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [1, 35, 47, 60],
        creates: [2576, 1, 1],
        id: 2393,
        learnedat: 1,
        level: 0,
        name: "White Linen Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 1], [2320, 1], [2324, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 25
      },
      {
        cat: 11,
        colors: [40, 65, 82, 100],
        creates: [2577, 1, 1],
        id: 2394,
        learnedat: 40,
        level: 0,
        name: "Blue Linen Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 2], [2320, 1], [6260, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [60, 85, 102, 120],
        creates: [2580, 1, 1],
        id: 2397,
        learnedat: 60,
        level: 0,
        name: "Reinforced Linen Cape",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 2], [2320, 3]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [70, 95, 112, 130],
        creates: [2578, 1, 1],
        id: 2395,
        learnedat: 70,
        level: 0,
        name: "Barbaric Linen Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[2996, 4], [2318, 1], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [70, 95, 112, 130],
        creates: [2579, 1, 1],
        id: 2396,
        learnedat: 70,
        level: 0,
        name: "Green Linen Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 3], [2321, 1], [2605, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [75, 90, 97, 105],
        creates: [2997, 1, 1],
        id: 2964,
        learnedat: 75,
        level: 0,
        name: "Bolt of Woolen Cloth",
        nskillup: 1,
        quality: 1,
        reagents: [[2592, 3]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [75, 100, 117, 135],
        creates: [2584, 1, 1],
        id: 2402,
        learnedat: 75,
        level: 0,
        name: "Woolen Cape",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 1], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [85, 110, 127, 145],
        creates: [2582, 1, 1],
        id: 2399,
        learnedat: 85,
        level: 0,
        name: "Green Woolen Vest",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 2], [2321, 2], [2605, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [95, 120, 137, 155],
        creates: [2583, 1, 1],
        id: 2401,
        learnedat: 95,
        level: 0,
        name: "Woolen Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 4], [2321, 2], [2318, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [105, 130, 147, 165],
        creates: [2585, 1, 1],
        id: 2403,
        learnedat: 105,
        level: 0,
        name: "Gray Woolen Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 4], [2321, 3], [4340, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [100, 110, 120, 130],
        creates: [2587, 1, 1],
        id: 2406,
        learnedat: 100,
        level: 0,
        name: "Gray Woolen Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 2], [2321, 1], [4340, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [125, 135, 140, 145],
        creates: [4305, 1, 1],
        id: 3839,
        learnedat: 125,
        level: 0,
        name: "Bolt of Silk Cloth",
        nskillup: 1,
        quality: 1,
        reagents: [[4306, 4]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [175, 180, 182, 185],
        creates: [4339, 1, 1],
        id: 3865,
        learnedat: 175,
        level: 0,
        name: "Bolt of Mageweave",
        nskillup: 1,
        quality: 1,
        reagents: [[4338, 5]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [35, 60, 77, 95],
        creates: [4307, 1, 1],
        id: 3840,
        learnedat: 35,
        level: 0,
        name: "Heavy Linen Gloves",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 2], [2320, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [60, 85, 102, 120],
        creates: [4308, 1, 1],
        id: 3841,
        learnedat: 60,
        level: 0,
        name: "Green Linen Bracers",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 3], [2320, 2], [2605, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [70, 95, 112, 130],
        creates: [4309, 1, 1],
        id: 3842,
        learnedat: 70,
        level: 0,
        name: "Handstitched Linen Britches",
        nskillup: 1,
        quality: 2,
        reagents: [[2996, 4], [2321, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [85, 110, 127, 145],
        creates: [4310, 1, 1],
        id: 3843,
        learnedat: 85,
        level: 0,
        name: "Heavy Woolen Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 3], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 400
      },
      {
        cat: 11,
        colors: [100, 125, 142, 160],
        creates: [4311, 1, 1],
        id: 3844,
        learnedat: 100,
        level: 0,
        name: "Heavy Woolen Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 3], [2321, 2], [5498, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [80, 105, 122, 140],
        creates: [4312, 1, 1],
        id: 3845,
        learnedat: 80,
        level: 0,
        name: "Soft-soled Linen Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[2996, 5], [2318, 2], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [95, 120, 137, 155],
        creates: [4313, 1, 1],
        id: 3847,
        learnedat: 95,
        level: 0,
        name: "Red Woolen Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 4], [2318, 2], [2321, 1], [2604, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [110, 135, 152, 170],
        creates: [4314, 1, 1],
        id: 3848,
        learnedat: 110,
        level: 0,
        name: "Double-stitched Woolen Shoulders",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 3], [2321, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [120, 145, 162, 180],
        creates: [4315, 1, 1],
        id: 3849,
        learnedat: 120,
        level: 0,
        name: "Reinforced Woolen Shoulders",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 6], [2319, 2], [2321, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [110, 135, 152, 170],
        creates: [4316, 1, 1],
        id: 3850,
        learnedat: 110,
        level: 0,
        name: "Heavy Woolen Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 5], [2321, 4]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 500
      },
      {
        cat: 11,
        colors: [125, 150, 167, 185],
        creates: [4317, 1, 1],
        id: 3851,
        learnedat: 125,
        level: 0,
        name: "Phoenix Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 6], [5500, 1], [2321, 3]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [130, 150, 165, 180],
        creates: [4318, 1, 1],
        id: 3852,
        learnedat: 130,
        level: 0,
        name: "Gloves of Meditation",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 4], [2321, 3], [3383, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 750
      },
      {
        cat: 11,
        colors: [145, 165, 180, 195],
        creates: [4319, 1, 1],
        id: 3854,
        learnedat: 145,
        level: 0,
        name: "Azure Silk Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 3], [4234, 2], [6260, 2], [2321, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [125, 150, 167, 185],
        creates: [4320, 1, 1],
        id: 3855,
        learnedat: 125,
        level: 0,
        name: "Spidersilk Boots",
        nskillup: 1,
        quality: 3,
        reagents: [[4305, 2], [2319, 4], [3182, 4], [5500, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 750
      },
      {
        cat: 11,
        colors: [140, 160, 175, 190],
        creates: [4321, 1, 1],
        id: 3856,
        learnedat: 140,
        level: 0,
        name: "Spider Silk Slippers",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 3], [3182, 1], [2321, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [165, 185, 200, 215],
        creates: [4322, 1, 1],
        id: 3857,
        learnedat: 165,
        level: 0,
        name: "Enchanter's Cowl",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 3], [2321, 2], [4337, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [170, 190, 205, 220],
        creates: [4323, 1, 1],
        id: 3858,
        learnedat: 170,
        level: 0,
        name: "Shadow Hood",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 4], [4291, 1], [3824, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [150, 170, 185, 200],
        creates: [4324, 1, 1],
        id: 3859,
        learnedat: 150,
        level: 0,
        name: "Azure Silk Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 5], [6260, 4]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 750
      },
      {
        cat: 11,
        colors: [175, 195, 210, 225],
        creates: [4325, 1, 1],
        id: 3860,
        learnedat: 175,
        level: 0,
        name: "Boots of the Enchanter",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 4], [4291, 1], [4337, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [185, 205, 220, 235],
        creates: [4326, 1, 1],
        id: 3861,
        learnedat: 185,
        level: 0,
        name: "Long Silken Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 4], [3827, 1], [4291, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 900
      },
      {
        cat: 11,
        colors: [200, 220, 235, 250],
        creates: [4327, 1, 1],
        id: 3862,
        learnedat: 200,
        level: 0,
        name: "Icy Cloak",
        nskillup: 1,
        quality: 3,
        reagents: [[4339, 3], [4291, 2], [3829, 1], [4337, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [180, 200, 215, 230],
        creates: [4328, 1, 1],
        id: 3863,
        learnedat: 180,
        level: 0,
        name: "Spider Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 4], [4337, 2], [7071, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [200, 220, 235, 250],
        creates: [4329, 1, 1],
        id: 3864,
        learnedat: 200,
        level: 0,
        name: "Star Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 4], [4234, 4], [3864, 1], [7071, 1], [4291, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [110, 135, 152, 170],
        creates: [4330, 1, 1],
        id: 3866,
        learnedat: 110,
        level: 0,
        name: "Stylish Red Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 3], [2604, 2], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [125, 150, 167, 185],
        creates: [4331, 1, 1],
        id: 3868,
        learnedat: 125,
        level: 0,
        name: "Phoenix Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 4], [5500, 1], [2321, 4], [2324, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [135, 145, 150, 155],
        creates: [4332, 1, 1],
        id: 3869,
        learnedat: 135,
        level: 0,
        name: "Bright Yellow Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 1], [4341, 1], [2321, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [155, 165, 170, 175],
        creates: [4333, 1, 1],
        id: 3870,
        learnedat: 155,
        level: 0,
        name: "Dark Silk Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 2], [4340, 2], [2321, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [170, 180, 185, 190],
        creates: [4334, 1, 1],
        id: 3871,
        learnedat: 170,
        level: 0,
        name: "Formal White Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 3], [2324, 2], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 450
      },
      {
        cat: 11,
        colors: [185, 195, 200, 205],
        creates: [4335, 1, 1],
        id: 3872,
        learnedat: 185,
        level: 0,
        name: "Rich Purple Silk Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 4], [4342, 1], [4291, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [200, 210, 215, 220],
        creates: [4336, 1, 1],
        id: 3873,
        learnedat: 200,
        level: 0,
        name: "Black Swashbuckler's Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 5], [2325, 1], [4291, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [30, 55, 72, 90],
        creates: [4343, 1, 1],
        id: 3914,
        learnedat: 30,
        level: 0,
        name: "Brown Linen Pants",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 2], [2320, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [1, 35, 47, 60],
        creates: [4344, 1, 1],
        id: 3915,
        learnedat: 1,
        level: 0,
        name: "Brown Linen Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 1], [2320, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [90, 115, 132, 150],
        creates: [5542, 1, 1],
        id: 6521,
        learnedat: 90,
        level: 0,
        name: "Pearl-clasped Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 3], [2321, 2], [5498, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 400
      },
      {
        cat: 11,
        colors: [95, 120, 137, 155],
        creates: [4241, 1, 1],
        id: 3758,
        learnedat: 95,
        level: 0,
        name: "Green Woolen Bag",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 4], [2605, 1], [2321, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [45, 70, 87, 105],
        creates: [4238, 1, 1],
        id: 3755,
        learnedat: 45,
        level: 0,
        name: "Linen Bag",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 3], [2320, 3]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 100
      },
      {
        cat: 11,
        colors: [80, 105, 122, 140],
        creates: [4240, 1, 1],
        id: 3757,
        learnedat: 80,
        level: 0,
        name: "Woolen Bag",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 3], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 200
      },
      {
        cat: 11,
        colors: [150, 170, 185, 200],
        creates: [4245, 1, 1],
        id: 3813,
        learnedat: 150,
        level: 0,
        name: "Small Silk Pack",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 3], [4234, 2], [2321, 3]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 800
      },
      {
        cat: 11,
        colors: [70, 95, 112, 130],
        creates: [5762, 1, 1],
        id: 6686,
        learnedat: 70,
        level: 0,
        name: "Red Linen Bag",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 4], [2321, 1], [2604, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [115, 140, 157, 175],
        creates: [5763, 1, 1],
        id: 6688,
        learnedat: 115,
        level: 0,
        name: "Red Woolen Bag",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 4], [2604, 1], [2321, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [135, 155, 170, 185],
        creates: [5766, 1, 1],
        id: 6690,
        learnedat: 135,
        level: 0,
        name: "Lesser Wizard's Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 2], [2321, 2], [3182, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [150, 170, 185, 200],
        creates: [5770, 1, 1],
        id: 6692,
        learnedat: 150,
        level: 0,
        name: "Robes of Arcana",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 4], [2321, 2], [3182, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [175, 195, 210, 225],
        creates: [5764, 1, 1],
        id: 6693,
        learnedat: 175,
        level: 0,
        name: "Green Silk Pack",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 4], [4234, 3], [2321, 3], [2605, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [185, 205, 220, 235],
        creates: [5765, 1, 1],
        id: 6695,
        learnedat: 185,
        level: 0,
        name: "Black Silk Pack",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 5], [2325, 1], [2321, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [30, 55, 72, 90],
        creates: [6238, 1, 1],
        id: 7623,
        learnedat: 30,
        level: 0,
        name: "Brown Linen Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[2996, 3], [2320, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [30, 55, 72, 90],
        creates: [6241, 1, 1],
        id: 7624,
        learnedat: 30,
        level: 0,
        name: "White Linen Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[2996, 3], [2320, 1], [2324, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [55, 80, 97, 115],
        creates: [6240, 1, 1],
        id: 7630,
        learnedat: 55,
        level: 0,
        name: "Blue Linen Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[2996, 3], [2320, 1], [6260, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [55, 80, 97, 115],
        creates: [6239, 1, 1],
        id: 7629,
        learnedat: 55,
        level: 0,
        name: "Red Linen Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[2996, 3], [2320, 1], [2604, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [70, 95, 112, 130],
        creates: [6242, 1, 1],
        id: 7633,
        learnedat: 70,
        level: 0,
        name: "Blue Linen Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[2996, 4], [2320, 2], [6260, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 0,
        creates: [6243, 1, 1],
        id: 7636,
        level: 0,
        name: "Green Woolen Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 3], [2321, 2], [2605, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [100, 125, 142, 160],
        creates: [6263, 1, 1],
        id: 7639,
        learnedat: 100,
        level: 0,
        name: "Blue Overalls",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 4], [2321, 2], [6260, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [115, 140, 157, 175],
        creates: [6264, 1, 1],
        id: 7643,
        learnedat: 115,
        level: 0,
        name: "Greater Adept's Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 5], [2321, 3], [2604, 3]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [120, 145, 162, 180],
        creates: [6384, 1, 1],
        id: 7892,
        learnedat: 120,
        level: 0,
        name: "Stylish Blue Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 4], [6260, 2], [4340, 1], [2321, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [120, 145, 162, 180],
        creates: [6385, 1, 1],
        id: 7893,
        learnedat: 120,
        level: 0,
        name: "Stylish Green Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 4], [2605, 2], [4340, 1], [2321, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [40, 65, 82, 100],
        creates: [6786, 1, 1],
        id: 8465,
        learnedat: 40,
        level: 0,
        name: "Simple Dress",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 2], [2320, 1], [6260, 1], [2324, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [110, 135, 152, 170],
        creates: [6787, 1, 1],
        id: 8467,
        learnedat: 110,
        level: 0,
        name: "White Woolen Dress",
        nskillup: 1,
        quality: 1,
        reagents: [[2997, 3], [2324, 4], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 250
      },
      {
        cat: 11,
        colors: [175, 185, 190, 195],
        creates: [6796, 1, 1],
        id: 8489,
        learnedat: 175,
        level: 0,
        name: "Red Swashbuckler's Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 3], [2604, 2], [4291, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 675
      },
      {
        cat: 11,
        colors: [160, 170, 175, 180],
        creates: [6795, 1, 1],
        id: 8483,
        learnedat: 160,
        level: 0,
        name: "White Swashbuckler's Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 3], [2324, 2], [4291, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 450
      },
      {
        cat: 11,
        colors: [15, 50, 67, 85],
        creates: [7026, 1, 1],
        id: 8776,
        learnedat: 15,
        level: 0,
        name: "Linen Belt",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 1], [2320, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [140, 160, 175, 190],
        creates: [7046, 1, 1],
        id: 8758,
        learnedat: 140,
        level: 0,
        name: "Azure Silk Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 4], [6260, 2], [2321, 3]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 600
      },
      {
        cat: 11,
        colors: [145, 155, 160, 165],
        creates: [7048, 1, 1],
        id: 8760,
        learnedat: 145,
        level: 0,
        name: "Azure Silk Hood",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 2], [6260, 2], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 600
      },
      {
        cat: 11,
        colors: [160, 170, 175, 180],
        creates: [7050, 1, 1],
        id: 8762,
        learnedat: 160,
        level: 0,
        name: "Silk Headband",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 3], [2321, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 675
      },
      {
        cat: 11,
        colors: [170, 190, 205, 220],
        creates: [7051, 1, 1],
        id: 8764,
        learnedat: 170,
        level: 0,
        name: "Earthen Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 3], [7067, 1], [2321, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 810
      },
      {
        cat: 11,
        colors: [175, 195, 210, 225],
        creates: [7052, 1, 1],
        id: 8766,
        learnedat: 175,
        level: 0,
        name: "Azure Silk Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 4], [7070, 1], [6260, 2], [2321, 2], [7071, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 900
      },
      {
        cat: 11,
        colors: [190, 210, 225, 240],
        creates: [7054, 1, 1],
        id: 8770,
        learnedat: 190,
        level: 0,
        name: "Robe of Power",
        nskillup: 1,
        quality: 3,
        reagents: [[4339, 2], [7067, 2], [7070, 2], [7068, 2], [7069, 2], [4291, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 900
      },
      {
        cat: 11,
        colors: [175, 195, 210, 225],
        creates: [7055, 1, 1],
        id: 8772,
        learnedat: 175,
        level: 0,
        name: "Crimson Silk Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 4], [7071, 1], [2604, 2], [4291, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 900
      },
      {
        cat: 11,
        colors: [180, 200, 215, 230],
        creates: [7057, 1, 1],
        id: 8774,
        learnedat: 180,
        level: 0,
        name: "Green Silken Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 5], [4291, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 900
      },
      {
        cat: 0,
        creates: [7027, 1, 1],
        id: 8778,
        level: 0,
        name: "Boots of Darkness",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 3], [2319, 2], [6048, 1], [2321, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [145, 165, 180, 195],
        creates: [7047, 1, 1],
        id: 8780,
        learnedat: 145,
        level: 0,
        name: "Hands of Darkness",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 3], [4234, 2], [6048, 2], [2321, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [150, 170, 185, 200],
        creates: [7049, 1, 1],
        id: 8782,
        learnedat: 150,
        level: 0,
        name: "Truefaith Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 3], [4234, 2], [929, 4], [2321, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [165, 185, 200, 215],
        creates: [7065, 1, 1],
        id: 8784,
        learnedat: 165,
        level: 0,
        name: "Green Silk Armor",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 5], [2605, 2], [4291, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [175, 195, 210, 225],
        creates: [7053, 1, 1],
        id: 8786,
        learnedat: 175,
        level: 0,
        name: "Azure Silk Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 3], [6260, 2], [2321, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [180, 200, 215, 230],
        creates: [7056, 1, 1],
        id: 8789,
        learnedat: 180,
        level: 0,
        name: "Crimson Silk Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 5], [2604, 2], [6371, 2], [4291, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [185, 205, 215, 225],
        creates: [7058, 1, 1],
        id: 8791,
        learnedat: 185,
        level: 0,
        name: "Crimson Silk Vest",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 4], [2604, 2], [2321, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 2250
      },
      {
        cat: 11,
        colors: [190, 210, 225, 240],
        creates: [7059, 1, 1],
        id: 8793,
        learnedat: 190,
        level: 0,
        name: "Crimson Silk Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 5], [6371, 2], [2604, 2], [4291, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [190, 210, 225, 240],
        creates: [7060, 1, 1],
        id: 8795,
        learnedat: 190,
        level: 0,
        name: "Azure Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 6], [7072, 2], [6260, 2], [4291, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [195, 215, 230, 245],
        creates: [7061, 1, 1],
        id: 8797,
        learnedat: 195,
        level: 0,
        name: "Earthen Silk Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 5], [7067, 4], [4234, 4], [7071, 1], [4291, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [195, 215, 225, 235],
        creates: [7062, 1, 1],
        id: 8799,
        learnedat: 195,
        level: 0,
        name: "Crimson Silk Pantaloons",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 4], [2604, 2], [4291, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 2700
      },
      {
        cat: 11,
        colors: [205, 220, 235, 250],
        creates: [7063, 1, 1],
        id: 8802,
        learnedat: 205,
        level: 0,
        name: "Crimson Silk Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 8], [7068, 4], [3827, 2], [2604, 4], [4291, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [210, 225, 240, 255],
        creates: [7064, 1, 1],
        id: 8804,
        learnedat: 210,
        level: 0,
        name: "Crimson Silk Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4305, 6], [7068, 2], [6371, 2], [4304, 2], [2604, 4], [4291, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 4500
      },
      {
        cat: 11,
        colors: [1, 35, 47, 60],
        creates: [10045, 1, 1],
        id: 12044,
        learnedat: 1,
        level: 0,
        name: "Simple Linen Pants",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 1], [2320, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [20, 50, 67, 85],
        creates: [10046, 1, 1],
        id: 12045,
        learnedat: 20,
        level: 0,
        name: "Simple Linen Boots",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 2], [2318, 1], [2320, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 50
      },
      {
        cat: 11,
        colors: [75, 100, 117, 135],
        creates: [10047, 1, 1],
        id: 12046,
        learnedat: 75,
        level: 0,
        name: "Simple Kilt",
        nskillup: 1,
        quality: 1,
        reagents: [[2996, 4], [2321, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 300
      },
      {
        cat: 11,
        colors: [120, 145, 162, 180],
        creates: [10048, 1, 1],
        id: 12047,
        learnedat: 120,
        level: 0,
        name: "Colorful Kilt",
        nskillup: 1,
        quality: 2,
        reagents: [[2997, 5], [2604, 3], [2321, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [205, 220, 235, 250],
        creates: [9998, 1, 1],
        id: 12048,
        learnedat: 205,
        level: 0,
        name: "Black Mageweave Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 2], [4291, 3]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 3600
      },
      {
        cat: 11,
        colors: [205, 220, 235, 250],
        creates: [9999, 1, 1],
        id: 12049,
        learnedat: 205,
        level: 0,
        name: "Black Mageweave Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 2], [4291, 3]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 3600
      },
      {
        cat: 11,
        colors: [210, 225, 240, 255],
        creates: [10001, 1, 1],
        id: 12050,
        learnedat: 210,
        level: 0,
        name: "Black Mageweave Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [8343, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 3600
      },
      {
        cat: 11,
        colors: [210, 225, 240, 255],
        creates: [10002, 1, 1],
        id: 12052,
        learnedat: 210,
        level: 0,
        name: "Shadoweave Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [10285, 2], [8343, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 4500
      },
      {
        cat: 11,
        colors: [215, 230, 245, 260],
        creates: [10003, 1, 1],
        id: 12053,
        learnedat: 215,
        level: 0,
        name: "Black Mageweave Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 2], [8343, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 4500
      },
      {
        cat: 11,
        colors: [215, 230, 245, 260],
        creates: [10004, 1, 1],
        id: 12055,
        learnedat: 215,
        level: 0,
        name: "Shadoweave Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [10285, 2], [8343, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 4950
      },
      {
        cat: 11,
        colors: [215, 230, 245, 260],
        creates: [10007, 1, 1],
        id: 12056,
        learnedat: 215,
        level: 0,
        name: "Red Mageweave Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [2604, 2], [8343, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [215, 220, 225, 230],
        creates: [10008, 1, 1],
        id: 12059,
        learnedat: 215,
        level: 0,
        name: "White Bandit Mask",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 1], [2324, 1], [8343, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [215, 230, 245, 260],
        creates: [10009, 1, 1],
        id: 12060,
        learnedat: 215,
        level: 0,
        name: "Red Mageweave Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [2604, 2], [8343, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [215, 220, 225, 230],
        creates: [10056, 1, 1],
        id: 12061,
        learnedat: 215,
        level: 0,
        name: "Orange Mageweave Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 1], [6261, 1], [8343, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 2250
      },
      {
        cat: 0,
        creates: [10010, 1, 1],
        id: 12062,
        level: 0,
        name: "Stormcloth Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 4], [7079, 2], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 0,
        creates: [10011, 1, 1],
        id: 12063,
        level: 0,
        name: "Stormcloth Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [7079, 2], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [220, 225, 230, 235],
        creates: [10052, 1, 1],
        id: 12064,
        learnedat: 220,
        level: 0,
        name: "Orange Martial Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 2], [6261, 2], [8343, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [225, 240, 255, 270],
        creates: [10050, 1, 1],
        id: 12065,
        learnedat: 225,
        level: 0,
        name: "Mageweave Bag",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 4], [4291, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 4500
      },
      {
        cat: 11,
        colors: [225, 240, 255, 270],
        creates: [10018, 1, 1],
        id: 12066,
        learnedat: 225,
        level: 0,
        name: "Red Mageweave Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [2604, 2], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [225, 240, 255, 270],
        creates: [10019, 1, 1],
        id: 12067,
        learnedat: 225,
        level: 0,
        name: "Dreamweave Gloves",
        nskillup: 1,
        quality: 3,
        reagents: [[4339, 4], [8153, 4], [10286, 2], [8343, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 4500
      },
      {
        cat: 0,
        creates: [10020, 1, 1],
        id: 12068,
        level: 0,
        name: "Stormcloth Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 5], [7079, 3], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [225, 240, 255, 270],
        creates: [10042, 1, 1],
        id: 12069,
        learnedat: 225,
        level: 0,
        name: "Cindercloth Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 5], [7077, 2], [8343, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 4500
      },
      {
        cat: 11,
        colors: [225, 240, 255, 270],
        creates: [10021, 1, 1],
        id: 12070,
        learnedat: 225,
        level: 0,
        name: "Dreamweave Vest",
        nskillup: 1,
        quality: 3,
        reagents: [[4339, 6], [8153, 6], [10286, 2], [8343, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 4500
      },
      {
        cat: 11,
        colors: [225, 240, 255, 270],
        creates: [10023, 1, 1],
        id: 12071,
        learnedat: 225,
        level: 0,
        name: "Shadoweave Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 5], [10285, 5], [8343, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 5400
      },
      {
        cat: 11,
        colors: [230, 245, 260, 275],
        creates: [10024, 1, 1],
        id: 12072,
        learnedat: 230,
        level: 0,
        name: "Black Mageweave Headband",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [8343, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 6e3
      },
      {
        cat: 11,
        colors: [230, 245, 260, 275],
        creates: [10026, 1, 1],
        id: 12073,
        learnedat: 230,
        level: 0,
        name: "Black Mageweave Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [8343, 2], [4304, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 6e3
      },
      {
        cat: 11,
        colors: [230, 245, 260, 275],
        creates: [10027, 1, 1],
        id: 12074,
        learnedat: 230,
        level: 0,
        name: "Black Mageweave Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [8343, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 6e3
      },
      {
        cat: 11,
        colors: [230, 235, 240, 245],
        creates: [10054, 1, 1],
        id: 12075,
        learnedat: 230,
        level: 0,
        name: "Lavender Mageweave Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 2], [4342, 2], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [235, 250, 265, 280],
        creates: [10028, 1, 1],
        id: 12076,
        learnedat: 235,
        level: 0,
        name: "Shadoweave Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 5], [10285, 4], [8343, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 5850
      },
      {
        cat: 11,
        colors: [235, 240, 245, 250],
        creates: [10053, 1, 1],
        id: 12077,
        learnedat: 235,
        level: 0,
        name: "Simple Black Dress",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 3], [2325, 1], [8343, 1], [2324, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 5e3
      },
      {
        cat: 11,
        colors: [235, 250, 265, 280],
        creates: [10029, 1, 1],
        id: 12078,
        learnedat: 235,
        level: 0,
        name: "Red Mageweave Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 4], [2604, 2], [8343, 3]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [235, 250, 265, 280],
        creates: [10051, 1, 1],
        id: 12079,
        learnedat: 235,
        level: 0,
        name: "Red Mageweave Bag",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 4], [2604, 2], [8343, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 6500
      },
      {
        cat: 11,
        colors: [235, 240, 245, 250],
        creates: [10055, 1, 1],
        id: 12080,
        learnedat: 235,
        level: 0,
        name: "Pink Mageweave Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 3], [10290, 1], [8343, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [240, 255, 270, 285],
        creates: [10030, 1, 1],
        id: 12081,
        learnedat: 240,
        level: 0,
        name: "Admiral's Hat",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 3], [4589, 6], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [240, 255, 270, 285],
        creates: [10031, 1, 1],
        id: 12082,
        learnedat: 240,
        level: 0,
        name: "Shadoweave Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 6], [10285, 6], [8343, 3], [4304, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 6300
      },
      {
        cat: 0,
        creates: [10032, 1, 1],
        id: 12083,
        level: 0,
        name: "Stormcloth Headband",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 4], [7079, 4], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [240, 255, 270, 285],
        creates: [10033, 1, 1],
        id: 12084,
        learnedat: 240,
        level: 0,
        name: "Red Mageweave Headband",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 4], [2604, 2], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [240, 245, 250, 255],
        creates: [10034, 1, 1],
        id: 12085,
        learnedat: 240,
        level: 0,
        name: "Tuxedo Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 4], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [245, 260, 275, 290],
        creates: [10025, 1, 1],
        id: 12086,
        learnedat: 245,
        level: 0,
        name: "Shadoweave Mask",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 2], [10285, 8], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 0,
        creates: [10038, 1, 1],
        id: 12087,
        level: 0,
        name: "Stormcloth Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 5], [7079, 6], [8343, 3]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [245, 260, 275, 290],
        creates: [10044, 1, 1],
        id: 12088,
        learnedat: 245,
        level: 0,
        name: "Cindercloth Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 5], [7077, 1], [8343, 3], [4304, 2]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 7500
      },
      {
        cat: 11,
        colors: [245, 250, 255, 260],
        creates: [10035, 1, 1],
        id: 12089,
        learnedat: 245,
        level: 0,
        name: "Tuxedo Pants",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 4], [8343, 3]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 0,
        creates: [10039, 1, 1],
        id: 12090,
        level: 0,
        name: "Stormcloth Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 6], [7079, 6], [8343, 3], [4304, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [250, 255, 260, 265],
        creates: [10040, 1, 1],
        id: 12091,
        learnedat: 250,
        level: 0,
        name: "White Wedding Dress",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 5], [8343, 3], [2324, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [250, 265, 280, 295],
        creates: [10041, 1, 1],
        id: 12092,
        learnedat: 250,
        level: 0,
        name: "Dreamweave Circlet",
        nskillup: 1,
        quality: 3,
        reagents: [[4339, 8], [8153, 4], [10286, 2], [8343, 3], [6037, 1], [1529, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 7500
      },
      {
        cat: 11,
        colors: [250, 265, 280, 295],
        creates: [10036, 1, 1],
        id: 12093,
        learnedat: 250,
        level: 0,
        name: "Tuxedo Jacket",
        nskillup: 1,
        quality: 1,
        reagents: [[4339, 5], [8343, 3]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [250, 255, 257, 260],
        creates: [14048, 1, 1],
        id: 18401,
        learnedat: 250,
        level: 0,
        name: "Bolt of Runecloth",
        nskillup: 1,
        quality: 1,
        reagents: [[14047, 5]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [255, 270, 285, 300],
        creates: [13856, 1, 1],
        id: 18402,
        learnedat: 255,
        level: 0,
        name: "Runecloth Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 3], [14341, 1]],
        schools: 1,
        skill: [197],
        source: [6],
        trainingcost: 1e4
      },
      {
        cat: 11,
        colors: [255, 270, 285, 300],
        creates: [13869, 1, 1],
        id: 18403,
        learnedat: 255,
        level: 0,
        name: "Frostweave Tunic",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [7079, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [255, 270, 285, 300],
        creates: [13868, 1, 1],
        id: 18404,
        learnedat: 255,
        level: 0,
        name: "Frostweave Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [7079, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [260, 275, 290, 305],
        creates: [13858, 1, 1],
        id: 18406,
        learnedat: 260,
        level: 0,
        name: "Runecloth Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [14227, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [260, 275, 290, 305],
        creates: [14046, 1, 1],
        id: 18405,
        learnedat: 260,
        level: 0,
        name: "Runecloth Bag",
        nskillup: 1,
        quality: 1,
        reagents: [[14048, 5], [8170, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [260, 275, 290, 305],
        creates: [13857, 1, 1],
        id: 18407,
        learnedat: 260,
        level: 0,
        name: "Runecloth Tunic",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [14227, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [260, 275, 290, 305],
        creates: [14042, 1, 1],
        id: 18408,
        learnedat: 260,
        level: 0,
        name: "Cindercloth Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [7077, 3], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [265, 280, 295, 310],
        creates: [13860, 1, 1],
        id: 18409,
        learnedat: 265,
        level: 0,
        name: "Runecloth Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 4], [14227, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [265, 280, 295, 310],
        creates: [14143, 1, 1],
        id: 18410,
        learnedat: 265,
        level: 0,
        name: "Ghostweave Belt",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 3], [9210, 2], [14227, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [265, 280, 295, 310],
        creates: [13870, 1, 1],
        id: 18411,
        learnedat: 265,
        level: 0,
        name: "Frostweave Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 3], [7080, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [270, 285, 300, 315],
        creates: [14043, 1, 1],
        id: 18412,
        learnedat: 270,
        level: 0,
        name: "Cindercloth Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 4], [7077, 3], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [270, 285, 300, 315],
        creates: [14101, 1, 1],
        id: 18415,
        learnedat: 270,
        level: 0,
        name: "Brightcloth Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 4], [3577, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [270, 285, 300, 315],
        creates: [14142, 1, 1],
        id: 18413,
        learnedat: 270,
        level: 0,
        name: "Ghostweave Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 4], [9210, 2], [14227, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [270, 285, 300, 315],
        creates: [14100, 1, 1],
        id: 18414,
        learnedat: 270,
        level: 0,
        name: "Brightcloth Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [3577, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [275, 290, 305, 320],
        creates: [14141, 1, 1],
        id: 18416,
        learnedat: 275,
        level: 0,
        name: "Ghostweave Vest",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [9210, 4], [14227, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [275, 290, 305, 320],
        creates: [13863, 1, 1],
        id: 18417,
        learnedat: 275,
        level: 0,
        name: "Runecloth Gloves",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 4], [8170, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [275, 290, 305, 320],
        creates: [14044, 1, 1],
        id: 18418,
        learnedat: 275,
        level: 0,
        name: "Cindercloth Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [7078, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [275, 290, 305, 320],
        creates: [14107, 1, 1],
        id: 18419,
        learnedat: 275,
        level: 0,
        name: "Felcloth Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [14256, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [275, 290, 305, 320],
        creates: [14103, 1, 1],
        id: 18420,
        learnedat: 275,
        level: 0,
        name: "Brightcloth Cloak",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 4], [3577, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [275, 290, 305, 320],
        creates: [14132, 1, 1],
        id: 18421,
        learnedat: 275,
        level: 0,
        name: "Wizardweave Leggings",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [11176, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [275, 290, 305, 320],
        creates: [14134, 1, 1],
        id: 18422,
        learnedat: 275,
        level: 0,
        name: "Cloak of Fire",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 6], [7078, 4], [7077, 4], [7068, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [280, 295, 310, 325],
        creates: [13864, 1, 1],
        id: 18423,
        learnedat: 280,
        level: 0,
        name: "Runecloth Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 4], [14227, 2], [8170, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [280, 295, 310, 325],
        creates: [13871, 1, 1],
        id: 18424,
        learnedat: 280,
        level: 0,
        name: "Frostweave Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [7080, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [280, 295, 310, 325],
        creates: [14045, 1, 1],
        id: 18434,
        learnedat: 280,
        level: 0,
        name: "Cindercloth Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [7078, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [285, 300, 315, 330],
        creates: [14136, 1, 1],
        id: 18436,
        learnedat: 285,
        level: 0,
        name: "Robe of Winter Night",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 10], [14256, 12], [12808, 4], [7080, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [285, 300, 315, 330],
        creates: [14108, 1, 1],
        id: 18437,
        learnedat: 285,
        level: 0,
        name: "Felcloth Boots",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [14256, 4], [8170, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [285, 300, 315, 330],
        creates: [13865, 1, 1],
        id: 18438,
        learnedat: 285,
        level: 0,
        name: "Runecloth Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [14227, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [290, 305, 320, 335],
        creates: [14104, 1, 1],
        id: 18439,
        learnedat: 290,
        level: 0,
        name: "Brightcloth Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [3577, 4], [14227, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [290, 305, 320, 335],
        creates: [14137, 1, 1],
        id: 18440,
        learnedat: 290,
        level: 0,
        name: "Mooncloth Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 6], [14342, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [290, 305, 320, 335],
        creates: [14144, 1, 1],
        id: 18441,
        learnedat: 290,
        level: 0,
        name: "Ghostweave Pants",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [9210, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [290, 305, 320, 335],
        creates: [14111, 1, 1],
        id: 18442,
        learnedat: 290,
        level: 0,
        name: "Felcloth Hood",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [14256, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [295, 310, 325, 340],
        creates: [13866, 1, 1],
        id: 18444,
        learnedat: 295,
        level: 0,
        name: "Runecloth Headband",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 4], [14227, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14155, 1, 1],
        id: 18445,
        learnedat: 300,
        level: 0,
        name: "Mooncloth Bag",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 4], [14342, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14128, 1, 1],
        id: 18446,
        learnedat: 300,
        level: 0,
        name: "Wizardweave Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 8], [11176, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14138, 1, 1],
        id: 18447,
        learnedat: 300,
        level: 0,
        name: "Mooncloth Vest",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 6], [14342, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14139, 1, 1],
        id: 18448,
        learnedat: 300,
        level: 0,
        name: "Mooncloth Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 5], [14342, 5], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [13867, 1, 1],
        id: 18449,
        learnedat: 300,
        level: 0,
        name: "Runecloth Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 7], [14227, 2], [8170, 4], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14130, 1, 1],
        id: 18450,
        learnedat: 300,
        level: 0,
        name: "Wizardweave Turban",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [11176, 4], [7910, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14106, 1, 1],
        id: 18451,
        learnedat: 300,
        level: 0,
        name: "Felcloth Robe",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 8], [14256, 8], [12662, 4], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14140, 1, 1],
        id: 18452,
        learnedat: 300,
        level: 0,
        name: "Mooncloth Circlet",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 4], [14342, 6], [12800, 1], [12810, 2], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14112, 1, 1],
        id: 18453,
        learnedat: 300,
        level: 0,
        name: "Felcloth Shoulders",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 7], [14256, 6], [12662, 4], [8170, 4], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14146, 1, 1],
        id: 18454,
        learnedat: 300,
        level: 0,
        name: "Gloves of Spell Mastery",
        nskillup: 1,
        quality: 4,
        reagents: [[14048, 10], [14342, 10], [9210, 10], [13926, 6], [12364, 6], [12810, 8], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14156, 1, 1],
        id: 18455,
        learnedat: 300,
        level: 0,
        name: "Bottomless Bag",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 8], [14342, 12], [14344, 2], [17012, 2], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14154, 1, 1],
        id: 18456,
        learnedat: 300,
        level: 0,
        name: "Truefaith Vestments",
        nskillup: 1,
        quality: 4,
        reagents: [[14048, 12], [14342, 10], [12811, 4], [13926, 4], [9210, 10], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14152, 1, 1],
        id: 18457,
        learnedat: 300,
        level: 0,
        name: "Robe of the Archmage",
        nskillup: 1,
        quality: 4,
        reagents: [[14048, 12], [7078, 10], [7082, 10], [7076, 10], [7080, 10], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [14153, 1, 1],
        id: 18458,
        learnedat: 300,
        level: 0,
        name: "Robe of the Void",
        nskillup: 1,
        quality: 4,
        reagents: [[14048, 12], [12662, 20], [14256, 40], [7078, 12], [12808, 12], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [250, 290, 305, 320],
        creates: [14342, 1, 1],
        id: 18560,
        learnedat: 250,
        level: 0,
        name: "Mooncloth",
        nskillup: 1,
        quality: 1,
        reagents: [[14256, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [290, 295, 310, 325],
        creates: [15802, 1, 1],
        id: 19435,
        learnedat: 290,
        level: 0,
        name: "Mooncloth Boots",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 6], [14342, 4], [7971, 2], [14341, 1]],
        schools: 1,
        skill: [197],
        source: [4]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [16980, 1, 1],
        id: 20848,
        learnedat: 300,
        level: 0,
        name: "Flarecore Mantle",
        nskillup: 1,
        quality: 4,
        reagents: [[14048, 12], [17010, 4], [17011, 4], [12810, 6], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [16979, 1, 1],
        id: 20849,
        learnedat: 300,
        level: 0,
        name: "Flarecore Gloves",
        nskillup: 1,
        quality: 4,
        reagents: [[14048, 8], [17010, 6], [7078, 4], [12810, 2], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [190, 200, 205, 210],
        creates: [17723, 1, 1],
        id: 21945,
        learnedat: 190,
        level: 0,
        name: "Green Holiday Shirt",
        nskillup: 1,
        quality: 1,
        reagents: [[4305, 5], [2605, 4], [4291, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 320, 335, 350],
        creates: [18263, 1, 1],
        id: 22759,
        learnedat: 300,
        level: 0,
        name: "Flarecore Wraps",
        nskillup: 1,
        quality: 4,
        reagents: [[14342, 6], [17010, 8], [7078, 2], [12810, 6], [14341, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 285, 290, 295],
        creates: [18258, 1, 1],
        id: 22813,
        learnedat: 285,
        level: 0,
        name: "Gordok Ogre Suit",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 2], [8170, 4], [18240, 1], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [18405, 1, 1],
        id: 22866,
        learnedat: 300,
        level: 0,
        name: "Belt of the Archmage",
        nskillup: 1,
        quality: 4,
        reagents: [[14048, 16], [9210, 10], [14342, 10], [7080, 12], [7078, 12], [14344, 6], [14341, 6]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [18407, 1, 1],
        id: 22867,
        learnedat: 300,
        level: 0,
        name: "Felcloth Gloves",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 12], [14256, 20], [12662, 6], [12808, 8], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [18408, 1, 1],
        id: 22868,
        learnedat: 300,
        level: 0,
        name: "Inferno Gloves",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 12], [7078, 10], [7910, 2], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [18409, 1, 1],
        id: 22869,
        learnedat: 300,
        level: 0,
        name: "Mooncloth Gloves",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 12], [14342, 6], [13926, 2], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [18413, 1, 1],
        id: 22870,
        learnedat: 300,
        level: 0,
        name: "Cloak of Warding",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 12], [12809, 4], [12360, 1], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [18486, 1, 1],
        id: 22902,
        learnedat: 300,
        level: 0,
        name: "Mooncloth Robe",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 6], [14342, 4], [13926, 2], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [290, 305, 320, 335],
        creates: [19047, 1, 1],
        id: 23662,
        learnedat: 290,
        level: 0,
        name: "Wisdom of the Timbermaw",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 8], [7076, 3], [12803, 3], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [290, 305, 320, 335],
        creates: [19056, 1, 1],
        id: 23664,
        learnedat: 290,
        level: 0,
        name: "Argent Boots",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 6], [12810, 4], [13926, 2], [12809, 2], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [19050, 1, 1],
        id: 23663,
        learnedat: 300,
        level: 0,
        name: "Mantle of the Timbermaw",
        nskillup: 1,
        quality: 3,
        reagents: [[14342, 5], [7076, 5], [12803, 5], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [19059, 1, 1],
        id: 23665,
        learnedat: 300,
        level: 0,
        name: "Argent Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[14342, 5], [12809, 2], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [19156, 1, 1],
        id: 23666,
        learnedat: 300,
        level: 0,
        name: "Flarecore Robe",
        nskillup: 1,
        quality: 4,
        reagents: [[14342, 10], [17010, 2], [17011, 3], [7078, 6], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [19165, 1, 1],
        id: 23667,
        learnedat: 300,
        level: 0,
        name: "Flarecore Leggings",
        nskillup: 1,
        quality: 4,
        reagents: [[14342, 8], [17010, 5], [17011, 3], [7078, 10], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [19684, 1, 1],
        id: 24093,
        learnedat: 300,
        level: 0,
        name: "Bloodvine Boots",
        nskillup: 1,
        quality: 3,
        reagents: [[14342, 3], [19726, 3], [12810, 4], [14048, 4], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [19683, 1, 1],
        id: 24092,
        learnedat: 300,
        level: 0,
        name: "Bloodvine Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[14342, 4], [19726, 4], [12804, 4], [14048, 4], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [19682, 1, 1],
        id: 24091,
        learnedat: 300,
        level: 0,
        name: "Bloodvine Vest",
        nskillup: 1,
        quality: 3,
        reagents: [[14342, 3], [19726, 5], [12804, 4], [14048, 4], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [20539, 1, 1],
        id: 24902,
        learnedat: 300,
        level: 0,
        name: "Runed Stygian Belt",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 2], [20520, 6], [14256, 2], [12810, 2], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [20537, 1, 1],
        id: 24903,
        learnedat: 300,
        level: 0,
        name: "Runed Stygian Boots",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 4], [20520, 6], [14256, 4], [12810, 2], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [20538, 1, 1],
        id: 24901,
        learnedat: 300,
        level: 0,
        name: "Runed Stygian Leggings",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 6], [20520, 8], [14256, 6], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [260, 275, 290, 305],
        creates: [21340, 1, 1],
        id: 26085,
        learnedat: 260,
        level: 0,
        name: "Soul Pouch",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [8170, 4], [7972, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [285, 300, 315, 330],
        creates: [21341, 1, 1],
        id: 26086,
        learnedat: 285,
        level: 0,
        name: "Felcloth Bag",
        nskillup: 1,
        quality: 3,
        reagents: [[14256, 12], [12810, 6], [20520, 2], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [21342, 1, 1],
        id: 26087,
        learnedat: 300,
        level: 0,
        name: "Core Felcloth Bag",
        nskillup: 1,
        quality: 4,
        reagents: [[14256, 20], [17012, 16], [19726, 8], [7078, 4], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [250, 265, 280, 295],
        creates: [21154, 1, 1],
        id: 26403,
        learnedat: 250,
        level: 0,
        name: "Festive Red Dress",
        nskillup: 1,
        quality: 1,
        reagents: [[14048, 4], [4625, 2], [2604, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [250, 265, 280, 295],
        creates: [21542, 1, 1],
        id: 26407,
        learnedat: 250,
        level: 0,
        name: "Festive Red Pant Suit",
        nskillup: 1,
        quality: 1,
        reagents: [[14048, 4], [4625, 2], [2604, 2], [14341, 1]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [225, 240, 255, 270],
        creates: [22246, 1, 1],
        id: 27658,
        learnedat: 225,
        level: 0,
        name: "Enchanted Mageweave Pouch",
        nskillup: 1,
        quality: 2,
        reagents: [[4339, 4], [11137, 4], [8343, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [275, 290, 305, 320],
        creates: [22248, 1, 1],
        id: 27659,
        learnedat: 275,
        level: 0,
        name: "Enchanted Runecloth Bag",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [16203, 2], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22249, 1, 1],
        id: 27660,
        learnedat: 300,
        level: 0,
        name: "Big Bag of Enchantment",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [14344, 4], [12810, 4], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [275, 290, 305, 320],
        creates: [22251, 1, 1],
        id: 27724,
        learnedat: 275,
        level: 0,
        name: "Cenarion Herb Bag",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 5], [8831, 10], [11040, 8], [14341, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22252, 1, 1],
        id: 27725,
        learnedat: 300,
        level: 0,
        name: "Satchel of Cenarius",
        nskillup: 1,
        quality: 2,
        reagents: [[14048, 6], [14342, 2], [13468, 1], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22660, 1, 1],
        id: 28210,
        learnedat: 300,
        level: 0,
        name: "Gaea's Embrace",
        nskillup: 1,
        quality: 3,
        reagents: [[19726, 1], [14342, 2], [12803, 4], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22658, 1, 1],
        id: 28208,
        learnedat: 300,
        level: 0,
        name: "Glacial Cloak",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 5], [14048, 4], [7080, 2], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22654, 1, 1],
        id: 28205,
        learnedat: 300,
        level: 0,
        name: "Glacial Gloves",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 5], [14048, 4], [7080, 4], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22652, 1, 1],
        id: 28207,
        learnedat: 300,
        level: 0,
        name: "Glacial Vest",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 7], [14048, 8], [7080, 6], [14227, 8]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22655, 1, 1],
        id: 28209,
        learnedat: 300,
        level: 0,
        name: "Glacial Wrists",
        nskillup: 1,
        quality: 4,
        reagents: [[22682, 4], [14048, 2], [7080, 2], [14227, 4]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22757, 1, 1],
        id: 28481,
        learnedat: 300,
        level: 0,
        name: "Sylvan Crown",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 4], [14342, 2], [12803, 2], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22758, 1, 1],
        id: 28482,
        learnedat: 300,
        level: 0,
        name: "Sylvan Shoulders",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 2], [12803, 4], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [300, 315, 330, 345],
        creates: [22756, 1, 1],
        id: 28480,
        learnedat: 300,
        level: 0,
        name: "Sylvan Vest",
        nskillup: 1,
        quality: 3,
        reagents: [[14048, 4], [19726, 2], [12803, 2], [14227, 2]],
        schools: 1,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 125, 137, 150],
        creates: [210781, 1, 1],
        id: 428424,
        learnedat: 125,
        level: 0,
        name: "Phoenix Bindings",
        nskillup: 1,
        phaseId: 1,
        quality: 3,
        reagents: [[2997, 6], [814, 2], [2321, 2]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 150, 167, 185],
        creates: [210795, 1, 1],
        id: 429351,
        learnedat: 150,
        level: 0,
        name: "Extraplanar Spidersilk Boots",
        nskillup: 1,
        phaseId: 1,
        quality: 4,
        reagents: [[211422, 1], [4320, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 200, 210, 220],
        creates: [213379, 1, 1],
        id: 435827,
        learnedat: 200,
        level: 0,
        name: "Hyperconductive Arcano-Filament",
        nskillup: 1,
        phaseId: 2,
        quality: 3,
        reagents: [[4339, 2], [213378, 5], [8343, 5]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 170, 185, 200],
        creates: [215365, 1, 1],
        id: 435848,
        learnedat: 170,
        level: 0,
        name: "Invoker's Mantle",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 4], [4340, 4], [2321, 1], [6260, 4]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 170, 185, 200],
        creates: [215366, 1, 1],
        id: 435841,
        learnedat: 170,
        level: 0,
        name: "Invoker's Cord",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 3], [1210, 1], [2321, 1], [4340, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 225, 230, 235],
        creates: [215111, 1, 1],
        id: 435610,
        learnedat: 225,
        level: 0,
        name: "Gneuro-Linked Arcano-Filament Monocle",
        nskillup: 1,
        phaseId: 2,
        quality: 4,
        reagents: [[213379, 5], [213369, 1], [213372, 1], [11137, 10], [4339, 10]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 220, 235, 250],
        creates: [217245, 1, 1],
        id: 439085,
        learnedat: 220,
        level: 0,
        name: "Crimson Silk Robe",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 8], [7068, 4], [3827, 2], [2604, 4], [4291, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [205, 220, 235, 250],
        creates: [217246, 1, 1],
        id: 439086,
        learnedat: 205,
        level: 0,
        name: "Black Mageweave Vest",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4339, 2], [4291, 3]],
        schools: 1,
        seasonId: 2,
        skill: [197],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [205, 220, 235, 250],
        creates: [217247, 1, 1],
        id: 439088,
        learnedat: 205,
        level: 0,
        name: "Black Mageweave Leggings",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4339, 2], [4291, 3]],
        schools: 1,
        seasonId: 2,
        skill: [197],
        source: [6],
        trainingcost: 4e3
      },
      {
        cat: 11,
        colors: [0, 215, 230, 245],
        creates: [217248, 1, 1],
        id: 439091,
        learnedat: 215,
        level: 0,
        name: "Earthen Silk Belt",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 5], [7067, 4], [4234, 4], [7071, 1], [4291, 2]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 210, 225, 240],
        creates: [217250, 1, 1],
        id: 439093,
        learnedat: 210,
        level: 0,
        name: "Crimson Silk Shoulders",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 5], [6371, 2], [2604, 2], [4291, 2]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [185, 205, 220, 235],
        creates: [217252, 1, 1],
        id: 439094,
        learnedat: 185,
        level: 0,
        name: "Long Silken Cloak",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 4], [3827, 1], [4291, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [0, 195, 210, 225],
        creates: [217253, 1, 1],
        id: 439097,
        learnedat: 195,
        level: 0,
        name: "Boots of the Enchanter",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 4], [4291, 1], [4337, 2]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [175, 195, 210, 225],
        creates: [217255, 1, 1],
        id: 439098,
        learnedat: 175,
        level: 0,
        name: "Crimson Silk Belt",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 4], [7071, 1], [2604, 2], [4291, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197],
        source: [6],
        trainingcost: 1e3
      },
      {
        cat: 11,
        colors: [170, 190, 205, 220],
        creates: [217256, 1, 1],
        id: 439100,
        learnedat: 170,
        level: 0,
        name: "Earthen Vest",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 3], [7067, 1], [2321, 2]],
        schools: 1,
        seasonId: 2,
        skill: [197],
        source: [6],
        trainingcost: 900
      },
      {
        cat: 11,
        colors: [0, 185, 200, 215],
        creates: [217257, 1, 1],
        id: 439102,
        learnedat: 185,
        level: 0,
        name: "Enchanter's Cowl",
        nskillup: 1,
        phaseId: 2,
        quality: 2,
        reagents: [[4305, 3], [2321, 2], [4337, 2]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220750, 1, 1],
        id: 446193,
        learnedat: 250,
        level: 0,
        name: "Fractured Mind Pauldrons",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [14256, 8], [14048, 8]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220749, 1, 1],
        id: 446194,
        learnedat: 250,
        level: 0,
        name: "Mantle of Insanity",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [12803, 4], [14048, 10]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 250, 255, 260],
        creates: [220751, 1, 1],
        id: 446195,
        learnedat: 250,
        level: 0,
        name: "Shoulderpads of the Deranged",
        nskillup: 1,
        phaseId: 3,
        quality: 4,
        reagents: [[221021, 10], [220688, 1], [14256, 6], [7080, 1], [14048, 3]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 285, 290, 295],
        creates: [227855, 1, 1],
        id: 461692,
        learnedat: 285,
        level: 0,
        name: "Synthetic Gordok Ogre Suit",
        nskillup: 1,
        phaseId: 4,
        quality: 2,
        reagents: [[8170, 4], [14048, 2], [18240, 1], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [165, 197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [227861, 1, 1],
        id: 461708,
        learnedat: 315,
        level: 0,
        name: "Incandescent Mooncloth Robe",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[14048, 6], [14342, 4], [13926, 2], [14341, 2]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [227844, 1, 1],
        id: 461727,
        learnedat: 315,
        level: 0,
        name: "Leather-Reinforced Runecloth Bag",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[14048, 5], [8170, 2], [14341, 1], [15407, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [227860, 1, 1],
        id: 461747,
        learnedat: 315,
        level: 0,
        name: "Incandescent Mooncloth Vest",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[14048, 6], [14342, 4], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [227863, 1, 1],
        id: 461750,
        learnedat: 315,
        level: 0,
        name: "Incandescent Mooncloth Circlet",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[14048, 4], [14342, 6], [12800, 1], [12810, 2], [14341, 2]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 305, 320, 335],
        creates: [227864, 1, 1],
        id: 461752,
        learnedat: 305,
        level: 0,
        name: "Incandescent Mooncloth Leggings",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[14048, 6], [14342, 4], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [228994, 1, 1],
        id: 463972,
        learnedat: 315,
        level: 0,
        name: "Bottomless Bag",
        nskillup: 1,
        phaseId: 4,
        quality: 3,
        reagents: [[14048, 8], [14342, 12], [14344, 2], [17012, 2], [14341, 2]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [228476, 1, 1],
        id: 462282,
        learnedat: 315,
        level: 0,
        name: "Embroidered Belt of the Archmage",
        nskillup: 1,
        phaseId: 4,
        quality: 4,
        reagents: [[14048, 16], [9210, 10], [14342, 10], [7080, 12], [7078, 12], [14344, 6], [14341, 6]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [234312, 1, 1],
        id: 1213740,
        learnedat: 315,
        level: 0,
        name: "Sylvan Shoulders",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[14048, 4], [12803, 4], [14227, 4], [19726, 3]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [234315, 1, 1],
        id: 1213742,
        learnedat: 315,
        level: 0,
        name: "Sylvan Crown",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[14048, 4], [14342, 4], [12803, 3], [14227, 3], [19726, 4]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [234317, 1, 1],
        id: 1213744,
        learnedat: 315,
        level: 0,
        name: "Sylvan Vest",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[14048, 4], [19726, 3], [12803, 2], [14227, 3], [14342, 4]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [233837, 1, 1],
        id: 1213532,
        learnedat: 315,
        level: 0,
        name: "Vampiric Robe",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234009, 25], [14342, 12], [12810, 12], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [233833, 1, 1],
        id: 1213530,
        learnedat: 315,
        level: 0,
        name: "Vampiric Shawl",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234009, 15], [14342, 8], [12810, 8], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [233826, 1, 1],
        id: 1213527,
        learnedat: 315,
        level: 0,
        name: "Vampiric Cowl",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234009, 15], [14342, 8], [12810, 8], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233958, 1, 1],
        id: 1213536,
        learnedat: 320,
        level: 0,
        name: "Qiraji Silk Cape",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234009, 9], [234007, 8], [15407, 4], [12810, 8], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233959, 1, 1],
        id: 1213538,
        learnedat: 320,
        level: 0,
        name: "Qiraji Silk Cloak",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234009, 9], [234007, 8], [15407, 4], [12810, 8], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233960, 1, 1],
        id: 1213540,
        learnedat: 320,
        level: 0,
        name: "Qiraji Silk Drape",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234009, 9], [234007, 8], [15407, 4], [12810, 8], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [233956, 1, 1],
        id: 1213534,
        learnedat: 320,
        level: 0,
        name: "Qiraji Silk Scarf",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[234009, 9], [234007, 8], [15407, 4], [12810, 8], [14341, 1]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 322, 330],
        creates: [234009, 1, 1],
        id: 1214173,
        learnedat: 315,
        level: 0,
        name: "Bolt of Qiraji Silk",
        nskillup: 1,
        phaseId: 6,
        quality: 1,
        reagents: [[234008, 5]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234484, 1, 1],
        id: 1214306,
        learnedat: 320,
        level: 0,
        name: "Dreamscale Bracers",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[14048, 30], [20381, 4], [12803, 4], [14342, 4], [14227, 6]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 320, 330, 340],
        creates: [234485, 1, 1],
        id: 1214307,
        learnedat: 320,
        level: 0,
        name: "Dreamscale Mitts",
        nskillup: 1,
        phaseId: 6,
        quality: 4,
        reagents: [[14048, 30], [20381, 5], [12803, 4], [14342, 4], [14227, 6]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [236694, 1, 1],
        id: 1223760,
        learnedat: 315,
        level: 0,
        name: "Glacial Vest",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 7], [14048, 8], [7080, 6], [14227, 8]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [236690, 1, 1],
        id: 1223762,
        learnedat: 315,
        level: 0,
        name: "Glacial Cloak",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 5], [14048, 4], [7080, 2], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [236692, 1, 1],
        id: 1223764,
        learnedat: 315,
        level: 0,
        name: "Glacial Gloves",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 5], [14048, 4], [7080, 4], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [236693, 1, 1],
        id: 1223766,
        learnedat: 315,
        level: 0,
        name: "Glacial Wrists",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 4], [14048, 2], [7080, 2], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [236706, 1, 1],
        id: 1223768,
        learnedat: 315,
        level: 0,
        name: "Frosty Vest",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 7], [14048, 8], [7080, 6], [14227, 8]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [236705, 1, 1],
        id: 1223770,
        learnedat: 315,
        level: 0,
        name: "Frosty Gloves",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 5], [14048, 4], [7080, 4], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      },
      {
        cat: 11,
        colors: [0, 315, 330, 345],
        creates: [236704, 1, 1],
        id: 1223772,
        learnedat: 315,
        level: 0,
        name: "Frosty Wrists",
        nskillup: 1,
        phaseId: 7,
        quality: 4,
        reagents: [[236656, 4], [14048, 2], [7080, 2], [14227, 4]],
        schools: 1,
        seasonId: 2,
        skill: [197]
      }
    ];
  }
});

// commands/recipy/crafters.js
var require_crafters = __commonJS({
  "commands/recipy/crafters.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var { SlashCommandBuilder } = require_dist4();
    var { InteractionResponseFlags } = require_dist();
    var { write, getCrafters } = require_rest();
    var { bold, mention } = require_formatting();
    var blacksmithing = require_blacksmithing();
    var enchanting = require_enchanting();
    var engineering = require_engineering();
    var leatherworking = require_leatherworking();
    var tailoring = require_tailoring();
    var jsonRecipies = {
      blacksmithing,
      enchanting,
      engineering,
      leatherworking,
      tailoring
    };
    module.exports = {
      data: new SlashCommandBuilder().setName("crafters").setDescription("Choose the item you want a crafter for").addStringOption((option) => option.setName("blacksmithing").setDescription("Recipy to search for").setAutocomplete(true)).addStringOption((option) => option.setName("enchanting").setDescription("Recipy to search for").setAutocomplete(true)).addStringOption((option) => option.setName("engineering").setDescription("Recipy to search for").setAutocomplete(true)).addStringOption((option) => option.setName("leatherworking").setDescription("Recipy to search for").setAutocomplete(true)).addStringOption((option) => option.setName("tailoring").setDescription("Recipy to search for").setAutocomplete(true)),
      async autocomplete(interaction) {
        const focusedOption = interaction.data.options.find((option) => option.focused);
        let recipies = jsonRecipies[focusedOption.name.toLowerCase()];
        const options = generateRecipyOptions(recipies);
        const filtered = options.filter((choice) => choice.name.toLowerCase().includes(focusedOption.value.toLowerCase())).slice(0, 25);
        return interaction.respond(
          filtered
        );
      },
      async execute(interaction, database2) {
        const data = interaction.data.options;
        let contents = [];
        console.log(interaction.data.options);
        for (let i = 0; i < data.length; i++) {
          const name = data[i].name;
          const value = data[i].value;
          let recipies = jsonRecipies[name.toLowerCase()];
          var recipy = recipies.find((recipy2) => String(recipy2.id) == value);
          if (!!recipy) {
            let crafters = (await getCrafters(database2, value)).map((id) => mention(id));
            contents.push(`${bold(recipy.name)}: ${crafters.length == 0 ? "None" : crafters.join(", ")}`);
          } else {
            console.log("Does not exits!");
          }
        }
        return interaction.reply({
          content: contents.length > 0 ? contents.join("\n") : "Something went wrong",
          flags: InteractionResponseFlags.EPHEMERAL,
          allowed_mentions: { parse: [] }
        });
      }
    };
    function generateRecipyOptions(recipies) {
      let options = [];
      for (let i = 0; i < recipies.length; i++) {
        let recipy = recipies[i];
        options.push({ name: recipy.name, value: String(recipy.id) });
      }
      return options;
    }
    __name(generateRecipyOptions, "generateRecipyOptions");
  }
});

// commands/recipy/recipyList.js
var require_recipyList = __commonJS({
  "commands/recipy/recipyList.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder } = require_dist4();
    var { ButtonStyle } = require_v106();
    var { getAllRecipies } = require_rest();
    var { bold, underscore, mention } = require_formatting();
    var blacksmithing = require_blacksmithing();
    var enchanting = require_enchanting();
    var engineering = require_engineering();
    var leatherworking = require_leatherworking();
    var tailoring = require_tailoring();
    var jsonRecipies = {
      blacksmithing,
      enchanting,
      engineering,
      leatherworking,
      tailoring
    };
    module.exports = {
      data: new SlashCommandBuilder().setName("recipylist").setDescription("Get a list with all known recipies and crafters"),
      async getContent(interaction, database2) {
        const allRecipies = await getAllRecipies(database2);
        const grouppedRecipies = groupBy(allRecipies, "type");
        const types = Object.keys(grouppedRecipies);
        let content = "";
        for (let i = 0; i < types.length; i++) {
          const type = types[i];
          const parsedRecipies = jsonRecipies[type.toLowerCase()];
          content += `${underscore(bold(type))}
`;
          const recipiesForType = grouppedRecipies[type];
          const recipyUsers = groupBy(recipiesForType, "itemId");
          const recipies = Object.keys(recipyUsers).map((recipyId) => parsedRecipies.find((recipy) => recipy.id == recipyId)).filter((recipy) => recipy != void 0).sort((a2, b) => a2.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1);
          for (let j = 0; j < recipies.length; j++) {
            const recipy = recipies[j];
            const users = recipyUsers[String(recipy.id)].map((recipy2) => mention(recipy2.user));
            content += `${bold(recipy.name)}: ${users.join(", ")}
`;
          }
        }
        return content;
      },
      async execute(interaction, database2) {
        const content = await this.getContent(interaction, database2);
        const refresh = new ButtonBuilder().setCustomId("refresh").setLabel("Refresh").setStyle(ButtonStyle.Primary);
        const row = new ActionRowBuilder().addComponents(refresh);
        return interaction.reply({
          content,
          components: [row],
          allowed_mentions: { parse: [] }
        });
      }
    };
    function groupBy(list, key) {
      return list.reduce((result, item) => {
        let itemKey = item[key];
        if (!result[itemKey])
          result[itemKey] = [];
        result[itemKey].push(item);
        return result;
      }, {});
    }
    __name(groupBy, "groupBy");
  }
});

// commands/recipy/register.js
var require_register = __commonJS({
  "commands/recipy/register.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    var { SlashCommandBuilder } = require_dist4();
    var { InteractionResponseFlags } = require_dist();
    var { write, exists } = require_rest();
    var blacksmithing = require_blacksmithing();
    var enchanting = require_enchanting();
    var engineering = require_engineering();
    var leatherworking = require_leatherworking();
    var tailoring = require_tailoring();
    var jsonRecipies = {
      blacksmithing,
      enchanting,
      engineering,
      leatherworking,
      tailoring
    };
    module.exports = {
      data: new SlashCommandBuilder().setName("register").setDescription("Registers that you can do the following enchant").addStringOption((option) => option.setName("blacksmithing").setDescription("Recipy to search for").setAutocomplete(true)).addStringOption((option) => option.setName("enchanting").setDescription("Recipy to search for").setAutocomplete(true)).addStringOption((option) => option.setName("engineering").setDescription("Recipy to search for").setAutocomplete(true)).addStringOption((option) => option.setName("leatherworking").setDescription("Recipy to search for").setAutocomplete(true)).addStringOption((option) => option.setName("tailoring").setDescription("Recipy to search for").setAutocomplete(true)),
      async autocomplete(interaction) {
        const focusedOption = interaction.data.options.find((option) => option.focused);
        let recipies = jsonRecipies[focusedOption.name.toLowerCase()];
        const options = generateRecipyOptions(recipies);
        const filtered = options.filter((choice) => choice.name.toLowerCase().includes(focusedOption.value.toLowerCase())).slice(0, 25);
        return interaction.respond(
          filtered
        );
      },
      async execute(interaction, database2) {
        const data = interaction.data.options;
        for (let i = 0; i < data.length; i++) {
          const name = data[i].name;
          const value = data[i].value;
          let recipies = jsonRecipies[name.toLowerCase()];
          if (!!recipies.find((recipy) => recipy.id == value)) {
            if (!await exists(database2, value, interaction.member.user.id)) {
              await write(database2, value, interaction.member.user.id, name.toUpperCase());
            } else {
              console.log("User already has that item registered");
            }
          } else {
            console.log("Does not exits!");
          }
        }
        return interaction.reply({
          content: `Successfully registered recipies!`,
          flags: InteractionResponseFlags.EPHEMERAL
        });
      }
    };
    function generateRecipyOptions(recipies) {
      let options = [];
      for (let i = 0; i < recipies.length; i++) {
        let recipy = recipies[i];
        options.push({ name: recipy.name, value: String(recipy.id) });
      }
      return options;
    }
    __name(generateRecipyOptions, "generateRecipyOptions");
  }
});

// .wrangler/tmp/bundle-Fd75M1/middleware-loader.entry.ts
init_checked_fetch();
init_modules_watch_stub();

// .wrangler/tmp/bundle-Fd75M1/middleware-insertion-facade.js
init_checked_fetch();
init_modules_watch_stub();

// server.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/itty-router/index.mjs
init_checked_fetch();
init_modules_watch_stub();
var t = /* @__PURE__ */ __name(({ base: e = "", routes: t2 = [], ...r2 } = {}) => ({ __proto__: new Proxy({}, { get: (r3, o2, a2, s2) => (r4, ...c2) => t2.push([o2.toUpperCase?.(), RegExp(`^${(s2 = (e + r4).replace(/\/+(\/|$)/g, "$1")).replace(/(\/?\.?):(\w+)\+/g, "($1(?<$2>*))").replace(/(\/?\.?):(\w+)/g, "($1(?<$2>[^$1/]+?))").replace(/\./g, "\\.").replace(/(\/?)\*/g, "($1.*)?")}/*$`), c2, s2]) && a2 }), routes: t2, ...r2, async fetch(e2, ...o2) {
  let a2, s2, c2 = new URL(e2.url), n2 = e2.query = { __proto__: null };
  for (let [e3, t3] of c2.searchParams)
    n2[e3] = n2[e3] ? [].concat(n2[e3], t3) : t3;
  e:
    try {
      for (let t3 of r2.before || [])
        if (null != (a2 = await t3(e2.proxy ?? e2, ...o2)))
          break e;
      t:
        for (let [r3, n3, l, i] of t2)
          if ((r3 == e2.method || "ALL" == r3) && (s2 = c2.pathname.match(n3))) {
            e2.params = s2.groups || {}, e2.route = i;
            for (let t3 of l)
              if (null != (a2 = await t3(e2.proxy ?? e2, ...o2)))
                break t;
          }
    } catch (t3) {
      if (!r2.catch)
        throw t3;
      a2 = await r2.catch(t3, e2.proxy ?? e2, ...o2);
    }
  try {
    for (let t3 of r2.finally || [])
      a2 = await t3(a2, e2.proxy ?? e2, ...o2) ?? a2;
  } catch (t3) {
    if (!r2.catch)
      throw t3;
    a2 = await r2.catch(t3, e2.proxy ?? e2, ...o2);
  }
  return a2;
} }), "t");
var r = /* @__PURE__ */ __name((e = "text/plain; charset=utf-8", t2) => (r2, o2 = {}) => {
  if (void 0 === r2 || r2 instanceof Response)
    return r2;
  const a2 = new Response(t2?.(r2) ?? r2, o2.url ? void 0 : o2);
  return a2.headers.set("content-type", e), a2;
}, "r");
var o = r("application/json; charset=utf-8", JSON.stringify);
var a = /* @__PURE__ */ __name((e) => ({ 400: "Bad Request", 401: "Unauthorized", 403: "Forbidden", 404: "Not Found", 500: "Internal Server Error" })[e] || "Unknown Error", "a");
var s = /* @__PURE__ */ __name((e = 500, t2) => {
  if (e instanceof Error) {
    const { message: r2, ...o2 } = e;
    e = e.status || 500, t2 = { error: r2 || a(e), ...o2 };
  }
  return t2 = { status: e, ..."object" == typeof t2 ? t2 : { error: t2 || a(e) } }, o(t2, { status: e });
}, "s");
var c = /* @__PURE__ */ __name((e) => {
  e.proxy = new Proxy(e.proxy ?? e, { get: (t2, r2) => t2[r2]?.bind?.(e) ?? t2[r2] ?? t2?.params?.[r2] });
}, "c");
var n = /* @__PURE__ */ __name(({ format: e = o, missing: r2 = /* @__PURE__ */ __name(() => s(404), "r"), finally: a2 = [], before: n2 = [], ...l } = {}) => t({ before: [c, ...n2], catch: s, finally: [(e2, ...t2) => e2 ?? r2(...t2), e, ...a2], ...l }), "n");
var p = r("text/plain; charset=utf-8", String);
var f = r("text/html");
var u = r("image/jpeg");
var h = r("image/png");
var g = r("image/webp");

// server.js
var import_discord_interactions = __toESM(require_dist());

// node_modules/firebase-firestore-lite/dist/mod.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/firebase-firestore-lite/dist/Database.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/firebase-firestore-lite/dist/Reference.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/firebase-firestore-lite/dist/Query.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/firebase-firestore-lite/dist/Document.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/firebase-firestore-lite/dist/utils.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/firebase-firestore-lite/dist/GeoPoint.js
init_checked_fetch();
init_modules_watch_stub();
var GeoPoint = class {
  constructor(latitude, longitude) {
    this.latitude = latitude;
    this.longitude = longitude;
    if (typeof latitude !== "number")
      throw Error("The latitude argument should be of type number");
    if (typeof latitude !== "number")
      throw Error("The longitude argument should be of type number");
    if (latitude >= 90 || latitude <= -90)
      throw Error("GeoPoint's latitude should be within the range of -90.0 and 90.0");
    if (longitude >= 180 || longitude <= -180)
      throw Error("GeoPoint's longitude should be within the range of -180.0 and 180.0");
  }
  toJSON() {
    return {
      geoPointValue: { ...this }
    };
  }
};
__name(GeoPoint, "GeoPoint");

// node_modules/firebase-firestore-lite/dist/Transform.js
init_checked_fetch();
init_modules_watch_stub();
function isNumber(v) {
  return typeof v === "number" && !isNaN(v - v);
}
__name(isNumber, "isNumber");
var transformsMap = {
  serverTimestamp: ["setToServerValue"],
  increment: ["increment", isNumber],
  max: ["maximum", isNumber],
  min: ["minimum", isNumber],
  appendToArray: ["appendMissingElements", Array.isArray],
  removeFromArray: ["removeAllFromArray", Array.isArray]
};
var Transform = class {
  /**
   * @param value when applicable, the value will be used.
   * for example when using `increment` the value will be the number to increment by.
   */
  constructor(name, value) {
    if (!(name in transformsMap))
      throw Error(`Invalid transform name: "${name}"`);
    const [transformName, validator] = transformsMap[name];
    if (validator && !validator(value))
      throw Error(`The value for the transform "${name}" needs to be a${validator === isNumber ? " number" : "n array"}.`);
    if (validator === Array.isArray)
      this[transformName] = encodeValue(value).arrayValue;
    else
      this[transformName] = name === "serverTimestamp" ? "REQUEST_TIME" : encodeValue(value);
  }
};
__name(Transform, "Transform");

// node_modules/firebase-firestore-lite/dist/utils.js
var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890";
function trimPath(path) {
  return path.trim().replace(/^\/?/, "").replace(/\/?$/, "");
}
__name(trimPath, "trimPath");
function isPath(type, s2) {
  return typeof s2 === "string" && s2 !== "" && trimPath(s2).split("/").length % 2 === (type === "doc" ? 0 : 1);
}
__name(isPath, "isPath");
function isRef(type, val) {
  return val instanceof Reference && (type === "doc" ? !val.isCollection : val.isCollection);
}
__name(isRef, "isRef");
function isRefType(ref) {
  return ref instanceof Reference || ref instanceof Document || typeof ref === "string";
}
__name(isRefType, "isRefType");
function getPathFromRef(ref) {
  var _a, _b, _c, _d;
  if (!isRefType(ref))
    throw TypeError("Expected a Reference, Document or a path but got something else");
  return (_d = (_c = (_b = (_a = ref) === null || _a === void 0 ? void 0 : _a.__meta__) === null || _b === void 0 ? void 0 : _b.path) !== null && _c !== void 0 ? _c : ref.path) !== null && _d !== void 0 ? _d : trimPath(ref);
}
__name(getPathFromRef, "getPathFromRef");
function restrictTo(type, ref) {
  const isDoc = type === "doc";
  const path = getPathFromRef(ref);
  if (!isPath(type, path))
    throw TypeError(`You are trying to access a method reserved for ${isDoc ? "Documents" : "Collections"} with a ${isDoc ? "Collection" : "Document"}`);
  return path;
}
__name(restrictTo, "restrictTo");
function isPositiveInteger(val) {
  return Number.isInteger(val) && val >= 0;
}
__name(isPositiveInteger, "isPositiveInteger");
function objectToQuery(obj = {}, parentProp) {
  const params = [];
  const encode2 = encodeURIComponent;
  for (const prop in obj) {
    if (obj[prop] === void 0)
      continue;
    const propPath = parentProp ? `${parentProp}.${prop}` : prop;
    if (Array.isArray(obj[prop])) {
      obj[prop].forEach((v) => {
        params.push(`${propPath}=${encode2(v)}`);
      });
      continue;
    }
    if (typeof obj[prop] === "object") {
      const val = objectToQuery(obj[prop], propPath);
      val && params.push(val);
      continue;
    }
    params.push(`${propPath}=${encode2(obj[prop])}`);
  }
  return (!parentProp && params.length ? "?" : "") + params.join("&");
}
__name(objectToQuery, "objectToQuery");
function getKeyPaths(object, parentPath) {
  let mask = [];
  for (const key in object) {
    if (object[key] instanceof Transform)
      continue;
    const keyPath = parentPath ? `${parentPath}.${key}` : key;
    if (object[key] !== null && typeof object[key] === "object" && !Array.isArray(object[key]) && !(object[key] instanceof Date)) {
      mask = mask.concat(getKeyPaths(object[key], keyPath));
      continue;
    }
    mask.push(keyPath);
  }
  return mask;
}
__name(getKeyPaths, "getKeyPaths");
function compileOptions(options, obj) {
  const compiled = {};
  for (let [key, value] of Object.entries(options)) {
    if (value === void 0)
      continue;
    switch (key) {
      case "exists":
      case "updateTime":
        if (!compiled.currentDocument)
          compiled.currentDocument = {};
        compiled.currentDocument[key] = value;
        break;
      case "updateMask":
        if (!obj)
          break;
        if (value)
          compiled.updateMask = { fieldPaths: getKeyPaths(obj) };
        break;
      case "mask":
        compiled.mask = { fieldPaths: value };
        break;
      default:
        compiled[key] = value;
    }
  }
  return compiled;
}
__name(compileOptions, "compileOptions");
function decodeValue(value, db) {
  const type = Object.keys(value)[0];
  value = value[type];
  switch (type) {
    case "integerValue":
      return Number(value);
    case "arrayValue":
      return value.values ? value.values.map((val) => decodeValue(val, db)) : [];
    case "mapValue":
      return decode(value, db);
    case "timestampValue":
      return new Date(value);
    case "referenceValue":
      return new Reference(value.replace(db.rootPath, ""), db);
    case "geoPointValue":
      return new GeoPoint(value.latitude, value.longitude);
    case "stringValue":
    case "doubleValue":
    case "booleanValue":
    case "nullValue":
    case "bytesValue":
      return value;
  }
  throw Error(`Invalid Firestore value_type "${type}"`);
}
__name(decodeValue, "decodeValue");
function decode(map, db) {
  if (db === void 0)
    throw Error('Argument "db" is required but missing');
  const object = {};
  for (const key in map.fields) {
    object[key] = decodeValue(map.fields[key], db);
  }
  return object;
}
__name(decode, "decode");
function encodeValue(value, transforms, parentPath) {
  const objectClass = Object.prototype.toString.call(value);
  let valueType = objectClass.substring(8, objectClass.length - 1).toLowerCase() + "Value";
  switch (valueType) {
    case "numberValue":
      valueType = Number.isInteger(value) ? "integerValue" : "doubleValue";
      value = valueType === "integerValue" ? String(value) : value;
      break;
    case "arrayValue":
      value = value.length ? { values: value.map(encodeValue) } : {};
      break;
    case "dateValue":
      valueType = "timestampValue";
      value = value.toISOString();
      break;
    case "objectValue":
      if (value instanceof Reference || value instanceof GeoPoint)
        return value.toJSON();
      valueType = "mapValue";
      value = encode(value, transforms, parentPath);
      break;
  }
  return { [valueType]: value };
}
__name(encodeValue, "encodeValue");
function encode(object, transforms, parentPath) {
  const keys = Object.keys(object);
  if (keys.length === 0)
    return {};
  const map = { fields: {} };
  for (const key of keys) {
    if (object[key] === void 0)
      continue;
    const value = object[key];
    const path = parentPath ? `${parentPath}.${key}` : key;
    if (value instanceof Transform) {
      value.fieldPath = path;
      transforms && transforms.push(value);
      continue;
    }
    map.fields[key] = encodeValue(value, transforms, path);
  }
  return map;
}
__name(encode, "encode");
function fid() {
  const randBytes = crypto.getRandomValues(new Uint8Array(20));
  return Array.from(randBytes).map((b) => validChars[b % 63]).join("");
}
__name(fid, "fid");

// node_modules/firebase-firestore-lite/dist/Document.js
var Document = class {
  constructor(rawDoc, db) {
    if (db === void 0)
      throw Error('Argument "db" is required but missing');
    const { name, createTime, updateTime } = rawDoc;
    const meta = {
      db,
      name,
      createTime,
      updateTime,
      path: name.replace(db.rootPath, ""),
      id: name.split("/").pop()
    };
    Object.defineProperty(this, "__meta__", { value: meta });
    Object.assign(this, decode(rawDoc, db));
  }
};
__name(Document, "Document");

// node_modules/firebase-firestore-lite/dist/Query.js
var operatorsMap = {
  "<": "LESS_THAN",
  "<=": "LESS_THAN_OR_EQUAL",
  ">": "GREATER_THAN",
  ">=": "GREATER_THAN_OR_EQUAL",
  "==": "EQUAL",
  contains: "ARRAY_CONTAINS",
  "contains-any": "ARRAY_CONTAINS_ANY",
  in: "IN"
};
function validateFilter(filter) {
  if (!Array.isArray(filter) || filter.length !== 3)
    throw Error("Filter missing arguments");
  const [fieldPath, op, value] = filter;
  if (typeof fieldPath !== "string")
    throw Error("Invalid field path");
  if (!(op in operatorsMap))
    throw Error("Invalid operator");
  if ((value === null || Number.isNaN(value)) && filter[1] !== "==")
    throw Error("Null and NaN can only be used with the == operator");
  if (value === void 0)
    throw Error("Invalid comparative value");
}
__name(validateFilter, "validateFilter");
var encoders = {
  /**
   * Converts an option from the Query instance into a valid JSON
   * object to use with the Firestores REST API.
   */
  select(fieldsArray) {
    const fields = fieldsArray.map((fieldPath) => ({ fieldPath }));
    return fields.length ? { fields } : void 0;
  },
  /** Converts a Query filter(array with three items), into an encoded filter */
  encodeFilter([fieldPath, op, value]) {
    if (Number.isNaN(value) || value === null) {
      return {
        unaryFilter: {
          field: { fieldPath },
          op: Number.isNaN(value) ? "IS_NAN" : "IS_NULL"
        }
      };
    }
    return {
      fieldFilter: {
        field: { fieldPath },
        op: operatorsMap[op],
        value: encodeValue(value)
      }
    };
  },
  /**
   * Converts an option from the Query instance into a valid JSON
   * object to use with the Firestore's REST API.
   */
  where(option) {
    if (option.length === 0)
      return;
    if (option.length === 1) {
      return this.encodeFilter(option[0]);
    }
    return {
      compositeFilter: {
        op: "AND",
        filters: option.map(this.encodeFilter)
      }
    };
  },
  /**
   * When a startAt or endAt cursor is used,
   * It is necessary to add a __name__ order at the end
   * in order to make sure we start from the right spot.
   */
  orderBy(fields, options) {
    var _a, _b, _c;
    if ((options.startAt || options.endAt) && ((_a = fields[fields.length - 1]) === null || _a === void 0 ? void 0 : _a.field.fieldPath) !== "__name__")
      fields.push({
        field: { fieldPath: "__name__" },
        // Use the default order when there are no other fields,
        // And if there are fields, use the order of the last one.
        // This adheres to the spec at:
        // https://firebase.google.com/docs/firestore/reference/rest/v1beta1/StructuredQuery
        direction: (_c = (_b = fields[fields.length - 1]) === null || _b === void 0 ? void 0 : _b.direction) !== null && _c !== void 0 ? _c : "ASCENDING"
      });
    return fields;
  },
  documentToCursor(doc, options) {
    const values = [];
    for (let order of options.orderBy) {
      if (order.field.fieldPath === "__name__") {
        values.push({ referenceValue: doc.__meta__.name });
        continue;
      }
      const value = doc[order.field.fieldPath];
      value && values.push(encodeValue(value));
    }
    return {
      values,
      before: true
    };
  },
  startAt(doc, options) {
    return this.documentToCursor(doc, options);
  },
  endAt(doc, options) {
    return this.startAt(doc, options);
  }
};
var queryOptions = [
  "select",
  "from",
  "where",
  "orderBy",
  "startAt",
  "endAt",
  "offset",
  "limit"
];
var Query = class {
  constructor(parent, init = {}) {
    this.parent = parent;
    this.options = {
      select: [],
      where: [],
      orderBy: []
    };
    if (!isRef("doc", parent))
      throw Error("Expected parent to be a reference to a document");
    for (const option of queryOptions) {
      const optionValue = init[option];
      if (option in init) {
        if (option === "where" && Array.isArray(optionValue[0]) || option === "orderBy" && Array.isArray(optionValue)) {
          optionValue.forEach((val, i) => {
            try {
              this[option](val);
            } catch (e) {
              throw Error(`Invalid argument "${option}[${i}]": ${e.message}`);
            }
          });
          continue;
        }
        try {
          this[option](optionValue);
        } catch (e) {
          throw Error(`Invalid argument "${option}": ${e.message}`);
        }
      }
    }
  }
  select(fields) {
    if (!Array.isArray(fields))
      throw Error("Expected argument to be an array of field paths");
    fields.forEach((field, i) => {
      if (typeof field !== "string")
        throw Error(`Field path at index [${i}] is not a string`);
      this.options.select.push(field);
    });
  }
  /**
   * Adds a collection to query.
   */
  from(from) {
    let { collectionId = from, allDescendants } = from;
    if (typeof collectionId !== "string")
      throw Error('Expected "collectionId" to be a string');
    if (allDescendants !== void 0 && typeof allDescendants !== "boolean")
      throw Error('Expected the "allDescendants" to be a boolean');
    this.options.from = {
      collectionId,
      allDescendants
    };
    return this;
  }
  where(fieldPath) {
    const filter = Array.isArray(fieldPath) ? fieldPath : arguments;
    validateFilter(filter);
    this.options.where.push(filter);
    return this;
  }
  orderBy(order, dir = "asc") {
    const dirMap = {
      asc: "ASCENDING",
      desc: "DESCENDING"
    };
    let { field: fieldPath = order, direction = dir } = order;
    direction = dirMap[direction];
    if (typeof fieldPath !== "string")
      throw Error('"field" property needs to be a string');
    if (direction === void 0)
      throw Error('"direction" property can only be "asc" or "desc"');
    this.options.orderBy.push({ field: { fieldPath }, direction });
    return this;
  }
  startAt(doc) {
    if (!(doc instanceof Document))
      throw Error("Expected a Document instance");
    this.options.startAt = doc;
    return this;
  }
  endAt(doc) {
    if (!(doc instanceof Document))
      throw Error("Expected a Document instance");
    this.options.endAt = doc;
    return this;
  }
  offset(number) {
    if (!isPositiveInteger(number))
      throw Error("Expected an integer that is greater than 0");
    this.options.offset = number;
    return this;
  }
  limit(number) {
    if (!isPositiveInteger(number))
      throw Error("Expected an integer that is greater than 0");
    this.options.limit = number;
    return this;
  }
  async run() {
    var _a;
    let results = await this.parent.db.fetch(this.parent.endpoint + ":runQuery", {
      method: "POST",
      body: JSON.stringify(this)
    });
    ((_a = results[0]) === null || _a === void 0 ? void 0 : _a.document) || results.splice(0, 1);
    return results.map((result) => new Document(result.document, this.parent.db));
  }
  toJSON() {
    const encoded = {};
    for (const option in this.options) {
      const optionValue = this.options[option];
      if (option in encoders) {
        encoded[option] = encoders[option](optionValue, this.options);
        continue;
      }
      encoded[option] = optionValue;
    }
    return {
      structuredQuery: encoded
    };
  }
};
__name(Query, "Query");

// node_modules/firebase-firestore-lite/dist/List.js
init_checked_fetch();
init_modules_watch_stub();
var List = class {
  constructor(rawList, ref, options = {}) {
    if (ref === void 0)
      throw Error('The "reference" argument is required when creating a List');
    if (!ref.isCollection)
      throw Error("The reference in a list should point to a collection");
    const { documents, nextPageToken } = rawList;
    this.ref = ref;
    this.options = options;
    this.documents = documents ? documents.map((rawDoc) => new Document(rawDoc, ref.db)) : [];
    this.options.pageToken = nextPageToken;
  }
  /** Fetches the next page in the query */
  getNextPage() {
    return this.ref.list(this.options);
  }
  [Symbol.iterator]() {
    let index = 0;
    return {
      next: () => {
        if (index < this.documents.length) {
          return { value: this.documents[index++], done: false };
        } else {
          return { done: true };
        }
      }
    };
  }
};
__name(List, "List");

// node_modules/firebase-firestore-lite/dist/Reference.js
var Reference = class {
  constructor(path, db) {
    var _a;
    this.db = db;
    if (typeof path !== "string")
      throw Error('The "path" argument should be a string');
    path = trimPath(path);
    this.id = (_a = path.split("/").pop()) !== null && _a !== void 0 ? _a : "";
    this.path = path;
    this.name = `${db.rootPath}/${path}`;
    this.endpoint = `${db.endpoint}/${path}`;
    this.isRoot = path === "";
  }
  /** Returns a reference to the parent document/collection */
  get parent() {
    if (this.isRoot)
      throw Error("Can't get the parent of root");
    return new Reference(this.path.replace(/\/?([^/]+)\/?$/, ""), this.db);
  }
  /** Returns a reference to the parent collection */
  get parentCollection() {
    if (this.isRoot)
      throw Error("Can't get parent of a root collection");
    if (this.isCollection)
      return new Reference(this.path.replace(/(\/([^/]+)\/?){2}$|^([^/]+)$/, ""), this.db);
    return this.parent;
  }
  /** Returns true if this reference is a collection */
  get isCollection() {
    return isPath("col", this.path);
  }
  /** Returns a reference to the specified child path */
  child(path) {
    path = path.replace(/^\/?/, "");
    return new Reference(`${this.path}/${path}`, this.db);
  }
  async transact(method, obj, options = {}) {
    const tx = this.db.transaction();
    const res = tx[method](this, obj, options);
    return await tx.commit().then(() => res);
  }
  /** Returns all documents in the collection */
  async list(options = {}) {
    restrictTo("col", this);
    return new List(await this.db.fetch(this.endpoint + objectToQuery(compileOptions(options))), this, options);
  }
  /** Returns the document of this reference. */
  async get(options = {}) {
    restrictTo("doc", this);
    return new Document(await this.db.fetch(this.endpoint + objectToQuery(compileOptions(options))), this.db);
  }
  /** Create a new document with a randomly generated id */
  async add(obj, options = {}) {
    restrictTo("col", this);
    return this.transact("add", obj, options);
  }
  /** Create a new document or overwrites an existing one matching this reference. */
  async set(obj, options = {}) {
    restrictTo("doc", this);
    return this.transact("set", obj, options);
  }
  /** Updates a document while ignoring all missing fields in the provided object. */
  async update(obj, options = {}) {
    restrictTo("doc", this);
    return this.transact("update", obj, options);
  }
  /** Deletes the referenced document from the database. */
  async delete(options = {}) {
    restrictTo("doc", this);
    return this.transact("delete", options);
  }
  /** Queries the child documents/collections of this reference. */
  query(options = {}) {
    restrictTo("col", this);
    return new Query(this.parent, {
      from: {
        collectionId: this.id
      },
      ...options
    });
  }
  toJSON() {
    return {
      referenceValue: this.name
    };
  }
};
__name(Reference, "Reference");

// node_modules/firebase-firestore-lite/dist/Transaction.js
init_checked_fetch();
init_modules_watch_stub();
var Transaction = class {
  constructor(db) {
    this.db = db;
    this.writes = [];
    this.preconditions = {};
  }
  /**
   * Creates a write instruction and adds it into the
   * transaction writes array.
   * @private
   */
  write(ref, data, options = {}) {
    if (typeof data !== "object")
      throw Error("The data argument is missing");
    const transforms = [];
    const name = `${this.db.rootPath}/${getPathFromRef(ref)}`;
    const precondition = this.preconditions[name];
    const doc = encode(ref instanceof Document ? ref : data, transforms);
    options = compileOptions(options, data);
    precondition && (options.currentDocument = precondition);
    doc.name = name;
    this.writes.push({
      update: doc,
      ...options
    });
    transforms.length && this.writes.push({
      transform: {
        document: doc.name,
        fieldTransforms: transforms
      }
    });
  }
  /**
   * Wraps batch get with additional functionality needed in transactions.
   * Transactions need to be atomic. So in order to know that the document
   * wasn't changed concurrently then we save the updateTime of each document.
   *
   * Later we tell the database to use that as a precondition for the write.
   * In other words, if the update time of a document changed, then abort
   * the transaction. However, if a document didn't exist, then we use that
   * as a precondition, telling the database that if it was created concurrently
   * then it should abort the operation.
   */
  async get(refs) {
    const docs = await this.db.batchGet(refs);
    docs.forEach((doc) => {
      const { name, updateTime } = doc.__meta__ || { name: doc.__missing__ };
      this.preconditions[name] = updateTime ? { updateTime } : { exists: false };
    });
    return docs;
  }
  add(ref, data, options = {}) {
    const path = `${restrictTo("col", ref)}/${fid()}`;
    this.write(path, data, { exists: false, ...options });
    return this.db.ref(path);
  }
  set(ref, data, options = {}) {
    restrictTo("doc", ref);
    this.write(ref, data, options);
  }
  update(ref, data, options = {}) {
    restrictTo("doc", ref);
    this.write(ref, data, { exists: true, updateMask: true, ...options });
  }
  /**
   * Adds a delete operation to the transaction.
   */
  delete(ref, options = {}) {
    const name = `${this.db.rootPath}/${restrictTo("doc", ref)}`;
    options = compileOptions(options);
    this.preconditions[name] && (options.currentDocument = this.preconditions[name]);
    this.writes.push({
      delete: name,
      ...options
    });
  }
  /**
   * Commits the transaction.
   * Will throw if the transaction failed.
   */
  async commit() {
    this.preconditions = {};
    return void await this.db.fetch(this.db.endpoint + ":commit", {
      method: "POST",
      body: JSON.stringify({ writes: this.writes })
    });
  }
};
__name(Transaction, "Transaction");

// node_modules/firebase-firestore-lite/dist/Database.js
async function handleApiResponse(res) {
  if (!res.ok) {
    const data = await res.json();
    if (Array.isArray(data))
      throw data.length === 1 ? Object.assign(new Error(), data[0].error) : data;
    throw Object.assign(new Error(), data.error);
  }
  return res.json();
}
__name(handleApiResponse, "handleApiResponse");
var Database = class {
  constructor({ projectId, auth, name = "(default)", host = "firestore.googleapis.com", ssl = true }) {
    if (projectId === void 0)
      throw Error('Database constructor expected the "config" argument to have a valid "projectId" property');
    this.name = name;
    this.auth = auth;
    this.rootPath = `projects/${projectId}/databases/${name}/documents`;
    this.endpoint = `http${ssl ? "s" : ""}://${host}/v1/${this.rootPath}`;
  }
  /**
   * For internal use only.
   * Uses native fetch, but adds authorization headers
   * if the Reference was instantiated with an auth instance.
   * The API is exactly the same as native fetch.
   * @private
   */
  fetch(input, init) {
    if (this.auth && this.auth.authorizedRequest)
      return this.auth.authorizedRequest(input, init).then(handleApiResponse);
    return fetch(input, init).then(handleApiResponse);
  }
  /**
   * Returns a reference to a document or a collection.
   * @param {(string|Document)} path Path to the collection or document.
   * @returns {Reference} instance of a reference.
   */
  ref(path) {
    if (path instanceof Document)
      path = path.__meta__.path;
    return new Reference(path, this);
  }
  async batchGet(refs) {
    const response = await this.fetch(this.endpoint + ":batchGet", {
      method: "POST",
      body: JSON.stringify({
        documents: refs.map((ref) => {
          const path = restrictTo("doc", ref);
          return `${this.rootPath}/${path}`;
        })
      })
    });
    return response.map((entry) => entry.found ? new Document(entry.found, this) : Object.defineProperty({}, "__missing__", { value: entry.missing }));
  }
  /** Returns a new transaction instance */
  transaction() {
    return new Transaction(this);
  }
  /**
   * Executes the given `updateFunction` and attempts to commit
   * the changes applied within it as a Transaction. If any document
   * read within the transaction has changed, Cloud Firestore retries
   * the updateFunction. If it fails to commit after 5 attempts, the
   * transaction fails and throws.
   *
   * Will not re-attempt if an error is thrown inside the `updateFunction`
   * or if any error that is not related to the transaction is received
   * like a network error etc.
   */
  async runTransaction(fn, attempts = 5) {
    const tx = new Transaction(this);
    while (attempts > 0) {
      await fn(tx);
      try {
        await tx.commit();
        break;
      } catch (e) {
        if (attempts === 0 || e.status !== "NOT_FOUND" && e.status !== "FAILED_PRECONDITION")
          throw Error(e);
      }
      attempts--;
    }
  }
  /**
   * Query all all collections that match the given name that
   * also are descendants of a given document (or root by default).
   */
  collectionGroup(collectionId, options = {}) {
    return new Query(this.ref("parent" in options ? options.parent : ""), {
      from: {
        collectionId,
        allDescendants: true
      },
      ...options
    });
  }
};
__name(Database, "Database");

// server.js
var craftersCommand = require_crafters();
var recipyListCommand = require_recipyList();
var registerCommand = require_register();
var JsonResponse = class extends Response {
  constructor(body, init) {
    const jsonBody = JSON.stringify(body);
    init = init || {
      headers: {
        "content-type": "application/json;charset=UTF-8"
      }
    };
    super(jsonBody, init);
  }
};
__name(JsonResponse, "JsonResponse");
var router = n();
var database = new Database({ projectId: "wow-recipies" });
router.get("/", (request, env) => {
  return new Response(`\u{1F44B} ${env.DISCORD_APPLICATION_ID} ${env.DISCORD_PUBLIC_KEY}`);
});
router.post("/", async (request, env) => {
  const { isValid, interaction } = await server.verifyDiscordRequest(
    request,
    env
  );
  if (!isValid || !interaction) {
    return new Response("Bad request signature.", { status: 401 });
  }
  console.log(interaction.type);
  if (interaction.type === import_discord_interactions.InteractionType.PING) {
    return new JsonResponse({
      type: import_discord_interactions.InteractionResponseType.PONG
    });
  } else if (interaction.type === import_discord_interactions.InteractionType.APPLICATION_COMMAND) {
    switch (interaction.data.name.toLowerCase()) {
      case craftersCommand.data.name:
        return await craftersCommand.execute(interaction, database);
      case recipyListCommand.data.name:
        return await recipyListCommand.execute(interaction, database);
      case registerCommand.data.name:
        return await registerCommand.execute(interaction, database);
      default:
        return new JsonResponse({ error: "Unknown Type" }, { status: 400 });
    }
  } else if (interaction.type == import_discord_interactions.InteractionType.APPLICATION_COMMAND_AUTOCOMPLETE) {
    switch (interaction.data.name.toLowerCase()) {
      case craftersCommand.data.name:
        return await craftersCommand.autocomplete(interaction);
      case recipyListCommand.data.name:
        return await recipyListCommand.autocomplete(interaction);
      case registerCommand.data.name:
        return await registerCommand.autocomplete(interaction);
      default:
        return new JsonResponse({ error: "Unknown Type" }, { status: 400 });
    }
  } else if (interaction.type === import_discord_interactions.InteractionType.MESSAGE_COMPONENT) {
    switch (interaction.data.custom_id.toLowerCase()) {
      case "refresh":
        let content = await recipyListCommand.getContent(interaction, database);
        return new JsonResponse({
          type: import_discord_interactions.InteractionResponseType.UPDATE_MESSAGE,
          data: {
            content,
            allowed_mentions: { parse: [] }
          }
        });
      default:
        return new JsonResponse({ error: "Unknown Type" }, { status: 400 });
    }
  }
  console.error("Unknown Type");
  return new JsonResponse({ error: "Unknown Type" }, { status: 400 });
});
router.all("*", () => new Response("Not Found.", { status: 404 }));
async function verifyDiscordRequest(request, env) {
  const signature = request.headers.get("x-signature-ed25519");
  const timestamp = request.headers.get("x-signature-timestamp");
  const body = await request.text();
  const isValidRequest = signature && timestamp && await (0, import_discord_interactions.verifyKey)(body, signature, timestamp, env.DISCORD_PUBLIC_KEY);
  if (!isValidRequest) {
    return { isValid: false };
  }
  let interaction = JSON.parse(body);
  interaction.reply = function(data) {
    return new JsonResponse({
      type: import_discord_interactions.InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data
    });
  };
  interaction.respond = function(choices) {
    return new JsonResponse({
      type: import_discord_interactions.InteractionResponseType.APPLICATION_COMMAND_AUTOCOMPLETE_RESULT,
      data: { choices }
    });
  };
  return { interaction, isValid: true };
}
__name(verifyDiscordRequest, "verifyDiscordRequest");
var server = {
  verifyDiscordRequest,
  fetch: router.fetch
};
var server_default = server;

// node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts
init_checked_fetch();
init_modules_watch_stub();
var drainBody = /* @__PURE__ */ __name(async (request, env, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env);
  } finally {
    try {
      if (request.body !== null && !request.bodyUsed) {
        const reader = request.body.getReader();
        while (!(await reader.read()).done) {
        }
      }
    } catch (e) {
      console.error("Failed to drain the unused request body.", e);
    }
  }
}, "drainBody");
var middleware_ensure_req_body_drained_default = drainBody;

// node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts
init_checked_fetch();
init_modules_watch_stub();
function reduceError(e) {
  return {
    name: e?.name,
    message: e?.message ?? String(e),
    stack: e?.stack,
    cause: e?.cause === void 0 ? void 0 : reduceError(e.cause)
  };
}
__name(reduceError, "reduceError");
var jsonError = /* @__PURE__ */ __name(async (request, env, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env);
  } catch (e) {
    const error = reduceError(e);
    return Response.json(error, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
}, "jsonError");
var middleware_miniflare3_json_error_default = jsonError;

// .wrangler/tmp/bundle-Fd75M1/middleware-insertion-facade.js
var __INTERNAL_WRANGLER_MIDDLEWARE__ = [
  middleware_ensure_req_body_drained_default,
  middleware_miniflare3_json_error_default
];
var middleware_insertion_facade_default = server_default;

// node_modules/wrangler/templates/middleware/common.ts
init_checked_fetch();
init_modules_watch_stub();
var __facade_middleware__ = [];
function __facade_register__(...args) {
  __facade_middleware__.push(...args.flat());
}
__name(__facade_register__, "__facade_register__");
function __facade_invokeChain__(request, env, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env, ctx, middlewareCtx);
}
__name(__facade_invokeChain__, "__facade_invokeChain__");
function __facade_invoke__(request, env, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__(request, env, ctx, dispatch, [
    ...__facade_middleware__,
    finalMiddleware
  ]);
}
__name(__facade_invoke__, "__facade_invoke__");

// .wrangler/tmp/bundle-Fd75M1/middleware-loader.entry.ts
var __Facade_ScheduledController__ = class {
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof __Facade_ScheduledController__)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
__name(__Facade_ScheduledController__, "__Facade_ScheduledController__");
function wrapExportedHandler(worker) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return worker;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  const fetchDispatcher = /* @__PURE__ */ __name(function(request, env, ctx) {
    if (worker.fetch === void 0) {
      throw new Error("Handler does not export a fetch() function.");
    }
    return worker.fetch(request, env, ctx);
  }, "fetchDispatcher");
  return {
    ...worker,
    fetch(request, env, ctx) {
      const dispatcher = /* @__PURE__ */ __name(function(type, init) {
        if (type === "scheduled" && worker.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__(
            Date.now(),
            init.cron ?? "",
            () => {
            }
          );
          return worker.scheduled(controller, env, ctx);
        }
      }, "dispatcher");
      return __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);
    }
  };
}
__name(wrapExportedHandler, "wrapExportedHandler");
function wrapWorkerEntrypoint(klass) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return klass;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  return class extends klass {
    #fetchDispatcher = (request, env, ctx) => {
      this.env = env;
      this.ctx = ctx;
      if (super.fetch === void 0) {
        throw new Error("Entrypoint class does not define a fetch() function.");
      }
      return super.fetch(request);
    };
    #dispatcher = (type, init) => {
      if (type === "scheduled" && super.scheduled !== void 0) {
        const controller = new __Facade_ScheduledController__(
          Date.now(),
          init.cron ?? "",
          () => {
          }
        );
        return super.scheduled(controller);
      }
    };
    fetch(request) {
      return __facade_invoke__(
        request,
        this.env,
        this.ctx,
        this.#dispatcher,
        this.#fetchDispatcher
      );
    }
  };
}
__name(wrapWorkerEntrypoint, "wrapWorkerEntrypoint");
var WRAPPED_ENTRY;
if (typeof middleware_insertion_facade_default === "object") {
  WRAPPED_ENTRY = wrapExportedHandler(middleware_insertion_facade_default);
} else if (typeof middleware_insertion_facade_default === "function") {
  WRAPPED_ENTRY = wrapWorkerEntrypoint(middleware_insertion_facade_default);
}
var middleware_loader_entry_default = WRAPPED_ENTRY;
export {
  __INTERNAL_WRANGLER_MIDDLEWARE__,
  middleware_loader_entry_default as default
};
/*! Bundled license information:

@sapphire/shapeshift/dist/cjs/index.cjs:
  (**
   * @license MIT
   * @copyright 2020 Colin McDonnell
   * @see https://github.com/colinhacks/zod/blob/master/LICENSE
   *)

@firebase/util/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/component/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/logger/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/app/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/webchannel-wrapper/dist/bloom-blob/bloom_blob_es2018.js:
  (** @license
  Copyright The Closure Library Authors.
  SPDX-License-Identifier: Apache-2.0
  *)
  (** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  *)

@firebase/webchannel-wrapper/dist/webchannel-blob/webchannel_blob_es2018.js:
  (** @license
  Copyright The Closure Library Authors.
  SPDX-License-Identifier: Apache-2.0
  *)
  (** @license
  
   Copyright The Closure Library Authors.
   SPDX-License-Identifier: Apache-2.0
  *)

@firebase/firestore/dist/index.cjs.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2018 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2024 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law | agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES | CONDITIONS OF ANY KIND, either express | implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
*/
//# sourceMappingURL=server.js.map
